import t1, { createContext as pN, useRef as vh, useState as Ar, useEffect as wN, cloneElement as CN } from "react";
import { createPortal as uR } from "react-dom";
import { Checkbox as cR } from "antd";
const jae = (...t) => t;
var qu = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function vN(t) {
  if (t.__esModule)
    return t;
  var e = t.default;
  if (typeof e == "function") {
    var n = function r() {
      if (this instanceof r) {
        var i = [null];
        i.push.apply(i, arguments);
        var o = Function.bind.apply(e, i);
        return new o();
      }
      return e.apply(this, arguments);
    };
    n.prototype = e.prototype;
  } else
    n = {};
  return Object.defineProperty(n, "__esModule", { value: !0 }), Object.keys(t).forEach(function(r) {
    var i = Object.getOwnPropertyDescriptor(t, r);
    Object.defineProperty(n, r, i.get ? i : {
      enumerable: !0,
      get: function() {
        return t[r];
      }
    });
  }), n;
}
var pf = {}, SN = {
  get exports() {
    return pf;
  },
  set exports(t) {
    pf = t;
  }
}, ou = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hR;
function yN() {
  if (hR)
    return ou;
  hR = 1;
  var t = t1, e = Symbol.for("react.element"), n = Symbol.for("react.fragment"), r = Object.prototype.hasOwnProperty, i = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, o = { key: !0, ref: !0, __self: !0, __source: !0 };
  function s(a, l, u) {
    var c, d = {}, g = null, p = null;
    u !== void 0 && (g = "" + u), l.key !== void 0 && (g = "" + l.key), l.ref !== void 0 && (p = l.ref);
    for (c in l)
      r.call(l, c) && !o.hasOwnProperty(c) && (d[c] = l[c]);
    if (a && a.defaultProps)
      for (c in l = a.defaultProps, l)
        d[c] === void 0 && (d[c] = l[c]);
    return { $$typeof: e, type: a, key: g, ref: p, props: d, _owner: i.current };
  }
  return ou.Fragment = n, ou.jsx = s, ou.jsxs = s, ou;
}
var su = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var dR;
function bN() {
  return dR || (dR = 1, process.env.NODE_ENV !== "production" && function() {
    var t = t1, e = Symbol.for("react.element"), n = Symbol.for("react.portal"), r = Symbol.for("react.fragment"), i = Symbol.for("react.strict_mode"), o = Symbol.for("react.profiler"), s = Symbol.for("react.provider"), a = Symbol.for("react.context"), l = Symbol.for("react.forward_ref"), u = Symbol.for("react.suspense"), c = Symbol.for("react.suspense_list"), d = Symbol.for("react.memo"), g = Symbol.for("react.lazy"), p = Symbol.for("react.offscreen"), C = Symbol.iterator, E = "@@iterator";
    function I(k) {
      if (k === null || typeof k != "object")
        return null;
      var ue = C && k[C] || k[E];
      return typeof ue == "function" ? ue : null;
    }
    var M = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function y(k) {
      {
        for (var ue = arguments.length, me = new Array(ue > 1 ? ue - 1 : 0), We = 1; We < ue; We++)
          me[We - 1] = arguments[We];
        $("error", k, me);
      }
    }
    function $(k, ue, me) {
      {
        var We = M.ReactDebugCurrentFrame, ht = We.getStackAddendum();
        ht !== "" && (ue += "%s", me = me.concat([ht]));
        var vt = me.map(function(ut) {
          return String(ut);
        });
        vt.unshift("Warning: " + ue), Function.prototype.apply.call(console[k], console, vt);
      }
    }
    var X = !1, G = !1, q = !1, re = !1, v = !1, S;
    S = Symbol.for("react.module.reference");
    function b(k) {
      return !!(typeof k == "string" || typeof k == "function" || k === r || k === o || v || k === i || k === u || k === c || re || k === p || X || G || q || typeof k == "object" && k !== null && (k.$$typeof === g || k.$$typeof === d || k.$$typeof === s || k.$$typeof === a || k.$$typeof === l || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      k.$$typeof === S || k.getModuleId !== void 0));
    }
    function L(k, ue, me) {
      var We = k.displayName;
      if (We)
        return We;
      var ht = ue.displayName || ue.name || "";
      return ht !== "" ? me + "(" + ht + ")" : me;
    }
    function P(k) {
      return k.displayName || "Context";
    }
    function x(k) {
      if (k == null)
        return null;
      if (typeof k.tag == "number" && y("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof k == "function")
        return k.displayName || k.name || null;
      if (typeof k == "string")
        return k;
      switch (k) {
        case r:
          return "Fragment";
        case n:
          return "Portal";
        case o:
          return "Profiler";
        case i:
          return "StrictMode";
        case u:
          return "Suspense";
        case c:
          return "SuspenseList";
      }
      if (typeof k == "object")
        switch (k.$$typeof) {
          case a:
            var ue = k;
            return P(ue) + ".Consumer";
          case s:
            var me = k;
            return P(me._context) + ".Provider";
          case l:
            return L(k, k.render, "ForwardRef");
          case d:
            var We = k.displayName || null;
            return We !== null ? We : x(k.type) || "Memo";
          case g: {
            var ht = k, vt = ht._payload, ut = ht._init;
            try {
              return x(ut(vt));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var W = Object.assign, D = 0, B, z, w, h, f, m, T;
    function O() {
    }
    O.__reactDisabledLog = !0;
    function _() {
      {
        if (D === 0) {
          B = console.log, z = console.info, w = console.warn, h = console.error, f = console.group, m = console.groupCollapsed, T = console.groupEnd;
          var k = {
            configurable: !0,
            enumerable: !0,
            value: O,
            writable: !0
          };
          Object.defineProperties(console, {
            info: k,
            log: k,
            warn: k,
            error: k,
            group: k,
            groupCollapsed: k,
            groupEnd: k
          });
        }
        D++;
      }
    }
    function Y() {
      {
        if (D--, D === 0) {
          var k = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: W({}, k, {
              value: B
            }),
            info: W({}, k, {
              value: z
            }),
            warn: W({}, k, {
              value: w
            }),
            error: W({}, k, {
              value: h
            }),
            group: W({}, k, {
              value: f
            }),
            groupCollapsed: W({}, k, {
              value: m
            }),
            groupEnd: W({}, k, {
              value: T
            })
          });
        }
        D < 0 && y("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var U = M.ReactCurrentDispatcher, ie;
    function se(k, ue, me) {
      {
        if (ie === void 0)
          try {
            throw Error();
          } catch (ht) {
            var We = ht.stack.trim().match(/\n( *(at )?)/);
            ie = We && We[1] || "";
          }
        return `
` + ie + k;
      }
    }
    var oe = !1, de;
    {
      var Ce = typeof WeakMap == "function" ? WeakMap : Map;
      de = new Ce();
    }
    function we(k, ue) {
      if (!k || oe)
        return "";
      {
        var me = de.get(k);
        if (me !== void 0)
          return me;
      }
      var We;
      oe = !0;
      var ht = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var vt;
      vt = U.current, U.current = null, _();
      try {
        if (ue) {
          var ut = function() {
            throw Error();
          };
          if (Object.defineProperty(ut.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(ut, []);
            } catch (Ht) {
              We = Ht;
            }
            Reflect.construct(k, [], ut);
          } else {
            try {
              ut.call();
            } catch (Ht) {
              We = Ht;
            }
            k.call(ut.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (Ht) {
            We = Ht;
          }
          k();
        }
      } catch (Ht) {
        if (Ht && We && typeof Ht.stack == "string") {
          for (var ot = Ht.stack.split(`
`), be = We.stack.split(`
`), V = ot.length - 1, ae = be.length - 1; V >= 1 && ae >= 0 && ot[V] !== be[ae]; )
            ae--;
          for (; V >= 1 && ae >= 0; V--, ae--)
            if (ot[V] !== be[ae]) {
              if (V !== 1 || ae !== 1)
                do
                  if (V--, ae--, ae < 0 || ot[V] !== be[ae]) {
                    var ge = `
` + ot[V].replace(" at new ", " at ");
                    return k.displayName && ge.includes("<anonymous>") && (ge = ge.replace("<anonymous>", k.displayName)), typeof k == "function" && de.set(k, ge), ge;
                  }
                while (V >= 1 && ae >= 0);
              break;
            }
        }
      } finally {
        oe = !1, U.current = vt, Y(), Error.prepareStackTrace = ht;
      }
      var st = k ? k.displayName || k.name : "", _n = st ? se(st) : "";
      return typeof k == "function" && de.set(k, _n), _n;
    }
    function pe(k, ue, me) {
      return we(k, !1);
    }
    function ee(k) {
      var ue = k.prototype;
      return !!(ue && ue.isReactComponent);
    }
    function ye(k, ue, me) {
      if (k == null)
        return "";
      if (typeof k == "function")
        return we(k, ee(k));
      if (typeof k == "string")
        return se(k);
      switch (k) {
        case u:
          return se("Suspense");
        case c:
          return se("SuspenseList");
      }
      if (typeof k == "object")
        switch (k.$$typeof) {
          case l:
            return pe(k.render);
          case d:
            return ye(k.type, ue, me);
          case g: {
            var We = k, ht = We._payload, vt = We._init;
            try {
              return ye(vt(ht), ue, me);
            } catch {
            }
          }
        }
      return "";
    }
    var $e = Object.prototype.hasOwnProperty, Ae = {}, Fe = M.ReactDebugCurrentFrame;
    function Ie(k) {
      if (k) {
        var ue = k._owner, me = ye(k.type, k._source, ue ? ue.type : null);
        Fe.setExtraStackFrame(me);
      } else
        Fe.setExtraStackFrame(null);
    }
    function R(k, ue, me, We, ht) {
      {
        var vt = Function.call.bind($e);
        for (var ut in k)
          if (vt(k, ut)) {
            var ot = void 0;
            try {
              if (typeof k[ut] != "function") {
                var be = Error((We || "React class") + ": " + me + " type `" + ut + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof k[ut] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw be.name = "Invariant Violation", be;
              }
              ot = k[ut](ue, ut, We, me, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (V) {
              ot = V;
            }
            ot && !(ot instanceof Error) && (Ie(ht), y("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", We || "React class", me, ut, typeof ot), Ie(null)), ot instanceof Error && !(ot.message in Ae) && (Ae[ot.message] = !0, Ie(ht), y("Failed %s type: %s", me, ot.message), Ie(null));
          }
      }
    }
    var A = Array.isArray;
    function N(k) {
      return A(k);
    }
    function J(k) {
      {
        var ue = typeof Symbol == "function" && Symbol.toStringTag, me = ue && k[Symbol.toStringTag] || k.constructor.name || "Object";
        return me;
      }
    }
    function F(k) {
      try {
        return Q(k), !1;
      } catch {
        return !0;
      }
    }
    function Q(k) {
      return "" + k;
    }
    function K(k) {
      if (F(k))
        return y("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", J(k)), Q(k);
    }
    var j = M.ReactCurrentOwner, te = {
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    }, Z, ne, fe;
    fe = {};
    function Ee(k) {
      if ($e.call(k, "ref")) {
        var ue = Object.getOwnPropertyDescriptor(k, "ref").get;
        if (ue && ue.isReactWarning)
          return !1;
      }
      return k.ref !== void 0;
    }
    function He(k) {
      if ($e.call(k, "key")) {
        var ue = Object.getOwnPropertyDescriptor(k, "key").get;
        if (ue && ue.isReactWarning)
          return !1;
      }
      return k.key !== void 0;
    }
    function ke(k, ue) {
      if (typeof k.ref == "string" && j.current && ue && j.current.stateNode !== ue) {
        var me = x(j.current.type);
        fe[me] || (y('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', x(j.current.type), k.ref), fe[me] = !0);
      }
    }
    function Ge(k, ue) {
      {
        var me = function() {
          Z || (Z = !0, y("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", ue));
        };
        me.isReactWarning = !0, Object.defineProperty(k, "key", {
          get: me,
          configurable: !0
        });
      }
    }
    function Rt(k, ue) {
      {
        var me = function() {
          ne || (ne = !0, y("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", ue));
        };
        me.isReactWarning = !0, Object.defineProperty(k, "ref", {
          get: me,
          configurable: !0
        });
      }
    }
    var Qe = function(k, ue, me, We, ht, vt, ut) {
      var ot = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: e,
        // Built-in properties that belong on the element
        type: k,
        key: ue,
        ref: me,
        props: ut,
        // Record the component responsible for creating this element.
        _owner: vt
      };
      return ot._store = {}, Object.defineProperty(ot._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: !1
      }), Object.defineProperty(ot, "_self", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: We
      }), Object.defineProperty(ot, "_source", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: ht
      }), Object.freeze && (Object.freeze(ot.props), Object.freeze(ot)), ot;
    };
    function mt(k, ue, me, We, ht) {
      {
        var vt, ut = {}, ot = null, be = null;
        me !== void 0 && (K(me), ot = "" + me), He(ue) && (K(ue.key), ot = "" + ue.key), Ee(ue) && (be = ue.ref, ke(ue, ht));
        for (vt in ue)
          $e.call(ue, vt) && !te.hasOwnProperty(vt) && (ut[vt] = ue[vt]);
        if (k && k.defaultProps) {
          var V = k.defaultProps;
          for (vt in V)
            ut[vt] === void 0 && (ut[vt] = V[vt]);
        }
        if (ot || be) {
          var ae = typeof k == "function" ? k.displayName || k.name || "Unknown" : k;
          ot && Ge(ut, ae), be && Rt(ut, ae);
        }
        return Qe(k, ot, be, ht, We, j.current, ut);
      }
    }
    var Et = M.ReactCurrentOwner, eo = M.ReactDebugCurrentFrame;
    function Or(k) {
      if (k) {
        var ue = k._owner, me = ye(k.type, k._source, ue ? ue.type : null);
        eo.setExtraStackFrame(me);
      } else
        eo.setExtraStackFrame(null);
    }
    var xt;
    xt = !1;
    function rn(k) {
      return typeof k == "object" && k !== null && k.$$typeof === e;
    }
    function bi() {
      {
        if (Et.current) {
          var k = x(Et.current.type);
          if (k)
            return `

Check the render method of \`` + k + "`.";
        }
        return "";
      }
    }
    function Tn(k) {
      {
        if (k !== void 0) {
          var ue = k.fileName.replace(/^.*[\\\/]/, ""), me = k.lineNumber;
          return `

Check your code at ` + ue + ":" + me + ".";
        }
        return "";
      }
    }
    var Jt = {};
    function Mt(k) {
      {
        var ue = bi();
        if (!ue) {
          var me = typeof k == "string" ? k : k.displayName || k.name;
          me && (ue = `

Check the top-level render call using <` + me + ">.");
        }
        return ue;
      }
    }
    function nu(k, ue) {
      {
        if (!k._store || k._store.validated || k.key != null)
          return;
        k._store.validated = !0;
        var me = Mt(ue);
        if (Jt[me])
          return;
        Jt[me] = !0;
        var We = "";
        k && k._owner && k._owner !== Et.current && (We = " It was passed a child from " + x(k._owner.type) + "."), Or(k), y('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', me, We), Or(null);
      }
    }
    function gh(k, ue) {
      {
        if (typeof k != "object")
          return;
        if (N(k))
          for (var me = 0; me < k.length; me++) {
            var We = k[me];
            rn(We) && nu(We, ue);
          }
        else if (rn(k))
          k._store && (k._store.validated = !0);
        else if (k) {
          var ht = I(k);
          if (typeof ht == "function" && ht !== k.entries)
            for (var vt = ht.call(k), ut; !(ut = vt.next()).done; )
              rn(ut.value) && nu(ut.value, ue);
        }
      }
    }
    function Da(k) {
      {
        var ue = k.type;
        if (ue == null || typeof ue == "string")
          return;
        var me;
        if (typeof ue == "function")
          me = ue.propTypes;
        else if (typeof ue == "object" && (ue.$$typeof === l || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        ue.$$typeof === d))
          me = ue.propTypes;
        else
          return;
        if (me) {
          var We = x(ue);
          R(me, k.props, "prop", We, k);
        } else if (ue.PropTypes !== void 0 && !xt) {
          xt = !0;
          var ht = x(ue);
          y("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", ht || "Unknown");
        }
        typeof ue.getDefaultProps == "function" && !ue.getDefaultProps.isReactClassApproved && y("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function ru(k) {
      {
        for (var ue = Object.keys(k.props), me = 0; me < ue.length; me++) {
          var We = ue[me];
          if (We !== "children" && We !== "key") {
            Or(k), y("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", We), Or(null);
            break;
          }
        }
        k.ref !== null && (Or(k), y("Invalid attribute `ref` supplied to `React.Fragment`."), Or(null));
      }
    }
    function mh(k, ue, me, We, ht, vt) {
      {
        var ut = b(k);
        if (!ut) {
          var ot = "";
          (k === void 0 || typeof k == "object" && k !== null && Object.keys(k).length === 0) && (ot += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var be = Tn(ht);
          be ? ot += be : ot += bi();
          var V;
          k === null ? V = "null" : N(k) ? V = "array" : k !== void 0 && k.$$typeof === e ? (V = "<" + (x(k.type) || "Unknown") + " />", ot = " Did you accidentally export a JSX literal instead of a component?") : V = typeof k, y("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", V, ot);
        }
        var ae = mt(k, ue, me, ht, vt);
        if (ae == null)
          return ae;
        if (ut) {
          var ge = ue.children;
          if (ge !== void 0)
            if (We)
              if (N(ge)) {
                for (var st = 0; st < ge.length; st++)
                  gh(ge[st], k);
                Object.freeze && Object.freeze(ge);
              } else
                y("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              gh(ge, k);
        }
        return k === r ? ru(ae) : Da(ae), ae;
      }
    }
    function Xr(k, ue, me) {
      return mh(k, ue, me, !0);
    }
    function iu(k, ue, me) {
      return mh(k, ue, me, !1);
    }
    var ph = iu, wh = Xr;
    su.Fragment = r, su.jsx = ph, su.jsxs = wh;
  }()), su;
}
(function(t) {
  process.env.NODE_ENV === "production" ? t.exports = yN() : t.exports = bN();
})(SN);
const au = pf.jsx, pm = pf.jsxs;
var lu = function(t) {
  return t && t.Math === Math && t;
}, Vn = (
  // eslint-disable-next-line es/no-global-this -- safe
  lu(typeof globalThis == "object" && globalThis) || lu(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
  lu(typeof self == "object" && self) || lu(typeof qu == "object" && qu) || lu(typeof qu == "object" && qu) || // eslint-disable-next-line no-new-func -- fallback
  function() {
    return this;
  }() || Function("return this")()
), bv = {}, Gr = function(t) {
  try {
    return !!t();
  } catch {
    return !0;
  }
}, RN = Gr, Xi = !RN(function() {
  return Object.defineProperty({}, 1, { get: function() {
    return 7;
  } })[1] !== 7;
}), EN = Gr, gg = !EN(function() {
  var t = function() {
  }.bind();
  return typeof t != "function" || t.hasOwnProperty("prototype");
}), TN = gg, Sh = Function.prototype.call, mg = TN ? Sh.bind(Sh) : function() {
  return Sh.apply(Sh, arguments);
}, n1 = {}, r1 = {}.propertyIsEnumerable, i1 = Object.getOwnPropertyDescriptor, _N = i1 && !r1.call({ 1: 2 }, 1);
n1.f = _N ? function(e) {
  var n = i1(this, e);
  return !!n && n.enumerable;
} : r1;
var Rv = function(t, e) {
  return {
    enumerable: !(t & 1),
    configurable: !(t & 2),
    writable: !(t & 4),
    value: e
  };
}, o1 = gg, s1 = Function.prototype, rC = s1.call, MN = o1 && s1.bind.bind(rC, rC), nr = o1 ? MN : function(t) {
  return function() {
    return rC.apply(t, arguments);
  };
}, a1 = nr, ON = a1({}.toString), AN = a1("".slice), Gl = function(t) {
  return AN(ON(t), 8, -1);
}, IN = nr, PN = Gr, xN = Gl, wm = Object, HN = IN("".split), DN = PN(function() {
  return !wm("z").propertyIsEnumerable(0);
}) ? function(t) {
  return xN(t) === "String" ? HN(t, "") : wm(t);
} : wm, l1 = function(t) {
  return t == null;
}, NN = l1, LN = TypeError, u1 = function(t) {
  if (NN(t))
    throw new LN("Can't call method on " + t);
  return t;
}, $N = DN, kN = u1, pg = function(t) {
  return $N(kN(t));
}, iC = typeof document == "object" && document.all, FN = typeof iC > "u" && iC !== void 0, c1 = {
  all: iC,
  IS_HTMLDDA: FN
}, h1 = c1, WN = h1.all, Pn = h1.IS_HTMLDDA ? function(t) {
  return typeof t == "function" || t === WN;
} : function(t) {
  return typeof t == "function";
}, fR = Pn, d1 = c1, VN = d1.all, Ta = d1.IS_HTMLDDA ? function(t) {
  return typeof t == "object" ? t !== null : fR(t) || t === VN;
} : function(t) {
  return typeof t == "object" ? t !== null : fR(t);
}, Cm = Vn, BN = Pn, UN = function(t) {
  return BN(t) ? t : void 0;
}, Yc = function(t, e) {
  return arguments.length < 2 ? UN(Cm[t]) : Cm[t] && Cm[t][e];
}, YN = nr, f1 = YN({}.isPrototypeOf), Ev = typeof navigator < "u" && String(navigator.userAgent) || "", g1 = Vn, vm = Ev, gR = g1.process, mR = g1.Deno, pR = gR && gR.versions || mR && mR.version, wR = pR && pR.v8, di, wf;
wR && (di = wR.split("."), wf = di[0] > 0 && di[0] < 4 ? 1 : +(di[0] + di[1]));
!wf && vm && (di = vm.match(/Edge\/(\d+)/), (!di || di[1] >= 74) && (di = vm.match(/Chrome\/(\d+)/), di && (wf = +di[1])));
var GN = wf, CR = GN, zN = Gr, jN = Vn, KN = jN.String, Tv = !!Object.getOwnPropertySymbols && !zN(function() {
  var t = Symbol("symbol detection");
  return !KN(t) || !(Object(t) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
  !Symbol.sham && CR && CR < 41;
}), XN = Tv, m1 = XN && !Symbol.sham && typeof Symbol.iterator == "symbol", qN = Yc, ZN = Pn, QN = f1, JN = m1, eL = Object, _v = JN ? function(t) {
  return typeof t == "symbol";
} : function(t) {
  var e = qN("Symbol");
  return ZN(e) && QN(e.prototype, eL(t));
}, tL = String, p1 = function(t) {
  try {
    return tL(t);
  } catch {
    return "Object";
  }
}, nL = Pn, rL = p1, iL = TypeError, Mv = function(t) {
  if (nL(t))
    return t;
  throw new iL(rL(t) + " is not a function");
}, oL = Mv, sL = l1, aL = function(t, e) {
  var n = t[e];
  return sL(n) ? void 0 : oL(n);
}, Sm = mg, ym = Pn, bm = Ta, lL = TypeError, uL = function(t, e) {
  var n, r;
  if (e === "string" && ym(n = t.toString) && !bm(r = Sm(n, t)) || ym(n = t.valueOf) && !bm(r = Sm(n, t)) || e !== "string" && ym(n = t.toString) && !bm(r = Sm(n, t)))
    return r;
  throw new lL("Can't convert object to primitive value");
}, Cf = {}, cL = {
  get exports() {
    return Cf;
  },
  set exports(t) {
    Cf = t;
  }
}, vR = Vn, hL = Object.defineProperty, Ov = function(t, e) {
  try {
    hL(vR, t, { value: e, configurable: !0, writable: !0 });
  } catch {
    vR[t] = e;
  }
  return e;
}, dL = Vn, fL = Ov, SR = "__core-js_shared__", gL = dL[SR] || fL(SR, {}), Av = gL, yR = Av;
(cL.exports = function(t, e) {
  return yR[t] || (yR[t] = e !== void 0 ? e : {});
})("versions", []).push({
  version: "3.34.0",
  mode: "global",
  copyright: "© 2014-2023 Denis Pushkarev (zloirock.ru)",
  license: "https://github.com/zloirock/core-js/blob/v3.34.0/LICENSE",
  source: "https://github.com/zloirock/core-js"
});
var mL = u1, pL = Object, wg = function(t) {
  return pL(mL(t));
}, wL = nr, CL = wg, vL = wL({}.hasOwnProperty), ko = Object.hasOwn || function(e, n) {
  return vL(CL(e), n);
}, SL = nr, yL = 0, bL = Math.random(), RL = SL(1 .toString), w1 = function(t) {
  return "Symbol(" + (t === void 0 ? "" : t) + ")_" + RL(++yL + bL, 36);
}, EL = Vn, TL = Cf, bR = ko, _L = w1, ML = Tv, OL = m1, Ml = EL.Symbol, Rm = TL("wks"), AL = OL ? Ml.for || Ml : Ml && Ml.withoutSetter || _L, Cg = function(t) {
  return bR(Rm, t) || (Rm[t] = ML && bR(Ml, t) ? Ml[t] : AL("Symbol." + t)), Rm[t];
}, IL = mg, RR = Ta, ER = _v, PL = aL, xL = uL, HL = Cg, DL = TypeError, NL = HL("toPrimitive"), LL = function(t, e) {
  if (!RR(t) || ER(t))
    return t;
  var n = PL(t, NL), r;
  if (n) {
    if (e === void 0 && (e = "default"), r = IL(n, t, e), !RR(r) || ER(r))
      return r;
    throw new DL("Can't convert object to primitive value");
  }
  return e === void 0 && (e = "number"), xL(t, e);
}, $L = LL, kL = _v, C1 = function(t) {
  var e = $L(t, "string");
  return kL(e) ? e : e + "";
}, FL = Vn, TR = Ta, oC = FL.document, WL = TR(oC) && TR(oC.createElement), Iv = function(t) {
  return WL ? oC.createElement(t) : {};
}, VL = Xi, BL = Gr, UL = Iv, v1 = !VL && !BL(function() {
  return Object.defineProperty(UL("div"), "a", {
    get: function() {
      return 7;
    }
  }).a !== 7;
}), YL = Xi, GL = mg, zL = n1, jL = Rv, KL = pg, XL = C1, qL = ko, ZL = v1, _R = Object.getOwnPropertyDescriptor;
bv.f = YL ? _R : function(e, n) {
  if (e = KL(e), n = XL(n), ZL)
    try {
      return _R(e, n);
    } catch {
    }
  if (qL(e, n))
    return jL(!GL(zL.f, e, n), e[n]);
};
var _a = {}, QL = Xi, JL = Gr, S1 = QL && JL(function() {
  return Object.defineProperty(function() {
  }, "prototype", {
    value: 42,
    writable: !1
  }).prototype !== 42;
}), e$ = Ta, t$ = String, n$ = TypeError, Gc = function(t) {
  if (e$(t))
    return t;
  throw new n$(t$(t) + " is not an object");
}, r$ = Xi, i$ = v1, o$ = S1, yh = Gc, MR = C1, s$ = TypeError, Em = Object.defineProperty, a$ = Object.getOwnPropertyDescriptor, Tm = "enumerable", _m = "configurable", Mm = "writable";
_a.f = r$ ? o$ ? function(e, n, r) {
  if (yh(e), n = MR(n), yh(r), typeof e == "function" && n === "prototype" && "value" in r && Mm in r && !r[Mm]) {
    var i = a$(e, n);
    i && i[Mm] && (e[n] = r.value, r = {
      configurable: _m in r ? r[_m] : i[_m],
      enumerable: Tm in r ? r[Tm] : i[Tm],
      writable: !1
    });
  }
  return Em(e, n, r);
} : Em : function(e, n, r) {
  if (yh(e), n = MR(n), yh(r), i$)
    try {
      return Em(e, n, r);
    } catch {
    }
  if ("get" in r || "set" in r)
    throw new s$("Accessors not supported");
  return "value" in r && (e[n] = r.value), e;
};
var l$ = Xi, u$ = _a, c$ = Rv, zc = l$ ? function(t, e, n) {
  return u$.f(t, e, c$(1, n));
} : function(t, e, n) {
  return t[e] = n, t;
}, sC = {}, h$ = {
  get exports() {
    return sC;
  },
  set exports(t) {
    sC = t;
  }
}, aC = Xi, d$ = ko, y1 = Function.prototype, f$ = aC && Object.getOwnPropertyDescriptor, Pv = d$(y1, "name"), g$ = Pv && function() {
}.name === "something", m$ = Pv && (!aC || aC && f$(y1, "name").configurable), p$ = {
  EXISTS: Pv,
  PROPER: g$,
  CONFIGURABLE: m$
}, w$ = nr, C$ = Pn, lC = Av, v$ = w$(Function.toString);
C$(lC.inspectSource) || (lC.inspectSource = function(t) {
  return v$(t);
});
var S$ = lC.inspectSource, y$ = Vn, b$ = Pn, OR = y$.WeakMap, R$ = b$(OR) && /native code/.test(String(OR)), E$ = Cf, T$ = w1, AR = E$("keys"), b1 = function(t) {
  return AR[t] || (AR[t] = T$(t));
}, xv = {}, _$ = R$, R1 = Vn, M$ = Ta, O$ = zc, Om = ko, Am = Av, A$ = b1, I$ = xv, IR = "Object already initialized", uC = R1.TypeError, P$ = R1.WeakMap, vf, Tc, Sf, x$ = function(t) {
  return Sf(t) ? Tc(t) : vf(t, {});
}, H$ = function(t) {
  return function(e) {
    var n;
    if (!M$(e) || (n = Tc(e)).type !== t)
      throw new uC("Incompatible receiver, " + t + " required");
    return n;
  };
};
if (_$ || Am.state) {
  var Ri = Am.state || (Am.state = new P$());
  Ri.get = Ri.get, Ri.has = Ri.has, Ri.set = Ri.set, vf = function(t, e) {
    if (Ri.has(t))
      throw new uC(IR);
    return e.facade = t, Ri.set(t, e), e;
  }, Tc = function(t) {
    return Ri.get(t) || {};
  }, Sf = function(t) {
    return Ri.has(t);
  };
} else {
  var Na = A$("state");
  I$[Na] = !0, vf = function(t, e) {
    if (Om(t, Na))
      throw new uC(IR);
    return e.facade = t, O$(t, Na, e), e;
  }, Tc = function(t) {
    return Om(t, Na) ? t[Na] : {};
  }, Sf = function(t) {
    return Om(t, Na);
  };
}
var D$ = {
  set: vf,
  get: Tc,
  has: Sf,
  enforce: x$,
  getterFor: H$
}, Hv = nr, N$ = Gr, L$ = Pn, bh = ko, cC = Xi, $$ = p$.CONFIGURABLE, k$ = S$, E1 = D$, F$ = E1.enforce, W$ = E1.get, PR = String, Ud = Object.defineProperty, V$ = Hv("".slice), B$ = Hv("".replace), U$ = Hv([].join), Y$ = cC && !N$(function() {
  return Ud(function() {
  }, "length", { value: 8 }).length !== 8;
}), G$ = String(String).split("String"), z$ = h$.exports = function(t, e, n) {
  V$(PR(e), 0, 7) === "Symbol(" && (e = "[" + B$(PR(e), /^Symbol\(([^)]*)\)/, "$1") + "]"), n && n.getter && (e = "get " + e), n && n.setter && (e = "set " + e), (!bh(t, "name") || $$ && t.name !== e) && (cC ? Ud(t, "name", { value: e, configurable: !0 }) : t.name = e), Y$ && n && bh(n, "arity") && t.length !== n.arity && Ud(t, "length", { value: n.arity });
  try {
    n && bh(n, "constructor") && n.constructor ? cC && Ud(t, "prototype", { writable: !1 }) : t.prototype && (t.prototype = void 0);
  } catch {
  }
  var r = F$(t);
  return bh(r, "source") || (r.source = U$(G$, typeof e == "string" ? e : "")), t;
};
Function.prototype.toString = z$(function() {
  return L$(this) && W$(this).source || k$(this);
}, "toString");
var j$ = Pn, K$ = _a, X$ = sC, q$ = Ov, Z$ = function(t, e, n, r) {
  r || (r = {});
  var i = r.enumerable, o = r.name !== void 0 ? r.name : e;
  if (j$(n) && X$(n, o, r), r.global)
    i ? t[e] = n : q$(e, n);
  else {
    try {
      r.unsafe ? t[e] && (i = !0) : delete t[e];
    } catch {
    }
    i ? t[e] = n : K$.f(t, e, {
      value: n,
      enumerable: !1,
      configurable: !r.nonConfigurable,
      writable: !r.nonWritable
    });
  }
  return t;
}, T1 = {}, Q$ = Math.ceil, J$ = Math.floor, ek = Math.trunc || function(e) {
  var n = +e;
  return (n > 0 ? J$ : Q$)(n);
}, tk = ek, Dv = function(t) {
  var e = +t;
  return e !== e || e === 0 ? 0 : tk(e);
}, nk = Dv, rk = Math.max, ik = Math.min, ok = function(t, e) {
  var n = nk(t);
  return n < 0 ? rk(n + e, 0) : ik(n, e);
}, sk = Dv, ak = Math.min, lk = function(t) {
  return t > 0 ? ak(sk(t), 9007199254740991) : 0;
}, uk = lk, vg = function(t) {
  return uk(t.length);
}, ck = pg, hk = ok, dk = vg, xR = function(t) {
  return function(e, n, r) {
    var i = ck(e), o = dk(i), s = hk(r, o), a;
    if (t && n !== n) {
      for (; o > s; )
        if (a = i[s++], a !== a)
          return !0;
    } else
      for (; o > s; s++)
        if ((t || s in i) && i[s] === n)
          return t || s || 0;
    return !t && -1;
  };
}, fk = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: xR(!0),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: xR(!1)
}, gk = nr, Im = ko, mk = pg, pk = fk.indexOf, wk = xv, HR = gk([].push), _1 = function(t, e) {
  var n = mk(t), r = 0, i = [], o;
  for (o in n)
    !Im(wk, o) && Im(n, o) && HR(i, o);
  for (; e.length > r; )
    Im(n, o = e[r++]) && (~pk(i, o) || HR(i, o));
  return i;
}, Nv = [
  "constructor",
  "hasOwnProperty",
  "isPrototypeOf",
  "propertyIsEnumerable",
  "toLocaleString",
  "toString",
  "valueOf"
], Ck = _1, vk = Nv, Sk = vk.concat("length", "prototype");
T1.f = Object.getOwnPropertyNames || function(e) {
  return Ck(e, Sk);
};
var M1 = {};
M1.f = Object.getOwnPropertySymbols;
var yk = Yc, bk = nr, Rk = T1, Ek = M1, Tk = Gc, _k = bk([].concat), Mk = yk("Reflect", "ownKeys") || function(e) {
  var n = Rk.f(Tk(e)), r = Ek.f;
  return r ? _k(n, r(e)) : n;
}, DR = ko, Ok = Mk, Ak = bv, Ik = _a, O1 = function(t, e, n) {
  for (var r = Ok(e), i = Ik.f, o = Ak.f, s = 0; s < r.length; s++) {
    var a = r[s];
    !DR(t, a) && !(n && DR(n, a)) && i(t, a, o(e, a));
  }
}, Pk = Gr, xk = Pn, Hk = /#|\.prototype\./, jc = function(t, e) {
  var n = Nk[Dk(t)];
  return n === $k ? !0 : n === Lk ? !1 : xk(e) ? Pk(e) : !!e;
}, Dk = jc.normalize = function(t) {
  return String(t).replace(Hk, ".").toLowerCase();
}, Nk = jc.data = {}, Lk = jc.NATIVE = "N", $k = jc.POLYFILL = "P", kk = jc, Pm = Vn, Fk = bv.f, Wk = zc, Vk = Z$, Bk = Ov, Uk = O1, Yk = kk, Ma = function(t, e) {
  var n = t.target, r = t.global, i = t.stat, o, s, a, l, u, c;
  if (r ? s = Pm : i ? s = Pm[n] || Bk(n, {}) : s = (Pm[n] || {}).prototype, s)
    for (a in e) {
      if (u = e[a], t.dontCallGetSet ? (c = Fk(s, a), l = c && c.value) : l = s[a], o = Yk(r ? a : n + (i ? "." : "#") + a, t.forced), !o && l !== void 0) {
        if (typeof u == typeof l)
          continue;
        Uk(u, l);
      }
      (t.sham || l && l.sham) && Wk(u, "sham", !0), Vk(s, a, u, t);
    }
}, Gk = Gl, A1 = Array.isArray || function(e) {
  return Gk(e) === "Array";
}, zk = Xi, jk = A1, Kk = TypeError, Xk = Object.getOwnPropertyDescriptor, qk = zk && !function() {
  if (this !== void 0)
    return !0;
  try {
    Object.defineProperty([], "length", { writable: !1 }).length = 1;
  } catch (t) {
    return t instanceof TypeError;
  }
}(), I1 = qk ? function(t, e) {
  if (jk(t) && !Xk(t, "length").writable)
    throw new Kk("Cannot set read only .length");
  return t.length = e;
} : function(t, e) {
  return t.length = e;
}, Zk = TypeError, Qk = 9007199254740991, P1 = function(t) {
  if (t > Qk)
    throw Zk("Maximum allowed index exceeded");
  return t;
}, Jk = Ma, eF = wg, tF = vg, nF = I1, rF = P1, iF = Gr, oF = iF(function() {
  return [].push.call({ length: 4294967296 }, 1) !== 4294967297;
}), sF = function() {
  try {
    Object.defineProperty([], "length", { writable: !1 }).push();
  } catch (t) {
    return t instanceof TypeError;
  }
}, aF = oF || !sF();
Jk({ target: "Array", proto: !0, arity: 1, forced: aF }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  push: function(e) {
    var n = eF(this), r = tF(n), i = arguments.length;
    rF(r + i);
    for (var o = 0; o < i; o++)
      n[r] = arguments[o], r++;
    return nF(n, r), r;
  }
});
var lF = gg, x1 = Function.prototype, NR = x1.apply, LR = x1.call, Sg = typeof Reflect == "object" && Reflect.apply || (lF ? LR.bind(NR) : function() {
  return LR.apply(NR, arguments);
}), uF = nr, cF = Mv, hF = function(t, e, n) {
  try {
    return uF(cF(Object.getOwnPropertyDescriptor(t, e)[n]));
  } catch {
  }
}, dF = Pn, fF = String, gF = TypeError, mF = function(t) {
  if (typeof t == "object" || dF(t))
    return t;
  throw new gF("Can't set " + fF(t) + " as a prototype");
}, pF = hF, wF = Gc, CF = mF, H1 = Object.setPrototypeOf || ("__proto__" in {} ? function() {
  var t = !1, e = {}, n;
  try {
    n = pF(Object.prototype, "__proto__", "set"), n(e, []), t = e instanceof Array;
  } catch {
  }
  return function(i, o) {
    return wF(i), CF(o), t ? n(i, o) : i.__proto__ = o, i;
  };
}() : void 0), vF = _a.f, SF = function(t, e, n) {
  n in t || vF(t, n, {
    configurable: !0,
    get: function() {
      return e[n];
    },
    set: function(r) {
      e[n] = r;
    }
  });
}, yF = Pn, bF = Ta, $R = H1, RF = function(t, e, n) {
  var r, i;
  return (
    // it can work only with native `setPrototypeOf`
    $R && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    yF(r = e.constructor) && r !== n && bF(i = r.prototype) && i !== n.prototype && $R(t, i), t
  );
}, EF = Cg, TF = EF("toStringTag"), D1 = {};
D1[TF] = "z";
var _F = String(D1) === "[object z]", MF = _F, OF = Pn, Yd = Gl, AF = Cg, IF = AF("toStringTag"), PF = Object, xF = Yd(function() {
  return arguments;
}()) === "Arguments", HF = function(t, e) {
  try {
    return t[e];
  } catch {
  }
}, DF = MF ? Yd : function(t) {
  var e, n, r;
  return t === void 0 ? "Undefined" : t === null ? "Null" : typeof (n = HF(e = PF(t), IF)) == "string" ? n : xF ? Yd(e) : (r = Yd(e)) === "Object" && OF(e.callee) ? "Arguments" : r;
}, NF = DF, LF = String, N1 = function(t) {
  if (NF(t) === "Symbol")
    throw new TypeError("Cannot convert a Symbol value to a string");
  return LF(t);
}, $F = N1, kF = function(t, e) {
  return t === void 0 ? arguments.length < 2 ? "" : e : $F(t);
}, FF = Ta, WF = zc, VF = function(t, e) {
  FF(e) && "cause" in e && WF(t, "cause", e.cause);
}, BF = nr, L1 = Error, UF = BF("".replace), YF = function(t) {
  return String(new L1(t).stack);
}("zxcasd"), $1 = /\n\s*at [^:]*:[^\n]*/, GF = $1.test(YF), zF = function(t, e) {
  if (GF && typeof t == "string" && !L1.prepareStackTrace)
    for (; e--; )
      t = UF(t, $1, "");
  return t;
}, jF = Gr, KF = Rv, XF = !jF(function() {
  var t = new Error("a");
  return "stack" in t ? (Object.defineProperty(t, "stack", KF(1, 7)), t.stack !== 7) : !0;
}), qF = zc, ZF = zF, QF = XF, kR = Error.captureStackTrace, JF = function(t, e, n, r) {
  QF && (kR ? kR(t, e) : qF(t, "stack", ZF(n, r)));
}, FR = Yc, eW = ko, WR = zc, tW = f1, VR = H1, BR = O1, UR = SF, nW = RF, rW = kF, iW = VF, oW = JF, sW = Xi, aW = function(t, e, n, r) {
  var i = "stackTraceLimit", o = r ? 2 : 1, s = t.split("."), a = s[s.length - 1], l = FR.apply(null, s);
  if (l) {
    var u = l.prototype;
    if (eW(u, "cause") && delete u.cause, !n)
      return l;
    var c = FR("Error"), d = e(function(g, p) {
      var C = rW(r ? p : g, void 0), E = r ? new l(g) : new l();
      return C !== void 0 && WR(E, "message", C), oW(E, d, E.stack, 2), this && tW(u, this) && nW(E, this, d), arguments.length > o && iW(E, arguments[o]), E;
    });
    d.prototype = u, a !== "Error" ? VR ? VR(d, c) : BR(d, c, { name: !0 }) : sW && i in l && (UR(d, l, i), UR(d, l, "prepareStackTrace")), BR(d, l);
    try {
      u.name !== a && WR(u, "name", a), u.constructor = d;
    } catch {
    }
    return d;
  }
}, k1 = Ma, lW = Vn, qi = Sg, F1 = aW, hC = "WebAssembly", YR = lW[hC], yf = new Error("e", { cause: 7 }).cause !== 7, Oa = function(t, e) {
  var n = {};
  n[t] = F1(t, e, yf), k1({ global: !0, constructor: !0, arity: 1, forced: yf }, n);
}, Lv = function(t, e) {
  if (YR && YR[t]) {
    var n = {};
    n[t] = F1(hC + "." + t, e, yf), k1({ target: hC, stat: !0, constructor: !0, arity: 1, forced: yf }, n);
  }
};
Oa("Error", function(t) {
  return function(n) {
    return qi(t, this, arguments);
  };
});
Oa("EvalError", function(t) {
  return function(n) {
    return qi(t, this, arguments);
  };
});
Oa("RangeError", function(t) {
  return function(n) {
    return qi(t, this, arguments);
  };
});
Oa("ReferenceError", function(t) {
  return function(n) {
    return qi(t, this, arguments);
  };
});
Oa("SyntaxError", function(t) {
  return function(n) {
    return qi(t, this, arguments);
  };
});
Oa("TypeError", function(t) {
  return function(n) {
    return qi(t, this, arguments);
  };
});
Oa("URIError", function(t) {
  return function(n) {
    return qi(t, this, arguments);
  };
});
Lv("CompileError", function(t) {
  return function(n) {
    return qi(t, this, arguments);
  };
});
Lv("LinkError", function(t) {
  return function(n) {
    return qi(t, this, arguments);
  };
});
Lv("RuntimeError", function(t) {
  return function(n) {
    return qi(t, this, arguments);
  };
});
var uW = Gl, cW = nr, hW = function(t) {
  if (uW(t) === "Function")
    return cW(t);
}, GR = hW, dW = Mv, fW = gg, gW = GR(GR.bind), mW = function(t, e) {
  return dW(t), e === void 0 ? t : fW ? gW(t, e) : function() {
    return t.apply(e, arguments);
  };
}, pW = Yc, W1 = pW("document", "documentElement"), wW = nr, $v = wW([].slice), CW = TypeError, V1 = function(t, e) {
  if (t < e)
    throw new CW("Not enough arguments");
  return t;
}, vW = Ev, SW = /(?:ipad|iphone|ipod).*applewebkit/i.test(vW), yW = Vn, bW = Gl, RW = bW(yW.process) === "process", Er = Vn, EW = Sg, TW = mW, zR = Pn, _W = ko, B1 = Gr, jR = W1, MW = $v, KR = Iv, OW = V1, AW = SW, IW = RW, dC = Er.setImmediate, fC = Er.clearImmediate, PW = Er.process, xm = Er.Dispatch, xW = Er.Function, XR = Er.MessageChannel, HW = Er.String, Hm = 0, rc = {}, qR = "onreadystatechange", _c, xs, Dm, Nm;
B1(function() {
  _c = Er.location;
});
var kv = function(t) {
  if (_W(rc, t)) {
    var e = rc[t];
    delete rc[t], e();
  }
}, Lm = function(t) {
  return function() {
    kv(t);
  };
}, ZR = function(t) {
  kv(t.data);
}, QR = function(t) {
  Er.postMessage(HW(t), _c.protocol + "//" + _c.host);
};
(!dC || !fC) && (dC = function(e) {
  OW(arguments.length, 1);
  var n = zR(e) ? e : xW(e), r = MW(arguments, 1);
  return rc[++Hm] = function() {
    EW(n, void 0, r);
  }, xs(Hm), Hm;
}, fC = function(e) {
  delete rc[e];
}, IW ? xs = function(t) {
  PW.nextTick(Lm(t));
} : xm && xm.now ? xs = function(t) {
  xm.now(Lm(t));
} : XR && !AW ? (Dm = new XR(), Nm = Dm.port2, Dm.port1.onmessage = ZR, xs = TW(Nm.postMessage, Nm)) : Er.addEventListener && zR(Er.postMessage) && !Er.importScripts && _c && _c.protocol !== "file:" && !B1(QR) ? (xs = QR, Er.addEventListener("message", ZR, !1)) : qR in KR("script") ? xs = function(t) {
  jR.appendChild(KR("script"))[qR] = function() {
    jR.removeChild(this), kv(t);
  };
} : xs = function(t) {
  setTimeout(Lm(t), 0);
});
var U1 = {
  set: dC,
  clear: fC
}, DW = Ma, NW = Vn, JR = U1.clear;
DW({ global: !0, bind: !0, enumerable: !0, forced: NW.clearImmediate !== JR }, {
  clearImmediate: JR
});
var LW = typeof Bun == "function" && Bun && typeof Bun.version == "string", Y1 = Vn, $W = Sg, kW = Pn, FW = LW, WW = Ev, VW = $v, BW = V1, UW = Y1.Function, YW = /MSIE .\./.test(WW) || FW && function() {
  var t = Y1.Bun.version.split(".");
  return t.length < 3 || t[0] === "0" && (t[1] < 3 || t[1] === "3" && t[2] === "0");
}(), GW = function(t, e) {
  var n = e ? 2 : 1;
  return YW ? function(r, i) {
    var o = BW(arguments.length, 1) > n, s = kW(r) ? r : UW(r), a = o ? VW(arguments, n) : [], l = o ? function() {
      $W(s, this, a);
    } : s;
    return e ? t(l, i) : t(l);
  } : t;
}, zW = Ma, G1 = Vn, e0 = U1.set, jW = GW, t0 = G1.setImmediate ? jW(e0, !1) : e0;
zW({ global: !0, bind: !0, enumerable: !0, forced: G1.setImmediate !== t0 }, {
  setImmediate: t0
});
/*! @license DOMPurify 2.4.7 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.4.7/LICENSE */
function ls(t) {
  return ls = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
    return typeof e;
  } : function(e) {
    return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
  }, ls(t);
}
function gC(t, e) {
  return gC = Object.setPrototypeOf || function(r, i) {
    return r.__proto__ = i, r;
  }, gC(t, e);
}
function KW() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Gd(t, e, n) {
  return KW() ? Gd = Reflect.construct : Gd = function(i, o, s) {
    var a = [null];
    a.push.apply(a, o);
    var l = Function.bind.apply(i, a), u = new l();
    return s && gC(u, s.prototype), u;
  }, Gd.apply(null, arguments);
}
function ai(t) {
  return XW(t) || qW(t) || ZW(t) || QW();
}
function XW(t) {
  if (Array.isArray(t))
    return mC(t);
}
function qW(t) {
  if (typeof Symbol < "u" && t[Symbol.iterator] != null || t["@@iterator"] != null)
    return Array.from(t);
}
function ZW(t, e) {
  if (t) {
    if (typeof t == "string")
      return mC(t, e);
    var n = Object.prototype.toString.call(t).slice(8, -1);
    if (n === "Object" && t.constructor && (n = t.constructor.name), n === "Map" || n === "Set")
      return Array.from(t);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return mC(t, e);
  }
}
function mC(t, e) {
  (e == null || e > t.length) && (e = t.length);
  for (var n = 0, r = new Array(e); n < e; n++)
    r[n] = t[n];
  return r;
}
function QW() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
var JW = Object.hasOwnProperty, n0 = Object.setPrototypeOf, eV = Object.isFrozen, tV = Object.getPrototypeOf, nV = Object.getOwnPropertyDescriptor, tr = Object.freeze, pi = Object.seal, rV = Object.create, z1 = typeof Reflect < "u" && Reflect, bf = z1.apply, pC = z1.construct;
bf || (bf = function(e, n, r) {
  return e.apply(n, r);
});
tr || (tr = function(e) {
  return e;
});
pi || (pi = function(e) {
  return e;
});
pC || (pC = function(e, n) {
  return Gd(e, ai(n));
});
var iV = Yr(Array.prototype.forEach), r0 = Yr(Array.prototype.pop), uu = Yr(Array.prototype.push), zd = Yr(String.prototype.toLowerCase), $m = Yr(String.prototype.toString), oV = Yr(String.prototype.match), qr = Yr(String.prototype.replace), sV = Yr(String.prototype.indexOf), aV = Yr(String.prototype.trim), Yn = Yr(RegExp.prototype.test), km = lV(TypeError);
function Yr(t) {
  return function(e) {
    for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++)
      r[i - 1] = arguments[i];
    return bf(t, e, r);
  };
}
function lV(t) {
  return function() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return pC(t, n);
  };
}
function tt(t, e, n) {
  var r;
  n = (r = n) !== null && r !== void 0 ? r : zd, n0 && n0(t, null);
  for (var i = e.length; i--; ) {
    var o = e[i];
    if (typeof o == "string") {
      var s = n(o);
      s !== o && (eV(e) || (e[i] = s), o = s);
    }
    t[o] = !0;
  }
  return t;
}
function Hs(t) {
  var e = rV(null), n;
  for (n in t)
    bf(JW, t, [n]) === !0 && (e[n] = t[n]);
  return e;
}
function Rh(t, e) {
  for (; t !== null; ) {
    var n = nV(t, e);
    if (n) {
      if (n.get)
        return Yr(n.get);
      if (typeof n.value == "function")
        return Yr(n.value);
    }
    t = tV(t);
  }
  function r(i) {
    return console.warn("fallback value for", i), null;
  }
  return r;
}
var i0 = tr(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]), Fm = tr(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]), Wm = tr(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]), uV = tr(["animate", "color-profile", "cursor", "discard", "fedropshadow", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]), Vm = tr(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover"]), cV = tr(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]), o0 = tr(["#text"]), s0 = tr(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "xmlns", "slot"]), Bm = tr(["accent-height", "accumulate", "additive", "alignment-baseline", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]), a0 = tr(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]), Eh = tr(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]), hV = pi(/\{\{[\w\W]*|[\w\W]*\}\}/gm), dV = pi(/<%[\w\W]*|[\w\W]*%>/gm), fV = pi(/\${[\w\W]*}/gm), gV = pi(/^data-[\-\w.\u00B7-\uFFFF]/), mV = pi(/^aria-[\-\w]+$/), pV = pi(
  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
  // eslint-disable-line no-useless-escape
), wV = pi(/^(?:\w+script|data):/i), CV = pi(
  /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
  // eslint-disable-line no-control-regex
), vV = pi(/^html$/i), SV = function() {
  return typeof window > "u" ? null : window;
}, yV = function(e, n) {
  if (ls(e) !== "object" || typeof e.createPolicy != "function")
    return null;
  var r = null, i = "data-tt-policy-suffix";
  n.currentScript && n.currentScript.hasAttribute(i) && (r = n.currentScript.getAttribute(i));
  var o = "dompurify" + (r ? "#" + r : "");
  try {
    return e.createPolicy(o, {
      createHTML: function(a) {
        return a;
      },
      createScriptURL: function(a) {
        return a;
      }
    });
  } catch {
    return console.warn("TrustedTypes policy " + o + " could not be created."), null;
  }
};
function j1() {
  var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : SV(), e = function(V) {
    return j1(V);
  };
  if (e.version = "2.4.7", e.removed = [], !t || !t.document || t.document.nodeType !== 9)
    return e.isSupported = !1, e;
  var n = t.document, r = t.document, i = t.DocumentFragment, o = t.HTMLTemplateElement, s = t.Node, a = t.Element, l = t.NodeFilter, u = t.NamedNodeMap, c = u === void 0 ? t.NamedNodeMap || t.MozNamedAttrMap : u, d = t.HTMLFormElement, g = t.DOMParser, p = t.trustedTypes, C = a.prototype, E = Rh(C, "cloneNode"), I = Rh(C, "nextSibling"), M = Rh(C, "childNodes"), y = Rh(C, "parentNode");
  if (typeof o == "function") {
    var $ = r.createElement("template");
    $.content && $.content.ownerDocument && (r = $.content.ownerDocument);
  }
  var X = yV(p, n), G = X ? X.createHTML("") : "", q = r, re = q.implementation, v = q.createNodeIterator, S = q.createDocumentFragment, b = q.getElementsByTagName, L = n.importNode, P = {};
  try {
    P = Hs(r).documentMode ? r.documentMode : {};
  } catch {
  }
  var x = {};
  e.isSupported = typeof y == "function" && re && re.createHTMLDocument !== void 0 && P !== 9;
  var W = hV, D = dV, B = fV, z = gV, w = mV, h = wV, f = CV, m = pV, T = null, O = tt({}, [].concat(ai(i0), ai(Fm), ai(Wm), ai(Vm), ai(o0))), _ = null, Y = tt({}, [].concat(ai(s0), ai(Bm), ai(a0), ai(Eh))), U = Object.seal(Object.create(null, {
    tagNameCheck: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: null
    },
    attributeNameCheck: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: !1
    }
  })), ie = null, se = null, oe = !0, de = !0, Ce = !1, we = !0, pe = !1, ee = !1, ye = !1, $e = !1, Ae = !1, Fe = !1, Ie = !1, R = !0, A = !1, N = "user-content-", J = !0, F = !1, Q = {}, K = null, j = tt({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]), te = null, Z = tt({}, ["audio", "video", "img", "source", "image", "track"]), ne = null, fe = tt({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]), Ee = "http://www.w3.org/1998/Math/MathML", He = "http://www.w3.org/2000/svg", ke = "http://www.w3.org/1999/xhtml", Ge = ke, Rt = !1, Qe = null, mt = tt({}, [Ee, He, ke], $m), Et, eo = ["application/xhtml+xml", "text/html"], Or = "text/html", xt, rn = null, bi = r.createElement("form"), Tn = function(V) {
    return V instanceof RegExp || V instanceof Function;
  }, Jt = function(V) {
    rn && rn === V || ((!V || ls(V) !== "object") && (V = {}), V = Hs(V), Et = // eslint-disable-next-line unicorn/prefer-includes
    eo.indexOf(V.PARSER_MEDIA_TYPE) === -1 ? Et = Or : Et = V.PARSER_MEDIA_TYPE, xt = Et === "application/xhtml+xml" ? $m : zd, T = "ALLOWED_TAGS" in V ? tt({}, V.ALLOWED_TAGS, xt) : O, _ = "ALLOWED_ATTR" in V ? tt({}, V.ALLOWED_ATTR, xt) : Y, Qe = "ALLOWED_NAMESPACES" in V ? tt({}, V.ALLOWED_NAMESPACES, $m) : mt, ne = "ADD_URI_SAFE_ATTR" in V ? tt(
      Hs(fe),
      // eslint-disable-line indent
      V.ADD_URI_SAFE_ATTR,
      // eslint-disable-line indent
      xt
      // eslint-disable-line indent
    ) : fe, te = "ADD_DATA_URI_TAGS" in V ? tt(
      Hs(Z),
      // eslint-disable-line indent
      V.ADD_DATA_URI_TAGS,
      // eslint-disable-line indent
      xt
      // eslint-disable-line indent
    ) : Z, K = "FORBID_CONTENTS" in V ? tt({}, V.FORBID_CONTENTS, xt) : j, ie = "FORBID_TAGS" in V ? tt({}, V.FORBID_TAGS, xt) : {}, se = "FORBID_ATTR" in V ? tt({}, V.FORBID_ATTR, xt) : {}, Q = "USE_PROFILES" in V ? V.USE_PROFILES : !1, oe = V.ALLOW_ARIA_ATTR !== !1, de = V.ALLOW_DATA_ATTR !== !1, Ce = V.ALLOW_UNKNOWN_PROTOCOLS || !1, we = V.ALLOW_SELF_CLOSE_IN_ATTR !== !1, pe = V.SAFE_FOR_TEMPLATES || !1, ee = V.WHOLE_DOCUMENT || !1, Ae = V.RETURN_DOM || !1, Fe = V.RETURN_DOM_FRAGMENT || !1, Ie = V.RETURN_TRUSTED_TYPE || !1, $e = V.FORCE_BODY || !1, R = V.SANITIZE_DOM !== !1, A = V.SANITIZE_NAMED_PROPS || !1, J = V.KEEP_CONTENT !== !1, F = V.IN_PLACE || !1, m = V.ALLOWED_URI_REGEXP || m, Ge = V.NAMESPACE || ke, U = V.CUSTOM_ELEMENT_HANDLING || {}, V.CUSTOM_ELEMENT_HANDLING && Tn(V.CUSTOM_ELEMENT_HANDLING.tagNameCheck) && (U.tagNameCheck = V.CUSTOM_ELEMENT_HANDLING.tagNameCheck), V.CUSTOM_ELEMENT_HANDLING && Tn(V.CUSTOM_ELEMENT_HANDLING.attributeNameCheck) && (U.attributeNameCheck = V.CUSTOM_ELEMENT_HANDLING.attributeNameCheck), V.CUSTOM_ELEMENT_HANDLING && typeof V.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements == "boolean" && (U.allowCustomizedBuiltInElements = V.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements), pe && (de = !1), Fe && (Ae = !0), Q && (T = tt({}, ai(o0)), _ = [], Q.html === !0 && (tt(T, i0), tt(_, s0)), Q.svg === !0 && (tt(T, Fm), tt(_, Bm), tt(_, Eh)), Q.svgFilters === !0 && (tt(T, Wm), tt(_, Bm), tt(_, Eh)), Q.mathMl === !0 && (tt(T, Vm), tt(_, a0), tt(_, Eh))), V.ADD_TAGS && (T === O && (T = Hs(T)), tt(T, V.ADD_TAGS, xt)), V.ADD_ATTR && (_ === Y && (_ = Hs(_)), tt(_, V.ADD_ATTR, xt)), V.ADD_URI_SAFE_ATTR && tt(ne, V.ADD_URI_SAFE_ATTR, xt), V.FORBID_CONTENTS && (K === j && (K = Hs(K)), tt(K, V.FORBID_CONTENTS, xt)), J && (T["#text"] = !0), ee && tt(T, ["html", "head", "body"]), T.table && (tt(T, ["tbody"]), delete ie.tbody), tr && tr(V), rn = V);
  }, Mt = tt({}, ["mi", "mo", "mn", "ms", "mtext"]), nu = tt({}, ["foreignobject", "desc", "title", "annotation-xml"]), gh = tt({}, ["title", "style", "font", "a", "script"]), Da = tt({}, Fm);
  tt(Da, Wm), tt(Da, uV);
  var ru = tt({}, Vm);
  tt(ru, cV);
  var mh = function(V) {
    var ae = y(V);
    (!ae || !ae.tagName) && (ae = {
      namespaceURI: Ge,
      tagName: "template"
    });
    var ge = zd(V.tagName), st = zd(ae.tagName);
    return Qe[V.namespaceURI] ? V.namespaceURI === He ? ae.namespaceURI === ke ? ge === "svg" : ae.namespaceURI === Ee ? ge === "svg" && (st === "annotation-xml" || Mt[st]) : Boolean(Da[ge]) : V.namespaceURI === Ee ? ae.namespaceURI === ke ? ge === "math" : ae.namespaceURI === He ? ge === "math" && nu[st] : Boolean(ru[ge]) : V.namespaceURI === ke ? ae.namespaceURI === He && !nu[st] || ae.namespaceURI === Ee && !Mt[st] ? !1 : !ru[ge] && (gh[ge] || !Da[ge]) : !!(Et === "application/xhtml+xml" && Qe[V.namespaceURI]) : !1;
  }, Xr = function(V) {
    uu(e.removed, {
      element: V
    });
    try {
      V.parentNode.removeChild(V);
    } catch {
      try {
        V.outerHTML = G;
      } catch {
        V.remove();
      }
    }
  }, iu = function(V, ae) {
    try {
      uu(e.removed, {
        attribute: ae.getAttributeNode(V),
        from: ae
      });
    } catch {
      uu(e.removed, {
        attribute: null,
        from: ae
      });
    }
    if (ae.removeAttribute(V), V === "is" && !_[V])
      if (Ae || Fe)
        try {
          Xr(ae);
        } catch {
        }
      else
        try {
          ae.setAttribute(V, "");
        } catch {
        }
  }, ph = function(V) {
    var ae, ge;
    if ($e)
      V = "<remove></remove>" + V;
    else {
      var st = oV(V, /^[\r\n\t ]+/);
      ge = st && st[0];
    }
    Et === "application/xhtml+xml" && Ge === ke && (V = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + V + "</body></html>");
    var _n = X ? X.createHTML(V) : V;
    if (Ge === ke)
      try {
        ae = new g().parseFromString(_n, Et);
      } catch {
      }
    if (!ae || !ae.documentElement) {
      ae = re.createDocument(Ge, "template", null);
      try {
        ae.documentElement.innerHTML = Rt ? G : _n;
      } catch {
      }
    }
    var Ht = ae.body || ae.documentElement;
    return V && ge && Ht.insertBefore(r.createTextNode(ge), Ht.childNodes[0] || null), Ge === ke ? b.call(ae, ee ? "html" : "body")[0] : ee ? ae.documentElement : Ht;
  }, wh = function(V) {
    return v.call(
      V.ownerDocument || V,
      V,
      // eslint-disable-next-line no-bitwise
      l.SHOW_ELEMENT | l.SHOW_COMMENT | l.SHOW_TEXT,
      null,
      !1
    );
  }, k = function(V) {
    return V instanceof d && (typeof V.nodeName != "string" || typeof V.textContent != "string" || typeof V.removeChild != "function" || !(V.attributes instanceof c) || typeof V.removeAttribute != "function" || typeof V.setAttribute != "function" || typeof V.namespaceURI != "string" || typeof V.insertBefore != "function" || typeof V.hasChildNodes != "function");
  }, ue = function(V) {
    return ls(s) === "object" ? V instanceof s : V && ls(V) === "object" && typeof V.nodeType == "number" && typeof V.nodeName == "string";
  }, me = function(V, ae, ge) {
    x[V] && iV(x[V], function(st) {
      st.call(e, ae, ge, rn);
    });
  }, We = function(V) {
    var ae;
    if (me("beforeSanitizeElements", V, null), k(V) || Yn(/[\u0080-\uFFFF]/, V.nodeName))
      return Xr(V), !0;
    var ge = xt(V.nodeName);
    if (me("uponSanitizeElement", V, {
      tagName: ge,
      allowedTags: T
    }), V.hasChildNodes() && !ue(V.firstElementChild) && (!ue(V.content) || !ue(V.content.firstElementChild)) && Yn(/<[/\w]/g, V.innerHTML) && Yn(/<[/\w]/g, V.textContent) || ge === "select" && Yn(/<template/i, V.innerHTML))
      return Xr(V), !0;
    if (!T[ge] || ie[ge]) {
      if (!ie[ge] && vt(ge) && (U.tagNameCheck instanceof RegExp && Yn(U.tagNameCheck, ge) || U.tagNameCheck instanceof Function && U.tagNameCheck(ge)))
        return !1;
      if (J && !K[ge]) {
        var st = y(V) || V.parentNode, _n = M(V) || V.childNodes;
        if (_n && st)
          for (var Ht = _n.length, Mn = Ht - 1; Mn >= 0; --Mn)
            st.insertBefore(E(_n[Mn], !0), I(V));
      }
      return Xr(V), !0;
    }
    return V instanceof a && !mh(V) || (ge === "noscript" || ge === "noembed" || ge === "noframes") && Yn(/<\/no(script|embed|frames)/i, V.innerHTML) ? (Xr(V), !0) : (pe && V.nodeType === 3 && (ae = V.textContent, ae = qr(ae, W, " "), ae = qr(ae, D, " "), ae = qr(ae, B, " "), V.textContent !== ae && (uu(e.removed, {
      element: V.cloneNode()
    }), V.textContent = ae)), me("afterSanitizeElements", V, null), !1);
  }, ht = function(V, ae, ge) {
    if (R && (ae === "id" || ae === "name") && (ge in r || ge in bi))
      return !1;
    if (!(de && !se[ae] && Yn(z, ae))) {
      if (!(oe && Yn(w, ae))) {
        if (!_[ae] || se[ae]) {
          if (
            // First condition does a very basic check if a) it's basically a valid custom element tagname AND
            // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
            !(vt(V) && (U.tagNameCheck instanceof RegExp && Yn(U.tagNameCheck, V) || U.tagNameCheck instanceof Function && U.tagNameCheck(V)) && (U.attributeNameCheck instanceof RegExp && Yn(U.attributeNameCheck, ae) || U.attributeNameCheck instanceof Function && U.attributeNameCheck(ae)) || // Alternative, second condition checks if it's an `is`-attribute, AND
            // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            ae === "is" && U.allowCustomizedBuiltInElements && (U.tagNameCheck instanceof RegExp && Yn(U.tagNameCheck, ge) || U.tagNameCheck instanceof Function && U.tagNameCheck(ge)))
          )
            return !1;
        } else if (!ne[ae]) {
          if (!Yn(m, qr(ge, f, ""))) {
            if (!((ae === "src" || ae === "xlink:href" || ae === "href") && V !== "script" && sV(ge, "data:") === 0 && te[V])) {
              if (!(Ce && !Yn(h, qr(ge, f, "")))) {
                if (ge)
                  return !1;
              }
            }
          }
        }
      }
    }
    return !0;
  }, vt = function(V) {
    return V.indexOf("-") > 0;
  }, ut = function(V) {
    var ae, ge, st, _n;
    me("beforeSanitizeAttributes", V, null);
    var Ht = V.attributes;
    if (Ht) {
      var Mn = {
        attrName: "",
        attrValue: "",
        keepAttr: !0,
        allowedAttributes: _
      };
      for (_n = Ht.length; _n--; ) {
        ae = Ht[_n];
        var Ch = ae, Cn = Ch.name, mm = Ch.namespaceURI;
        if (ge = Cn === "value" ? ae.value : aV(ae.value), st = xt(Cn), Mn.attrName = st, Mn.attrValue = ge, Mn.keepAttr = !0, Mn.forceKeepAttr = void 0, me("uponSanitizeAttribute", V, Mn), ge = Mn.attrValue, !Mn.forceKeepAttr && (iu(Cn, V), !!Mn.keepAttr)) {
          if (!we && Yn(/\/>/i, ge)) {
            iu(Cn, V);
            continue;
          }
          pe && (ge = qr(ge, W, " "), ge = qr(ge, D, " "), ge = qr(ge, B, " "));
          var lR = xt(V.nodeName);
          if (ht(lR, st, ge)) {
            if (A && (st === "id" || st === "name") && (iu(Cn, V), ge = N + ge), X && ls(p) === "object" && typeof p.getAttributeType == "function" && !mm)
              switch (p.getAttributeType(lR, st)) {
                case "TrustedHTML": {
                  ge = X.createHTML(ge);
                  break;
                }
                case "TrustedScriptURL": {
                  ge = X.createScriptURL(ge);
                  break;
                }
              }
            try {
              mm ? V.setAttributeNS(mm, Cn, ge) : V.setAttribute(Cn, ge), r0(e.removed);
            } catch {
            }
          }
        }
      }
      me("afterSanitizeAttributes", V, null);
    }
  }, ot = function be(V) {
    var ae, ge = wh(V);
    for (me("beforeSanitizeShadowDOM", V, null); ae = ge.nextNode(); )
      me("uponSanitizeShadowNode", ae, null), !We(ae) && (ae.content instanceof i && be(ae.content), ut(ae));
    me("afterSanitizeShadowDOM", V, null);
  };
  return e.sanitize = function(be) {
    var V = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, ae, ge, st, _n, Ht;
    if (Rt = !be, Rt && (be = "<!-->"), typeof be != "string" && !ue(be))
      if (typeof be.toString == "function") {
        if (be = be.toString(), typeof be != "string")
          throw km("dirty is not a string, aborting");
      } else
        throw km("toString is not a function");
    if (!e.isSupported) {
      if (ls(t.toStaticHTML) === "object" || typeof t.toStaticHTML == "function") {
        if (typeof be == "string")
          return t.toStaticHTML(be);
        if (ue(be))
          return t.toStaticHTML(be.outerHTML);
      }
      return be;
    }
    if (ye || Jt(V), e.removed = [], typeof be == "string" && (F = !1), F) {
      if (be.nodeName) {
        var Mn = xt(be.nodeName);
        if (!T[Mn] || ie[Mn])
          throw km("root node is forbidden and cannot be sanitized in-place");
      }
    } else if (be instanceof s)
      ae = ph("<!---->"), ge = ae.ownerDocument.importNode(be, !0), ge.nodeType === 1 && ge.nodeName === "BODY" || ge.nodeName === "HTML" ? ae = ge : ae.appendChild(ge);
    else {
      if (!Ae && !pe && !ee && // eslint-disable-next-line unicorn/prefer-includes
      be.indexOf("<") === -1)
        return X && Ie ? X.createHTML(be) : be;
      if (ae = ph(be), !ae)
        return Ae ? null : Ie ? G : "";
    }
    ae && $e && Xr(ae.firstChild);
    for (var Ch = wh(F ? be : ae); st = Ch.nextNode(); )
      st.nodeType === 3 && st === _n || We(st) || (st.content instanceof i && ot(st.content), ut(st), _n = st);
    if (_n = null, F)
      return be;
    if (Ae) {
      if (Fe)
        for (Ht = S.call(ae.ownerDocument); ae.firstChild; )
          Ht.appendChild(ae.firstChild);
      else
        Ht = ae;
      return (_.shadowroot || _.shadowrootmod) && (Ht = L.call(n, Ht, !0)), Ht;
    }
    var Cn = ee ? ae.outerHTML : ae.innerHTML;
    return ee && T["!doctype"] && ae.ownerDocument && ae.ownerDocument.doctype && ae.ownerDocument.doctype.name && Yn(vV, ae.ownerDocument.doctype.name) && (Cn = "<!DOCTYPE " + ae.ownerDocument.doctype.name + `>
` + Cn), pe && (Cn = qr(Cn, W, " "), Cn = qr(Cn, D, " "), Cn = qr(Cn, B, " ")), X && Ie ? X.createHTML(Cn) : Cn;
  }, e.setConfig = function(be) {
    Jt(be), ye = !0;
  }, e.clearConfig = function() {
    rn = null, ye = !1;
  }, e.isValidAttribute = function(be, V, ae) {
    rn || Jt({});
    var ge = xt(be), st = xt(V);
    return ht(ge, st, ae);
  }, e.addHook = function(be, V) {
    typeof V == "function" && (x[be] = x[be] || [], uu(x[be], V));
  }, e.removeHook = function(be) {
    if (x[be])
      return r0(x[be]);
  }, e.removeHooks = function(be) {
    x[be] && (x[be] = []);
  }, e.removeAllHooks = function() {
    x = {};
  }, e;
}
var bV = j1();
//! moment.js
//! version : 2.29.4
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
var K1;
function le() {
  return K1.apply(null, arguments);
}
function RV(t) {
  K1 = t;
}
function wi(t) {
  return t instanceof Array || Object.prototype.toString.call(t) === "[object Array]";
}
function Ca(t) {
  return t != null && Object.prototype.toString.call(t) === "[object Object]";
}
function wt(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
}
function Fv(t) {
  if (Object.getOwnPropertyNames)
    return Object.getOwnPropertyNames(t).length === 0;
  var e;
  for (e in t)
    if (wt(t, e))
      return !1;
  return !0;
}
function cr(t) {
  return t === void 0;
}
function Do(t) {
  return typeof t == "number" || Object.prototype.toString.call(t) === "[object Number]";
}
function Kc(t) {
  return t instanceof Date || Object.prototype.toString.call(t) === "[object Date]";
}
function X1(t, e) {
  var n = [], r, i = t.length;
  for (r = 0; r < i; ++r)
    n.push(e(t[r], r));
  return n;
}
function fs(t, e) {
  for (var n in e)
    wt(e, n) && (t[n] = e[n]);
  return wt(e, "toString") && (t.toString = e.toString), wt(e, "valueOf") && (t.valueOf = e.valueOf), t;
}
function Zi(t, e, n, r) {
  return vI(t, e, n, r, !0).utc();
}
function EV() {
  return {
    empty: !1,
    unusedTokens: [],
    unusedInput: [],
    overflow: -2,
    charsLeftOver: 0,
    nullInput: !1,
    invalidEra: null,
    invalidMonth: null,
    invalidFormat: !1,
    userInvalidated: !1,
    iso: !1,
    parsedDateParts: [],
    era: null,
    meridiem: null,
    rfc2822: !1,
    weekdayMismatch: !1
  };
}
function Je(t) {
  return t._pf == null && (t._pf = EV()), t._pf;
}
var wC;
Array.prototype.some ? wC = Array.prototype.some : wC = function(t) {
  var e = Object(this), n = e.length >>> 0, r;
  for (r = 0; r < n; r++)
    if (r in e && t.call(this, e[r], r, e))
      return !0;
  return !1;
};
function Wv(t) {
  if (t._isValid == null) {
    var e = Je(t), n = wC.call(e.parsedDateParts, function(i) {
      return i != null;
    }), r = !isNaN(t._d.getTime()) && e.overflow < 0 && !e.empty && !e.invalidEra && !e.invalidMonth && !e.invalidWeekday && !e.weekdayMismatch && !e.nullInput && !e.invalidFormat && !e.userInvalidated && (!e.meridiem || e.meridiem && n);
    if (t._strict && (r = r && e.charsLeftOver === 0 && e.unusedTokens.length === 0 && e.bigHour === void 0), Object.isFrozen == null || !Object.isFrozen(t))
      t._isValid = r;
    else
      return r;
  }
  return t._isValid;
}
function yg(t) {
  var e = Zi(NaN);
  return t != null ? fs(Je(e), t) : Je(e).userInvalidated = !0, e;
}
var l0 = le.momentProperties = [], Um = !1;
function Vv(t, e) {
  var n, r, i, o = l0.length;
  if (cr(e._isAMomentObject) || (t._isAMomentObject = e._isAMomentObject), cr(e._i) || (t._i = e._i), cr(e._f) || (t._f = e._f), cr(e._l) || (t._l = e._l), cr(e._strict) || (t._strict = e._strict), cr(e._tzm) || (t._tzm = e._tzm), cr(e._isUTC) || (t._isUTC = e._isUTC), cr(e._offset) || (t._offset = e._offset), cr(e._pf) || (t._pf = Je(e)), cr(e._locale) || (t._locale = e._locale), o > 0)
    for (n = 0; n < o; n++)
      r = l0[n], i = e[r], cr(i) || (t[r] = i);
  return t;
}
function Xc(t) {
  Vv(this, t), this._d = new Date(t._d != null ? t._d.getTime() : NaN), this.isValid() || (this._d = new Date(NaN)), Um === !1 && (Um = !0, le.updateOffset(this), Um = !1);
}
function Ci(t) {
  return t instanceof Xc || t != null && t._isAMomentObject != null;
}
function q1(t) {
  le.suppressDeprecationWarnings === !1 && typeof console < "u" && console.warn && console.warn("Deprecation warning: " + t);
}
function zr(t, e) {
  var n = !0;
  return fs(function() {
    if (le.deprecationHandler != null && le.deprecationHandler(null, t), n) {
      var r = [], i, o, s, a = arguments.length;
      for (o = 0; o < a; o++) {
        if (i = "", typeof arguments[o] == "object") {
          i += `
[` + o + "] ";
          for (s in arguments[0])
            wt(arguments[0], s) && (i += s + ": " + arguments[0][s] + ", ");
          i = i.slice(0, -2);
        } else
          i = arguments[o];
        r.push(i);
      }
      q1(
        t + `
Arguments: ` + Array.prototype.slice.call(r).join("") + `
` + new Error().stack
      ), n = !1;
    }
    return e.apply(this, arguments);
  }, e);
}
var u0 = {};
function Z1(t, e) {
  le.deprecationHandler != null && le.deprecationHandler(t, e), u0[t] || (q1(e), u0[t] = !0);
}
le.suppressDeprecationWarnings = !1;
le.deprecationHandler = null;
function Qi(t) {
  return typeof Function < "u" && t instanceof Function || Object.prototype.toString.call(t) === "[object Function]";
}
function TV(t) {
  var e, n;
  for (n in t)
    wt(t, n) && (e = t[n], Qi(e) ? this[n] = e : this["_" + n] = e);
  this._config = t, this._dayOfMonthOrdinalParseLenient = new RegExp(
    (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
  );
}
function CC(t, e) {
  var n = fs({}, t), r;
  for (r in e)
    wt(e, r) && (Ca(t[r]) && Ca(e[r]) ? (n[r] = {}, fs(n[r], t[r]), fs(n[r], e[r])) : e[r] != null ? n[r] = e[r] : delete n[r]);
  for (r in t)
    wt(t, r) && !wt(e, r) && Ca(t[r]) && (n[r] = fs({}, n[r]));
  return n;
}
function Bv(t) {
  t != null && this.set(t);
}
var vC;
Object.keys ? vC = Object.keys : vC = function(t) {
  var e, n = [];
  for (e in t)
    wt(t, e) && n.push(e);
  return n;
};
var _V = {
  sameDay: "[Today at] LT",
  nextDay: "[Tomorrow at] LT",
  nextWeek: "dddd [at] LT",
  lastDay: "[Yesterday at] LT",
  lastWeek: "[Last] dddd [at] LT",
  sameElse: "L"
};
function MV(t, e, n) {
  var r = this._calendar[t] || this._calendar.sameElse;
  return Qi(r) ? r.call(e, n) : r;
}
function Ki(t, e, n) {
  var r = "" + Math.abs(t), i = e - r.length, o = t >= 0;
  return (o ? n ? "+" : "" : "-") + Math.pow(10, Math.max(0, i)).toString().substr(1) + r;
}
var Uv = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, Th = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, Ym = {}, Hl = {};
function Le(t, e, n, r) {
  var i = r;
  typeof r == "string" && (i = function() {
    return this[r]();
  }), t && (Hl[t] = i), e && (Hl[e[0]] = function() {
    return Ki(i.apply(this, arguments), e[1], e[2]);
  }), n && (Hl[n] = function() {
    return this.localeData().ordinal(
      i.apply(this, arguments),
      t
    );
  });
}
function OV(t) {
  return t.match(/\[[\s\S]/) ? t.replace(/^\[|\]$/g, "") : t.replace(/\\/g, "");
}
function AV(t) {
  var e = t.match(Uv), n, r;
  for (n = 0, r = e.length; n < r; n++)
    Hl[e[n]] ? e[n] = Hl[e[n]] : e[n] = OV(e[n]);
  return function(i) {
    var o = "", s;
    for (s = 0; s < r; s++)
      o += Qi(e[s]) ? e[s].call(i, t) : e[s];
    return o;
  };
}
function jd(t, e) {
  return t.isValid() ? (e = Q1(e, t.localeData()), Ym[e] = Ym[e] || AV(e), Ym[e](t)) : t.localeData().invalidDate();
}
function Q1(t, e) {
  var n = 5;
  function r(i) {
    return e.longDateFormat(i) || i;
  }
  for (Th.lastIndex = 0; n >= 0 && Th.test(t); )
    t = t.replace(
      Th,
      r
    ), Th.lastIndex = 0, n -= 1;
  return t;
}
var IV = {
  LTS: "h:mm:ss A",
  LT: "h:mm A",
  L: "MM/DD/YYYY",
  LL: "MMMM D, YYYY",
  LLL: "MMMM D, YYYY h:mm A",
  LLLL: "dddd, MMMM D, YYYY h:mm A"
};
function PV(t) {
  var e = this._longDateFormat[t], n = this._longDateFormat[t.toUpperCase()];
  return e || !n ? e : (this._longDateFormat[t] = n.match(Uv).map(function(r) {
    return r === "MMMM" || r === "MM" || r === "DD" || r === "dddd" ? r.slice(1) : r;
  }).join(""), this._longDateFormat[t]);
}
var xV = "Invalid date";
function HV() {
  return this._invalidDate;
}
var DV = "%d", NV = /\d{1,2}/;
function LV(t) {
  return this._ordinal.replace("%d", t);
}
var $V = {
  future: "in %s",
  past: "%s ago",
  s: "a few seconds",
  ss: "%d seconds",
  m: "a minute",
  mm: "%d minutes",
  h: "an hour",
  hh: "%d hours",
  d: "a day",
  dd: "%d days",
  w: "a week",
  ww: "%d weeks",
  M: "a month",
  MM: "%d months",
  y: "a year",
  yy: "%d years"
};
function kV(t, e, n, r) {
  var i = this._relativeTime[n];
  return Qi(i) ? i(t, e, n, r) : i.replace(/%d/i, t);
}
function FV(t, e) {
  var n = this._relativeTime[t > 0 ? "future" : "past"];
  return Qi(n) ? n(e) : n.replace(/%s/i, e);
}
var ic = {};
function Bn(t, e) {
  var n = t.toLowerCase();
  ic[n] = ic[n + "s"] = ic[e] = t;
}
function jr(t) {
  return typeof t == "string" ? ic[t] || ic[t.toLowerCase()] : void 0;
}
function Yv(t) {
  var e = {}, n, r;
  for (r in t)
    wt(t, r) && (n = jr(r), n && (e[n] = t[r]));
  return e;
}
var J1 = {};
function Un(t, e) {
  J1[t] = e;
}
function WV(t) {
  var e = [], n;
  for (n in t)
    wt(t, n) && e.push({ unit: n, priority: J1[n] });
  return e.sort(function(r, i) {
    return r.priority - i.priority;
  }), e;
}
function bg(t) {
  return t % 4 === 0 && t % 100 !== 0 || t % 400 === 0;
}
function Br(t) {
  return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
}
function lt(t) {
  var e = +t, n = 0;
  return e !== 0 && isFinite(e) && (n = Br(e)), n;
}
function zl(t, e) {
  return function(n) {
    return n != null ? (eI(this, t, n), le.updateOffset(this, e), this) : Rf(this, t);
  };
}
function Rf(t, e) {
  return t.isValid() ? t._d["get" + (t._isUTC ? "UTC" : "") + e]() : NaN;
}
function eI(t, e, n) {
  t.isValid() && !isNaN(n) && (e === "FullYear" && bg(t.year()) && t.month() === 1 && t.date() === 29 ? (n = lt(n), t._d["set" + (t._isUTC ? "UTC" : "") + e](
    n,
    t.month(),
    Og(n, t.month())
  )) : t._d["set" + (t._isUTC ? "UTC" : "") + e](n));
}
function VV(t) {
  return t = jr(t), Qi(this[t]) ? this[t]() : this;
}
function BV(t, e) {
  if (typeof t == "object") {
    t = Yv(t);
    var n = WV(t), r, i = n.length;
    for (r = 0; r < i; r++)
      this[n[r].unit](t[n[r].unit]);
  } else if (t = jr(t), Qi(this[t]))
    return this[t](e);
  return this;
}
var tI = /\d/, Mr = /\d\d/, nI = /\d{3}/, Gv = /\d{4}/, Rg = /[+-]?\d{6}/, $t = /\d\d?/, rI = /\d\d\d\d?/, iI = /\d\d\d\d\d\d?/, Eg = /\d{1,3}/, zv = /\d{1,4}/, Tg = /[+-]?\d{1,6}/, jl = /\d+/, _g = /[+-]?\d+/, UV = /Z|[+-]\d\d:?\d\d/gi, Mg = /Z|[+-]\d\d(?::?\d\d)?/gi, YV = /[+-]?\d+(\.\d{1,3})?/, qc = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, Ef;
Ef = {};
function Me(t, e, n) {
  Ef[t] = Qi(e) ? e : function(r, i) {
    return r && n ? n : e;
  };
}
function GV(t, e) {
  return wt(Ef, t) ? Ef[t](e._strict, e._locale) : new RegExp(zV(t));
}
function zV(t) {
  return Rr(
    t.replace("\\", "").replace(
      /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
      function(e, n, r, i, o) {
        return n || r || i || o;
      }
    )
  );
}
function Rr(t) {
  return t.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
var SC = {};
function Tt(t, e) {
  var n, r = e, i;
  for (typeof t == "string" && (t = [t]), Do(e) && (r = function(o, s) {
    s[e] = lt(o);
  }), i = t.length, n = 0; n < i; n++)
    SC[t[n]] = r;
}
function Zc(t, e) {
  Tt(t, function(n, r, i, o) {
    i._w = i._w || {}, e(n, i._w, i, o);
  });
}
function jV(t, e, n) {
  e != null && wt(SC, t) && SC[t](e, n._a, n, t);
}
var kn = 0, Eo = 1, Bi = 2, pn = 3, fi = 4, To = 5, da = 6, KV = 7, XV = 8;
function qV(t, e) {
  return (t % e + e) % e;
}
var sn;
Array.prototype.indexOf ? sn = Array.prototype.indexOf : sn = function(t) {
  var e;
  for (e = 0; e < this.length; ++e)
    if (this[e] === t)
      return e;
  return -1;
};
function Og(t, e) {
  if (isNaN(t) || isNaN(e))
    return NaN;
  var n = qV(e, 12);
  return t += (e - n) / 12, n === 1 ? bg(t) ? 29 : 28 : 31 - n % 7 % 2;
}
Le("M", ["MM", 2], "Mo", function() {
  return this.month() + 1;
});
Le("MMM", 0, 0, function(t) {
  return this.localeData().monthsShort(this, t);
});
Le("MMMM", 0, 0, function(t) {
  return this.localeData().months(this, t);
});
Bn("month", "M");
Un("month", 8);
Me("M", $t);
Me("MM", $t, Mr);
Me("MMM", function(t, e) {
  return e.monthsShortRegex(t);
});
Me("MMMM", function(t, e) {
  return e.monthsRegex(t);
});
Tt(["M", "MM"], function(t, e) {
  e[Eo] = lt(t) - 1;
});
Tt(["MMM", "MMMM"], function(t, e, n, r) {
  var i = n._locale.monthsParse(t, r, n._strict);
  i != null ? e[Eo] = i : Je(n).invalidMonth = t;
});
var ZV = "January_February_March_April_May_June_July_August_September_October_November_December".split(
  "_"
), oI = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), sI = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, QV = qc, JV = qc;
function eB(t, e) {
  return t ? wi(this._months) ? this._months[t.month()] : this._months[(this._months.isFormat || sI).test(e) ? "format" : "standalone"][t.month()] : wi(this._months) ? this._months : this._months.standalone;
}
function tB(t, e) {
  return t ? wi(this._monthsShort) ? this._monthsShort[t.month()] : this._monthsShort[sI.test(e) ? "format" : "standalone"][t.month()] : wi(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone;
}
function nB(t, e, n) {
  var r, i, o, s = t.toLocaleLowerCase();
  if (!this._monthsParse)
    for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], r = 0; r < 12; ++r)
      o = Zi([2e3, r]), this._shortMonthsParse[r] = this.monthsShort(
        o,
        ""
      ).toLocaleLowerCase(), this._longMonthsParse[r] = this.months(o, "").toLocaleLowerCase();
  return n ? e === "MMM" ? (i = sn.call(this._shortMonthsParse, s), i !== -1 ? i : null) : (i = sn.call(this._longMonthsParse, s), i !== -1 ? i : null) : e === "MMM" ? (i = sn.call(this._shortMonthsParse, s), i !== -1 ? i : (i = sn.call(this._longMonthsParse, s), i !== -1 ? i : null)) : (i = sn.call(this._longMonthsParse, s), i !== -1 ? i : (i = sn.call(this._shortMonthsParse, s), i !== -1 ? i : null));
}
function rB(t, e, n) {
  var r, i, o;
  if (this._monthsParseExact)
    return nB.call(this, t, e, n);
  for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), r = 0; r < 12; r++) {
    if (i = Zi([2e3, r]), n && !this._longMonthsParse[r] && (this._longMonthsParse[r] = new RegExp(
      "^" + this.months(i, "").replace(".", "") + "$",
      "i"
    ), this._shortMonthsParse[r] = new RegExp(
      "^" + this.monthsShort(i, "").replace(".", "") + "$",
      "i"
    )), !n && !this._monthsParse[r] && (o = "^" + this.months(i, "") + "|^" + this.monthsShort(i, ""), this._monthsParse[r] = new RegExp(o.replace(".", ""), "i")), n && e === "MMMM" && this._longMonthsParse[r].test(t))
      return r;
    if (n && e === "MMM" && this._shortMonthsParse[r].test(t))
      return r;
    if (!n && this._monthsParse[r].test(t))
      return r;
  }
}
function aI(t, e) {
  var n;
  if (!t.isValid())
    return t;
  if (typeof e == "string") {
    if (/^\d+$/.test(e))
      e = lt(e);
    else if (e = t.localeData().monthsParse(e), !Do(e))
      return t;
  }
  return n = Math.min(t.date(), Og(t.year(), e)), t._d["set" + (t._isUTC ? "UTC" : "") + "Month"](e, n), t;
}
function lI(t) {
  return t != null ? (aI(this, t), le.updateOffset(this, !0), this) : Rf(this, "Month");
}
function iB() {
  return Og(this.year(), this.month());
}
function oB(t) {
  return this._monthsParseExact ? (wt(this, "_monthsRegex") || uI.call(this), t ? this._monthsShortStrictRegex : this._monthsShortRegex) : (wt(this, "_monthsShortRegex") || (this._monthsShortRegex = QV), this._monthsShortStrictRegex && t ? this._monthsShortStrictRegex : this._monthsShortRegex);
}
function sB(t) {
  return this._monthsParseExact ? (wt(this, "_monthsRegex") || uI.call(this), t ? this._monthsStrictRegex : this._monthsRegex) : (wt(this, "_monthsRegex") || (this._monthsRegex = JV), this._monthsStrictRegex && t ? this._monthsStrictRegex : this._monthsRegex);
}
function uI() {
  function t(s, a) {
    return a.length - s.length;
  }
  var e = [], n = [], r = [], i, o;
  for (i = 0; i < 12; i++)
    o = Zi([2e3, i]), e.push(this.monthsShort(o, "")), n.push(this.months(o, "")), r.push(this.months(o, "")), r.push(this.monthsShort(o, ""));
  for (e.sort(t), n.sort(t), r.sort(t), i = 0; i < 12; i++)
    e[i] = Rr(e[i]), n[i] = Rr(n[i]);
  for (i = 0; i < 24; i++)
    r[i] = Rr(r[i]);
  this._monthsRegex = new RegExp("^(" + r.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp(
    "^(" + n.join("|") + ")",
    "i"
  ), this._monthsShortStrictRegex = new RegExp(
    "^(" + e.join("|") + ")",
    "i"
  );
}
Le("Y", 0, 0, function() {
  var t = this.year();
  return t <= 9999 ? Ki(t, 4) : "+" + t;
});
Le(0, ["YY", 2], 0, function() {
  return this.year() % 100;
});
Le(0, ["YYYY", 4], 0, "year");
Le(0, ["YYYYY", 5], 0, "year");
Le(0, ["YYYYYY", 6, !0], 0, "year");
Bn("year", "y");
Un("year", 1);
Me("Y", _g);
Me("YY", $t, Mr);
Me("YYYY", zv, Gv);
Me("YYYYY", Tg, Rg);
Me("YYYYYY", Tg, Rg);
Tt(["YYYYY", "YYYYYY"], kn);
Tt("YYYY", function(t, e) {
  e[kn] = t.length === 2 ? le.parseTwoDigitYear(t) : lt(t);
});
Tt("YY", function(t, e) {
  e[kn] = le.parseTwoDigitYear(t);
});
Tt("Y", function(t, e) {
  e[kn] = parseInt(t, 10);
});
function oc(t) {
  return bg(t) ? 366 : 365;
}
le.parseTwoDigitYear = function(t) {
  return lt(t) + (lt(t) > 68 ? 1900 : 2e3);
};
var cI = zl("FullYear", !0);
function aB() {
  return bg(this.year());
}
function lB(t, e, n, r, i, o, s) {
  var a;
  return t < 100 && t >= 0 ? (a = new Date(t + 400, e, n, r, i, o, s), isFinite(a.getFullYear()) && a.setFullYear(t)) : a = new Date(t, e, n, r, i, o, s), a;
}
function Mc(t) {
  var e, n;
  return t < 100 && t >= 0 ? (n = Array.prototype.slice.call(arguments), n[0] = t + 400, e = new Date(Date.UTC.apply(null, n)), isFinite(e.getUTCFullYear()) && e.setUTCFullYear(t)) : e = new Date(Date.UTC.apply(null, arguments)), e;
}
function Tf(t, e, n) {
  var r = 7 + e - n, i = (7 + Mc(t, 0, r).getUTCDay() - e) % 7;
  return -i + r - 1;
}
function hI(t, e, n, r, i) {
  var o = (7 + n - r) % 7, s = Tf(t, r, i), a = 1 + 7 * (e - 1) + o + s, l, u;
  return a <= 0 ? (l = t - 1, u = oc(l) + a) : a > oc(t) ? (l = t + 1, u = a - oc(t)) : (l = t, u = a), {
    year: l,
    dayOfYear: u
  };
}
function Oc(t, e, n) {
  var r = Tf(t.year(), e, n), i = Math.floor((t.dayOfYear() - r - 1) / 7) + 1, o, s;
  return i < 1 ? (s = t.year() - 1, o = i + Ho(s, e, n)) : i > Ho(t.year(), e, n) ? (o = i - Ho(t.year(), e, n), s = t.year() + 1) : (s = t.year(), o = i), {
    week: o,
    year: s
  };
}
function Ho(t, e, n) {
  var r = Tf(t, e, n), i = Tf(t + 1, e, n);
  return (oc(t) - r + i) / 7;
}
Le("w", ["ww", 2], "wo", "week");
Le("W", ["WW", 2], "Wo", "isoWeek");
Bn("week", "w");
Bn("isoWeek", "W");
Un("week", 5);
Un("isoWeek", 5);
Me("w", $t);
Me("ww", $t, Mr);
Me("W", $t);
Me("WW", $t, Mr);
Zc(
  ["w", "ww", "W", "WW"],
  function(t, e, n, r) {
    e[r.substr(0, 1)] = lt(t);
  }
);
function uB(t) {
  return Oc(t, this._week.dow, this._week.doy).week;
}
var cB = {
  dow: 0,
  // Sunday is the first day of the week.
  doy: 6
  // The week that contains Jan 6th is the first week of the year.
};
function hB() {
  return this._week.dow;
}
function dB() {
  return this._week.doy;
}
function fB(t) {
  var e = this.localeData().week(this);
  return t == null ? e : this.add((t - e) * 7, "d");
}
function gB(t) {
  var e = Oc(this, 1, 4).week;
  return t == null ? e : this.add((t - e) * 7, "d");
}
Le("d", 0, "do", "day");
Le("dd", 0, 0, function(t) {
  return this.localeData().weekdaysMin(this, t);
});
Le("ddd", 0, 0, function(t) {
  return this.localeData().weekdaysShort(this, t);
});
Le("dddd", 0, 0, function(t) {
  return this.localeData().weekdays(this, t);
});
Le("e", 0, 0, "weekday");
Le("E", 0, 0, "isoWeekday");
Bn("day", "d");
Bn("weekday", "e");
Bn("isoWeekday", "E");
Un("day", 11);
Un("weekday", 11);
Un("isoWeekday", 11);
Me("d", $t);
Me("e", $t);
Me("E", $t);
Me("dd", function(t, e) {
  return e.weekdaysMinRegex(t);
});
Me("ddd", function(t, e) {
  return e.weekdaysShortRegex(t);
});
Me("dddd", function(t, e) {
  return e.weekdaysRegex(t);
});
Zc(["dd", "ddd", "dddd"], function(t, e, n, r) {
  var i = n._locale.weekdaysParse(t, r, n._strict);
  i != null ? e.d = i : Je(n).invalidWeekday = t;
});
Zc(["d", "e", "E"], function(t, e, n, r) {
  e[r] = lt(t);
});
function mB(t, e) {
  return typeof t != "string" ? t : isNaN(t) ? (t = e.weekdaysParse(t), typeof t == "number" ? t : null) : parseInt(t, 10);
}
function pB(t, e) {
  return typeof t == "string" ? e.weekdaysParse(t) % 7 || 7 : isNaN(t) ? null : t;
}
function jv(t, e) {
  return t.slice(e, 7).concat(t.slice(0, e));
}
var wB = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), dI = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), CB = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), vB = qc, SB = qc, yB = qc;
function bB(t, e) {
  var n = wi(this._weekdays) ? this._weekdays : this._weekdays[t && t !== !0 && this._weekdays.isFormat.test(e) ? "format" : "standalone"];
  return t === !0 ? jv(n, this._week.dow) : t ? n[t.day()] : n;
}
function RB(t) {
  return t === !0 ? jv(this._weekdaysShort, this._week.dow) : t ? this._weekdaysShort[t.day()] : this._weekdaysShort;
}
function EB(t) {
  return t === !0 ? jv(this._weekdaysMin, this._week.dow) : t ? this._weekdaysMin[t.day()] : this._weekdaysMin;
}
function TB(t, e, n) {
  var r, i, o, s = t.toLocaleLowerCase();
  if (!this._weekdaysParse)
    for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], r = 0; r < 7; ++r)
      o = Zi([2e3, 1]).day(r), this._minWeekdaysParse[r] = this.weekdaysMin(
        o,
        ""
      ).toLocaleLowerCase(), this._shortWeekdaysParse[r] = this.weekdaysShort(
        o,
        ""
      ).toLocaleLowerCase(), this._weekdaysParse[r] = this.weekdays(o, "").toLocaleLowerCase();
  return n ? e === "dddd" ? (i = sn.call(this._weekdaysParse, s), i !== -1 ? i : null) : e === "ddd" ? (i = sn.call(this._shortWeekdaysParse, s), i !== -1 ? i : null) : (i = sn.call(this._minWeekdaysParse, s), i !== -1 ? i : null) : e === "dddd" ? (i = sn.call(this._weekdaysParse, s), i !== -1 || (i = sn.call(this._shortWeekdaysParse, s), i !== -1) ? i : (i = sn.call(this._minWeekdaysParse, s), i !== -1 ? i : null)) : e === "ddd" ? (i = sn.call(this._shortWeekdaysParse, s), i !== -1 || (i = sn.call(this._weekdaysParse, s), i !== -1) ? i : (i = sn.call(this._minWeekdaysParse, s), i !== -1 ? i : null)) : (i = sn.call(this._minWeekdaysParse, s), i !== -1 || (i = sn.call(this._weekdaysParse, s), i !== -1) ? i : (i = sn.call(this._shortWeekdaysParse, s), i !== -1 ? i : null));
}
function _B(t, e, n) {
  var r, i, o;
  if (this._weekdaysParseExact)
    return TB.call(this, t, e, n);
  for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), r = 0; r < 7; r++) {
    if (i = Zi([2e3, 1]).day(r), n && !this._fullWeekdaysParse[r] && (this._fullWeekdaysParse[r] = new RegExp(
      "^" + this.weekdays(i, "").replace(".", "\\.?") + "$",
      "i"
    ), this._shortWeekdaysParse[r] = new RegExp(
      "^" + this.weekdaysShort(i, "").replace(".", "\\.?") + "$",
      "i"
    ), this._minWeekdaysParse[r] = new RegExp(
      "^" + this.weekdaysMin(i, "").replace(".", "\\.?") + "$",
      "i"
    )), this._weekdaysParse[r] || (o = "^" + this.weekdays(i, "") + "|^" + this.weekdaysShort(i, "") + "|^" + this.weekdaysMin(i, ""), this._weekdaysParse[r] = new RegExp(o.replace(".", ""), "i")), n && e === "dddd" && this._fullWeekdaysParse[r].test(t))
      return r;
    if (n && e === "ddd" && this._shortWeekdaysParse[r].test(t))
      return r;
    if (n && e === "dd" && this._minWeekdaysParse[r].test(t))
      return r;
    if (!n && this._weekdaysParse[r].test(t))
      return r;
  }
}
function MB(t) {
  if (!this.isValid())
    return t != null ? this : NaN;
  var e = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
  return t != null ? (t = mB(t, this.localeData()), this.add(t - e, "d")) : e;
}
function OB(t) {
  if (!this.isValid())
    return t != null ? this : NaN;
  var e = (this.day() + 7 - this.localeData()._week.dow) % 7;
  return t == null ? e : this.add(t - e, "d");
}
function AB(t) {
  if (!this.isValid())
    return t != null ? this : NaN;
  if (t != null) {
    var e = pB(t, this.localeData());
    return this.day(this.day() % 7 ? e : e - 7);
  } else
    return this.day() || 7;
}
function IB(t) {
  return this._weekdaysParseExact ? (wt(this, "_weekdaysRegex") || Kv.call(this), t ? this._weekdaysStrictRegex : this._weekdaysRegex) : (wt(this, "_weekdaysRegex") || (this._weekdaysRegex = vB), this._weekdaysStrictRegex && t ? this._weekdaysStrictRegex : this._weekdaysRegex);
}
function PB(t) {
  return this._weekdaysParseExact ? (wt(this, "_weekdaysRegex") || Kv.call(this), t ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (wt(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = SB), this._weekdaysShortStrictRegex && t ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);
}
function xB(t) {
  return this._weekdaysParseExact ? (wt(this, "_weekdaysRegex") || Kv.call(this), t ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (wt(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = yB), this._weekdaysMinStrictRegex && t ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);
}
function Kv() {
  function t(c, d) {
    return d.length - c.length;
  }
  var e = [], n = [], r = [], i = [], o, s, a, l, u;
  for (o = 0; o < 7; o++)
    s = Zi([2e3, 1]).day(o), a = Rr(this.weekdaysMin(s, "")), l = Rr(this.weekdaysShort(s, "")), u = Rr(this.weekdays(s, "")), e.push(a), n.push(l), r.push(u), i.push(a), i.push(l), i.push(u);
  e.sort(t), n.sort(t), r.sort(t), i.sort(t), this._weekdaysRegex = new RegExp("^(" + i.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp(
    "^(" + r.join("|") + ")",
    "i"
  ), this._weekdaysShortStrictRegex = new RegExp(
    "^(" + n.join("|") + ")",
    "i"
  ), this._weekdaysMinStrictRegex = new RegExp(
    "^(" + e.join("|") + ")",
    "i"
  );
}
function Xv() {
  return this.hours() % 12 || 12;
}
function HB() {
  return this.hours() || 24;
}
Le("H", ["HH", 2], 0, "hour");
Le("h", ["hh", 2], 0, Xv);
Le("k", ["kk", 2], 0, HB);
Le("hmm", 0, 0, function() {
  return "" + Xv.apply(this) + Ki(this.minutes(), 2);
});
Le("hmmss", 0, 0, function() {
  return "" + Xv.apply(this) + Ki(this.minutes(), 2) + Ki(this.seconds(), 2);
});
Le("Hmm", 0, 0, function() {
  return "" + this.hours() + Ki(this.minutes(), 2);
});
Le("Hmmss", 0, 0, function() {
  return "" + this.hours() + Ki(this.minutes(), 2) + Ki(this.seconds(), 2);
});
function fI(t, e) {
  Le(t, 0, 0, function() {
    return this.localeData().meridiem(
      this.hours(),
      this.minutes(),
      e
    );
  });
}
fI("a", !0);
fI("A", !1);
Bn("hour", "h");
Un("hour", 13);
function gI(t, e) {
  return e._meridiemParse;
}
Me("a", gI);
Me("A", gI);
Me("H", $t);
Me("h", $t);
Me("k", $t);
Me("HH", $t, Mr);
Me("hh", $t, Mr);
Me("kk", $t, Mr);
Me("hmm", rI);
Me("hmmss", iI);
Me("Hmm", rI);
Me("Hmmss", iI);
Tt(["H", "HH"], pn);
Tt(["k", "kk"], function(t, e, n) {
  var r = lt(t);
  e[pn] = r === 24 ? 0 : r;
});
Tt(["a", "A"], function(t, e, n) {
  n._isPm = n._locale.isPM(t), n._meridiem = t;
});
Tt(["h", "hh"], function(t, e, n) {
  e[pn] = lt(t), Je(n).bigHour = !0;
});
Tt("hmm", function(t, e, n) {
  var r = t.length - 2;
  e[pn] = lt(t.substr(0, r)), e[fi] = lt(t.substr(r)), Je(n).bigHour = !0;
});
Tt("hmmss", function(t, e, n) {
  var r = t.length - 4, i = t.length - 2;
  e[pn] = lt(t.substr(0, r)), e[fi] = lt(t.substr(r, 2)), e[To] = lt(t.substr(i)), Je(n).bigHour = !0;
});
Tt("Hmm", function(t, e, n) {
  var r = t.length - 2;
  e[pn] = lt(t.substr(0, r)), e[fi] = lt(t.substr(r));
});
Tt("Hmmss", function(t, e, n) {
  var r = t.length - 4, i = t.length - 2;
  e[pn] = lt(t.substr(0, r)), e[fi] = lt(t.substr(r, 2)), e[To] = lt(t.substr(i));
});
function DB(t) {
  return (t + "").toLowerCase().charAt(0) === "p";
}
var NB = /[ap]\.?m?\.?/i, LB = zl("Hours", !0);
function $B(t, e, n) {
  return t > 11 ? n ? "pm" : "PM" : n ? "am" : "AM";
}
var mI = {
  calendar: _V,
  longDateFormat: IV,
  invalidDate: xV,
  ordinal: DV,
  dayOfMonthOrdinalParse: NV,
  relativeTime: $V,
  months: ZV,
  monthsShort: oI,
  week: cB,
  weekdays: wB,
  weekdaysMin: CB,
  weekdaysShort: dI,
  meridiemParse: NB
}, Wt = {}, cu = {}, Ac;
function kB(t, e) {
  var n, r = Math.min(t.length, e.length);
  for (n = 0; n < r; n += 1)
    if (t[n] !== e[n])
      return n;
  return r;
}
function c0(t) {
  return t && t.toLowerCase().replace("_", "-");
}
function FB(t) {
  for (var e = 0, n, r, i, o; e < t.length; ) {
    for (o = c0(t[e]).split("-"), n = o.length, r = c0(t[e + 1]), r = r ? r.split("-") : null; n > 0; ) {
      if (i = Ag(o.slice(0, n).join("-")), i)
        return i;
      if (r && r.length >= n && kB(o, r) >= n - 1)
        break;
      n--;
    }
    e++;
  }
  return Ac;
}
function WB(t) {
  return t.match("^[^/\\\\]*$") != null;
}
function Ag(t) {
  var e = null, n;
  if (Wt[t] === void 0 && typeof module < "u" && module && module.exports && WB(t))
    try {
      e = Ac._abbr, n = require, n("./locale/" + t), Cs(e);
    } catch {
      Wt[t] = null;
    }
  return Wt[t];
}
function Cs(t, e) {
  var n;
  return t && (cr(e) ? n = Fo(t) : n = qv(t, e), n ? Ac = n : typeof console < "u" && console.warn && console.warn(
    "Locale " + t + " not found. Did you forget to load it?"
  )), Ac._abbr;
}
function qv(t, e) {
  if (e !== null) {
    var n, r = mI;
    if (e.abbr = t, Wt[t] != null)
      Z1(
        "defineLocaleOverride",
        "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
      ), r = Wt[t]._config;
    else if (e.parentLocale != null)
      if (Wt[e.parentLocale] != null)
        r = Wt[e.parentLocale]._config;
      else if (n = Ag(e.parentLocale), n != null)
        r = n._config;
      else
        return cu[e.parentLocale] || (cu[e.parentLocale] = []), cu[e.parentLocale].push({
          name: t,
          config: e
        }), null;
    return Wt[t] = new Bv(CC(r, e)), cu[t] && cu[t].forEach(function(i) {
      qv(i.name, i.config);
    }), Cs(t), Wt[t];
  } else
    return delete Wt[t], null;
}
function VB(t, e) {
  if (e != null) {
    var n, r, i = mI;
    Wt[t] != null && Wt[t].parentLocale != null ? Wt[t].set(CC(Wt[t]._config, e)) : (r = Ag(t), r != null && (i = r._config), e = CC(i, e), r == null && (e.abbr = t), n = new Bv(e), n.parentLocale = Wt[t], Wt[t] = n), Cs(t);
  } else
    Wt[t] != null && (Wt[t].parentLocale != null ? (Wt[t] = Wt[t].parentLocale, t === Cs() && Cs(t)) : Wt[t] != null && delete Wt[t]);
  return Wt[t];
}
function Fo(t) {
  var e;
  if (t && t._locale && t._locale._abbr && (t = t._locale._abbr), !t)
    return Ac;
  if (!wi(t)) {
    if (e = Ag(t), e)
      return e;
    t = [t];
  }
  return FB(t);
}
function BB() {
  return vC(Wt);
}
function Zv(t) {
  var e, n = t._a;
  return n && Je(t).overflow === -2 && (e = n[Eo] < 0 || n[Eo] > 11 ? Eo : n[Bi] < 1 || n[Bi] > Og(n[kn], n[Eo]) ? Bi : n[pn] < 0 || n[pn] > 24 || n[pn] === 24 && (n[fi] !== 0 || n[To] !== 0 || n[da] !== 0) ? pn : n[fi] < 0 || n[fi] > 59 ? fi : n[To] < 0 || n[To] > 59 ? To : n[da] < 0 || n[da] > 999 ? da : -1, Je(t)._overflowDayOfYear && (e < kn || e > Bi) && (e = Bi), Je(t)._overflowWeeks && e === -1 && (e = KV), Je(t)._overflowWeekday && e === -1 && (e = XV), Je(t).overflow = e), t;
}
var UB = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, YB = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, GB = /Z|[+-]\d\d(?::?\d\d)?/, _h = [
  ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
  ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
  ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
  ["GGGG-[W]WW", /\d{4}-W\d\d/, !1],
  ["YYYY-DDD", /\d{4}-\d{3}/],
  ["YYYY-MM", /\d{4}-\d\d/, !1],
  ["YYYYYYMMDD", /[+-]\d{10}/],
  ["YYYYMMDD", /\d{8}/],
  ["GGGG[W]WWE", /\d{4}W\d{3}/],
  ["GGGG[W]WW", /\d{4}W\d{2}/, !1],
  ["YYYYDDD", /\d{7}/],
  ["YYYYMM", /\d{6}/, !1],
  ["YYYY", /\d{4}/, !1]
], Gm = [
  ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
  ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
  ["HH:mm:ss", /\d\d:\d\d:\d\d/],
  ["HH:mm", /\d\d:\d\d/],
  ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
  ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
  ["HHmmss", /\d\d\d\d\d\d/],
  ["HHmm", /\d\d\d\d/],
  ["HH", /\d\d/]
], zB = /^\/?Date\((-?\d+)/i, jB = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, KB = {
  UT: 0,
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
function pI(t) {
  var e, n, r = t._i, i = UB.exec(r) || YB.exec(r), o, s, a, l, u = _h.length, c = Gm.length;
  if (i) {
    for (Je(t).iso = !0, e = 0, n = u; e < n; e++)
      if (_h[e][1].exec(i[1])) {
        s = _h[e][0], o = _h[e][2] !== !1;
        break;
      }
    if (s == null) {
      t._isValid = !1;
      return;
    }
    if (i[3]) {
      for (e = 0, n = c; e < n; e++)
        if (Gm[e][1].exec(i[3])) {
          a = (i[2] || " ") + Gm[e][0];
          break;
        }
      if (a == null) {
        t._isValid = !1;
        return;
      }
    }
    if (!o && a != null) {
      t._isValid = !1;
      return;
    }
    if (i[4])
      if (GB.exec(i[4]))
        l = "Z";
      else {
        t._isValid = !1;
        return;
      }
    t._f = s + (a || "") + (l || ""), Jv(t);
  } else
    t._isValid = !1;
}
function XB(t, e, n, r, i, o) {
  var s = [
    qB(t),
    oI.indexOf(e),
    parseInt(n, 10),
    parseInt(r, 10),
    parseInt(i, 10)
  ];
  return o && s.push(parseInt(o, 10)), s;
}
function qB(t) {
  var e = parseInt(t, 10);
  return e <= 49 ? 2e3 + e : e <= 999 ? 1900 + e : e;
}
function ZB(t) {
  return t.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
function QB(t, e, n) {
  if (t) {
    var r = dI.indexOf(t), i = new Date(
      e[0],
      e[1],
      e[2]
    ).getDay();
    if (r !== i)
      return Je(n).weekdayMismatch = !0, n._isValid = !1, !1;
  }
  return !0;
}
function JB(t, e, n) {
  if (t)
    return KB[t];
  if (e)
    return 0;
  var r = parseInt(n, 10), i = r % 100, o = (r - i) / 100;
  return o * 60 + i;
}
function wI(t) {
  var e = jB.exec(ZB(t._i)), n;
  if (e) {
    if (n = XB(
      e[4],
      e[3],
      e[2],
      e[5],
      e[6],
      e[7]
    ), !QB(e[1], n, t))
      return;
    t._a = n, t._tzm = JB(e[8], e[9], e[10]), t._d = Mc.apply(null, t._a), t._d.setUTCMinutes(t._d.getUTCMinutes() - t._tzm), Je(t).rfc2822 = !0;
  } else
    t._isValid = !1;
}
function eU(t) {
  var e = zB.exec(t._i);
  if (e !== null) {
    t._d = new Date(+e[1]);
    return;
  }
  if (pI(t), t._isValid === !1)
    delete t._isValid;
  else
    return;
  if (wI(t), t._isValid === !1)
    delete t._isValid;
  else
    return;
  t._strict ? t._isValid = !1 : le.createFromInputFallback(t);
}
le.createFromInputFallback = zr(
  "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
  function(t) {
    t._d = new Date(t._i + (t._useUTC ? " UTC" : ""));
  }
);
function Rl(t, e, n) {
  return t ?? e ?? n;
}
function tU(t) {
  var e = new Date(le.now());
  return t._useUTC ? [
    e.getUTCFullYear(),
    e.getUTCMonth(),
    e.getUTCDate()
  ] : [e.getFullYear(), e.getMonth(), e.getDate()];
}
function Qv(t) {
  var e, n, r = [], i, o, s;
  if (!t._d) {
    for (i = tU(t), t._w && t._a[Bi] == null && t._a[Eo] == null && nU(t), t._dayOfYear != null && (s = Rl(t._a[kn], i[kn]), (t._dayOfYear > oc(s) || t._dayOfYear === 0) && (Je(t)._overflowDayOfYear = !0), n = Mc(s, 0, t._dayOfYear), t._a[Eo] = n.getUTCMonth(), t._a[Bi] = n.getUTCDate()), e = 0; e < 3 && t._a[e] == null; ++e)
      t._a[e] = r[e] = i[e];
    for (; e < 7; e++)
      t._a[e] = r[e] = t._a[e] == null ? e === 2 ? 1 : 0 : t._a[e];
    t._a[pn] === 24 && t._a[fi] === 0 && t._a[To] === 0 && t._a[da] === 0 && (t._nextDay = !0, t._a[pn] = 0), t._d = (t._useUTC ? Mc : lB).apply(
      null,
      r
    ), o = t._useUTC ? t._d.getUTCDay() : t._d.getDay(), t._tzm != null && t._d.setUTCMinutes(t._d.getUTCMinutes() - t._tzm), t._nextDay && (t._a[pn] = 24), t._w && typeof t._w.d < "u" && t._w.d !== o && (Je(t).weekdayMismatch = !0);
  }
}
function nU(t) {
  var e, n, r, i, o, s, a, l, u;
  e = t._w, e.GG != null || e.W != null || e.E != null ? (o = 1, s = 4, n = Rl(
    e.GG,
    t._a[kn],
    Oc(Lt(), 1, 4).year
  ), r = Rl(e.W, 1), i = Rl(e.E, 1), (i < 1 || i > 7) && (l = !0)) : (o = t._locale._week.dow, s = t._locale._week.doy, u = Oc(Lt(), o, s), n = Rl(e.gg, t._a[kn], u.year), r = Rl(e.w, u.week), e.d != null ? (i = e.d, (i < 0 || i > 6) && (l = !0)) : e.e != null ? (i = e.e + o, (e.e < 0 || e.e > 6) && (l = !0)) : i = o), r < 1 || r > Ho(n, o, s) ? Je(t)._overflowWeeks = !0 : l != null ? Je(t)._overflowWeekday = !0 : (a = hI(n, r, i, o, s), t._a[kn] = a.year, t._dayOfYear = a.dayOfYear);
}
le.ISO_8601 = function() {
};
le.RFC_2822 = function() {
};
function Jv(t) {
  if (t._f === le.ISO_8601) {
    pI(t);
    return;
  }
  if (t._f === le.RFC_2822) {
    wI(t);
    return;
  }
  t._a = [], Je(t).empty = !0;
  var e = "" + t._i, n, r, i, o, s, a = e.length, l = 0, u, c;
  for (i = Q1(t._f, t._locale).match(Uv) || [], c = i.length, n = 0; n < c; n++)
    o = i[n], r = (e.match(GV(o, t)) || [])[0], r && (s = e.substr(0, e.indexOf(r)), s.length > 0 && Je(t).unusedInput.push(s), e = e.slice(
      e.indexOf(r) + r.length
    ), l += r.length), Hl[o] ? (r ? Je(t).empty = !1 : Je(t).unusedTokens.push(o), jV(o, r, t)) : t._strict && !r && Je(t).unusedTokens.push(o);
  Je(t).charsLeftOver = a - l, e.length > 0 && Je(t).unusedInput.push(e), t._a[pn] <= 12 && Je(t).bigHour === !0 && t._a[pn] > 0 && (Je(t).bigHour = void 0), Je(t).parsedDateParts = t._a.slice(0), Je(t).meridiem = t._meridiem, t._a[pn] = rU(
    t._locale,
    t._a[pn],
    t._meridiem
  ), u = Je(t).era, u !== null && (t._a[kn] = t._locale.erasConvertYear(u, t._a[kn])), Qv(t), Zv(t);
}
function rU(t, e, n) {
  var r;
  return n == null ? e : t.meridiemHour != null ? t.meridiemHour(e, n) : (t.isPM != null && (r = t.isPM(n), r && e < 12 && (e += 12), !r && e === 12 && (e = 0)), e);
}
function iU(t) {
  var e, n, r, i, o, s, a = !1, l = t._f.length;
  if (l === 0) {
    Je(t).invalidFormat = !0, t._d = new Date(NaN);
    return;
  }
  for (i = 0; i < l; i++)
    o = 0, s = !1, e = Vv({}, t), t._useUTC != null && (e._useUTC = t._useUTC), e._f = t._f[i], Jv(e), Wv(e) && (s = !0), o += Je(e).charsLeftOver, o += Je(e).unusedTokens.length * 10, Je(e).score = o, a ? o < r && (r = o, n = e) : (r == null || o < r || s) && (r = o, n = e, s && (a = !0));
  fs(t, n || e);
}
function oU(t) {
  if (!t._d) {
    var e = Yv(t._i), n = e.day === void 0 ? e.date : e.day;
    t._a = X1(
      [e.year, e.month, n, e.hour, e.minute, e.second, e.millisecond],
      function(r) {
        return r && parseInt(r, 10);
      }
    ), Qv(t);
  }
}
function sU(t) {
  var e = new Xc(Zv(CI(t)));
  return e._nextDay && (e.add(1, "d"), e._nextDay = void 0), e;
}
function CI(t) {
  var e = t._i, n = t._f;
  return t._locale = t._locale || Fo(t._l), e === null || n === void 0 && e === "" ? yg({ nullInput: !0 }) : (typeof e == "string" && (t._i = e = t._locale.preparse(e)), Ci(e) ? new Xc(Zv(e)) : (Kc(e) ? t._d = e : wi(n) ? iU(t) : n ? Jv(t) : aU(t), Wv(t) || (t._d = null), t));
}
function aU(t) {
  var e = t._i;
  cr(e) ? t._d = new Date(le.now()) : Kc(e) ? t._d = new Date(e.valueOf()) : typeof e == "string" ? eU(t) : wi(e) ? (t._a = X1(e.slice(0), function(n) {
    return parseInt(n, 10);
  }), Qv(t)) : Ca(e) ? oU(t) : Do(e) ? t._d = new Date(e) : le.createFromInputFallback(t);
}
function vI(t, e, n, r, i) {
  var o = {};
  return (e === !0 || e === !1) && (r = e, e = void 0), (n === !0 || n === !1) && (r = n, n = void 0), (Ca(t) && Fv(t) || wi(t) && t.length === 0) && (t = void 0), o._isAMomentObject = !0, o._useUTC = o._isUTC = i, o._l = n, o._i = t, o._f = e, o._strict = r, sU(o);
}
function Lt(t, e, n, r) {
  return vI(t, e, n, r, !1);
}
var lU = zr(
  "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
  function() {
    var t = Lt.apply(null, arguments);
    return this.isValid() && t.isValid() ? t < this ? this : t : yg();
  }
), uU = zr(
  "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
  function() {
    var t = Lt.apply(null, arguments);
    return this.isValid() && t.isValid() ? t > this ? this : t : yg();
  }
);
function SI(t, e) {
  var n, r;
  if (e.length === 1 && wi(e[0]) && (e = e[0]), !e.length)
    return Lt();
  for (n = e[0], r = 1; r < e.length; ++r)
    (!e[r].isValid() || e[r][t](n)) && (n = e[r]);
  return n;
}
function cU() {
  var t = [].slice.call(arguments, 0);
  return SI("isBefore", t);
}
function hU() {
  var t = [].slice.call(arguments, 0);
  return SI("isAfter", t);
}
var dU = function() {
  return Date.now ? Date.now() : +new Date();
}, hu = [
  "year",
  "quarter",
  "month",
  "week",
  "day",
  "hour",
  "minute",
  "second",
  "millisecond"
];
function fU(t) {
  var e, n = !1, r, i = hu.length;
  for (e in t)
    if (wt(t, e) && !(sn.call(hu, e) !== -1 && (t[e] == null || !isNaN(t[e]))))
      return !1;
  for (r = 0; r < i; ++r)
    if (t[hu[r]]) {
      if (n)
        return !1;
      parseFloat(t[hu[r]]) !== lt(t[hu[r]]) && (n = !0);
    }
  return !0;
}
function gU() {
  return this._isValid;
}
function mU() {
  return Si(NaN);
}
function Ig(t) {
  var e = Yv(t), n = e.year || 0, r = e.quarter || 0, i = e.month || 0, o = e.week || e.isoWeek || 0, s = e.day || 0, a = e.hour || 0, l = e.minute || 0, u = e.second || 0, c = e.millisecond || 0;
  this._isValid = fU(e), this._milliseconds = +c + u * 1e3 + // 1000
  l * 6e4 + // 1000 * 60
  a * 1e3 * 60 * 60, this._days = +s + o * 7, this._months = +i + r * 3 + n * 12, this._data = {}, this._locale = Fo(), this._bubble();
}
function Kd(t) {
  return t instanceof Ig;
}
function yC(t) {
  return t < 0 ? Math.round(-1 * t) * -1 : Math.round(t);
}
function pU(t, e, n) {
  var r = Math.min(t.length, e.length), i = Math.abs(t.length - e.length), o = 0, s;
  for (s = 0; s < r; s++)
    (n && t[s] !== e[s] || !n && lt(t[s]) !== lt(e[s])) && o++;
  return o + i;
}
function yI(t, e) {
  Le(t, 0, 0, function() {
    var n = this.utcOffset(), r = "+";
    return n < 0 && (n = -n, r = "-"), r + Ki(~~(n / 60), 2) + e + Ki(~~n % 60, 2);
  });
}
yI("Z", ":");
yI("ZZ", "");
Me("Z", Mg);
Me("ZZ", Mg);
Tt(["Z", "ZZ"], function(t, e, n) {
  n._useUTC = !0, n._tzm = eS(Mg, t);
});
var wU = /([\+\-]|\d\d)/gi;
function eS(t, e) {
  var n = (e || "").match(t), r, i, o;
  return n === null ? null : (r = n[n.length - 1] || [], i = (r + "").match(wU) || ["-", 0, 0], o = +(i[1] * 60) + lt(i[2]), o === 0 ? 0 : i[0] === "+" ? o : -o);
}
function tS(t, e) {
  var n, r;
  return e._isUTC ? (n = e.clone(), r = (Ci(t) || Kc(t) ? t.valueOf() : Lt(t).valueOf()) - n.valueOf(), n._d.setTime(n._d.valueOf() + r), le.updateOffset(n, !1), n) : Lt(t).local();
}
function bC(t) {
  return -Math.round(t._d.getTimezoneOffset());
}
le.updateOffset = function() {
};
function CU(t, e, n) {
  var r = this._offset || 0, i;
  if (!this.isValid())
    return t != null ? this : NaN;
  if (t != null) {
    if (typeof t == "string") {
      if (t = eS(Mg, t), t === null)
        return this;
    } else
      Math.abs(t) < 16 && !n && (t = t * 60);
    return !this._isUTC && e && (i = bC(this)), this._offset = t, this._isUTC = !0, i != null && this.add(i, "m"), r !== t && (!e || this._changeInProgress ? EI(
      this,
      Si(t - r, "m"),
      1,
      !1
    ) : this._changeInProgress || (this._changeInProgress = !0, le.updateOffset(this, !0), this._changeInProgress = null)), this;
  } else
    return this._isUTC ? r : bC(this);
}
function vU(t, e) {
  return t != null ? (typeof t != "string" && (t = -t), this.utcOffset(t, e), this) : -this.utcOffset();
}
function SU(t) {
  return this.utcOffset(0, t);
}
function yU(t) {
  return this._isUTC && (this.utcOffset(0, t), this._isUTC = !1, t && this.subtract(bC(this), "m")), this;
}
function bU() {
  if (this._tzm != null)
    this.utcOffset(this._tzm, !1, !0);
  else if (typeof this._i == "string") {
    var t = eS(UV, this._i);
    t != null ? this.utcOffset(t) : this.utcOffset(0, !0);
  }
  return this;
}
function RU(t) {
  return this.isValid() ? (t = t ? Lt(t).utcOffset() : 0, (this.utcOffset() - t) % 60 === 0) : !1;
}
function EU() {
  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
}
function TU() {
  if (!cr(this._isDSTShifted))
    return this._isDSTShifted;
  var t = {}, e;
  return Vv(t, this), t = CI(t), t._a ? (e = t._isUTC ? Zi(t._a) : Lt(t._a), this._isDSTShifted = this.isValid() && pU(t._a, e.toArray()) > 0) : this._isDSTShifted = !1, this._isDSTShifted;
}
function _U() {
  return this.isValid() ? !this._isUTC : !1;
}
function MU() {
  return this.isValid() ? this._isUTC : !1;
}
function bI() {
  return this.isValid() ? this._isUTC && this._offset === 0 : !1;
}
var OU = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, AU = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
function Si(t, e) {
  var n = t, r = null, i, o, s;
  return Kd(t) ? n = {
    ms: t._milliseconds,
    d: t._days,
    M: t._months
  } : Do(t) || !isNaN(+t) ? (n = {}, e ? n[e] = +t : n.milliseconds = +t) : (r = OU.exec(t)) ? (i = r[1] === "-" ? -1 : 1, n = {
    y: 0,
    d: lt(r[Bi]) * i,
    h: lt(r[pn]) * i,
    m: lt(r[fi]) * i,
    s: lt(r[To]) * i,
    ms: lt(yC(r[da] * 1e3)) * i
    // the millisecond decimal point is included in the match
  }) : (r = AU.exec(t)) ? (i = r[1] === "-" ? -1 : 1, n = {
    y: Ds(r[2], i),
    M: Ds(r[3], i),
    w: Ds(r[4], i),
    d: Ds(r[5], i),
    h: Ds(r[6], i),
    m: Ds(r[7], i),
    s: Ds(r[8], i)
  }) : n == null ? n = {} : typeof n == "object" && ("from" in n || "to" in n) && (s = IU(
    Lt(n.from),
    Lt(n.to)
  ), n = {}, n.ms = s.milliseconds, n.M = s.months), o = new Ig(n), Kd(t) && wt(t, "_locale") && (o._locale = t._locale), Kd(t) && wt(t, "_isValid") && (o._isValid = t._isValid), o;
}
Si.fn = Ig.prototype;
Si.invalid = mU;
function Ds(t, e) {
  var n = t && parseFloat(t.replace(",", "."));
  return (isNaN(n) ? 0 : n) * e;
}
function h0(t, e) {
  var n = {};
  return n.months = e.month() - t.month() + (e.year() - t.year()) * 12, t.clone().add(n.months, "M").isAfter(e) && --n.months, n.milliseconds = +e - +t.clone().add(n.months, "M"), n;
}
function IU(t, e) {
  var n;
  return t.isValid() && e.isValid() ? (e = tS(e, t), t.isBefore(e) ? n = h0(t, e) : (n = h0(e, t), n.milliseconds = -n.milliseconds, n.months = -n.months), n) : { milliseconds: 0, months: 0 };
}
function RI(t, e) {
  return function(n, r) {
    var i, o;
    return r !== null && !isNaN(+r) && (Z1(
      e,
      "moment()." + e + "(period, number) is deprecated. Please use moment()." + e + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
    ), o = n, n = r, r = o), i = Si(n, r), EI(this, i, t), this;
  };
}
function EI(t, e, n, r) {
  var i = e._milliseconds, o = yC(e._days), s = yC(e._months);
  t.isValid() && (r = r ?? !0, s && aI(t, Rf(t, "Month") + s * n), o && eI(t, "Date", Rf(t, "Date") + o * n), i && t._d.setTime(t._d.valueOf() + i * n), r && le.updateOffset(t, o || s));
}
var PU = RI(1, "add"), xU = RI(-1, "subtract");
function TI(t) {
  return typeof t == "string" || t instanceof String;
}
function HU(t) {
  return Ci(t) || Kc(t) || TI(t) || Do(t) || NU(t) || DU(t) || t === null || t === void 0;
}
function DU(t) {
  var e = Ca(t) && !Fv(t), n = !1, r = [
    "years",
    "year",
    "y",
    "months",
    "month",
    "M",
    "days",
    "day",
    "d",
    "dates",
    "date",
    "D",
    "hours",
    "hour",
    "h",
    "minutes",
    "minute",
    "m",
    "seconds",
    "second",
    "s",
    "milliseconds",
    "millisecond",
    "ms"
  ], i, o, s = r.length;
  for (i = 0; i < s; i += 1)
    o = r[i], n = n || wt(t, o);
  return e && n;
}
function NU(t) {
  var e = wi(t), n = !1;
  return e && (n = t.filter(function(r) {
    return !Do(r) && TI(t);
  }).length === 0), e && n;
}
function LU(t) {
  var e = Ca(t) && !Fv(t), n = !1, r = [
    "sameDay",
    "nextDay",
    "lastDay",
    "nextWeek",
    "lastWeek",
    "sameElse"
  ], i, o;
  for (i = 0; i < r.length; i += 1)
    o = r[i], n = n || wt(t, o);
  return e && n;
}
function $U(t, e) {
  var n = t.diff(e, "days", !0);
  return n < -6 ? "sameElse" : n < -1 ? "lastWeek" : n < 0 ? "lastDay" : n < 1 ? "sameDay" : n < 2 ? "nextDay" : n < 7 ? "nextWeek" : "sameElse";
}
function kU(t, e) {
  arguments.length === 1 && (arguments[0] ? HU(arguments[0]) ? (t = arguments[0], e = void 0) : LU(arguments[0]) && (e = arguments[0], t = void 0) : (t = void 0, e = void 0));
  var n = t || Lt(), r = tS(n, this).startOf("day"), i = le.calendarFormat(this, r) || "sameElse", o = e && (Qi(e[i]) ? e[i].call(this, n) : e[i]);
  return this.format(
    o || this.localeData().calendar(i, this, Lt(n))
  );
}
function FU() {
  return new Xc(this);
}
function WU(t, e) {
  var n = Ci(t) ? t : Lt(t);
  return this.isValid() && n.isValid() ? (e = jr(e) || "millisecond", e === "millisecond" ? this.valueOf() > n.valueOf() : n.valueOf() < this.clone().startOf(e).valueOf()) : !1;
}
function VU(t, e) {
  var n = Ci(t) ? t : Lt(t);
  return this.isValid() && n.isValid() ? (e = jr(e) || "millisecond", e === "millisecond" ? this.valueOf() < n.valueOf() : this.clone().endOf(e).valueOf() < n.valueOf()) : !1;
}
function BU(t, e, n, r) {
  var i = Ci(t) ? t : Lt(t), o = Ci(e) ? e : Lt(e);
  return this.isValid() && i.isValid() && o.isValid() ? (r = r || "()", (r[0] === "(" ? this.isAfter(i, n) : !this.isBefore(i, n)) && (r[1] === ")" ? this.isBefore(o, n) : !this.isAfter(o, n))) : !1;
}
function UU(t, e) {
  var n = Ci(t) ? t : Lt(t), r;
  return this.isValid() && n.isValid() ? (e = jr(e) || "millisecond", e === "millisecond" ? this.valueOf() === n.valueOf() : (r = n.valueOf(), this.clone().startOf(e).valueOf() <= r && r <= this.clone().endOf(e).valueOf())) : !1;
}
function YU(t, e) {
  return this.isSame(t, e) || this.isAfter(t, e);
}
function GU(t, e) {
  return this.isSame(t, e) || this.isBefore(t, e);
}
function zU(t, e, n) {
  var r, i, o;
  if (!this.isValid())
    return NaN;
  if (r = tS(t, this), !r.isValid())
    return NaN;
  switch (i = (r.utcOffset() - this.utcOffset()) * 6e4, e = jr(e), e) {
    case "year":
      o = Xd(this, r) / 12;
      break;
    case "month":
      o = Xd(this, r);
      break;
    case "quarter":
      o = Xd(this, r) / 3;
      break;
    case "second":
      o = (this - r) / 1e3;
      break;
    case "minute":
      o = (this - r) / 6e4;
      break;
    case "hour":
      o = (this - r) / 36e5;
      break;
    case "day":
      o = (this - r - i) / 864e5;
      break;
    case "week":
      o = (this - r - i) / 6048e5;
      break;
    default:
      o = this - r;
  }
  return n ? o : Br(o);
}
function Xd(t, e) {
  if (t.date() < e.date())
    return -Xd(e, t);
  var n = (e.year() - t.year()) * 12 + (e.month() - t.month()), r = t.clone().add(n, "months"), i, o;
  return e - r < 0 ? (i = t.clone().add(n - 1, "months"), o = (e - r) / (r - i)) : (i = t.clone().add(n + 1, "months"), o = (e - r) / (i - r)), -(n + o) || 0;
}
le.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
le.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
function jU() {
  return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
}
function KU(t) {
  if (!this.isValid())
    return null;
  var e = t !== !0, n = e ? this.clone().utc() : this;
  return n.year() < 0 || n.year() > 9999 ? jd(
    n,
    e ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
  ) : Qi(Date.prototype.toISOString) ? e ? this.toDate().toISOString() : new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", jd(n, "Z")) : jd(
    n,
    e ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
  );
}
function XU() {
  if (!this.isValid())
    return "moment.invalid(/* " + this._i + " */)";
  var t = "moment", e = "", n, r, i, o;
  return this.isLocal() || (t = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone", e = "Z"), n = "[" + t + '("]', r = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY", i = "-MM-DD[T]HH:mm:ss.SSS", o = e + '[")]', this.format(n + r + i + o);
}
function qU(t) {
  t || (t = this.isUtc() ? le.defaultFormatUtc : le.defaultFormat);
  var e = jd(this, t);
  return this.localeData().postformat(e);
}
function ZU(t, e) {
  return this.isValid() && (Ci(t) && t.isValid() || Lt(t).isValid()) ? Si({ to: this, from: t }).locale(this.locale()).humanize(!e) : this.localeData().invalidDate();
}
function QU(t) {
  return this.from(Lt(), t);
}
function JU(t, e) {
  return this.isValid() && (Ci(t) && t.isValid() || Lt(t).isValid()) ? Si({ from: this, to: t }).locale(this.locale()).humanize(!e) : this.localeData().invalidDate();
}
function e2(t) {
  return this.to(Lt(), t);
}
function _I(t) {
  var e;
  return t === void 0 ? this._locale._abbr : (e = Fo(t), e != null && (this._locale = e), this);
}
var MI = zr(
  "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
  function(t) {
    return t === void 0 ? this.localeData() : this.locale(t);
  }
);
function OI() {
  return this._locale;
}
var _f = 1e3, Dl = 60 * _f, Mf = 60 * Dl, AI = (365 * 400 + 97) * 24 * Mf;
function Nl(t, e) {
  return (t % e + e) % e;
}
function II(t, e, n) {
  return t < 100 && t >= 0 ? new Date(t + 400, e, n) - AI : new Date(t, e, n).valueOf();
}
function PI(t, e, n) {
  return t < 100 && t >= 0 ? Date.UTC(t + 400, e, n) - AI : Date.UTC(t, e, n);
}
function t2(t) {
  var e, n;
  if (t = jr(t), t === void 0 || t === "millisecond" || !this.isValid())
    return this;
  switch (n = this._isUTC ? PI : II, t) {
    case "year":
      e = n(this.year(), 0, 1);
      break;
    case "quarter":
      e = n(
        this.year(),
        this.month() - this.month() % 3,
        1
      );
      break;
    case "month":
      e = n(this.year(), this.month(), 1);
      break;
    case "week":
      e = n(
        this.year(),
        this.month(),
        this.date() - this.weekday()
      );
      break;
    case "isoWeek":
      e = n(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1)
      );
      break;
    case "day":
    case "date":
      e = n(this.year(), this.month(), this.date());
      break;
    case "hour":
      e = this._d.valueOf(), e -= Nl(
        e + (this._isUTC ? 0 : this.utcOffset() * Dl),
        Mf
      );
      break;
    case "minute":
      e = this._d.valueOf(), e -= Nl(e, Dl);
      break;
    case "second":
      e = this._d.valueOf(), e -= Nl(e, _f);
      break;
  }
  return this._d.setTime(e), le.updateOffset(this, !0), this;
}
function n2(t) {
  var e, n;
  if (t = jr(t), t === void 0 || t === "millisecond" || !this.isValid())
    return this;
  switch (n = this._isUTC ? PI : II, t) {
    case "year":
      e = n(this.year() + 1, 0, 1) - 1;
      break;
    case "quarter":
      e = n(
        this.year(),
        this.month() - this.month() % 3 + 3,
        1
      ) - 1;
      break;
    case "month":
      e = n(this.year(), this.month() + 1, 1) - 1;
      break;
    case "week":
      e = n(
        this.year(),
        this.month(),
        this.date() - this.weekday() + 7
      ) - 1;
      break;
    case "isoWeek":
      e = n(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1) + 7
      ) - 1;
      break;
    case "day":
    case "date":
      e = n(this.year(), this.month(), this.date() + 1) - 1;
      break;
    case "hour":
      e = this._d.valueOf(), e += Mf - Nl(
        e + (this._isUTC ? 0 : this.utcOffset() * Dl),
        Mf
      ) - 1;
      break;
    case "minute":
      e = this._d.valueOf(), e += Dl - Nl(e, Dl) - 1;
      break;
    case "second":
      e = this._d.valueOf(), e += _f - Nl(e, _f) - 1;
      break;
  }
  return this._d.setTime(e), le.updateOffset(this, !0), this;
}
function r2() {
  return this._d.valueOf() - (this._offset || 0) * 6e4;
}
function i2() {
  return Math.floor(this.valueOf() / 1e3);
}
function o2() {
  return new Date(this.valueOf());
}
function s2() {
  var t = this;
  return [
    t.year(),
    t.month(),
    t.date(),
    t.hour(),
    t.minute(),
    t.second(),
    t.millisecond()
  ];
}
function a2() {
  var t = this;
  return {
    years: t.year(),
    months: t.month(),
    date: t.date(),
    hours: t.hours(),
    minutes: t.minutes(),
    seconds: t.seconds(),
    milliseconds: t.milliseconds()
  };
}
function l2() {
  return this.isValid() ? this.toISOString() : null;
}
function u2() {
  return Wv(this);
}
function c2() {
  return fs({}, Je(this));
}
function h2() {
  return Je(this).overflow;
}
function d2() {
  return {
    input: this._i,
    format: this._f,
    locale: this._locale,
    isUTC: this._isUTC,
    strict: this._strict
  };
}
Le("N", 0, 0, "eraAbbr");
Le("NN", 0, 0, "eraAbbr");
Le("NNN", 0, 0, "eraAbbr");
Le("NNNN", 0, 0, "eraName");
Le("NNNNN", 0, 0, "eraNarrow");
Le("y", ["y", 1], "yo", "eraYear");
Le("y", ["yy", 2], 0, "eraYear");
Le("y", ["yyy", 3], 0, "eraYear");
Le("y", ["yyyy", 4], 0, "eraYear");
Me("N", nS);
Me("NN", nS);
Me("NNN", nS);
Me("NNNN", R2);
Me("NNNNN", E2);
Tt(
  ["N", "NN", "NNN", "NNNN", "NNNNN"],
  function(t, e, n, r) {
    var i = n._locale.erasParse(t, r, n._strict);
    i ? Je(n).era = i : Je(n).invalidEra = t;
  }
);
Me("y", jl);
Me("yy", jl);
Me("yyy", jl);
Me("yyyy", jl);
Me("yo", T2);
Tt(["y", "yy", "yyy", "yyyy"], kn);
Tt(["yo"], function(t, e, n, r) {
  var i;
  n._locale._eraYearOrdinalRegex && (i = t.match(n._locale._eraYearOrdinalRegex)), n._locale.eraYearOrdinalParse ? e[kn] = n._locale.eraYearOrdinalParse(t, i) : e[kn] = parseInt(t, 10);
});
function f2(t, e) {
  var n, r, i, o = this._eras || Fo("en")._eras;
  for (n = 0, r = o.length; n < r; ++n) {
    switch (typeof o[n].since) {
      case "string":
        i = le(o[n].since).startOf("day"), o[n].since = i.valueOf();
        break;
    }
    switch (typeof o[n].until) {
      case "undefined":
        o[n].until = 1 / 0;
        break;
      case "string":
        i = le(o[n].until).startOf("day").valueOf(), o[n].until = i.valueOf();
        break;
    }
  }
  return o;
}
function g2(t, e, n) {
  var r, i, o = this.eras(), s, a, l;
  for (t = t.toUpperCase(), r = 0, i = o.length; r < i; ++r)
    if (s = o[r].name.toUpperCase(), a = o[r].abbr.toUpperCase(), l = o[r].narrow.toUpperCase(), n)
      switch (e) {
        case "N":
        case "NN":
        case "NNN":
          if (a === t)
            return o[r];
          break;
        case "NNNN":
          if (s === t)
            return o[r];
          break;
        case "NNNNN":
          if (l === t)
            return o[r];
          break;
      }
    else if ([s, a, l].indexOf(t) >= 0)
      return o[r];
}
function m2(t, e) {
  var n = t.since <= t.until ? 1 : -1;
  return e === void 0 ? le(t.since).year() : le(t.since).year() + (e - t.offset) * n;
}
function p2() {
  var t, e, n, r = this.localeData().eras();
  for (t = 0, e = r.length; t < e; ++t)
    if (n = this.clone().startOf("day").valueOf(), r[t].since <= n && n <= r[t].until || r[t].until <= n && n <= r[t].since)
      return r[t].name;
  return "";
}
function w2() {
  var t, e, n, r = this.localeData().eras();
  for (t = 0, e = r.length; t < e; ++t)
    if (n = this.clone().startOf("day").valueOf(), r[t].since <= n && n <= r[t].until || r[t].until <= n && n <= r[t].since)
      return r[t].narrow;
  return "";
}
function C2() {
  var t, e, n, r = this.localeData().eras();
  for (t = 0, e = r.length; t < e; ++t)
    if (n = this.clone().startOf("day").valueOf(), r[t].since <= n && n <= r[t].until || r[t].until <= n && n <= r[t].since)
      return r[t].abbr;
  return "";
}
function v2() {
  var t, e, n, r, i = this.localeData().eras();
  for (t = 0, e = i.length; t < e; ++t)
    if (n = i[t].since <= i[t].until ? 1 : -1, r = this.clone().startOf("day").valueOf(), i[t].since <= r && r <= i[t].until || i[t].until <= r && r <= i[t].since)
      return (this.year() - le(i[t].since).year()) * n + i[t].offset;
  return this.year();
}
function S2(t) {
  return wt(this, "_erasNameRegex") || rS.call(this), t ? this._erasNameRegex : this._erasRegex;
}
function y2(t) {
  return wt(this, "_erasAbbrRegex") || rS.call(this), t ? this._erasAbbrRegex : this._erasRegex;
}
function b2(t) {
  return wt(this, "_erasNarrowRegex") || rS.call(this), t ? this._erasNarrowRegex : this._erasRegex;
}
function nS(t, e) {
  return e.erasAbbrRegex(t);
}
function R2(t, e) {
  return e.erasNameRegex(t);
}
function E2(t, e) {
  return e.erasNarrowRegex(t);
}
function T2(t, e) {
  return e._eraYearOrdinalRegex || jl;
}
function rS() {
  var t = [], e = [], n = [], r = [], i, o, s = this.eras();
  for (i = 0, o = s.length; i < o; ++i)
    e.push(Rr(s[i].name)), t.push(Rr(s[i].abbr)), n.push(Rr(s[i].narrow)), r.push(Rr(s[i].name)), r.push(Rr(s[i].abbr)), r.push(Rr(s[i].narrow));
  this._erasRegex = new RegExp("^(" + r.join("|") + ")", "i"), this._erasNameRegex = new RegExp("^(" + e.join("|") + ")", "i"), this._erasAbbrRegex = new RegExp("^(" + t.join("|") + ")", "i"), this._erasNarrowRegex = new RegExp(
    "^(" + n.join("|") + ")",
    "i"
  );
}
Le(0, ["gg", 2], 0, function() {
  return this.weekYear() % 100;
});
Le(0, ["GG", 2], 0, function() {
  return this.isoWeekYear() % 100;
});
function Pg(t, e) {
  Le(0, [t, t.length], 0, e);
}
Pg("gggg", "weekYear");
Pg("ggggg", "weekYear");
Pg("GGGG", "isoWeekYear");
Pg("GGGGG", "isoWeekYear");
Bn("weekYear", "gg");
Bn("isoWeekYear", "GG");
Un("weekYear", 1);
Un("isoWeekYear", 1);
Me("G", _g);
Me("g", _g);
Me("GG", $t, Mr);
Me("gg", $t, Mr);
Me("GGGG", zv, Gv);
Me("gggg", zv, Gv);
Me("GGGGG", Tg, Rg);
Me("ggggg", Tg, Rg);
Zc(
  ["gggg", "ggggg", "GGGG", "GGGGG"],
  function(t, e, n, r) {
    e[r.substr(0, 2)] = lt(t);
  }
);
Zc(["gg", "GG"], function(t, e, n, r) {
  e[r] = le.parseTwoDigitYear(t);
});
function _2(t) {
  return xI.call(
    this,
    t,
    this.week(),
    this.weekday(),
    this.localeData()._week.dow,
    this.localeData()._week.doy
  );
}
function M2(t) {
  return xI.call(
    this,
    t,
    this.isoWeek(),
    this.isoWeekday(),
    1,
    4
  );
}
function O2() {
  return Ho(this.year(), 1, 4);
}
function A2() {
  return Ho(this.isoWeekYear(), 1, 4);
}
function I2() {
  var t = this.localeData()._week;
  return Ho(this.year(), t.dow, t.doy);
}
function P2() {
  var t = this.localeData()._week;
  return Ho(this.weekYear(), t.dow, t.doy);
}
function xI(t, e, n, r, i) {
  var o;
  return t == null ? Oc(this, r, i).year : (o = Ho(t, r, i), e > o && (e = o), x2.call(this, t, e, n, r, i));
}
function x2(t, e, n, r, i) {
  var o = hI(t, e, n, r, i), s = Mc(o.year, 0, o.dayOfYear);
  return this.year(s.getUTCFullYear()), this.month(s.getUTCMonth()), this.date(s.getUTCDate()), this;
}
Le("Q", 0, "Qo", "quarter");
Bn("quarter", "Q");
Un("quarter", 7);
Me("Q", tI);
Tt("Q", function(t, e) {
  e[Eo] = (lt(t) - 1) * 3;
});
function H2(t) {
  return t == null ? Math.ceil((this.month() + 1) / 3) : this.month((t - 1) * 3 + this.month() % 3);
}
Le("D", ["DD", 2], "Do", "date");
Bn("date", "D");
Un("date", 9);
Me("D", $t);
Me("DD", $t, Mr);
Me("Do", function(t, e) {
  return t ? e._dayOfMonthOrdinalParse || e._ordinalParse : e._dayOfMonthOrdinalParseLenient;
});
Tt(["D", "DD"], Bi);
Tt("Do", function(t, e) {
  e[Bi] = lt(t.match($t)[0]);
});
var HI = zl("Date", !0);
Le("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
Bn("dayOfYear", "DDD");
Un("dayOfYear", 4);
Me("DDD", Eg);
Me("DDDD", nI);
Tt(["DDD", "DDDD"], function(t, e, n) {
  n._dayOfYear = lt(t);
});
function D2(t) {
  var e = Math.round(
    (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
  ) + 1;
  return t == null ? e : this.add(t - e, "d");
}
Le("m", ["mm", 2], 0, "minute");
Bn("minute", "m");
Un("minute", 14);
Me("m", $t);
Me("mm", $t, Mr);
Tt(["m", "mm"], fi);
var N2 = zl("Minutes", !1);
Le("s", ["ss", 2], 0, "second");
Bn("second", "s");
Un("second", 15);
Me("s", $t);
Me("ss", $t, Mr);
Tt(["s", "ss"], To);
var L2 = zl("Seconds", !1);
Le("S", 0, 0, function() {
  return ~~(this.millisecond() / 100);
});
Le(0, ["SS", 2], 0, function() {
  return ~~(this.millisecond() / 10);
});
Le(0, ["SSS", 3], 0, "millisecond");
Le(0, ["SSSS", 4], 0, function() {
  return this.millisecond() * 10;
});
Le(0, ["SSSSS", 5], 0, function() {
  return this.millisecond() * 100;
});
Le(0, ["SSSSSS", 6], 0, function() {
  return this.millisecond() * 1e3;
});
Le(0, ["SSSSSSS", 7], 0, function() {
  return this.millisecond() * 1e4;
});
Le(0, ["SSSSSSSS", 8], 0, function() {
  return this.millisecond() * 1e5;
});
Le(0, ["SSSSSSSSS", 9], 0, function() {
  return this.millisecond() * 1e6;
});
Bn("millisecond", "ms");
Un("millisecond", 16);
Me("S", Eg, tI);
Me("SS", Eg, Mr);
Me("SSS", Eg, nI);
var gs, DI;
for (gs = "SSSS"; gs.length <= 9; gs += "S")
  Me(gs, jl);
function $2(t, e) {
  e[da] = lt(("0." + t) * 1e3);
}
for (gs = "S"; gs.length <= 9; gs += "S")
  Tt(gs, $2);
DI = zl("Milliseconds", !1);
Le("z", 0, 0, "zoneAbbr");
Le("zz", 0, 0, "zoneName");
function k2() {
  return this._isUTC ? "UTC" : "";
}
function F2() {
  return this._isUTC ? "Coordinated Universal Time" : "";
}
var he = Xc.prototype;
he.add = PU;
he.calendar = kU;
he.clone = FU;
he.diff = zU;
he.endOf = n2;
he.format = qU;
he.from = ZU;
he.fromNow = QU;
he.to = JU;
he.toNow = e2;
he.get = VV;
he.invalidAt = h2;
he.isAfter = WU;
he.isBefore = VU;
he.isBetween = BU;
he.isSame = UU;
he.isSameOrAfter = YU;
he.isSameOrBefore = GU;
he.isValid = u2;
he.lang = MI;
he.locale = _I;
he.localeData = OI;
he.max = uU;
he.min = lU;
he.parsingFlags = c2;
he.set = BV;
he.startOf = t2;
he.subtract = xU;
he.toArray = s2;
he.toObject = a2;
he.toDate = o2;
he.toISOString = KU;
he.inspect = XU;
typeof Symbol < "u" && Symbol.for != null && (he[Symbol.for("nodejs.util.inspect.custom")] = function() {
  return "Moment<" + this.format() + ">";
});
he.toJSON = l2;
he.toString = jU;
he.unix = i2;
he.valueOf = r2;
he.creationData = d2;
he.eraName = p2;
he.eraNarrow = w2;
he.eraAbbr = C2;
he.eraYear = v2;
he.year = cI;
he.isLeapYear = aB;
he.weekYear = _2;
he.isoWeekYear = M2;
he.quarter = he.quarters = H2;
he.month = lI;
he.daysInMonth = iB;
he.week = he.weeks = fB;
he.isoWeek = he.isoWeeks = gB;
he.weeksInYear = I2;
he.weeksInWeekYear = P2;
he.isoWeeksInYear = O2;
he.isoWeeksInISOWeekYear = A2;
he.date = HI;
he.day = he.days = MB;
he.weekday = OB;
he.isoWeekday = AB;
he.dayOfYear = D2;
he.hour = he.hours = LB;
he.minute = he.minutes = N2;
he.second = he.seconds = L2;
he.millisecond = he.milliseconds = DI;
he.utcOffset = CU;
he.utc = SU;
he.local = yU;
he.parseZone = bU;
he.hasAlignedHourOffset = RU;
he.isDST = EU;
he.isLocal = _U;
he.isUtcOffset = MU;
he.isUtc = bI;
he.isUTC = bI;
he.zoneAbbr = k2;
he.zoneName = F2;
he.dates = zr(
  "dates accessor is deprecated. Use date instead.",
  HI
);
he.months = zr(
  "months accessor is deprecated. Use month instead",
  lI
);
he.years = zr(
  "years accessor is deprecated. Use year instead",
  cI
);
he.zone = zr(
  "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
  vU
);
he.isDSTShifted = zr(
  "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
  TU
);
function W2(t) {
  return Lt(t * 1e3);
}
function V2() {
  return Lt.apply(null, arguments).parseZone();
}
function NI(t) {
  return t;
}
var Ct = Bv.prototype;
Ct.calendar = MV;
Ct.longDateFormat = PV;
Ct.invalidDate = HV;
Ct.ordinal = LV;
Ct.preparse = NI;
Ct.postformat = NI;
Ct.relativeTime = kV;
Ct.pastFuture = FV;
Ct.set = TV;
Ct.eras = f2;
Ct.erasParse = g2;
Ct.erasConvertYear = m2;
Ct.erasAbbrRegex = y2;
Ct.erasNameRegex = S2;
Ct.erasNarrowRegex = b2;
Ct.months = eB;
Ct.monthsShort = tB;
Ct.monthsParse = rB;
Ct.monthsRegex = sB;
Ct.monthsShortRegex = oB;
Ct.week = uB;
Ct.firstDayOfYear = dB;
Ct.firstDayOfWeek = hB;
Ct.weekdays = bB;
Ct.weekdaysMin = EB;
Ct.weekdaysShort = RB;
Ct.weekdaysParse = _B;
Ct.weekdaysRegex = IB;
Ct.weekdaysShortRegex = PB;
Ct.weekdaysMinRegex = xB;
Ct.isPM = DB;
Ct.meridiem = $B;
function Of(t, e, n, r) {
  var i = Fo(), o = Zi().set(r, e);
  return i[n](o, t);
}
function LI(t, e, n) {
  if (Do(t) && (e = t, t = void 0), t = t || "", e != null)
    return Of(t, e, n, "month");
  var r, i = [];
  for (r = 0; r < 12; r++)
    i[r] = Of(t, r, n, "month");
  return i;
}
function iS(t, e, n, r) {
  typeof t == "boolean" ? (Do(e) && (n = e, e = void 0), e = e || "") : (e = t, n = e, t = !1, Do(e) && (n = e, e = void 0), e = e || "");
  var i = Fo(), o = t ? i._week.dow : 0, s, a = [];
  if (n != null)
    return Of(e, (n + o) % 7, r, "day");
  for (s = 0; s < 7; s++)
    a[s] = Of(e, (s + o) % 7, r, "day");
  return a;
}
function B2(t, e) {
  return LI(t, e, "months");
}
function U2(t, e) {
  return LI(t, e, "monthsShort");
}
function Y2(t, e, n) {
  return iS(t, e, n, "weekdays");
}
function G2(t, e, n) {
  return iS(t, e, n, "weekdaysShort");
}
function z2(t, e, n) {
  return iS(t, e, n, "weekdaysMin");
}
Cs("en", {
  eras: [
    {
      since: "0001-01-01",
      until: 1 / 0,
      offset: 1,
      name: "Anno Domini",
      narrow: "AD",
      abbr: "AD"
    },
    {
      since: "0000-12-31",
      until: -1 / 0,
      offset: 1,
      name: "Before Christ",
      narrow: "BC",
      abbr: "BC"
    }
  ],
  dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
  ordinal: function(t) {
    var e = t % 10, n = lt(t % 100 / 10) === 1 ? "th" : e === 1 ? "st" : e === 2 ? "nd" : e === 3 ? "rd" : "th";
    return t + n;
  }
});
le.lang = zr(
  "moment.lang is deprecated. Use moment.locale instead.",
  Cs
);
le.langData = zr(
  "moment.langData is deprecated. Use moment.localeData instead.",
  Fo
);
var to = Math.abs;
function j2() {
  var t = this._data;
  return this._milliseconds = to(this._milliseconds), this._days = to(this._days), this._months = to(this._months), t.milliseconds = to(t.milliseconds), t.seconds = to(t.seconds), t.minutes = to(t.minutes), t.hours = to(t.hours), t.months = to(t.months), t.years = to(t.years), this;
}
function $I(t, e, n, r) {
  var i = Si(e, n);
  return t._milliseconds += r * i._milliseconds, t._days += r * i._days, t._months += r * i._months, t._bubble();
}
function K2(t, e) {
  return $I(this, t, e, 1);
}
function X2(t, e) {
  return $I(this, t, e, -1);
}
function d0(t) {
  return t < 0 ? Math.floor(t) : Math.ceil(t);
}
function q2() {
  var t = this._milliseconds, e = this._days, n = this._months, r = this._data, i, o, s, a, l;
  return t >= 0 && e >= 0 && n >= 0 || t <= 0 && e <= 0 && n <= 0 || (t += d0(RC(n) + e) * 864e5, e = 0, n = 0), r.milliseconds = t % 1e3, i = Br(t / 1e3), r.seconds = i % 60, o = Br(i / 60), r.minutes = o % 60, s = Br(o / 60), r.hours = s % 24, e += Br(s / 24), l = Br(kI(e)), n += l, e -= d0(RC(l)), a = Br(n / 12), n %= 12, r.days = e, r.months = n, r.years = a, this;
}
function kI(t) {
  return t * 4800 / 146097;
}
function RC(t) {
  return t * 146097 / 4800;
}
function Z2(t) {
  if (!this.isValid())
    return NaN;
  var e, n, r = this._milliseconds;
  if (t = jr(t), t === "month" || t === "quarter" || t === "year")
    switch (e = this._days + r / 864e5, n = this._months + kI(e), t) {
      case "month":
        return n;
      case "quarter":
        return n / 3;
      case "year":
        return n / 12;
    }
  else
    switch (e = this._days + Math.round(RC(this._months)), t) {
      case "week":
        return e / 7 + r / 6048e5;
      case "day":
        return e + r / 864e5;
      case "hour":
        return e * 24 + r / 36e5;
      case "minute":
        return e * 1440 + r / 6e4;
      case "second":
        return e * 86400 + r / 1e3;
      case "millisecond":
        return Math.floor(e * 864e5) + r;
      default:
        throw new Error("Unknown unit " + t);
    }
}
function Q2() {
  return this.isValid() ? this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + lt(this._months / 12) * 31536e6 : NaN;
}
function Wo(t) {
  return function() {
    return this.as(t);
  };
}
var J2 = Wo("ms"), eY = Wo("s"), tY = Wo("m"), nY = Wo("h"), rY = Wo("d"), iY = Wo("w"), oY = Wo("M"), sY = Wo("Q"), aY = Wo("y");
function lY() {
  return Si(this);
}
function uY(t) {
  return t = jr(t), this.isValid() ? this[t + "s"]() : NaN;
}
function Aa(t) {
  return function() {
    return this.isValid() ? this._data[t] : NaN;
  };
}
var cY = Aa("milliseconds"), hY = Aa("seconds"), dY = Aa("minutes"), fY = Aa("hours"), gY = Aa("days"), mY = Aa("months"), pY = Aa("years");
function wY() {
  return Br(this.days() / 7);
}
var vo = Math.round, Ol = {
  ss: 44,
  // a few seconds to seconds
  s: 45,
  // seconds to minute
  m: 45,
  // minutes to hour
  h: 22,
  // hours to day
  d: 26,
  // days to month/week
  w: null,
  // weeks to month
  M: 11
  // months to year
};
function CY(t, e, n, r, i) {
  return i.relativeTime(e || 1, !!n, t, r);
}
function vY(t, e, n, r) {
  var i = Si(t).abs(), o = vo(i.as("s")), s = vo(i.as("m")), a = vo(i.as("h")), l = vo(i.as("d")), u = vo(i.as("M")), c = vo(i.as("w")), d = vo(i.as("y")), g = o <= n.ss && ["s", o] || o < n.s && ["ss", o] || s <= 1 && ["m"] || s < n.m && ["mm", s] || a <= 1 && ["h"] || a < n.h && ["hh", a] || l <= 1 && ["d"] || l < n.d && ["dd", l];
  return n.w != null && (g = g || c <= 1 && ["w"] || c < n.w && ["ww", c]), g = g || u <= 1 && ["M"] || u < n.M && ["MM", u] || d <= 1 && ["y"] || ["yy", d], g[2] = e, g[3] = +t > 0, g[4] = r, CY.apply(null, g);
}
function SY(t) {
  return t === void 0 ? vo : typeof t == "function" ? (vo = t, !0) : !1;
}
function yY(t, e) {
  return Ol[t] === void 0 ? !1 : e === void 0 ? Ol[t] : (Ol[t] = e, t === "s" && (Ol.ss = e - 1), !0);
}
function bY(t, e) {
  if (!this.isValid())
    return this.localeData().invalidDate();
  var n = !1, r = Ol, i, o;
  return typeof t == "object" && (e = t, t = !1), typeof t == "boolean" && (n = t), typeof e == "object" && (r = Object.assign({}, Ol, e), e.s != null && e.ss == null && (r.ss = e.s - 1)), i = this.localeData(), o = vY(this, !n, r, i), n && (o = i.pastFuture(+this, o)), i.postformat(o);
}
var zm = Math.abs;
function La(t) {
  return (t > 0) - (t < 0) || +t;
}
function xg() {
  if (!this.isValid())
    return this.localeData().invalidDate();
  var t = zm(this._milliseconds) / 1e3, e = zm(this._days), n = zm(this._months), r, i, o, s, a = this.asSeconds(), l, u, c, d;
  return a ? (r = Br(t / 60), i = Br(r / 60), t %= 60, r %= 60, o = Br(n / 12), n %= 12, s = t ? t.toFixed(3).replace(/\.?0+$/, "") : "", l = a < 0 ? "-" : "", u = La(this._months) !== La(a) ? "-" : "", c = La(this._days) !== La(a) ? "-" : "", d = La(this._milliseconds) !== La(a) ? "-" : "", l + "P" + (o ? u + o + "Y" : "") + (n ? u + n + "M" : "") + (e ? c + e + "D" : "") + (i || r || t ? "T" : "") + (i ? d + i + "H" : "") + (r ? d + r + "M" : "") + (t ? d + s + "S" : "")) : "P0D";
}
var ft = Ig.prototype;
ft.isValid = gU;
ft.abs = j2;
ft.add = K2;
ft.subtract = X2;
ft.as = Z2;
ft.asMilliseconds = J2;
ft.asSeconds = eY;
ft.asMinutes = tY;
ft.asHours = nY;
ft.asDays = rY;
ft.asWeeks = iY;
ft.asMonths = oY;
ft.asQuarters = sY;
ft.asYears = aY;
ft.valueOf = Q2;
ft._bubble = q2;
ft.clone = lY;
ft.get = uY;
ft.milliseconds = cY;
ft.seconds = hY;
ft.minutes = dY;
ft.hours = fY;
ft.days = gY;
ft.weeks = wY;
ft.months = mY;
ft.years = pY;
ft.humanize = bY;
ft.toISOString = xg;
ft.toString = xg;
ft.toJSON = xg;
ft.locale = _I;
ft.localeData = OI;
ft.toIsoString = zr(
  "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
  xg
);
ft.lang = MI;
Le("X", 0, 0, "unix");
Le("x", 0, 0, "valueOf");
Me("x", _g);
Me("X", YV);
Tt("X", function(t, e, n) {
  n._d = new Date(parseFloat(t) * 1e3);
});
Tt("x", function(t, e, n) {
  n._d = new Date(lt(t));
});
//! moment.js
le.version = "2.29.4";
RV(Lt);
le.fn = he;
le.min = cU;
le.max = hU;
le.now = dU;
le.utc = Zi;
le.unix = W2;
le.months = B2;
le.isDate = Kc;
le.locale = Cs;
le.invalid = yg;
le.duration = Si;
le.isMoment = Ci;
le.weekdays = Y2;
le.parseZone = V2;
le.localeData = Fo;
le.isDuration = Kd;
le.monthsShort = U2;
le.weekdaysMin = z2;
le.defineLocale = qv;
le.updateLocale = VB;
le.locales = BB;
le.weekdaysShort = G2;
le.normalizeUnits = jr;
le.relativeTimeRounding = SY;
le.relativeTimeThreshold = yY;
le.calendarFormat = $U;
le.prototype = he;
le.HTML5_FMT = {
  DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
  // <input type="datetime-local" />
  DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
  // <input type="datetime-local" step="1" />
  DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
  // <input type="datetime-local" step="0.001" />
  DATE: "YYYY-MM-DD",
  // <input type="date" />
  TIME: "HH:mm",
  // <input type="time" />
  TIME_SECONDS: "HH:mm:ss",
  // <input type="time" step="1" />
  TIME_MS: "HH:mm:ss.SSS",
  // <input type="time" step="0.001" />
  WEEK: "GGGG-[W]WW",
  // <input type="week" />
  MONTH: "YYYY-MM"
  // <input type="month" />
};
const RY = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: le
}, Symbol.toStringTag, { value: "Module" }));
function FI(t) {
  const e = t.length;
  let n = 0;
  for (; n < e; )
    t[n] = [t[n]], n += 1;
}
function EC(t, e) {
  const n = e.length;
  let r = 0;
  for (; r < n; )
    t.push(e[r]), r += 1;
}
function sc(t) {
  const e = [];
  if (!t || t.length === 0 || !t[0] || t[0].length === 0)
    return e;
  const n = t.length, r = t[0].length;
  for (let i = 0; i < n; i++)
    for (let o = 0; o < r; o++)
      e[o] || (e[o] = []), e[o][i] = t[i][o];
  return e;
}
function nn(t, e, n, r) {
  let i = -1, o = t, s = n;
  Array.isArray(t) || (o = Array.from(t));
  const a = o.length;
  for (r && a && (i += 1, s = o[i]), i += 1; i < a; )
    s = e(s, o[i], i, o), i += 1;
  return s;
}
function Tr(t, e) {
  let n = 0, r = t;
  Array.isArray(t) || (r = Array.from(t));
  const i = r.length, o = [];
  let s = -1;
  for (; n < i; ) {
    const a = r[n];
    e(a, n, r) && (s += 1, o[s] = a), n += 1;
  }
  return o;
}
function qe(t, e) {
  let n = 0, r = t;
  Array.isArray(t) || (r = Array.from(t));
  const i = r.length, o = [];
  let s = -1;
  for (; n < i; ) {
    const a = r[n];
    s += 1, o[s] = e(a, n, r), n += 1;
  }
  return o;
}
function H(t, e) {
  let n = 0, r = t;
  Array.isArray(t) || (r = Array.from(t));
  const i = r.length;
  for (; n < i && e(r[n], n, r) !== !1; )
    n += 1;
  return t;
}
function WI(t) {
  return nn(t, (e, n) => e + n, 0);
}
function EY(t) {
  return nn(t, (e, n) => e > n ? e : n, Array.isArray(t) ? t[0] : void 0);
}
function TY(t) {
  return nn(t, (e, n) => e < n ? e : n, Array.isArray(t) ? t[0] : void 0);
}
function _Y(t) {
  return t.length ? WI(t) / t.length : 0;
}
function VI(t) {
  return nn(t, (e, n) => e.concat(Array.isArray(n) ? VI(n) : n), []);
}
function oS(t) {
  const e = [];
  return H(t, (n) => {
    e.indexOf(n) === -1 && e.push(n);
  }), e;
}
function TC() {
  for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
    e[n] = arguments[n];
  const [r, ...i] = [...e];
  let o = r;
  return H(i, (s) => {
    o = o.filter((a) => !s.includes(a));
  }), o;
}
function MY() {
  for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
    e[n] = arguments[n];
  const [r, ...i] = [...e];
  let o = r;
  return H(i, (s) => {
    o = o.filter((a) => s.includes(a));
  }), o;
}
function OY() {
  for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
    e[n] = arguments[n];
  const [r, ...i] = [...e], o = new Set(r);
  return H(i, (s) => {
    H(s, (a) => {
      o.has(a) || o.add(a);
    });
  }), Array.from(o);
}
function _C(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : " ";
  return t.split(e);
}
const AY = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  arrayAvg: _Y,
  arrayEach: H,
  arrayFilter: Tr,
  arrayFlatten: VI,
  arrayMap: qe,
  arrayMax: EY,
  arrayMin: TY,
  arrayReduce: nn,
  arraySum: WI,
  arrayUnique: oS,
  extendArray: EC,
  getDifferenceOfArrays: TC,
  getIntersectionOfArrays: MY,
  getUnionOfArrays: OY,
  pivot: sc,
  stringToArray: _C,
  to2dArray: FI
}, Symbol.toStringTag, { value: "Module" }));
function bt(t) {
  for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++)
    n[r - 1] = arguments[r];
  return nn(t, (o, s, a) => {
    const l = s.replace(/\r?\n\s*/g, ""), u = n[a] ? n[a] : "";
    return o + l + u;
  }, "").trim();
}
function Zt(t) {
  let e;
  switch (typeof t) {
    case "string":
    case "number":
      e = `${t}`;
      break;
    case "object":
      e = t === null ? "" : t.toString();
      break;
    case "undefined":
      e = "";
      break;
    default:
      e = t.toString();
      break;
  }
  return e;
}
function Re(t) {
  return typeof t < "u";
}
function It(t) {
  return typeof t > "u";
}
function gn(t) {
  return t === null || t === "" || It(t);
}
function BI(t) {
  return Object.prototype.toString.call(t) === "[object RegExp]";
}
const Zu = "length", ac = (t) => parseInt(t, 16), f0 = (t) => parseInt(t, 10), Af = (t, e, n) => t.substr(e, n), lc = (t) => t.codePointAt(0) - 65, MC = (t) => `${t}`.replace(/\-/g, ""), IY = (t) => ac(Af(MC(t), ac("12"), lc("F"))) / (ac(Af(MC(t), lc("B"), ~~![][Zu])) || 9), PY = () => typeof location < "u" && /^([a-z0-9\-]+\.)?\x68\x61\x6E\x64\x73\x6F\x6E\x74\x61\x62\x6C\x65\x2E\x63\x6F\x6D$/i.test(location.host);
let g0 = !1;
const m0 = {
  invalid: () => bt`
    The license key for Handsontable is invalid.\x20
    If you need any help, contact us at support@handsontable.com.`,
  expired: (t) => {
    let {
      keyValidityDate: e,
      hotVersion: n
    } = t;
    return bt`
    The license key for Handsontable expired on ${e}, and is not valid for the installed\x20
    version ${n}. Renew your license key at handsontable.com or downgrade to a version released prior\x20
    to ${e}. If you need any help, contact us at sales@handsontable.com.`;
  },
  missing: () => bt`
    The license key for Handsontable is missing. Use your purchased key to activate the product.\x20
    Alternatively, you can activate Handsontable to use for non-commercial purposes by\x20
    passing the key: 'non-commercial-and-evaluation'. If you need any help, contact\x20
    us at support@handsontable.com.`,
  non_commercial: () => ""
}, p0 = {
  invalid: () => bt`
    The license key for Handsontable is invalid.\x20
    <a href="https://handsontable.com/docs/tutorial-license-key.html" target="_blank">Read more</a> on how to\x20
    install it properly or contact us at <a href="mailto:support@handsontable.com">support@handsontable.com</a>.`,
  expired: (t) => {
    let {
      keyValidityDate: e,
      hotVersion: n
    } = t;
    return bt`
    The license key for Handsontable expired on ${e}, and is not valid for the installed\x20
    version ${n}. <a href="https://handsontable.com/pricing" target="_blank">Renew</a> your\x20
    license key or downgrade to a version released prior to ${e}. If you need any\x20
    help, contact us at <a href="mailto:sales@handsontable.com">sales@handsontable.com</a>.`;
  },
  missing: () => bt`
    The license key for Handsontable is missing. Use your purchased key to activate the product.\x20
    Alternatively, you can activate Handsontable to use for non-commercial purposes by\x20
    passing the key: 'non-commercial-and-evaluation'.\x20
    <a href="https://handsontable.com/docs/tutorial-license-key.html" target="_blank">Read more</a> about it in\x20
    the documentation or contact us at <a href="mailto:support@handsontable.com">support@handsontable.com</a>.`,
  non_commercial: () => ""
};
function UI(t, e) {
  const n = !gn(t), r = typeof t == "string" && t.toLowerCase() === "non-commercial-and-evaluation", i = "14.0.0";
  let o, s = "invalid", a = "invalid";
  t = MC(t || "");
  const l = xY(t);
  if (n || r || l)
    if (l) {
      const u = le("30/11/2023", "DD/MM/YYYY"), c = Math.floor(u.toDate().getTime() / 864e5), d = IY(t);
      o = le((d + 1) * 864e5, "x").format("MMMM DD, YYYY"), c > d ? (s = "expired", a = "expired") : (s = "valid", a = "valid");
    } else
      r ? (s = "non_commercial", a = "valid") : (s = "invalid", a = "invalid");
  else
    s = "missing", a = "missing";
  if (PY() && (s = "valid", a = "valid"), !g0 && s !== "valid" && (m0[s]({
    keyValidityDate: o,
    hotVersion: i
  }) && console[s === "non_commercial" ? "info" : "warn"](m0[s]({
    keyValidityDate: o,
    hotVersion: i
  })), g0 = !0), a !== "valid" && e.parentNode && p0[a]({
    keyValidityDate: o,
    hotVersion: i
  })) {
    const c = document.createElement("div");
    c.className = "hot-display-license-info", c.innerHTML = p0[a]({
      keyValidityDate: o,
      hotVersion: i
    }), e.parentNode.insertBefore(c, e.nextSibling);
  }
}
function xY(t) {
  let e = [][Zu], n = e;
  if (t[Zu] !== lc("Z"))
    return !1;
  for (let r = "", i = "B<H4P+".split(""), o = lc(i.shift()); o; o = lc(i.shift() || "A"))
    --o < ""[Zu] ? n = n | (f0(`${f0(ac(r) + (ac(Af(t, Math.abs(o), 2)) + []).padStart(2, "0"))}`) % 97 || 2) >> 1 : r = Af(t, o, o ? i[Zu] === 1 ? 9 : 8 : 6);
  return n === e;
}
const HY = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  _injectProductInfo: UI,
  isDefined: Re,
  isEmpty: gn,
  isRegExp: BI,
  isUndefined: It,
  stringify: Zt
}, Symbol.toStringTag, { value: "Module" }));
function Fn(t) {
  return t[0].toUpperCase() + t.substr(1);
}
function DY() {
  const t = [];
  for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
    n[r] = arguments[r];
  let i = n.length;
  for (; i; ) {
    i -= 1;
    const o = Zt(n[i]).toLowerCase();
    t.indexOf(o) === -1 && t.push(o);
  }
  return t.length === 1;
}
function sS() {
  function t() {
    return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
  }
  return t() + t() + t() + t();
}
function aS(t) {
  return /^([0-9][0-9]?%$)|(^100%$)/.test(t);
}
function lS(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return `${t}`.replace(/(?:\\)?\[([^[\]]+)]/g, (n, r) => n.charAt(0) === "\\" ? n.substr(1, n.length - 1) : e[r] === void 0 ? "" : e[r]);
}
function OC(t) {
  return Hg(`${t}`, {
    ALLOWED_TAGS: []
  });
}
function Hg(t, e) {
  return bV.sanitize(t, e);
}
const NY = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  equalsIgnoreCase: DY,
  isPercentValue: aS,
  randomString: sS,
  sanitize: Hg,
  stripTags: OC,
  substitute: lS,
  toUpperCaseFirst: Fn
}, Symbol.toStringTag, { value: "Module" })), Kl = (t) => ["tabindex", t], LY = () => ["role", "treegrid"], Gi = () => ["role", "presentation"], $Y = () => ["role", "gridcell"], kY = () => ["role", "rowheader"], YI = () => ["role", "rowgroup"], FY = () => ["role", "columnheader"], AC = () => ["role", "row"], WY = () => ["role", "menu"], VY = () => ["role", "menuitem"], BY = () => ["role", "combobox"], GI = () => ["role", "listbox"], UY = () => ["role", "option"], YY = () => ["role", "checkbox"], GY = () => ["scope", "col"], zY = () => ["scope", "row"], jY = () => ["type", "text"], uS = (t) => ["aria-label", t], Vo = () => ["aria-hidden", "true"], KY = () => ["aria-disabled", "true"], XY = () => ["aria-multiselectable", "true"], zI = (t) => ["aria-haspopup", t], jI = (t) => ["aria-rowcount", t], Dg = (t) => ["aria-colcount", t], KI = (t) => ["aria-rowindex", t], cS = (t) => ["aria-colindex", t], Ur = (t) => ["aria-expanded", t], qY = (t) => ["aria-sort", t], w0 = () => ["aria-readonly", "true"], C0 = () => ["aria-invalid", "true"], ZY = (t) => ["aria-checked", t], hS = () => ["aria-selected", "true"], QY = () => ["aria-autocomplete", "list"], JY = (t) => ["aria-controls", t], eG = (t) => ["aria-activedescendant", t], tG = (t) => ["aria-live", t], nG = (t) => ["aria-relevant", t], rG = (t) => ["aria-setsize", t], iG = (t) => ["aria-posinset", t];
function XI(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, n = -1, r = null, i = t;
  for (; i !== null; ) {
    if (n === e) {
      r = i;
      break;
    }
    i.host && i.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? i = i.host : (n += 1, i = i.parentNode);
  }
  return r;
}
function qI(t, e) {
  const n = t.closest(".handsontable");
  return !!n && (n.parentNode === e || n === e);
}
function ZI(t) {
  return Object.getPrototypeOf(t.parent) && t.frameElement;
}
function Ic(t) {
  return ZI(t) && t.parent;
}
function oG(t) {
  return !!Object.getPrototypeOf(t.parent);
}
function Es(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], n = arguments.length > 2 ? arguments[2] : void 0;
  const {
    ELEMENT_NODE: r,
    DOCUMENT_FRAGMENT_NODE: i
  } = Node;
  let o = t;
  for (; o != null && o !== n; ) {
    const {
      nodeType: s,
      nodeName: a
    } = o;
    if (s === r && (e.includes(a) || e.includes(o)))
      return o;
    const {
      host: l
    } = o;
    l && s === i ? o = l : o = o.parentNode;
  }
  return null;
}
function Qu(t, e, n) {
  const r = [];
  let i = t;
  for (; i && (i = Es(i, e, n), !(!i || n && !n.contains(i))); )
    r.push(i), i.host && i.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? i = i.host : i = i.parentNode;
  const o = r.length;
  return o ? r[o - 1] : null;
}
function vs(t, e) {
  let n = t.parentNode, r = [];
  for (typeof e == "string" ? t.defaultView ? r = Array.prototype.slice.call(t.querySelectorAll(e), 0) : r = Array.prototype.slice.call(t.ownerDocument.querySelectorAll(e), 0) : r.push(e); n !== null; ) {
    if (r.indexOf(n) > -1)
      return !0;
    n = n.parentNode;
  }
  return !1;
}
function QI(t) {
  let e = 0, n = t;
  if (n.previousSibling)
    for (; n = n.previousSibling; )
      e += 1;
  return e;
}
function os(t, e, n) {
  const r = n.parentElement.querySelector(`.ht_clone_${t}`);
  return r ? r.contains(e) : null;
}
function JI(t) {
  return !t || !t.length ? [] : t.filter((e) => !!e);
}
function eP(t, e) {
  if (!t || !t.length)
    return e ? {
      regexFree: [],
      regexes: []
    } : [];
  const n = [], r = [];
  return r.push(...t.filter((i) => {
    const o = i instanceof RegExp;
    return o && e && n.push(i), !o;
  })), e ? {
    regexFree: r,
    regexes: n
  } : r;
}
function Ve(t, e) {
  return t.classList === void 0 || typeof e != "string" || e === "" ? !1 : t.classList.contains(e);
}
function ce(t, e) {
  typeof e == "string" && (e = e.split(" ")), e = JI(e), e.length > 0 && t.classList.add(...e);
}
function Ye(t, e) {
  typeof e == "string" ? e = e.split(" ") : e instanceof RegExp && (e = [e]);
  let {
    regexFree: n,
    // eslint-disable-next-line prefer-const
    regexes: r
  } = eP(e, !0);
  n = JI(n), n.length > 0 && t.classList.remove(...n), r.forEach((i) => {
    t.classList.forEach((o) => {
      i.test(o) && t.classList.remove(o);
    });
  });
}
function Ne(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], n = arguments.length > 2 ? arguments[2] : void 0;
  Array.isArray(e) || (e = [[e, n]]), e.forEach((r) => {
    Array.isArray(r) && r[0] !== "" && t.setAttribute(...r);
  });
}
function Ia(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  typeof e == "string" ? e = e.split(" ") : e instanceof RegExp && (e = [e]);
  const {
    regexFree: n,
    regexes: r
  } = eP(e, !0);
  n.forEach((i) => {
    i !== "" && t.removeAttribute(i);
  }), r.forEach((i) => {
    t.getAttributeNames().forEach((o) => {
      i.test(o) && t.removeAttribute(o);
    });
  });
}
function dS(t) {
  if (t.nodeType === 3)
    t.parentNode.removeChild(t);
  else if (["TABLE", "THEAD", "TBODY", "TFOOT", "TR"].indexOf(t.nodeName) > -1) {
    const e = t.childNodes;
    for (let n = e.length - 1; n >= 0; n--)
      dS(e[n]);
  }
}
function vi(t) {
  let e;
  for (; e = t.lastChild; )
    t.removeChild(e);
}
const tP = /(<(.*)>|&(.*);)/;
function Pa(t, e) {
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
  tP.test(e) ? t.innerHTML = n ? Hg(e) : e : Ts(t, e);
}
function Ts(t, e) {
  const n = t.firstChild;
  n && n.nodeType === 3 && n.nextSibling === null ? n.textContent = e : (vi(t), t.appendChild(t.ownerDocument.createTextNode(e)));
}
function _s(t) {
  const e = t.ownerDocument.documentElement;
  let n = t;
  for (; n !== e; ) {
    if (n === null)
      return !1;
    if (n.nodeType === Node.DOCUMENT_FRAGMENT_NODE)
      if (n.host) {
        if (n.host.impl)
          return _s(n.host.impl);
        if (n.host)
          return _s(n.host);
        throw new Error("Lost in Web Components world");
      } else
        return !1;
    else if (No(n).display === "none")
      return !1;
    n = n.parentNode;
  }
  return !0;
}
function an(t) {
  const e = t.ownerDocument, n = e.defaultView, r = e.documentElement;
  let i = t, o, s, a;
  for (o = i.offsetLeft, s = i.offsetTop, a = i; (i = i.offsetParent) && !(i === e.body || !("offsetLeft" in i)); )
    o += i.offsetLeft, s += i.offsetTop, a = i;
  return a && a.style.position === "fixed" && (o += n.pageXOffset || r.scrollLeft, s += n.pageYOffset || r.scrollTop), {
    left: o,
    top: s
  };
}
function fS() {
  return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window).scrollY;
}
function Ng() {
  return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window).scrollX;
}
function Pc(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
  return t === e ? fS(e) : t.scrollTop;
}
function If(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
  return t === e ? Ng(e) : t.scrollLeft;
}
function xc(t) {
  let e = t.ownerDocument, n = e ? e.defaultView : void 0;
  e || (e = t.document ? t.document : t, n = e.defaultView);
  const r = ["auto", "scroll"];
  let i = t.parentNode;
  for (; i && i.style && e.body !== i; ) {
    let {
      overflow: o,
      overflowX: s,
      overflowY: a
    } = i.style;
    if ([o, s, a].includes("scroll"))
      return i;
    if ({
      overflow: o,
      overflowX: s,
      overflowY: a
    } = n.getComputedStyle(i), r.includes(o) || r.includes(s) || r.includes(a) || i.clientHeight <= i.scrollHeight + 1 && (r.includes(a) || r.includes(o)) || i.clientWidth <= i.scrollWidth + 1 && (r.includes(s) || r.includes(o)))
      return i;
    i = i.parentNode;
  }
  return n;
}
function va(t) {
  const e = t.ownerDocument, n = e.defaultView;
  let r = t.parentNode;
  for (; r && r.style && e.body !== r; ) {
    if (r.style.overflow !== "visible" && r.style.overflow !== "")
      return r;
    const i = No(r, n), o = ["scroll", "hidden", "auto"], s = i.getPropertyValue("overflow"), a = i.getPropertyValue("overflow-y"), l = i.getPropertyValue("overflow-x");
    if (o.includes(s) || o.includes(a) || o.includes(l))
      return r;
    r = r.parentNode;
  }
  return n;
}
function Wl(t, e) {
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : window;
  if (t) {
    if (t === n)
      return e === "width" ? `${n.innerWidth}px` : e === "height" ? `${n.innerHeight}px` : void 0;
  } else
    return;
  const r = t.style[e];
  if (r !== "" && r !== void 0)
    return r;
  const i = No(t, n);
  if (i[e] !== "" && i[e] !== void 0)
    return i[e];
}
function sG(t, e) {
  const {
    selectorText: n
  } = e;
  let r = !1;
  return e.type === CSSRule.STYLE_RULE && n && (t.msMatchesSelector ? r = t.msMatchesSelector(n) : t.matches && (r = t.matches(n))), r;
}
function No(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
  return t.currentStyle || e.getComputedStyle(t);
}
function yt(t) {
  return t.offsetWidth;
}
function Bt(t) {
  return t.offsetHeight;
}
function _o(t) {
  return t.clientHeight || t.innerHeight;
}
function uc(t) {
  return t.clientWidth || t.innerWidth;
}
function aG(t, e, n) {
  t.addEventListener(e, n, !1);
}
function lG(t, e, n) {
  t.removeEventListener(e, n, !1);
}
function gS(t) {
  return t.selectionStart ? t.selectionStart : 0;
}
function nP(t) {
  return t.selectionEnd ? t.selectionEnd : 0;
}
function uG() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window;
  const e = t.document;
  let n = "";
  return t.getSelection ? n = t.getSelection().toString() : e.selection && e.selection.type !== "Control" && (n = e.selection.createRange().text), n;
}
function IC() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window;
  t.getSelection && (t.getSelection().empty ? t.getSelection().empty() : t.getSelection().removeAllRanges && t.getSelection().removeAllRanges());
}
function Qc(t, e, n) {
  if (n === void 0 && (n = e), t.setSelectionRange) {
    t.focus();
    try {
      t.setSelectionRange(e, n);
    } catch {
      const i = t.parentNode, o = i.style.display;
      i.style.display = "block", t.setSelectionRange(e, n), i.style.display = o;
    }
  }
}
let jm;
function cG() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
  const e = t.createElement("div");
  e.style.height = "200px", e.style.width = "100%";
  const n = t.createElement("div");
  n.style.boxSizing = "content-box", n.style.height = "150px", n.style.left = "0px", n.style.overflow = "hidden", n.style.position = "absolute", n.style.top = "0px", n.style.width = "200px", n.style.visibility = "hidden", n.appendChild(e), (t.body || t.documentElement).appendChild(n);
  const r = e.offsetWidth;
  n.style.overflow = "scroll";
  let i = e.offsetWidth;
  return r === i && (i = n.clientWidth), (t.body || t.documentElement).removeChild(n), r - i;
}
function wn() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
  return jm === void 0 && (jm = cG(t)), jm;
}
function rP(t) {
  return t.offsetWidth !== t.clientWidth;
}
function iP(t) {
  return t.offsetHeight !== t.clientHeight;
}
function Lg(t, e, n) {
  t.style.transform = `translate3d(${e},${n},0)`;
}
function hG(t) {
  let e;
  return t.style.transform && (e = t.style.transform) !== "" ? ["transform", e] : -1;
}
function Jc(t) {
  t.style.transform && t.style.transform !== "" && (t.style.transform = "");
}
function Pf(t) {
  return t && (["INPUT", "SELECT", "TEXTAREA"].indexOf(t.nodeName) > -1 || t.contentEditable === "true");
}
function $g(t) {
  return Pf(t) && t.hasAttribute("data-hot-input") === !1;
}
function dG(t) {
  const e = t.ownerDocument.activeElement;
  $g(e) || t.select();
}
function mS(t) {
  return !t.parentNode;
}
function oP(t, e) {
  new IntersectionObserver((r, i) => {
    r.forEach((o) => {
      o.isIntersecting && t.offsetParent !== null && (e(), i.unobserve(t));
    });
  }, {
    root: t.ownerDocument.body
  }).observe(t);
}
function pS(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
  const r = t.ownerDocument, i = r.createRange(), o = r.defaultView.getSelection();
  Ne(t, "contenteditable", !0), n && Ne(t, ...Vo()), e && ce(t, "invisibleSelection"), i.selectNodeContents(t), o.removeAllRanges(), o.addRange(i);
}
function wS(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
  const n = t.ownerDocument.defaultView.getSelection();
  t.hasAttribute("aria-hidden") && t.removeAttribute("aria-hidden"), n.removeAllRanges(), e && Ye(t, "invisibleSelection"), t.removeAttribute("contenteditable");
}
function sP(t, e) {
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
  pS(t, n), e(), wS(t, n);
}
const fG = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  HTML_CHARACTERS: tP,
  addClass: ce,
  addEvent: aG,
  clearTextSelection: IC,
  closest: Es,
  closestDown: Qu,
  empty: vi,
  fastInnerHTML: Pa,
  fastInnerText: Ts,
  getCaretPosition: gS,
  getComputedStyle: No,
  getCssTransform: hG,
  getFrameElement: ZI,
  getParent: XI,
  getParentWindow: Ic,
  getScrollLeft: If,
  getScrollTop: Pc,
  getScrollableElement: xc,
  getScrollbarWidth: wn,
  getSelectionEndPosition: nP,
  getSelectionText: uG,
  getStyle: Wl,
  getTrimmingContainer: va,
  getWindowScrollLeft: Ng,
  getWindowScrollTop: fS,
  hasAccessToParentWindow: oG,
  hasClass: Ve,
  hasHorizontalScrollbar: iP,
  hasVerticalScrollbar: rP,
  index: QI,
  innerHeight: _o,
  innerWidth: uc,
  isChildOf: vs,
  isDetached: mS,
  isInput: Pf,
  isOutsideInput: $g,
  isThisHotChild: qI,
  isVisible: _s,
  makeElementContentEditableAndSelectItsContent: pS,
  matchesCSSRules: sG,
  observeVisibilityChangeOnce: oP,
  offset: an,
  outerHeight: Bt,
  outerWidth: yt,
  overlayContainsElement: os,
  removeAttribute: Ia,
  removeClass: Ye,
  removeContentEditableFromElementAndDeselect: wS,
  removeEvent: lG,
  removeTextNodes: dS,
  resetCssTransform: Jc,
  runWithSelectedContendEditableElement: sP,
  selectElementIfAllowed: dG,
  setAttribute: Ne,
  setCaretPosition: Qc,
  setOverlayPosition: Lg
}, Symbol.toStringTag, { value: "Module" }));
function At(t) {
  return typeof t == "function";
}
function aP(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 200, n = 0;
  const r = {
    lastCallThrottled: !0
  };
  let i = null;
  function o() {
    for (var s = arguments.length, a = new Array(s), l = 0; l < s; l++)
      a[l] = arguments[l];
    const u = Date.now();
    let c = !1;
    r.lastCallThrottled = !0, n || (n = u, c = !0);
    const d = e - (u - n);
    return c ? (r.lastCallThrottled = !1, t.apply(this, a)) : (i && clearTimeout(i), i = setTimeout(() => {
      r.lastCallThrottled = !1, t.apply(this, a), n = 0, i = void 0;
    }, d)), r;
  }
  return o;
}
function gG(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 200, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;
  const r = aP(t, e);
  let i = n;
  function o() {
    i = n;
  }
  function s() {
    for (var a = arguments.length, l = new Array(a), u = 0; u < a; u++)
      l[u] = arguments[u];
    return i ? (i -= 1, t.apply(this, l)) : r.apply(this, l);
  }
  return s.clearHits = o, s;
}
function kg(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 200, n = null, r;
  function i() {
    for (var o = arguments.length, s = new Array(o), a = 0; a < o; a++)
      s[a] = arguments[a];
    return n && clearTimeout(n), n = setTimeout(() => {
      r = t.apply(this, s);
    }, e), r;
  }
  return i;
}
function mG() {
  for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
    e[n] = arguments[n];
  const [r, ...i] = e;
  return function() {
    for (var s = arguments.length, a = new Array(s), l = 0; l < s; l++)
      a[l] = arguments[l];
    return nn(i, (u, c) => c(u), r.apply(this, a));
  };
}
function CS(t) {
  for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++)
    n[r - 1] = arguments[r];
  return function() {
    for (var o = arguments.length, s = new Array(o), a = 0; a < o; a++)
      s[a] = arguments[a];
    return t.apply(this, n.concat(s));
  };
}
function lP(t) {
  const e = t.length;
  function n(r) {
    return function() {
      for (var o = arguments.length, s = new Array(o), a = 0; a < o; a++)
        s[a] = arguments[a];
      const l = r.concat(s);
      let u;
      return l.length >= e ? u = t.apply(this, l) : u = n(l), u;
    };
  }
  return n([]);
}
function pG(t) {
  const e = t.length;
  function n(r) {
    return function() {
      for (var o = arguments.length, s = new Array(o), a = 0; a < o; a++)
        s[a] = arguments[a];
      const l = r.concat(s.reverse());
      let u;
      return l.length >= e ? u = t.apply(this, l) : u = n(l), u;
    };
  }
  return n([]);
}
function xf(t, e, n, r, i, o, s, a) {
  return Re(a) ? t.call(e, n, r, i, o, s, a) : Re(s) ? t.call(e, n, r, i, o, s) : Re(o) ? t.call(e, n, r, i, o) : Re(i) ? t.call(e, n, r, i) : Re(r) ? t.call(e, n, r) : Re(n) ? t.call(e, n) : t.call(e);
}
const wG = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  curry: lP,
  curryRight: pG,
  debounce: kg,
  fastCall: xf,
  isFunction: At,
  partial: CS,
  pipe: mG,
  throttle: aP,
  throttleAfterHits: gG
}, Symbol.toStringTag, { value: "Module" }));
var CG = nr, v0 = A1, vG = Pn, S0 = Gl, SG = N1, y0 = CG([].push), yG = function(t) {
  if (vG(t))
    return t;
  if (v0(t)) {
    for (var e = t.length, n = [], r = 0; r < e; r++) {
      var i = t[r];
      typeof i == "string" ? y0(n, i) : (typeof i == "number" || S0(i) === "Number" || S0(i) === "String") && y0(n, SG(i));
    }
    var o = n.length, s = !0;
    return function(a, l) {
      if (s)
        return s = !1, l;
      if (v0(this))
        return l;
      for (var u = 0; u < o; u++)
        if (n[u] === a)
          return l;
    };
  }
}, bG = Ma, uP = Yc, cP = Sg, RG = mg, eh = nr, hP = Gr, b0 = Pn, R0 = _v, dP = $v, EG = yG, TG = Tv, _G = String, Ss = uP("JSON", "stringify"), Mh = eh(/./.exec), E0 = eh("".charAt), MG = eh("".charCodeAt), OG = eh("".replace), AG = eh(1 .toString), IG = /[\uD800-\uDFFF]/g, T0 = /^[\uD800-\uDBFF]$/, _0 = /^[\uDC00-\uDFFF]$/, M0 = !TG || hP(function() {
  var t = uP("Symbol")("stringify detection");
  return Ss([t]) !== "[null]" || Ss({ a: t }) !== "{}" || Ss(Object(t)) !== "{}";
}), O0 = hP(function() {
  return Ss("\uDF06\uD834") !== '"\\udf06\\ud834"' || Ss("\uDEAD") !== '"\\udead"';
}), PG = function(t, e) {
  var n = dP(arguments), r = EG(e);
  if (!(!b0(r) && (t === void 0 || R0(t))))
    return n[1] = function(i, o) {
      if (b0(r) && (o = RG(r, this, _G(i), o)), !R0(o))
        return o;
    }, cP(Ss, null, n);
}, xG = function(t, e, n) {
  var r = E0(n, e - 1), i = E0(n, e + 1);
  return Mh(T0, t) && !Mh(_0, i) || Mh(_0, t) && !Mh(T0, r) ? "\\u" + AG(MG(t, 0), 16) : t;
};
Ss && bG({ target: "JSON", stat: !0, arity: 3, forced: M0 || O0 }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  stringify: function(e, n, r) {
    var i = dP(arguments), o = cP(M0 ? PG : Ss, null, i);
    return O0 && typeof o == "string" ? OG(o, IG, xG) : o;
  }
});
function Vl(t) {
  let e;
  return Array.isArray(t) ? e = t.length ? new Array(t.length).fill(null) : [] : (e = {}, Ze(t, (n, r) => {
    r !== "__children" && (n && typeof n == "object" && !Array.isArray(n) ? e[r] = Vl(n) : Array.isArray(n) ? n.length && typeof n[0] == "object" && !Array.isArray(n[0]) ? e[r] = [Vl(n[0])] : e[r] = [] : e[r] = null);
  })), e;
}
function Bo(t, e) {
  return e.prototype.constructor = e, t.prototype = new e(), t.prototype.constructor = t, t;
}
function ln(t, e, n) {
  const r = Array.isArray(n);
  return Ze(e, (i, o) => {
    (r === !1 || n.includes(o)) && (t[o] = i);
  }), t;
}
function th(t, e) {
  Ze(e, (n, r) => {
    e[r] && typeof e[r] == "object" ? (t[r] || (Array.isArray(e[r]) ? t[r] = [] : Object.prototype.toString.call(e[r]) === "[object Date]" ? t[r] = e[r] : t[r] = {}), th(t[r], e[r])) : t[r] = e[r];
  });
}
function Wn(t) {
  return typeof t == "object" ? JSON.parse(JSON.stringify(t)) : t;
}
function er(t) {
  const e = {};
  return Ze(t, (n, r) => {
    e[r] = n;
  }), e;
}
function _t(t) {
  t.MIXINS || (t.MIXINS = []);
  for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++)
    n[r - 1] = arguments[r];
  return H(n, (i) => {
    t.MIXINS.push(i.MIXIN_NAME), Ze(i, (o, s) => {
      if (t.prototype[s] !== void 0)
        throw new Error(`Mixin conflict. Property '${s}' already exist and cannot be overwritten.`);
      if (typeof o == "function")
        t.prototype[s] = o;
      else {
        const a = function(c, d) {
          const g = `_${c}`, p = (C) => {
            let E = C;
            return (Array.isArray(E) || Xe(E)) && (E = Wn(E)), E;
          };
          return function() {
            return this[g] === void 0 && (this[g] = p(d)), this[g];
          };
        }, l = function(c) {
          const d = `_${c}`;
          return function(g) {
            this[d] = g;
          };
        };
        Object.defineProperty(t.prototype, s, {
          get: a(s, o),
          set: l(s),
          configurable: !0
        });
      }
    });
  }), t;
}
function Fg(t, e) {
  return JSON.stringify(t) === JSON.stringify(e);
}
function Xe(t) {
  return Object.prototype.toString.call(t) === "[object Object]";
}
function Ji(t, e, n, r) {
  r.value = n, r.writable = r.writable !== !1, r.enumerable = r.enumerable !== !1, r.configurable = r.configurable !== !1, Object.defineProperty(t, e, r);
}
function Ze(t, e) {
  for (const n in t)
    if ((!t.hasOwnProperty || t.hasOwnProperty && Object.prototype.hasOwnProperty.call(t, n)) && e(t[n], n, t) === !1)
      break;
  return t;
}
function fP(t, e) {
  const n = e.split(".");
  let r = t;
  return Ze(n, (i) => {
    if (r = r[i], r === void 0)
      return r = void 0, !1;
  }), r;
}
function qd(t, e, n) {
  const r = e.split(".");
  let i = t;
  r.forEach((o, s) => {
    s !== r.length - 1 ? (Vt(i, o) || (i[o] = {}), i = i[o]) : i[o] = n;
  });
}
function Wg(t) {
  if (!Xe(t))
    return 0;
  const e = function(n) {
    let r = 0;
    return Xe(n) ? Ze(n, (i, o) => {
      o !== "__children" && (r += e(i));
    }) : r += 1, r;
  };
  return e(t);
}
function gi(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "value";
  const n = `_${e}`, r = {
    _touched: !1,
    [n]: t,
    isTouched() {
      return this._touched;
    }
  };
  return Object.defineProperty(r, e, {
    get() {
      return this[n];
    },
    set(i) {
      this._touched = !0, this[n] = i;
    },
    enumerable: !0,
    configurable: !0
  }), r;
}
function Vt(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
}
const HG = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  clone: er,
  createObjectPropListener: gi,
  deepClone: Wn,
  deepExtend: th,
  deepObjectSize: Wg,
  defineGetter: Ji,
  duckSchema: Vl,
  extend: ln,
  getProperty: fP,
  hasOwnProperty: Vt,
  inherit: Bo,
  isObject: Xe,
  isObjectEqual: Fg,
  mixin: _t,
  objectEach: Ze,
  setProperty: qd
}, Symbol.toStringTag, { value: "Module" })), Fr = (t) => {
  const e = {
    value: !1
  };
  return e.test = (n, r) => {
    e.value = t(n, r);
  }, e;
}, Uo = {
  chrome: Fr((t, e) => /Chrome/.test(t) && /Google/.test(e)),
  chromeWebKit: Fr((t) => /CriOS/.test(t)),
  edge: Fr((t) => /Edge/.test(t)),
  edgeWebKit: Fr((t) => /EdgiOS/.test(t)),
  firefox: Fr((t) => /Firefox/.test(t)),
  firefoxWebKit: Fr((t) => /FxiOS/.test(t)),
  mobile: Fr((t) => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(t)),
  safari: Fr((t, e) => /Safari/.test(t) && /Apple Computer/.test(e))
}, Xl = {
  mac: Fr((t) => /^Mac/.test(t)),
  win: Fr((t) => /^Win/.test(t)),
  linux: Fr((t) => /^Linux/.test(t)),
  ios: Fr((t) => /iPhone|iPad|iPod/i.test(t))
};
function gP() {
  let {
    userAgent: t = navigator.userAgent,
    vendor: e = navigator.vendor
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  Ze(Uo, (n) => {
    let {
      test: r
    } = n;
    return void r(t, e);
  });
}
function mP() {
  let {
    platform: t = navigator.platform
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  Ze(Xl, (e) => {
    let {
      test: n
    } = e;
    return void n(t);
  });
}
gP();
mP();
function vS() {
  return Uo.chrome.value;
}
function pP() {
  return Uo.chromeWebKit.value;
}
function Zd() {
  return Uo.firefox.value;
}
function wP() {
  return Uo.firefoxWebKit.value;
}
function SS() {
  return Uo.safari.value;
}
function CP() {
  return Uo.edge.value;
}
function DG() {
  return Uo.edgeWebKit.value;
}
function Mo() {
  return Uo.mobile.value;
}
function yS() {
  return Xl.ios.value;
}
function bS() {
  let {
    maxTouchPoints: t
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : navigator;
  return t > 2 && Xl.mac.value;
}
function PC() {
  return Xl.win.value;
}
function Hc() {
  return Xl.mac.value;
}
function NG() {
  return Xl.linux.value;
}
const LG = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  isChrome: vS,
  isChromeWebKit: pP,
  isEdge: CP,
  isEdgeWebKit: DG,
  isFirefox: Zd,
  isFirefoxWebKit: wP,
  isIOS: yS,
  isIpadOS: bS,
  isLinuxOS: NG,
  isMacOS: Hc,
  isMobileBrowser: Mo,
  isSafari: SS,
  isWindowsOS: PC,
  setBrowserMeta: gP,
  setPlatformMeta: mP
}, Symbol.toStringTag, { value: "Module" })), Pe = {
  ALT: 18,
  ARROW_DOWN: 40,
  ARROW_LEFT: 37,
  ARROW_RIGHT: 39,
  ARROW_UP: 38,
  AUDIO_DOWN: Zd() ? 182 : 174,
  AUDIO_MUTE: Zd() ? 181 : 173,
  AUDIO_UP: Zd() ? 183 : 175,
  BACKSPACE: 8,
  CAPS_LOCK: 20,
  COMMA: 188,
  COMMAND_LEFT: 91,
  COMMAND_RIGHT: 93,
  COMMAND_FIREFOX: 224,
  CONTROL: 17,
  DELETE: 46,
  END: 35,
  ENTER: 13,
  ESCAPE: 27,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  F13: 124,
  F14: 125,
  F15: 126,
  F16: 127,
  F17: 128,
  F18: 129,
  F19: 130,
  HOME: 36,
  INSERT: 45,
  MEDIA_NEXT: 176,
  MEDIA_PLAY_PAUSE: 179,
  MEDIA_PREV: 177,
  MEDIA_STOP: 178,
  NULL: 0,
  NUM_LOCK: 144,
  PAGE_DOWN: 34,
  PAGE_UP: 33,
  PAUSE: 19,
  PERIOD: 190,
  SCROLL_LOCK: 145,
  SHIFT: 16,
  SPACE: 32,
  TAB: 9,
  A: 65,
  C: 67,
  D: 68,
  F: 70,
  L: 76,
  O: 79,
  P: 80,
  S: 83,
  V: 86,
  X: 88,
  Y: 89,
  Z: 90
}, $G = [Pe.ALT, Pe.ARROW_DOWN, Pe.ARROW_LEFT, Pe.ARROW_RIGHT, Pe.ARROW_UP, Pe.AUDIO_DOWN, Pe.AUDIO_MUTE, Pe.AUDIO_UP, Pe.BACKSPACE, Pe.CAPS_LOCK, Pe.DELETE, Pe.END, Pe.ENTER, Pe.ESCAPE, Pe.F1, Pe.F2, Pe.F3, Pe.F4, Pe.F5, Pe.F6, Pe.F7, Pe.F8, Pe.F9, Pe.F10, Pe.F11, Pe.F12, Pe.F13, Pe.F14, Pe.F15, Pe.F16, Pe.F17, Pe.F18, Pe.F19, Pe.HOME, Pe.INSERT, Pe.MEDIA_NEXT, Pe.MEDIA_PLAY_PAUSE, Pe.MEDIA_PREV, Pe.MEDIA_STOP, Pe.NULL, Pe.NUM_LOCK, Pe.PAGE_DOWN, Pe.PAGE_UP, Pe.PAUSE, Pe.SCROLL_LOCK, Pe.SHIFT, Pe.TAB];
function vP(t) {
  return t === 32 || // space
  t >= 48 && t <= 57 || // 0-9
  t >= 96 && t <= 111 || // numpad
  t >= 186 && t <= 192 || // ;=,-./`
  t >= 219 && t <= 222 || // []{}\|"'
  t >= 226 || // special chars (229 for Asian chars)
  t >= 65 && t <= 90;
}
function RS(t) {
  return $G.includes(t);
}
function kG(t) {
  const e = [];
  return Hc() ? e.push(Pe.COMMAND_LEFT, Pe.COMMAND_RIGHT, Pe.COMMAND_FIREFOX) : e.push(Pe.CONTROL), e.includes(t);
}
function SP(t) {
  return [Pe.CONTROL, Pe.COMMAND_LEFT, Pe.COMMAND_RIGHT, Pe.COMMAND_FIREFOX].includes(t);
}
function ql(t, e) {
  const n = e.split("|");
  let r = !1;
  return H(n, (i) => {
    if (t === Pe[i])
      return r = !0, !1;
  }), r;
}
const FG = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  KEY_CODES: Pe,
  isCtrlKey: kG,
  isCtrlMetaKey: SP,
  isFunctionKey: RS,
  isKey: ql,
  isPrintableChar: vP
}, Symbol.toStringTag, { value: "Module" }));
function Kr(t) {
  t.isImmediatePropagationEnabled = !1, t.cancelBubble = !0;
}
function us(t) {
  return t.isImmediatePropagationEnabled === !1;
}
function Ms(t) {
  return t.button === 2;
}
function Vg(t) {
  return t.button === 0;
}
function yP(t, e) {
  const n = {
    x: t.offsetX,
    y: t.offsetY
  };
  let r = t.target;
  if (!(e instanceof HTMLElement) || r !== e && r.contains(e))
    return n;
  for (; r !== e; )
    n.x += r.offsetLeft, n.y += r.offsetTop, r = r.offsetParent;
  return n;
}
const WG = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  isImmediatePropagationStopped: us,
  isLeftClick: Vg,
  isRightClick: Ms,
  offsetRelativeTo: yP,
  stopImmediatePropagation: Kr
}, Symbol.toStringTag, { value: "Module" }));
function Pt() {
  Re(console) && console.warn(...arguments);
}
function ES() {
  Re(console) && console.error(...arguments);
}
function VG(t, e, n) {
  return e = BG(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function BG(t) {
  var e = UG(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function UG(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const $a = [
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Fired after resetting a cell's meta. This happens when the {@link Core#updateSettings} method is called.
   *
   * @event Hooks#afterCellMetaReset
   */
  "afterCellMetaReset",
  /**
   * Fired after one or more cells has been changed. The changes are triggered in any situation when the
   * value is entered using an editor or changed using API (e.q setDataAtCell).
   *
   * __Note:__ For performance reasons, the `changes` array is null for `"loadData"` source.
   *
   * @event Hooks#afterChange
   * @param {Array[]} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`. `row` is a visual row index.
   * @param {string} [source] String that identifies source of hook call ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @example
   * ::: only-for javascript
   * ```js
   * new Handsontable(element, {
   *   afterChange: (changes) => {
   *     changes?.forEach(([row, prop, oldValue, newValue]) => {
   *       // Some logic...
   *     });
   *   }
   * })
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * <HotTable
   *   afterChange={(changes, source) => {
   *     changes?.forEach(([row, prop, oldValue, newValue]) => {
   *       // Some logic...
   *     });
   *   }}
   * />
   * ```
   * :::
   */
  "afterChange",
  /**
   * Fired each time user opens {@link ContextMenu} and after setting up the Context Menu's default options. These options are a collection
   * which user can select by setting an array of keys or an array of objects in {@link Options#contextMenu} option.
   *
   * @event Hooks#afterContextMenuDefaultOptions
   * @param {Array} predefinedItems An array of objects containing information about the pre-defined Context Menu items.
   */
  "afterContextMenuDefaultOptions",
  /**
   * Fired each time user opens {@link ContextMenu} plugin before setting up the Context Menu's items but after filtering these options by
   * user (`contextMenu` option). This hook can by helpful to determine if user use specified menu item or to set up
   * one of the menu item to by always visible.
   *
   * @event Hooks#beforeContextMenuSetItems
   * @param {object[]} menuItems An array of objects containing information about to generated Context Menu items.
   */
  "beforeContextMenuSetItems",
  /**
   * Fired by {@link DropdownMenu} plugin after setting up the Dropdown Menu's default options. These options are a
   * collection which user can select by setting an array of keys or an array of objects in {@link Options#dropdownMenu}
   * option.
   *
   * @event Hooks#afterDropdownMenuDefaultOptions
   * @param {object[]} predefinedItems An array of objects containing information about the pre-defined Context Menu items.
   */
  "afterDropdownMenuDefaultOptions",
  /**
   * Fired by {@link DropdownMenu} plugin before setting up the Dropdown Menu's items but after filtering these options
   * by user (`dropdownMenu` option). This hook can by helpful to determine if user use specified menu item or to set
   * up one of the menu item to by always visible.
   *
   * @event Hooks#beforeDropdownMenuSetItems
   * @param {object[]} menuItems An array of objects containing information about to generated Dropdown Menu items.
   */
  "beforeDropdownMenuSetItems",
  /**
   * Fired by {@link ContextMenu} plugin after hiding the Context Menu. This hook is fired when {@link Options#contextMenu}
   * option is enabled.
   *
   * @event Hooks#afterContextMenuHide
   * @param {object} context The Context Menu plugin instance.
   */
  "afterContextMenuHide",
  /**
   * Fired by {@link ContextMenu} plugin before opening the Context Menu. This hook is fired when {@link Options#contextMenu}
   * option is enabled.
   *
   * @event Hooks#beforeContextMenuShow
   * @param {object} context The Context Menu instance.
   */
  "beforeContextMenuShow",
  /**
   * Fired by {@link ContextMenu} plugin after opening the Context Menu. This hook is fired when {@link Options#contextMenu}
   * option is enabled.
   *
   * @event Hooks#afterContextMenuShow
   * @param {object} context The Context Menu plugin instance.
   */
  "afterContextMenuShow",
  /**
   * Fired by {@link CopyPaste} plugin after reaching the copy limit while copying data. This hook is fired when
   * {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#afterCopyLimit
   * @param {number} selectedRows Count of selected copyable rows.
   * @param {number} selectedColumns Count of selected copyable columns.
   * @param {number} copyRowsLimit Current copy rows limit.
   * @param {number} copyColumnsLimit Current copy columns limit.
   */
  "afterCopyLimit",
  /**
   * Fired before created a new column.
   *
   * @event Hooks#beforeCreateCol
   * @param {number} index Represents the visual index of first newly created column in the data source array.
   * @param {number} amount Number of newly created columns in the data source array.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*} If `false` then creating columns is cancelled.
   * @example
   * ::: only-for javascript
   * ```js
   * // Return `false` to cancel column inserting.
   * new Handsontable(element, {
   *   beforeCreateCol: function(data, coords) {
   *     return false;
   *   }
   * });
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // Return `false` to cancel column inserting.
   * <HotTable
   *   beforeCreateCol={(data, coords) => {
   *     return false;
   *   }}
   * />
   * ```
   * :::
   */
  "beforeCreateCol",
  /**
   * Fired after the order of columns has changed.
   * This hook is fired by changing column indexes of any type supported by the {@link IndexMapper}.
   *
   * @event Hooks#afterColumnSequenceChange
   * @param {'init'|'remove'|'insert'|'move'|'update'} [source] A string that indicates what caused the change to the order of columns.
   */
  "afterColumnSequenceChange",
  /**
   * Fired after created a new column.
   *
   * @event Hooks#afterCreateCol
   * @param {number} index Represents the visual index of first newly created column in the data source.
   * @param {number} amount Number of newly created columns in the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterCreateCol",
  /**
   * Fired before created a new row.
   *
   * @event Hooks#beforeCreateRow
   * @param {number} index Represents the visual index of first newly created row in the data source array.
   * @param {number} amount Number of newly created rows in the data source array.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeCreateRow",
  /**
   * Fired after created a new row.
   *
   * @event Hooks#afterCreateRow
   * @param {number} index Represents the visual index of first newly created row in the data source array.
   * @param {number} amount Number of newly created rows in the data source array.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterCreateRow",
  /**
   * Fired after all selected cells are deselected.
   *
   * @event Hooks#afterDeselect
   */
  "afterDeselect",
  /**
   * Fired after destroying the Handsontable instance.
   *
   * @event Hooks#afterDestroy
   */
  "afterDestroy",
  /**
   * Hook fired after keydown event is handled.
   *
   * @event Hooks#afterDocumentKeyDown
   * @param {Event} event A native `keydown` event object.
   */
  "afterDocumentKeyDown",
  /**
   * Fired inside the Walkontable's selection `draw` method. Can be used to add additional class names to cells, depending on the current selection.
   *
   * @event Hooks#afterDrawSelection
   * @param {number} currentRow Row index of the currently processed cell.
   * @param {number} currentColumn Column index of the currently cell.
   * @param {number[]} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.
   * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.
   * @since 0.38.1
   * @returns {string|undefined} Can return a `String`, which will act as an additional `className` to be added to the currently processed cell.
   */
  "afterDrawSelection",
  /**
   * Fired inside the Walkontable's `refreshSelections` method. Can be used to remove additional class names from all cells in the table.
   *
   * @event Hooks#beforeRemoveCellClassNames
   * @since 0.38.1
   * @returns {string[]|undefined} Can return an `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.
   */
  "beforeRemoveCellClassNames",
  /**
   * Fired after getting the cell settings.
   *
   * @event Hooks#afterGetCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} cellProperties Object containing the cell properties.
   */
  "afterGetCellMeta",
  /**
   * Fired after retrieving information about a column header and appending it to the table header.
   *
   * @event Hooks#afterGetColHeader
   * @param {number} column Visual column index.
   * @param {HTMLTableCellElement} TH Header's TH element.
   * @param {number} [headerLevel=0] (Since 12.2.0) Header level index. Accepts positive (0 to n)
   *                                 and negative (-1 to -n) values. For positive values, 0 points to the
   *                                 topmost header. For negative values, -1 points to the bottom-most
   *                                 header (the header closest to the cells).
   */
  "afterGetColHeader",
  /**
   * Fired after retrieving information about a row header and appending it to the table header.
   *
   * @event Hooks#afterGetRowHeader
   * @param {number} row Visual row index.
   * @param {HTMLTableCellElement} TH Header's TH element.
   */
  "afterGetRowHeader",
  /**
   * Fired after the Handsontable instance is initiated.
   *
   * @event Hooks#afterInit
   */
  "afterInit",
  /**
   * Fired after Handsontable's [`data`](@/api/options.md#data)
   * gets modified by the [`loadData()`](@/api/core.md#loaddata) method
   * or the [`updateSettings()`](@/api/core.md#updatesettings) method.
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [Saving data](@/guides/getting-started/saving-data.md)
   *
   * @event Hooks#afterLoadData
   * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data
   * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
   * @param {string} source The source of the call
   */
  "afterLoadData",
  /**
   * Fired after the [`updateData()`](@/api/core.md#updatedata) method
   * modifies Handsontable's [`data`](@/api/options.md#data).
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [Saving data](@/guides/getting-started/saving-data.md)
   *
   * @event Hooks#afterUpdateData
   * @since 11.1.0
   * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data
   * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
   * @param {string} source The source of the call
   */
  "afterUpdateData",
  /**
   * Fired after a scroll event, which is identified as a momentum scroll (e.g. On an iPad).
   *
   * @event Hooks#afterMomentumScroll
   */
  "afterMomentumScroll",
  /**
   * Fired after a `mousedown` event is triggered on the cell corner (the drag handle).
   *
   * @event Hooks#afterOnCellCornerMouseDown
   * @param {Event} event `mousedown` event object.
   */
  "afterOnCellCornerMouseDown",
  /**
   * Fired after a `dblclick` event is triggered on the cell corner (the drag handle).
   *
   * @event Hooks#afterOnCellCornerDblClick
   * @param {Event} event `dblclick` event object.
   */
  "afterOnCellCornerDblClick",
  /**
   * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate
   * indexes are negative.
   *
   * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseDown` called
   * with coordinates `{row: 0, col: -1}`.
   *
   * @event Hooks#afterOnCellMouseDown
   * @param {Event} event `mousedown` event object.
   * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellMouseDown",
  /**
   * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate
   * indexes are negative.
   *
   * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseUp` called
   * with coordinates `{row: 0, col: -1}`.
   *
   * @event Hooks#afterOnCellMouseUp
   * @param {Event} event `mouseup` event object.
   * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellMouseUp",
  /**
   * Fired after clicking right mouse button on a cell or row/column header.
   *
   * For example clicking on the row header of cell (0, 0) results with `afterOnCellContextMenu` called
   * with coordinates `{row: 0, col: -1}`.
   *
   * @event Hooks#afterOnCellContextMenu
   * @since 4.1.0
   * @param {Event} event `contextmenu` event object.
   * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellContextMenu",
  /**
   * Fired after hovering a cell or row/column header with the mouse cursor. In case the row/column header was
   * hovered, the index is negative.
   *
   * For example, hovering over the row header of cell (0, 0) results with `afterOnCellMouseOver` called
   * with coords `{row: 0, col: -1}`.
   *
   * @event Hooks#afterOnCellMouseOver
   * @param {Event} event `mouseover` event object.
   * @param {CellCoords} coords Hovered cell's visual coordinate object.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellMouseOver",
  /**
   * Fired after leaving a cell or row/column header with the mouse cursor.
   *
   * @event Hooks#afterOnCellMouseOut
   * @param {Event} event `mouseout` event object.
   * @param {CellCoords} coords Leaved cell's visual coordinate object.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellMouseOut",
  /**
   * Fired after one or more columns are removed.
   *
   * @event Hooks#afterRemoveCol
   * @param {number} index Visual index of starter column.
   * @param {number} amount An amount of removed columns.
   * @param {number[]} physicalColumns An array of physical columns removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterRemoveCol",
  /**
   * Fired after one or more rows are removed.
   *
   * @event Hooks#afterRemoveRow
   * @param {number} index Visual index of starter row.
   * @param {number} amount An amount of removed rows.
   * @param {number[]} physicalRows An array of physical rows removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterRemoveRow",
  /**
   * Fired before starting rendering the cell.
   *
   * @event Hooks#beforeRenderer
   * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.
   * @param {*} value Value of the rendered cell.
   * @param {object} cellProperties Object containing the cell's properties.
   */
  "beforeRenderer",
  /**
   * Fired after finishing rendering the cell (after the renderer finishes).
   *
   * @event Hooks#afterRenderer
   * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.
   * @param {*} value Value of the rendered cell.
   * @param {object} cellProperties Object containing the cell's properties.
   */
  "afterRenderer",
  /**
   * Fired after the order of rows has changed.
   * This hook is fired by changing row indexes of any type supported by the {@link IndexMapper}.
   *
   * @event Hooks#afterRowSequenceChange
   * @param {'init'|'remove'|'insert'|'move'|'update'} [source] A string that indicates what caused the change to the order of rows.
   */
  "afterRowSequenceChange",
  /**
   * Fired before the vertical viewport scroll. Triggered by the [`scrollViewportTo()`](@/api/core.md#scrollviewportto)
   * method or table internals.
   *
   * @since 14.0.0
   * @event Hooks#beforeViewportScrollVertically
   * @param {number} visualRow Visual row index.
   * @returns {number} Returns modified row index (or the same as passed in the method argument) to which the viewport will be scrolled.
   */
  "beforeViewportScrollVertically",
  /**
   * Fired before the horizontal viewport scroll. Triggered by the [`scrollViewportTo()`](@/api/core.md#scrollviewportto)
   * method or table internals.
   *
   * @since 14.0.0
   * @event Hooks#beforeViewportScrollHorizontally
   * @param {number} visualColumn Visual column index.
   * @returns {number} Returns modified column index (or the same as passed in the method argument) to which the viewport will be scrolled.
   */
  "beforeViewportScrollHorizontally",
  /**
   * Fired before the vertical or horizontal viewport scroll. Triggered by the [`scrollViewportTo()`](@/api/core.md#scrollviewportto)
   * method or table internals.
   *
   * @since 14.0.0
   * @event Hooks#beforeViewportScroll
   */
  "beforeViewportScroll",
  /**
   * Fired after the horizontal scroll event.
   *
   * @event Hooks#afterScrollHorizontally
   */
  "afterScrollHorizontally",
  /**
   * Fired after the vertical scroll event.
   *
   * @event Hooks#afterScrollVertically
   */
  "afterScrollVertically",
  /**
   * Fired after the vertical or horizontal scroll event.
   *
   * @since 14.0.0
   * @event Hooks#afterScroll
   */
  "afterScroll",
  /**
   * Fired after one or more cells are selected (e.g. During mouse move).
   *
   * @event Hooks#afterSelection
   * @param {number} row Selection start visual row index.
   * @param {number} column Selection start visual column index.
   * @param {number} row2 Selection end visual row index.
   * @param {number} column2 Selection end visual column index.
   * @param {object} preventScrolling A reference to the observable object with the `value` property.
   *                                  Property `preventScrolling.value` expects a boolean value that
   *                                  Handsontable uses to control scroll behavior after selection.
   * @param {object} preventScrolling Object with `value` property where its value change will be observed.
   * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
   * @example
   * ::: only-for javascript
   * ```js
   * new Handsontable(element, {
   *   afterSelection: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
   *     // If set to `false` (default): when cell selection is outside the viewport,
   *     // Handsontable scrolls the viewport to cell selection's end corner.
   *     // If set to `true`: when cell selection is outside the viewport,
   *     // Handsontable doesn't scroll to cell selection's end corner.
   *     preventScrolling.value = true;
   *   }
   * })
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * <HotTable
   *   afterSelection={(row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
   *     // If set to `false` (default): when cell selection is outside the viewport,
   *     // Handsontable scrolls the viewport to cell selection's end corner.
   *     // If set to `true`: when cell selection is outside the viewport,
   *     // Handsontable doesn't scroll to cell selection's end corner.
   *     preventScrolling.value = true;
   *   }}
   * />
   * ```
   * :::
   */
  "afterSelection",
  /**
   * Fired after one or more cells are selected.
   *
   * The `prop` and `prop2` arguments represent the source object property name instead of the column number.
   *
   * @event Hooks#afterSelectionByProp
   * @param {number} row Selection start visual row index.
   * @param {string} prop Selection start data source object property name.
   * @param {number} row2 Selection end visual row index.
   * @param {string} prop2 Selection end data source object property name.
   * @param {object} preventScrolling Object with `value` property where its value change will be observed.
   * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
   * @example
   * ```js
   * ::: only-for javascript
   * new Handsontable(element, {
   *   afterSelectionByProp: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
   *     // setting if prevent scrolling after selection
   *     preventScrolling.value = true;
   *   }
   * })
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * <HotTable
   *   afterSelectionByProp={(row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
   *     // setting if prevent scrolling after selection
   *     preventScrolling.value = true;
   *   }}
   * />
   * ```
   * :::
   */
  "afterSelectionByProp",
  /**
   * Fired after one or more cells are selected (e.g. On mouse up).
   *
   * @event Hooks#afterSelectionEnd
   * @param {number} row Selection start visual row index.
   * @param {number} column Selection start visual column index.
   * @param {number} row2 Selection end visual row index.
   * @param {number} column2 Selection end visual column index.
   * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
   */
  "afterSelectionEnd",
  /**
   * Fired after one or more cells are selected (e.g. On mouse up).
   *
   * The `prop` and `prop2` arguments represent the source object property name instead of the column number.
   *
   * @event Hooks#afterSelectionEndByProp
   * @param {number} row Selection start visual row index.
   * @param {string} prop Selection start data source object property index.
   * @param {number} row2 Selection end visual row index.
   * @param {string} prop2 Selection end data source object property index.
   * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
   */
  "afterSelectionEndByProp",
  /**
   * Fired before one or more columns are selected (e.g. During mouse header click or {@link Core#selectColumns} API call).
   *
   * @since 14.0.0
   * @event Hooks#beforeSelectColumns
   * @param {CellCoords} from Selection start coords object.
   * @param {CellCoords} to Selection end coords object.
   * @param {CellCoords} highlight Selection cell focus coords object.
   * @example
   * ::: only-for javascript
   * ```js
   * new Handsontable(element, {
   *   beforeSelectColumns: (from, to, highlight) => {
   *     // Extend the column selection by one column left and one column right.
   *     from.col = Math.max(from.col - 1, 0);
   *     to.col = Math.min(to.col + 1, this.countCols() - 1);
   *   }
   * })
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * <HotTable
   *   beforeSelectColumns={(from, to, highlight) => {
   *     // Extend the column selection by one column left and one column right.
   *     from.col = Math.max(from.col - 1, 0);
   *     to.col = Math.min(to.col + 1, this.countCols() - 1);
   *   }}
   * />
   * ```
   * :::
   */
  "beforeSelectColumns",
  /**
   * Fired after one or more columns are selected (e.g. During mouse header click or {@link Core#selectColumns} API call).
   *
   * @since 14.0.0
   * @event Hooks#afterSelectColumns
   * @param {CellCoords} from Selection start coords object.
   * @param {CellCoords} to Selection end coords object.
   * @param {CellCoords} highlight Selection cell focus coords object.
   */
  "afterSelectColumns",
  /**
   * Fired before one or more rows are selected (e.g. During mouse header click or {@link Core#selectRows} API call).
   *
   * @since 14.0.0
   * @event Hooks#beforeSelectRows
   * @param {CellCoords} from Selection start coords object.
   * @param {CellCoords} to Selection end coords object.
   * @param {CellCoords} highlight Selection cell focus coords object.
   * @example
   * ::: only-for javascript
   * ```js
   * new Handsontable(element, {
   *   beforeSelectRows: (from, to, highlight) => {
   *     // Extend the row selection by one row up and one row bottom more.
   *     from.row = Math.max(from.row - 1, 0);
   *     to.row = Math.min(to.row + 1, this.countRows() - 1);
   *   }
   * })
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * <HotTable
   *   beforeSelectRows={(from, to, highlight) => {
   *     // Extend the row selection by one row up and one row bottom more.
   *     from.row = Math.max(from.row - 1, 0);
   *     to.row = Math.min(to.row + 1, this.countRows() - 1);
   *   }}
   * />
   * ```
   * :::
   */
  "beforeSelectRows",
  /**
   * Fired after one or more rows are selected (e.g. During mouse header click or {@link Core#selectRows} API call).
   *
   * @since 14.0.0
   * @event Hooks#afterSelectRows
   * @param {CellCoords} from Selection start coords object.
   * @param {CellCoords} to Selection end coords object.
   * @param {CellCoords} highlight Selection cell focus coords object.
   */
  "afterSelectRows",
  /**
   * Fired after cell meta is changed.
   *
   * @event Hooks#afterSetCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} key The updated meta key.
   * @param {*} value The updated meta value.
   */
  "afterSetCellMeta",
  /**
   * Fired after cell meta is removed.
   *
   * @event Hooks#afterRemoveCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} key The removed meta key.
   * @param {*} value Value which was under removed key of cell meta.
   */
  "afterRemoveCellMeta",
  /**
   * Fired after cell data was changed.
   *
   * @event Hooks#afterSetDataAtCell
   * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterSetDataAtCell",
  /**
   * Fired after cell data was changed.
   * Called only when `setDataAtRowProp` was executed.
   *
   * @event Hooks#afterSetDataAtRowProp
   * @param {Array} changes An array of changes in format `[[row, prop, oldValue, value], ...]`.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterSetDataAtRowProp",
  /**
   * Fired after cell source data was changed.
   *
   * @event Hooks#afterSetSourceDataAtCell
   * @since 8.0.0
   * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.
   * @param {string} [source] String that identifies source of hook call.
   */
  "afterSetSourceDataAtCell",
  /**
   * Fired after calling the `updateSettings` method.
   *
   * @event Hooks#afterUpdateSettings
   * @param {object} newSettings New settings object.
   */
  "afterUpdateSettings",
  /**
   * @description
   * A plugin hook executed after validator function, only if validator function is defined.
   * Validation result is the first parameter. This can be used to determinate if validation passed successfully or not.
   *
   * __Returning false from the callback will mark the cell as invalid__.
   *
   * @event Hooks#afterValidate
   * @param {boolean} isValid `true` if valid, `false` if not.
   * @param {*} value The value in question.
   * @param {number} row Visual row index.
   * @param {string|number} prop Property name / visual column index.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {undefined | boolean} If `false` the cell will be marked as invalid, `true` otherwise.
   */
  "afterValidate",
  /**
   * Fired before successful change of language (when proper language code was set).
   *
   * @event Hooks#beforeLanguageChange
   * @since 0.35.0
   * @param {string} languageCode New language code.
   */
  "beforeLanguageChange",
  /**
   * Fired after successful change of language (when proper language code was set).
   *
   * @event Hooks#afterLanguageChange
   * @since 0.35.0
   * @param {string} languageCode New language code.
   */
  "afterLanguageChange",
  /**
   * Fired by {@link Autofill} plugin before populating the data in the autofill feature. This hook is fired when
   * {@link Options#fillHandle} option is enabled.
   *
   * @event Hooks#beforeAutofill
   * @param {Array[]} selectionData Data the autofill operation will start from.
   * @param {CellRange} sourceRange The range values will be filled from.
   * @param {CellRange} targetRange The range new values will be filled into.
   * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.
   *
   * @returns {boolean|Array[]} If false, the operation is cancelled. If array of arrays, the returned data
   *                              will be passed into `populateFromArray` instead of the default autofill
   *                              algorithm's result.
   */
  "beforeAutofill",
  /**
   * Fired by {@link Autofill} plugin after populating the data in the autofill feature. This hook is fired when
   * {@link Options#fillHandle} option is enabled.
   *
   * @event Hooks#afterAutofill
   * @since 8.0.0
   * @param {Array[]} fillData The data that was used to fill the `targetRange`. If `beforeAutofill` was used
   *                            and returned `[[]]`, this will be the same object that was returned from `beforeAutofill`.
   * @param {CellRange} sourceRange The range values will be filled from.
   * @param {CellRange} targetRange The range new values will be filled into.
   * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.
   */
  "afterAutofill",
  /**
   * Fired before aligning the cell contents.
   *
   * @event Hooks#beforeCellAlignment
   * @param {object} stateBefore An object with class names defining the cell alignment.
   * @param {CellRange[]} range An array of CellRange coordinates where the alignment will be applied.
   * @param {string} type Type of the alignment - either `horizontal` or `vertical`.
   * @param {string} alignmentClass String defining the alignment class added to the cell.
   * Possible values:
   * * `htLeft`
   * * `htCenter`
   * * `htRight`
   * * `htJustify`
   * * `htTop`
   * * `htMiddle`
   * * `htBottom`.
   */
  "beforeCellAlignment",
  /**
   * Fired before one or more cells are changed.
   *
   * Use this hook to silently alter the user's changes before Handsontable re-renders.
   *
   * To ignore the user's changes, use a nullified array or return `false`.
   *
   * @event Hooks#beforeChange
   * @param {Array[]} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`. `row` is a visual row index.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {undefined | boolean} If `false` all changes were cancelled, `true` otherwise.
   * @example
   * ::: only-for javascript
   * ```js
   * // to alter a single change, overwrite the value with `changes[i][3]`
   * new Handsontable(element, {
   *   beforeChange: (changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     changes[0][3] = 10;
   *   }
   * });
   *
   * // to ignore a single change, set `changes[i]` to `null`
   * // or remove `changes[i]` from the array, by using `changes.splice(i, 1)`
   * new Handsontable(element, {
   *   beforeChange: (changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     changes[0] = null;
   *   }
   * });
   *
   * // to ignore all changes, return `false`
   * // or set the array's length to 0, by using `changes.length = 0`
   * new Handsontable(element, {
   *   beforeChange: (changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     return false;
   *   }
   * });
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // to alter a single change, overwrite the desired value with `changes[i][3]`
   * <HotTable
   *   beforeChange={(changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     changes[0][3] = 10;
   *   }}
   * />
   *
   * // to ignore a single change, set `changes[i]` to `null`
   * // or remove `changes[i]` from the array, by using changes.splice(i, 1).
   * <HotTable
   *   beforeChange={(changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     changes[0] = null;
   *   }}
   * />
   *
   * // to ignore all changes, return `false`
   * // or set the array's length to 0 (`changes.length = 0`)
   * <HotTable
   *   beforeChange={(changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     return false;
   *   }}
   * />
   * ```
   * :::
   */
  "beforeChange",
  /**
   * Fired right before rendering the changes.
   *
   * @event Hooks#beforeChangeRender
   * @param {Array[]} changes Array in form of `[row, prop, oldValue, newValue]`.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "beforeChangeRender",
  /**
   * Fired before drawing the borders.
   *
   * @event Hooks#beforeDrawBorders
   * @param {Array} corners Array specifying the current selection borders.
   * @param {string} borderClassName Specifies the border class name.
   */
  "beforeDrawBorders",
  /**
   * Fired before getting cell settings.
   *
   * @event Hooks#beforeGetCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} cellProperties Object containing the cell's properties.
   */
  "beforeGetCellMeta",
  /**
   * Fired before cell meta is removed.
   *
   * @event Hooks#beforeRemoveCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} key The removed meta key.
   * @param {*} value Value which is under removed key of cell meta.
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRemoveCellMeta",
  /**
   * Fired before the Handsontable instance is initiated.
   *
   * @event Hooks#beforeInit
   */
  "beforeInit",
  /**
   * Fired before the Walkontable instance is initiated.
   *
   * @event Hooks#beforeInitWalkontable
   * @param {object} walkontableConfig Walkontable configuration object.
   */
  "beforeInitWalkontable",
  /**
   * Fired before Handsontable's [`data`](@/api/options.md#data)
   * gets modified by the [`loadData()`](@/api/core.md#loaddata) method
   * or the [`updateSettings()`](@/api/core.md#updatesettings) method.
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [Saving data](@/guides/getting-started/saving-data.md)
   *
   * @event Hooks#beforeLoadData
   * @since 8.0.0
   * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data
   * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
   * @param {string} source The source of the call
   * @returns {Array} The returned array will be used as Handsontable's new dataset.
   */
  "beforeLoadData",
  /**
   * Fired before the [`updateData()`](@/api/core.md#updatedata) method
   * modifies Handsontable's [`data`](@/api/options.md#data).
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [Saving data](@/guides/getting-started/saving-data.md)
   *
   * @event Hooks#beforeUpdateData
   * @since 11.1.0
   * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data
   * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
   * @param {string} source The source of the call
   * @returns {Array} The returned array will be used as Handsontable's new dataset.
   */
  "beforeUpdateData",
  /**
   * Hook fired before keydown event is handled. It can be used to stop default key bindings.
   *
   * __Note__: To prevent default behavior you need to call `false` in your `beforeKeyDown` handler.
   *
   * @event Hooks#beforeKeyDown
   * @param {Event} event Original DOM event.
   */
  "beforeKeyDown",
  /**
   * Fired after the user clicked a cell, but before all the calculations related with it.
   *
   * @event Hooks#beforeOnCellMouseDown
   * @param {Event} event The `mousedown` event object.
   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
   * @param {HTMLTableCellElement} TD TD element.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  "beforeOnCellMouseDown",
  /**
   * Fired after the user clicked a cell.
   *
   * @event Hooks#beforeOnCellMouseUp
   * @param {Event} event The `mouseup` event object.
   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
   * @param {HTMLTableCellElement} TD TD element.
   */
  "beforeOnCellMouseUp",
  /**
   * Fired after the user clicked a cell, but before all the calculations related with it.
   *
   * @event Hooks#beforeOnCellContextMenu
   * @since 4.1.0
   * @param {Event} event The `contextmenu` event object.
   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
   * @param {HTMLTableCellElement} TD TD element.
   */
  "beforeOnCellContextMenu",
  /**
   * Fired after the user moved cursor over a cell, but before all the calculations related with it.
   *
   * @event Hooks#beforeOnCellMouseOver
   * @param {Event} event The `mouseover` event object.
   * @param {CellCoords} coords CellCoords object containing the visual coordinates of the clicked cell.
   * @param {HTMLTableCellElement} TD TD element.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  "beforeOnCellMouseOver",
  /**
   * Fired after the user moved cursor out from a cell, but before all the calculations related with it.
   *
   * @event Hooks#beforeOnCellMouseOut
   * @param {Event} event The `mouseout` event object.
   * @param {CellCoords} coords CellCoords object containing the visual coordinates of the leaved cell.
   * @param {HTMLTableCellElement} TD TD element.
   */
  "beforeOnCellMouseOut",
  /**
   * Fired before one or more columns are about to be removed.
   *
   * @event Hooks#beforeRemoveCol
   * @param {number} index Visual index of starter column.
   * @param {number} amount Amount of columns to be removed.
   * @param {number[]} physicalColumns An array of physical columns removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRemoveCol",
  /**
   * Fired when one or more rows are about to be removed.
   *
   * @event Hooks#beforeRemoveRow
   * @param {number} index Visual index of starter row.
   * @param {number} amount Amount of rows to be removed.
   * @param {number[]} physicalRows An array of physical rows removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRemoveRow",
  /**
   * Fired before Handsontable's view-rendering engine is rendered.
   *
   * __Note:__ In Handsontable 9.x and earlier, the `beforeViewRender` hook was named `beforeRender`.
   *
   * @event Hooks#beforeViewRender
   * @since 10.0.0
   * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
   *                           data, or a logic that needs a full Handsontable render cycle.
   *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
   * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering cycle will be skipped.
   */
  "beforeViewRender",
  /**
   * Fired after Handsontable's view-rendering engine is rendered,
   * but before redrawing the selection borders and before scroll syncing.
   *
   * __Note:__ In Handsontable 9.x and earlier, the `afterViewRender` hook was named `afterRender`.
   *
   * @event Hooks#afterViewRender
   * @since 10.0.0
   * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
   *                           data, or a logic that needs a full Handsontable render cycle.
   *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
   */
  "afterViewRender",
  /**
   * Fired before Handsontable's view-rendering engine updates the view.
   *
   * The `beforeRender` event is fired right after the Handsontable
   * business logic is executed and right before the rendering engine starts calling
   * the Core logic, renderers, cell meta objects etc. to update the view.
   *
   * @event Hooks#beforeRender
   * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
   *                           data, or a logic that needs a full Handsontable render cycle.
   *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
   */
  "beforeRender",
  /**
   * Fired after Handsontable's view-rendering engine updates the view.
   *
   * @event Hooks#afterRender
   * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
   *                           data, or a logic that needs a full Handsontable render cycle.
   *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
   */
  "afterRender",
  /**
   * When the focus position is moved to the next or previous row caused by the {@link Options#autoWrapRow} option
   * the hook is triggered.
   *
   * @since 14.0.0
   * @event Hooks#beforeRowWrap
   * @param {boolean} isWrapEnabled Tells whether the row wrapping is going to happen.
   * There may be situations where the option does not work even though it is enabled.
   * This is due to the priority of other options that may block the feature.
   * For example, when the {@link Options#minSpareCols} is defined, the {@link Options#autoWrapRow} option is not checked.
   * Thus, row wrapping is off.
   * @param {CellCoords} newCoords The new focus position. It is an object with keys `row` and `col`, where a value of `-1` indicates a header.
   * @param {boolean} isFlipped `true` if the row index was flipped, `false` otherwise.
   * Flipped index means that the user reached the last row and the focus is moved to the first row or vice versa.
   */
  "beforeRowWrap",
  /**
   * When the focus position is moved to the next or previous column caused by the {@link Options#autoWrapCol} option
   * the hook is triggered.
   *
   * @since 14.0.0
   * @event Hooks#beforeColumnWrap
   * @param {boolean} isWrapEnabled Tells whether the column wrapping is going to happen.
   * There may be situations where the option does not work even though it is enabled.
   * This is due to the priority of other options that may block the feature.
   * For example, when the {@link Options#minSpareRows} is defined, the {@link Options#autoWrapCol} option is not checked.
   * Thus, column wrapping is off.
   * @param {CellCoords} newCoords The new focus position. It is an object with keys `row` and `col`, where a value of `-1` indicates a header.
   * @param {boolean} isFlipped `true` if the column index was flipped, `false` otherwise.
   * Flipped index means that the user reached the last column and the focus is moved to the first column or vice versa.
   */
  "beforeColumnWrap",
  /**
   * Fired before cell meta is changed.
   *
   * @event Hooks#beforeSetCellMeta
   * @since 8.0.0
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} key The updated meta key.
   * @param {*} value The updated meta value.
   * @returns {boolean|undefined} If false is returned the action is canceled.
   */
  "beforeSetCellMeta",
  /**
   * Fired before setting range is started but not finished yet.
   *
   * @event Hooks#beforeSetRangeStartOnly
   * @param {CellCoords} coords CellCoords instance.
   */
  "beforeSetRangeStartOnly",
  /**
   * Fired before setting range is started.
   *
   * @event Hooks#beforeSetRangeStart
   * @param {CellCoords} coords CellCoords instance.
   */
  "beforeSetRangeStart",
  /**
   * Fired before setting range is ended.
   *
   * @event Hooks#beforeSetRangeEnd
   * @param {CellCoords} coords CellCoords instance.
   */
  "beforeSetRangeEnd",
  /**
   * Fired before applying selection coordinates to the renderable coordinates for Walkontable (rendering engine).
   * It occurs even when cell coordinates remain unchanged and activates during cell selection and drag selection.
   * The behavior of Shift+Tab differs from Arrow Left when there's no further movement possible.
   *
   * @since 14.0.0
   * @event Hooks#beforeSelectionHighlightSet
   */
  "beforeSelectionHighlightSet",
  /**
   * Fired before the logic of handling a touch scroll, when user started scrolling on a touch-enabled device.
   *
   * @event Hooks#beforeTouchScroll
   */
  "beforeTouchScroll",
  /**
   * Fired before cell validation, only if validator function is defined. This can be used to manipulate the value
   * of changed cell before it is applied to the validator function.
   *
   * __Note:__ this will not affect values of changes. This will change value *ONLY* for validation.
   *
   * @event Hooks#beforeValidate
   * @param {*} value Value of the cell.
   * @param {number} row Visual row index.
   * @param {string|number} prop Property name / column index.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "beforeValidate",
  /**
   * Fired before cell value is rendered into the DOM (through renderer function). This can be used to manipulate the
   * value which is passed to the renderer without modifying the renderer itself.
   *
   * @event Hooks#beforeValueRender
   * @param {*} value Cell value to render.
   * @param {object} cellProperties An object containing the cell properties.
   */
  "beforeValueRender",
  /**
   * Fired after Handsontable instance is constructed (using `new` operator).
   *
   * @event Hooks#construct
   */
  "construct",
  /**
   * Fired after Handsontable instance is initiated but before table is rendered.
   *
   * @event Hooks#init
   */
  "init",
  /**
   * Fired when a column header index is about to be modified by a callback function.
   *
   * @event Hooks#modifyColHeader
   * @param {number} column Visual column header index.
   */
  "modifyColHeader",
  /**
   * Fired when a column width is about to be modified by a callback function.
   *
   * @event Hooks#modifyColWidth
   * @param {number} width Current column width.
   * @param {number} column Visual column index.
   */
  "modifyColWidth",
  /**
   * Fired when focusing a cell or a header element. Allows replacing the element to be focused by returning a
   * different HTML element.
   *
   * @since 14.0.0
   * @event Hooks#modifyFocusedElement
   * @param {number} row Row index.
   * @param {number} column Column index.
   * @param {HTMLElement|undefined} focusedElement The element to be focused. `null` for focusedElement is intended when focused cell is hidden.
   */
  "modifyFocusedElement",
  /**
   * Fired when a row header index is about to be modified by a callback function.
   *
   * @event Hooks#modifyRowHeader
   * @param {number} row Visual row header index.
   */
  "modifyRowHeader",
  /**
   * Fired when a row height is about to be modified by a callback function.
   *
   * @event Hooks#modifyRowHeight
   * @param {number} height Row height.
   * @param {number} row Visual row index.
   */
  "modifyRowHeight",
  /**
   * Fired when a data was retrieved or modified.
   *
   * @event Hooks#modifyData
   * @param {number} row Physical row index.
   * @param {number} column Visual column index.
   * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.
   * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).
   */
  "modifyData",
  /**
   * Fired when a data was retrieved or modified from the source data set.
   *
   * @event Hooks#modifySourceData
   * @since 8.0.0
   * @param {number} row Physical row index.
   * @param {number} column Physical column index or property name.
   * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.
   * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).
   */
  "modifySourceData",
  /**
   * Fired when a data was retrieved or modified.
   *
   * @event Hooks#modifyRowData
   * @param {number} row Physical row index.
   */
  "modifyRowData",
  /**
   * Used to modify the cell coordinates when using the `getCell` method, opening editor, getting value from the editor
   * and saving values from the closed editor.
   *
   * @event Hooks#modifyGetCellCoords
   * @since 0.36.0
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {boolean} topmost If set to `true`, it returns the TD element from the topmost overlay. For example,
   *                          if the wanted cell is in the range of fixed rows, it will return a TD element
   *                          from the `top` overlay.
   * @returns {undefined|number[]}
   */
  "modifyGetCellCoords",
  /**
   * Used to modify the cell coordinates when the table is activated (going into the listen mode).
   *
   * @event Hooks#modifyFocusOnTabNavigation
   * @since 14.0.0
   * @param {'from_above' | 'from_below'} tabActivationDir The browsers Tab navigation direction. Depending on
   * whether the user activated the table from the element above or below, another cell can be selected.
   * @param {CellCoords} visualCoords The coords that will be used to select a cell.
   */
  "modifyFocusOnTabNavigation",
  /**
   * Allows modify the visual row index that is used to retrieve the row header element (TH) before it's
   * highlighted (proper CSS class names are added). Modifying the visual row index allows building a custom
   * implementation of the nested headers feature or other features that require highlighting other DOM
   * elements than that the rendering engine, by default, would have highlighted.
   *
   * @event Hooks#beforeHighlightingRowHeader
   * @since 8.4.0
   * @param {number} row Visual row index.
   * @param {number} headerLevel Column header level (0 = most distant to the table).
   * @param {object} highlightMeta An object that contains additional information about processed selection.
   * @returns {number|undefined}
   */
  "beforeHighlightingRowHeader",
  /**
   * Allows modify the visual column index that is used to retrieve the column header element (TH) before it's
   * highlighted (proper CSS class names are added). Modifying the visual column index allows building a custom
   * implementation of the nested headers feature or other features that require highlighting other DOM
   * elements than that the rendering engine, by default, would have highlighted.
   *
   * @event Hooks#beforeHighlightingColumnHeader
   * @since 8.4.0
   * @param {number} column Visual column index.
   * @param {number} headerLevel Row header level (0 = most distant to the table).
   * @param {object} highlightMeta An object that contains additional information about processed selection.
   * @returns {number|undefined}
   */
  "beforeHighlightingColumnHeader",
  /**
   * Fired by {@link PersistentState} plugin, after loading value, saved under given key, from browser local storage.
   *
   * The `persistentStateLoad` hook is fired even when the {@link Options#persistentState} option is disabled.
   *
   * @event Hooks#persistentStateLoad
   * @param {string} key Key.
   * @param {object} valuePlaceholder Object containing the loaded value under `valuePlaceholder.value` (if no value have been saved, `value` key will be undefined).
   */
  "persistentStateLoad",
  /**
   * Fired by {@link PersistentState} plugin after resetting data from local storage. If no key is given, all values associated with table will be cleared.
   * This hook is fired when {@link Options#persistentState} option is enabled.
   *
   * @event Hooks#persistentStateReset
   * @param {string} [key] Key.
   */
  "persistentStateReset",
  /**
   * Fired by {@link PersistentState} plugin, after saving value under given key in browser local storage.
   *
   * The `persistentStateSave` hook is fired even when the {@link Options#persistentState} option is disabled.
   *
   * @event Hooks#persistentStateSave
   * @param {string} key Key.
   * @param {Mixed} value Value to save.
   */
  "persistentStateSave",
  /**
   * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins before sorting the column. If you return `false` value inside callback for hook, then sorting
   * will be not applied by the Handsontable (useful for server-side sorting).
   *
   * This hook is fired when {@link Options#columnSorting} or {@link Options#multiColumnSorting} option is enabled.
   *
   * @event Hooks#beforeColumnSort
   * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).
   * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).
   * @returns {boolean | undefined} If `false` the column will not be sorted, `true` otherwise.
   */
  "beforeColumnSort",
  /**
   * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins after sorting the column. This hook is fired when {@link Options#columnSorting}
   * or {@link Options#multiColumnSorting} option is enabled.
   *
   * @event Hooks#afterColumnSort
   * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).
   * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).
   */
  "afterColumnSort",
  /**
   * Fired by {@link Autofill} plugin after setting range of autofill. This hook is fired when {@link Options#fillHandle}
   * option is enabled.
   *
   * @event Hooks#modifyAutofillRange
   * @param {Array} startArea Array of visual coordinates of the starting point for the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).
   * @param {Array} entireArea Array of visual coordinates of the entire area of the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).
   */
  "modifyAutofillRange",
  /**
   * Fired to allow modifying the copyable range with a callback function.
   *
   * @event Hooks#modifyCopyableRange
   * @param {Array[]} copyableRanges Array of objects defining copyable cells.
   */
  "modifyCopyableRange",
  /**
   * Fired by {@link CopyPaste} plugin before copying the values to the clipboard and before clearing values of
   * the selected cells. This hook is fired when {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#beforeCut
   * @param {Array[]} data An array of arrays which contains data to cut.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                       which will be cut out.
   * @returns {*} If returns `false` then operation of the cutting out is canceled.
   * @example
   * ::: only-for javascript
   * ```js
   * // To disregard a single row, remove it from the array using data.splice(i, 1).
   * new Handsontable(element, {
   *   beforeCut: function(data, coords) {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }
   * });
   * // To cancel a cutting action, just return `false`.
   * new Handsontable(element, {
   *   beforeCut: function(data, coords) {
   *     return false;
   *   }
   * });
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // To disregard a single row, remove it from the array using data.splice(i, 1).
   * <HotTable
   *   beforeCut={(data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }}
   * />
   * // To cancel a cutting action, just return `false`.
   * <HotTable
   *   beforeCut={(data, coords) => {
   *     return false;
   *   }}
   * />
   * ```
   * :::
   */
  "beforeCut",
  /**
   * Fired by {@link CopyPaste} plugin after data was cut out from the table. This hook is fired when
   * {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#afterCut
   * @param {Array[]} data An array of arrays with the cut data.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                       which was cut out.
   */
  "afterCut",
  /**
   * Fired before values are copied to the clipboard.
   *
   * @event Hooks#beforeCopy
   * @param {Array[]} data An array of arrays which contains data to copied.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                         which will copied.
   * @param {{ columnHeadersCount: number }} copiedHeadersCount (Since 12.3.0) The number of copied column headers.
   * @returns {*} If returns `false` then copying is canceled.
   *
   * @example
   * ::: only-for javascript
   * ```js
   * // To disregard a single row, remove it from array using data.splice(i, 1).
   * ...
   * new Handsontable(document.getElementById('example'), {
   *   beforeCopy: (data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }
   * });
   * ...
   *
   * // To cancel copying, return false from the callback.
   * ...
   * new Handsontable(document.getElementById('example'), {
   *   beforeCopy: (data, coords) => {
   *     return false;
   *   }
   * });
   * ...
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // To disregard a single row, remove it from array using data.splice(i, 1).
   * ...
   * <HotTable
   *   beforeCopy={(data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }}
   * />
   * ...
   *
   * // To cancel copying, return false from the callback.
   * ...
   * <HotTable
   *   beforeCopy={(data, coords) => {
   *     return false;
   *   }}
   * />
   * ...
   * ```
   * :::
   */
  "beforeCopy",
  /**
   * Fired by {@link CopyPaste} plugin after data are pasted into table. This hook is fired when {@link Options#copyPaste}
   * option is enabled.
   *
   * @event Hooks#afterCopy
   * @param {Array[]} data An array of arrays which contains the copied data.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                         which was copied.
   * @param {{ columnHeadersCount: number }} copiedHeadersCount (Since 12.3.0) The number of copied column headers.
   */
  "afterCopy",
  /**
   * Fired by {@link CopyPaste} plugin before values are pasted into table. This hook is fired when
   * {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#beforePaste
   * @param {Array[]} data An array of arrays which contains data to paste.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                       that correspond to the previously selected area.
   * @returns {*} If returns `false` then pasting is canceled.
   * @example
   * ```js
   * ::: only-for javascript
   * // To disregard a single row, remove it from array using data.splice(i, 1).
   * new Handsontable(example, {
   *   beforePaste: (data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }
   * });
   * // To cancel pasting, return false from the callback.
   * new Handsontable(example, {
   *   beforePaste: (data, coords) => {
   *     return false;
   *   }
   * });
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // To disregard a single row, remove it from array using data.splice(i, 1).
   * <HotTable
   *   beforePaste={(data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }}
   * />
   * // To cancel pasting, return false from the callback.
   * <HotTable
   *   beforePaste={(data, coords) => {
   *     return false;
   *   }}
   * />
   * ```
   * :::
   */
  "beforePaste",
  /**
   * Fired by {@link CopyPaste} plugin after values are pasted into table. This hook is fired when
   * {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#afterPaste
   * @param {Array[]} data An array of arrays with the pasted data.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                       that correspond to the previously selected area.
   */
  "afterPaste",
  /**
   * Fired by the {@link ManualColumnFreeze} plugin, before freezing a column.
   *
   * @event Hooks#beforeColumnFreeze
   * @since 12.1.0
   * @param {number} column The visual index of the column that is going to freeze.
   * @param {boolean} freezePerformed If `true`: the column is going to freeze. If `false`: the column is not going to freeze (which might happen if the column is already frozen).
   * @returns {boolean|undefined} If `false`: the column is not going to freeze, and the `afterColumnFreeze` hook won't fire.
   */
  "beforeColumnFreeze",
  /**
   * Fired by the {@link ManualColumnFreeze} plugin, right after freezing a column.
   *
   * @event Hooks#afterColumnFreeze
   * @since 12.1.0
   * @param {number} column The visual index of the frozen column.
   * @param {boolean} freezePerformed If `true`: the column got successfully frozen. If `false`: the column didn't get frozen.
   */
  "afterColumnFreeze",
  /**
   * Fired by {@link ManualColumnMove} plugin before change order of the visual indexes. This hook is fired when
   * {@link Options#manualColumnMove} option is enabled.
   *
   * @event Hooks#beforeColumnMove
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns.
   *                            Points to where the elements will be placed after the moving action.
   *                            To check visualization of final index please take a look at
   *                            [documentation](@/guides/columns/column-moving.md).
   * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns.
   *                                     Points to where we are going to drop the moved elements. To check
   *                                     visualization of drop index please take a look at
   *                                     [documentation](@/guides/columns/column-moving.md).
   *                                     It's `undefined` when `dragColumns` function wasn't called.
   * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
   * @returns {undefined | boolean} If `false` the column will not be moved, `true` otherwise.
   */
  "beforeColumnMove",
  /**
   * Fired by {@link ManualColumnMove} plugin after changing order of the visual indexes.
   * This hook is fired when {@link Options#manualColumnMove} option is enabled.
   *
   * @event Hooks#afterColumnMove
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns.
   *                            Points to where the elements will be placed after the moving action.
   *                            To check visualization of final index please take a look at
   *                            [documentation](@/guides/columns/column-moving.md).
   * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns.
   *                                     Points to where we are going to drop the moved elements.
   *                                     To check visualization of drop index please take a look at
   *                                     [documentation](@/guides/columns/column-moving.md).
   *                                     It's `undefined` when `dragColumns` function wasn't called.
   * @param {boolean} movePossible Indicates if it was possible to move columns to the desired position.
   * @param {boolean} orderChanged Indicates if order of columns was changed by move.
   */
  "afterColumnMove",
  /**
   * Fired by the {@link ManualColumnFreeze} plugin, before unfreezing a column.
   *
   * @event Hooks#beforeColumnUnfreeze
   * @since 12.1.0
   * @param {number} column The visual index of the column that is going to unfreeze.
   * @param {boolean} unfreezePerformed If `true`: the column is going to unfreeze. If `false`: the column is not going to unfreeze (which might happen if the column is already unfrozen).
   * @returns {boolean|undefined} If `false`: the column is not going to unfreeze, and the `afterColumnUnfreeze` hook won't fire.
   */
  "beforeColumnUnfreeze",
  /**
   * Fired by the {@link ManualColumnFreeze} plugin, right after unfreezing a column.
   *
   * @event Hooks#afterColumnUnfreeze
   * @since 12.1.0
   * @param {number} column The visual index of the unfrozen column.
   * @param {boolean} unfreezePerformed If `true`: the column got successfully unfrozen. If `false`: the column didn't get unfrozen.
   */
  "afterColumnUnfreeze",
  /**
   * Fired by {@link ManualRowMove} plugin before changing the order of the visual indexes. This hook is fired when
   * {@link Options#manualRowMove} option is enabled.
   *
   * @event Hooks#beforeRowMove
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows.
   *                            Points to where the elements will be placed after the moving action.
   *                            To check visualization of final index please take a look at
   *                            [documentation](@/guides/rows/row-moving.md).
   * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows.
   *                                     Points to where we are going to drop the moved elements.
   *                                     To check visualization of drop index please take a look at
   *                                     [documentation](@/guides/rows/row-moving.md).
   *                                     It's `undefined` when `dragRows` function wasn't called.
   * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRowMove",
  /**
   * Fired by {@link ManualRowMove} plugin after changing the order of the visual indexes.
   * This hook is fired when {@link Options#manualRowMove} option is enabled.
   *
   * @event Hooks#afterRowMove
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows.
   *                            Points to where the elements will be placed after the moving action.
   *                            To check visualization of final index please take a look at
   *                            [documentation](@/guides/rows/row-moving.md).
   * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows.
   *                                     Points to where we are going to drop the moved elements.
   *                                     To check visualization of drop index please take a look at
   *                                     [documentation](@/guides/rows/row-moving.md).
   *                                     It's `undefined` when `dragRows` function wasn't called.
   * @param {boolean} movePossible Indicates if it was possible to move rows to the desired position.
   * @param {boolean} orderChanged Indicates if order of rows was changed by move.
   */
  "afterRowMove",
  /**
   * Fired by {@link ManualColumnResize} plugin before rendering the table with modified column sizes. This hook is
   * fired when {@link Options#manualColumnResize} option is enabled.
   *
   * @event Hooks#beforeColumnResize
   * @param {number} newSize Calculated new column width.
   * @param {number} column Visual index of the resized column.
   * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
   * @returns {number} Returns a new column size or `undefined`, if column size should be calculated automatically.
   */
  "beforeColumnResize",
  /**
   * Fired by {@link ManualColumnResize} plugin after rendering the table with modified column sizes. This hook is
   * fired when {@link Options#manualColumnResize} option is enabled.
   *
   * @event Hooks#afterColumnResize
   * @param {number} newSize Calculated new column width.
   * @param {number} column Visual index of the resized column.
   * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
   */
  "afterColumnResize",
  /**
   * Fired by {@link ManualRowResize} plugin before rendering the table with modified row sizes. This hook is
   * fired when {@link Options#manualRowResize} option is enabled.
   *
   * @event Hooks#beforeRowResize
   * @param {number} newSize Calculated new row height.
   * @param {number} row Visual index of the resized row.
   * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
   * @returns {number|undefined} Returns the new row size or `undefined` if row size should be calculated automatically.
   */
  "beforeRowResize",
  /**
   * Fired by {@link ManualRowResize} plugin after rendering the table with modified row sizes. This hook is
   * fired when {@link Options#manualRowResize} option is enabled.
   *
   * @event Hooks#afterRowResize
   * @param {number} newSize Calculated new row height.
   * @param {number} row Visual index of the resized row.
   * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
   */
  "afterRowResize",
  /**
   * Fired after getting the column header renderers.
   *
   * @event Hooks#afterGetColumnHeaderRenderers
   * @param {Function[]} renderers An array of the column header renderers.
   */
  "afterGetColumnHeaderRenderers",
  /**
   * Fired after getting the row header renderers.
   *
   * @event Hooks#afterGetRowHeaderRenderers
   * @param {Function[]} renderers An array of the row header renderers.
   */
  "afterGetRowHeaderRenderers",
  /**
   * Fired before applying stretched column width to column.
   *
   * @event Hooks#beforeStretchingColumnWidth
   * @param {number} stretchedWidth Calculated width.
   * @param {number} column Visual column index.
   * @returns {number|undefined} Returns new width which will be applied to the column element.
   */
  "beforeStretchingColumnWidth",
  /**
   * Fired by the [`Filters`](@/api/filters.md) plugin,
   * before a [column filter](@/guides/columns/column-filter.md) gets applied.
   *
   * [`beforeFilter`](#beforefilter) takes one argument (`conditionsStack`), which is an array of objects.
   * Each object represents one of your [column filters](@/api/filters.md#addcondition),
   * and consists of the following properties:
   *
   * | Property     | Possible values                                                         | Description                                                                                                              |
   * | ------------ | ----------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |
   * | `column`     | Number                                                                  | A visual index of the column to which the filter will be applied.                                                        |
   * | `conditions` | Array of objects                                                        | Each object represents one condition. For details, see [`addCondition()`](@/api/filters.md#addcondition).                |
   * | `operation`  | `'conjunction'` \| `'disjunction'` \| `'disjunctionWithExtraCondition'` | An operation to perform on your set of `conditions`. For details, see [`addCondition()`](@/api/filters.md#addcondition). |
   *
   * An example of the format of the `conditionsStack` argument:
   *
   * ```js
   * [
   *   {
   *     column: 2,
   *     conditions: [
   *       {name: 'begins_with', args: [['S']]}
   *     ],
   *     operation: 'conjunction'
   *   },
   *   {
   *     column: 4,
   *     conditions: [
   *       {name: 'not_empty', args: []}
   *     ],
   *     operation: 'conjunction'
   *   },
   * ]
   * ```
   *
   * To perform server-side filtering (i.e., to not apply filtering to Handsontable's UI),
   * set [`beforeFilter`](#beforefilter) to return `false`:
   *
   * ```js
   * new Handsontable(document.getElementById('example'), {
   *   beforeFilter: (conditionsStack) => {
   *     return false;
   *   }
   * });
   *```
   *
   * Read more:
   * - [Guides: Column filter](@/guides/columns/column-filter.md)
   * - [Hooks: `afterFilter`](#afterfilter)
   * - [Options: `filters`](@/api/options.md#filters)
   * - [Plugins: `Filters`](@/api/filters.md)
   * – [Plugin methods: `addCondition()`](@/api/filters.md#addcondition)
   *
   * @event Hooks#beforeFilter
   * @param {object[]} conditionsStack An array of objects with your [column filters](@/api/filters.md#addcondition).
   * @returns {boolean} To perform server-side filtering (i.e., to not apply filtering to Handsontable's UI), return `false`.
   */
  "beforeFilter",
  /**
   * Fired by the [`Filters`](@/api/filters.md) plugin,
   * after a [column filter](@/guides/columns/column-filter.md) gets applied.
   *
   * [`afterFilter`](#afterfilter) takes one argument (`conditionsStack`), which is an array of objects.
   * Each object represents one of your [column filters](@/api/filters.md#addcondition),
   * and consists of the following properties:
   *
   * | Property     | Possible values                                                         | Description                                                                                                              |
   * | ------------ | ----------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |
   * | `column`     | Number                                                                  | A visual index of the column to which the filter was applied.                                                            |
   * | `conditions` | Array of objects                                                        | Each object represents one condition. For details, see [`addCondition()`](@/api/filters.md#addcondition).                |
   * | `operation`  | `'conjunction'` \| `'disjunction'` \| `'disjunctionWithExtraCondition'` | An operation to perform on your set of `conditions`. For details, see [`addCondition()`](@/api/filters.md#addcondition). |
   *
   * An example of the format of the `conditionsStack` argument:
   *
   * ```js
   * [
   *   {
   *     column: 2,
   *     conditions: [
   *       {name: 'begins_with', args: [['S']]}
   *     ],
   *     operation: 'conjunction'
   *   },
   *   {
   *     column: 4,
   *     conditions: [
   *       {name: 'not_empty', args: []}
   *     ],
   *     operation: 'conjunction'
   *   },
   * ]
   * ```
   *
   * Read more:
   * - [Guides: Column filter](@/guides/columns/column-filter.md)
   * - [Hooks: `beforeFilter`](#beforefilter)
   * - [Options: `filters`](@/api/options.md#filters)
   * - [Plugins: `Filters`](@/api/filters.md)
   * – [Plugin methods: `addCondition()`](@/api/filters.md#addcondition)
   *
   * @event Hooks#afterFilter
   * @param {object[]} conditionsStack An array of objects with your [column filters](@/api/filters.md#addcondition).
   */
  "afterFilter",
  /**
   * Fired by the {@link Formulas} plugin, when any cell value changes.
   *
   * Returns an array of objects that contains:
   * - The addresses (`sheet`, `row`, `col`) and new values (`newValue`) of the changed cells.
   * - The addresses and new values of any cells that had to be recalculated (because their formulas depend on the cells that changed).
   *
   * This hook gets also fired on Handsontable's initialization, returning the addresses and values of all cells.
   *
   * Read more:
   * - [Guides: Formula calculation](@/guides/formulas/formula-calculation.md)
   * - [HyperFormula documentation: `valuesUpdated`](https://hyperformula.handsontable.com/api/interfaces/listeners.html#valuesupdated)
   *
   * @since 9.0.0
   * @event Hooks#afterFormulasValuesUpdate
   * @param {Array} changes The addresses and new values of all the changed and recalculated cells.
   */
  "afterFormulasValuesUpdate",
  /**
   * Fired when a named expression is added to the Formulas' engine instance.
   *
   * @since 9.0.0
   * @event Hooks#afterNamedExpressionAdded
   * @param {string} namedExpressionName The name of the added expression.
   * @param {Array} changes The values and location of applied changes.
   */
  "afterNamedExpressionAdded",
  /**
   * Fired when a named expression is removed from the Formulas' engine instance.
   *
   * @since 9.0.0
   * @event Hooks#afterNamedExpressionRemoved
   * @param {string} namedExpressionName The name of the removed expression.
   * @param {Array} changes The values and location of applied changes.
   */
  "afterNamedExpressionRemoved",
  /**
   * Fired when a new sheet is added to the Formulas' engine instance.
   *
   * @since 9.0.0
   * @event Hooks#afterSheetAdded
   * @param {string} addedSheetDisplayName The name of the added sheet.
   */
  "afterSheetAdded",
  /**
   * Fired when a sheet in the Formulas' engine instance is renamed.
   *
   * @since 9.0.0
   * @event Hooks#afterSheetRenamed
   * @param {string} oldDisplayName The old name of the sheet.
   * @param {string} newDisplayName The new name of the sheet.
   */
  "afterSheetRenamed",
  /**
   * Fired when a sheet is removed from the Formulas' engine instance.
   *
   * @since 9.0.0
   * @event Hooks#afterSheetRemoved
   * @param {string} removedSheetDisplayName The removed sheet name.
   * @param {Array} changes The values and location of applied changes.
   */
  "afterSheetRemoved",
  /**
   * Fired while retrieving the column header height.
   *
   * @event Hooks#modifyColumnHeaderHeight
   */
  "modifyColumnHeaderHeight",
  /**
   * Fired while retrieving a column header's value.
   *
   * @since 12.3.0
   * @event Hooks#modifyColumnHeaderValue
   * @param {string} value A column header value.
   * @param {number} visualColumnIndex A visual column index.
   * @param {number} [headerLevel=0] Header level index. Accepts positive (0 to n)
   *                                 and negative (-1 to -n) values. For positive values, 0 points to the
   *                                 topmost header. For negative values, -1 points to the bottom-most
   *                                 header (the header closest to the cells).
   * @returns {string} The column header value to be updated.
   */
  "modifyColumnHeaderValue",
  /**
   * Fired by {@link UndoRedo} plugin before the undo action. Contains information about the action that is being undone.
   * This hook is fired when {@link Options#undo} option is enabled.
   *
   * @event Hooks#beforeUndo
   * @param {object} action The action object. Contains information about the action being undone. The `actionType`
   *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeUndo",
  /**
   * Fired by {@link UndoRedo} plugin before changing undo stack.
   *
   * @event Hooks#beforeUndoStackChange
   * @since 8.4.0
   * @param {Array} doneActions Stack of actions which may be undone.
   * @param {string} [source] String that identifies source of action
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*|boolean} If false is returned the action of changing undo stack is canceled.
   */
  "beforeUndoStackChange",
  /**
   * Fired by {@link UndoRedo} plugin after the undo action. Contains information about the action that is being undone.
   * This hook is fired when {@link Options#undo} option is enabled.
   *
   * @event Hooks#afterUndo
   * @param {object} action The action object. Contains information about the action being undone. The `actionType`
   *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).
   */
  "afterUndo",
  /**
   * Fired by {@link UndoRedo} plugin after changing undo stack.
   *
   * @event Hooks#afterUndoStackChange
   * @since 8.4.0
   * @param {Array} doneActionsBefore Stack of actions which could be undone before performing new action.
   * @param {Array} doneActionsAfter Stack of actions which can be undone after performing new action.
   */
  "afterUndoStackChange",
  /**
   * Fired by {@link UndoRedo} plugin before the redo action. Contains information about the action that is being redone.
   * This hook is fired when {@link Options#undo} option is enabled.
   *
   * @event Hooks#beforeRedo
   * @param {object} action The action object. Contains information about the action being redone. The `actionType`
   *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRedo",
  /**
   * Fired by {@link UndoRedo} plugin before changing redo stack.
   *
   * @event Hooks#beforeRedoStackChange
   * @since 8.4.0
   * @param {Array} undoneActions Stack of actions which may be redone.
   */
  "beforeRedoStackChange",
  /**
   * Fired by {@link UndoRedo} plugin after the redo action. Contains information about the action that is being redone.
   * This hook is fired when {@link Options#undo} option is enabled.
   *
   * @event Hooks#afterRedo
   * @param {object} action The action object. Contains information about the action being redone. The `actionType`
   *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).
   */
  "afterRedo",
  /**
   * Fired by {@link UndoRedo} plugin after changing redo stack.
   *
   * @event Hooks#afterRedoStackChange
   * @since 8.4.0
   * @param {Array} undoneActionsBefore Stack of actions which could be redone before performing new action.
   * @param {Array} undoneActionsAfter Stack of actions which can be redone after performing new action.
   */
  "afterRedoStackChange",
  /**
   * Fired while retrieving the row header width.
   *
   * @event Hooks#modifyRowHeaderWidth
   * @param {number} rowHeaderWidth Row header width.
   */
  "modifyRowHeaderWidth",
  /**
   * Fired when the start of the selection is being modified (e.g. Moving the selection with the arrow keys).
   *
   * @event Hooks#modifyTransformStart
   * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.
   */
  "modifyTransformStart",
  /**
   * Fired when the end of the selection is being modified (e.g. Moving the selection with the arrow keys).
   *
   * @event Hooks#modifyTransformEnd
   * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.
   */
  "modifyTransformEnd",
  /**
   * Fired after the start of the selection is being modified (e.g. Moving the selection with the arrow keys).
   *
   * @event Hooks#afterModifyTransformStart
   * @param {CellCoords} coords Coords of the freshly selected cell.
   * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.
   * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.
   */
  "afterModifyTransformStart",
  /**
   * Fired after the end of the selection is being modified (e.g. Moving the selection with the arrow keys).
   *
   * @event Hooks#afterModifyTransformEnd
   * @param {CellCoords} coords Visual coords of the freshly selected cell.
   * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.
   * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.
   */
  "afterModifyTransformEnd",
  /**
   * Fired inside the `viewportRowCalculatorOverride` method. Allows modifying the row calculator parameters.
   *
   * @event Hooks#afterViewportRowCalculatorOverride
   * @param {object} calc The row calculator.
   */
  "afterViewportRowCalculatorOverride",
  /**
   * Fired inside the `viewportColumnCalculatorOverride` method. Allows modifying the row calculator parameters.
   *
   * @event Hooks#afterViewportColumnCalculatorOverride
   * @param {object} calc The row calculator.
   */
  "afterViewportColumnCalculatorOverride",
  /**
   * Fired after initializing all the plugins.
   * This hook should be added before Handsontable is initialized.
   *
   * @event Hooks#afterPluginsInitialized
   *
   * @example
   * ```js
   * Handsontable.hooks.add('afterPluginsInitialized', myCallback);
   * ```
   */
  "afterPluginsInitialized",
  /**
   * Fired by {@link HiddenRows} plugin before marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
   * Returning `false` in the callback will prevent the hiding action from completing.
   *
   * @event Hooks#beforeHideRows
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
   * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.
   */
  "beforeHideRows",
  /**
   * Fired by {@link HiddenRows} plugin after marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
   *
   * @event Hooks#afterHideRows
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
   * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any non-hidden rows, `false` otherwise.
   */
  "afterHideRows",
  /**
   * Fired by {@link HiddenRows} plugin before marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
   * Returning `false` in the callback will prevent the row revealing action from completing.
   *
   * @event Hooks#beforeUnhideRows
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
   * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the revealing action will not be completed.
   */
  "beforeUnhideRows",
  /**
   * Fired by {@link HiddenRows} plugin after marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
   *
   * @event Hooks#afterUnhideRows
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
   * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any hidden rows, `false` otherwise.
   */
  "afterUnhideRows",
  /**
   * Fired by {@link HiddenColumns} plugin before marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
   * Returning `false` in the callback will prevent the hiding action from completing.
   *
   * @event Hooks#beforeHideColumns
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
   * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.
   */
  "beforeHideColumns",
  /**
   * Fired by {@link HiddenColumns} plugin after marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
   *
   * @event Hooks#afterHideColumns
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
   * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any non-hidden columns, `false` otherwise.
   */
  "afterHideColumns",
  /**
   * Fired by {@link HiddenColumns} plugin before marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
   * Returning `false` in the callback will prevent the column revealing action from completing.
   *
   * @event Hooks#beforeUnhideColumns
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
   * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.
   */
  "beforeUnhideColumns",
  /**
   * Fired by {@link HiddenColumns} plugin after marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
   *
   * @event Hooks#afterUnhideColumns
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
   * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any hidden columns, `false` otherwise.
   */
  "afterUnhideColumns",
  /**
   * Fired by {@link TrimRows} plugin before trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
   *
   * @event Hooks#beforeTrimRow
   * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
   * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
   * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.
   */
  "beforeTrimRow",
  /**
   * Fired by {@link TrimRows} plugin after trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
   *
   * @event Hooks#afterTrimRow
   * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
   * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
   * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any non-trimmed rows, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.
   */
  "afterTrimRow",
  /**
   * Fired by {@link TrimRows} plugin before untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
   *
   * @event Hooks#beforeUntrimRow
   * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
   * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
   * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.
   */
  "beforeUntrimRow",
  /**
   * Fired by {@link TrimRows} plugin after untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
   *
   * @event Hooks#afterUntrimRow
   * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
   * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
   * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any trimmed rows, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.
   */
  "afterUntrimRow",
  /**
   * Fired by {@link DropdownMenu} plugin before opening the dropdown menu. This hook is fired when {@link Options#dropdownMenu}
   * option is enabled.
   *
   * @event Hooks#beforeDropdownMenuShow
   * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.
   */
  "beforeDropdownMenuShow",
  /**
   * Fired by {@link DropdownMenu} plugin after opening the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}
   * option is enabled.
   *
   * @event Hooks#afterDropdownMenuShow
   * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.
   */
  "afterDropdownMenuShow",
  /**
   * Fired by {@link DropdownMenu} plugin after hiding the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}
   * option is enabled.
   *
   * @event Hooks#afterDropdownMenuHide
   * @param {DropdownMenu} instance The DropdownMenu instance.
   */
  "afterDropdownMenuHide",
  /**
   * Fired by {@link NestedRows} plugin before adding a children to the NestedRows structure. This hook is fired when
   * {@link Options#nestedRows} option is enabled.
   *
   * @event Hooks#beforeAddChild
   * @param {object} parent The parent object.
   * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.
   * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.
   */
  "beforeAddChild",
  /**
   * Fired by {@link NestedRows} plugin after adding a children to the NestedRows structure. This hook is fired when
   * {@link Options#nestedRows} option is enabled.
   *
   * @event Hooks#afterAddChild
   * @param {object} parent The parent object.
   * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.
   * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.
   */
  "afterAddChild",
  /**
   * Fired by {@link NestedRows} plugin before detaching a child from its parent. This hook is fired when
   * {@link Options#nestedRows} option is enabled.
   *
   * @event Hooks#beforeDetachChild
   * @param {object} parent An object representing the parent from which the element is to be detached.
   * @param {object} element The detached element.
   */
  "beforeDetachChild",
  /**
   * Fired by {@link NestedRows} plugin after detaching a child from its parent. This hook is fired when
   * {@link Options#nestedRows} option is enabled.
   *
   * @event Hooks#afterDetachChild
   * @param {object} parent An object representing the parent from which the element was detached.
   * @param {object} element The detached element.
   * @param {number} finalElementPosition The final row index of the detached element.
   */
  "afterDetachChild",
  /**
   * Fired after the editor is opened and rendered.
   *
   * @event Hooks#afterBeginEditing
   * @param {number} row Visual row index of the edited cell.
   * @param {number} column Visual column index of the edited cell.
   */
  "afterBeginEditing",
  /**
   * Fired by {@link MergeCells} plugin before cell merging. This hook is fired when {@link Options#mergeCells}
   * option is enabled.
   *
   * @event Hooks#beforeMergeCells
   * @param {CellRange} cellRange Selection cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   */
  "beforeMergeCells",
  /**
   * Fired by {@link MergeCells} plugin after cell merging. This hook is fired when {@link Options#mergeCells}
   * option is enabled.
   *
   * @event Hooks#afterMergeCells
   * @param {CellRange} cellRange Selection cell range.
   * @param {object} mergeParent The parent collection of the provided cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   */
  "afterMergeCells",
  /**
   * Fired by {@link MergeCells} plugin before unmerging the cells. This hook is fired when {@link Options#mergeCells}
   * option is enabled.
   *
   * @event Hooks#beforeUnmergeCells
   * @param {CellRange} cellRange Selection cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   */
  "beforeUnmergeCells",
  /**
   * Fired by {@link MergeCells} plugin after unmerging the cells. This hook is fired when {@link Options#mergeCells}
   * option is enabled.
   *
   * @event Hooks#afterUnmergeCells
   * @param {CellRange} cellRange Selection cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   */
  "afterUnmergeCells",
  /**
   * Fired after the table was switched into listening mode. This allows Handsontable to capture keyboard events and
   * respond in the right way.
   *
   * @event Hooks#afterListen
   */
  "afterListen",
  /**
   * Fired after the table was switched off from the listening mode. This makes the Handsontable inert for any
   * keyboard events.
   *
   * @event Hooks#afterUnlisten
   */
  "afterUnlisten",
  /**
   * Fired after the window was resized or the size of the Handsontable root element was changed.
   *
   * @event Hooks#afterRefreshDimensions
   * @param {object} previousDimensions Previous dimensions of the container.
   * @param {object} currentDimensions Current dimensions of the container.
   * @param {boolean} stateChanged `true`, if the container was re-render, `false` otherwise.
   */
  "afterRefreshDimensions",
  /**
   * Cancellable hook, called after resizing a window or after detecting size change of the
   * Handsontable root element, but before redrawing a table.
   *
   * @event Hooks#beforeRefreshDimensions
   * @param {object} previousDimensions Previous dimensions of the container.
   * @param {object} currentDimensions Current dimensions of the container.
   * @param {boolean} actionPossible `true`, if current and previous dimensions are different, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the refresh action will not be completed.
   */
  "beforeRefreshDimensions",
  /**
   * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
   *
   * @event Hooks#beforeColumnCollapse
   * @since 8.0.0
   * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
   * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
   * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the collapsing action will not be completed.
   */
  "beforeColumnCollapse",
  /**
   * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
   *
   * @event Hooks#afterColumnCollapse
   * @since 8.0.0
   * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
   * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
   * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
   * @param {boolean} successfullyCollapsed `true`, if the action affected any non-collapsible column, `false` otherwise.
   */
  "afterColumnCollapse",
  /**
   * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
   *
   * @event Hooks#beforeColumnExpand
   * @since 8.0.0
   * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
   * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
   * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the expanding action will not be completed.
   */
  "beforeColumnExpand",
  /**
   * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
   *
   * @event Hooks#afterColumnExpand
   * @since 8.0.0
   * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
   * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
   * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
   * @param {boolean} successfullyExpanded `true`, if the action affected any non-collapsible column, `false` otherwise.
   */
  "afterColumnExpand",
  /**
   * Fired by {@link AutoColumnSize} plugin within SampleGenerator utility.
   *
   * @event Hooks#modifyAutoColumnSizeSeed
   * @since 8.4.0
   * @param {string|undefined} seed Seed ID, unique name to categorize samples.
   * @param {object} cellProperties Object containing the cell properties.
   * @param {*} cellValue Value of the cell.
   */
  "modifyAutoColumnSizeSeed"
], YG = bt`The plugin hook "[hookName]" was removed in Handsontable [removedInVersion].\x20
  Please consult release notes https://github.com/handsontable/handsontable/releases/tag/[removedInVersion] to\x20
  learn about the migration path.`, Km = /* @__PURE__ */ new Map([["modifyRow", "8.0.0"], ["modifyCol", "8.0.0"], ["unmodifyRow", "8.0.0"], ["unmodifyCol", "8.0.0"], ["skipLengthCache", "8.0.0"], ["hiddenColumn", "8.0.0"], ["hiddenRow", "8.0.0"]]), Xm = /* @__PURE__ */ new Map([[]]);
class bP {
  static getSingleton() {
    return zG();
  }
  /**
   * @type {object}
   */
  /**
   *
   */
  constructor() {
    VG(this, "globalBucket", void 0), this.globalBucket = this.createEmptyBucket();
  }
  /**
   * Returns a new object with empty handlers related to every registered hook name.
   *
   * @returns {object} The empty bucket object.
   *
   * @example
   * ```js
   * Handsontable.hooks.createEmptyBucket();
   * // Results:
   * {
   * ...
   * afterCreateCol: [],
   * afterCreateRow: [],
   * beforeInit: [],
   * ...
   * }
   * ```
   */
  createEmptyBucket() {
    const e = /* @__PURE__ */ Object.create(null);
    return H($a, (n) => e[n] = []), e;
  }
  /**
   * Get hook bucket based on the context of the object or if argument is `undefined`, get the global hook bucket.
   *
   * @param {object} [context=null] A Handsontable instance.
   * @returns {object} Returns a global or Handsontable instance bucket.
   */
  getBucket() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    return e ? (e.pluginHookBucket || (e.pluginHookBucket = this.createEmptyBucket()), e.pluginHookBucket) : this.globalBucket;
  }
  /**
   * Adds a listener (globally or locally) to a specified hook name.
   * If the `context` parameter is provided, the hook will be added only to the instance it references.
   * Otherwise, the callback will be used everytime the hook fires on any Handsontable instance.
   * You can provide an array of callback functions as the `callback` argument, this way they will all be fired
   * once the hook is triggered.
   *
   * @see Core#addHook
   * @param {string} key Hook name.
   * @param {Function|Array} callback Callback function or an array of functions.
   * @param {object} [context=null] The context for the hook callback to be added - a Handsontable instance or leave empty.
   * @returns {Hooks} Instance of Hooks.
   *
   * @example
   * ```js
   * // single callback, added locally
   * Handsontable.hooks.add('beforeInit', myCallback, hotInstance);
   *
   * // single callback, added globally
   * Handsontable.hooks.add('beforeInit', myCallback);
   *
   * // multiple callbacks, added locally
   * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback], hotInstance);
   *
   * // multiple callbacks, added globally
   * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback]);
   * ```
   */
  add(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    if (Array.isArray(n))
      H(n, (i) => this.add(e, i, r));
    else {
      Km.has(e) && Pt(lS(YG, {
        hookName: e,
        removedInVersion: Km.get(e)
      })), Xm.has(e) && Pt(Xm.get(e));
      const i = this.getBucket(r);
      if (typeof i[e] > "u" && (this.register(e), i[e] = []), n.skip = !1, i[e].indexOf(n) === -1) {
        let o = !1;
        n.initialHook && H(i[e], (s, a) => {
          if (s.initialHook)
            return i[e][a] = n, o = !0, !1;
        }), o || i[e].push(n);
      }
    }
    return this;
  }
  /**
   * Adds a listener to a specified hook. After the hook runs this listener will be automatically removed from the bucket.
   *
   * @see Core#addHookOnce
   * @param {string} key Hook/Event name.
   * @param {Function|Array} callback Callback function.
   * @param {object} [context=null] A Handsontable instance.
   *
   * @example
   * ```js
   * Handsontable.hooks.once('beforeInit', myCallback, hotInstance);
   * ```
   */
  once(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    Array.isArray(n) ? H(n, (i) => this.once(e, i, r)) : (n.runOnce = !0, this.add(e, n, r));
  }
  /**
   * Removes a listener from a hook with a given name. If the `context` argument is provided, it removes a listener from a local hook assigned to the given Handsontable instance.
   *
   * @see Core#removeHook
   * @param {string} key Hook/Event name.
   * @param {Function} callback Callback function (needs the be the function that was previously added to the hook).
   * @param {object} [context=null] Handsontable instance.
   * @returns {boolean} Returns `true` if hook was removed, `false` otherwise.
   *
   * @example
   * ```js
   * Handsontable.hooks.remove('beforeInit', myCallback);
   * ```
   */
  remove(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    const i = this.getBucket(r);
    return typeof i[e] < "u" && i[e].indexOf(n) >= 0 ? (n.skip = !0, !0) : !1;
  }
  /**
   * Checks whether there are any registered listeners for the provided hook name.
   * If the `context` parameter is provided, it only checks for listeners assigned to the given Handsontable instance.
   *
   * @param {string} key Hook name.
   * @param {object} [context=null] A Handsontable instance.
   * @returns {boolean} `true` for success, `false` otherwise.
   */
  has(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    const r = this.getBucket(n);
    return !!(r[e] !== void 0 && r[e].length);
  }
  /**
   * Runs all local and global callbacks assigned to the hook identified by the `key` parameter.
   * It returns either a return value from the last called callback or the first parameter (`p1`) passed to the `run` function.
   *
   * @see Core#runHooks
   * @param {object} context Handsontable instance.
   * @param {string} key Hook/Event name.
   * @param {*} [p1] Parameter to be passed as an argument to the callback function.
   * @param {*} [p2] Parameter to be passed as an argument to the callback function.
   * @param {*} [p3] Parameter to be passed as an argument to the callback function.
   * @param {*} [p4] Parameter to be passed as an argument to the callback function.
   * @param {*} [p5] Parameter to be passed as an argument to the callback function.
   * @param {*} [p6] Parameter to be passed as an argument to the callback function.
   * @returns {*} Either a return value from the last called callback or `p1`.
   *
   * @example
   * ```js
   * Handsontable.hooks.run(hot, 'beforeInit');
   * ```
   */
  run(e, n, r, i, o, s, a, l) {
    {
      const u = this.globalBucket[n], c = u ? u.length : 0;
      let d = 0;
      if (c)
        for (; d < c; ) {
          if (!u[d] || u[d].skip) {
            d += 1;
            continue;
          }
          const g = xf(u[d], e, r, i, o, s, a, l);
          g !== void 0 && (r = g), u[d] && u[d].runOnce && this.remove(n, u[d]), d += 1;
        }
    }
    {
      const u = this.getBucket(e)[n], c = u ? u.length : 0;
      let d = 0;
      if (c)
        for (; d < c; ) {
          if (!u[d] || u[d].skip) {
            d += 1;
            continue;
          }
          const g = xf(u[d], e, r, i, o, s, a, l);
          g !== void 0 && (r = g), u[d] && u[d].runOnce && this.remove(n, u[d], e), d += 1;
        }
    }
    return r;
  }
  /**
   * Destroy all listeners connected to the context. If no context is provided, the global listeners will be destroyed.
   *
   * @param {object} [context=null] A Handsontable instance.
   * @example
   * ```js
   * // destroy the global listeners
   * Handsontable.hooks.destroy();
   *
   * // destroy the local listeners
   * Handsontable.hooks.destroy(hotInstance);
   * ```
   */
  destroy() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    Ze(this.getBucket(e), (n, r, i) => i[r].length = 0);
  }
  /**
   * Registers a hook name (adds it to the list of the known hook names). Used by plugins.
   * It is not necessary to call register, but if you use it, your plugin hook will be used returned by
   * the `getRegistered` method. (which itself is used in the [demo](@/guides/getting-started/events-and-hooks.md)).
   *
   * @param {string} key The hook name.
   *
   * @example
   * ```js
   * Handsontable.hooks.register('myHook');
   * ```
   */
  register(e) {
    this.isRegistered(e) || $a.push(e);
  }
  /**
   * Deregisters a hook name (removes it from the list of known hook names).
   *
   * @param {string} key The hook name.
   *
   * @example
   * ```js
   * Handsontable.hooks.deregister('myHook');
   * ```
   */
  deregister(e) {
    this.isRegistered(e) && $a.splice($a.indexOf(e), 1);
  }
  /**
   * Returns a boolean value depending on if a hook by such name has been removed or deprecated.
   *
   * @param {string} hookName The hook name to check.
   * @returns {boolean} Returns `true` if the provided hook name was marked as deprecated or
   * removed from API, `false` otherwise.
   * @example
   * ```js
   * Handsontable.hooks.isDeprecated('skipLengthCache');
   *
   * // Results:
   * true
   * ```
   */
  isDeprecated(e) {
    return Xm.has(e) || Km.has(e);
  }
  /**
   * Returns a boolean depending on if a hook by such name has been registered.
   *
   * @param {string} hookName The hook name to check.
   * @returns {boolean} `true` for success, `false` otherwise.
   * @example
   * ```js
   * Handsontable.hooks.isRegistered('beforeInit');
   *
   * // Results:
   * true
   * ```
   */
  isRegistered(e) {
    return $a.indexOf(e) >= 0;
  }
  /**
   * Returns an array of registered hooks.
   *
   * @returns {Array} An array of registered hooks.
   *
   * @example
   * ```js
   * Handsontable.hooks.getRegistered();
   *
   * // Results:
   * [
   * ...
   *   'beforeInit',
   *   'beforeRender',
   *   'beforeSetRangeEnd',
   *   'beforeDrawBorders',
   *   'beforeChange',
   * ...
   * ]
   * ```
   */
  getRegistered() {
    return $a;
  }
}
const GG = new bP();
function zG() {
  return GG;
}
const _e = bP, qm = /* @__PURE__ */ new Map();
function yi() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "common";
  qm.has(t) || qm.set(t, /* @__PURE__ */ new Map());
  const e = qm.get(t);
  function n(a, l) {
    e.set(a, l);
  }
  function r(a) {
    return e.get(a);
  }
  function i(a) {
    return e.has(a);
  }
  function o() {
    return [...e.keys()];
  }
  function s() {
    return [...e.values()];
  }
  return {
    register: n,
    getItem: r,
    hasItem: i,
    getNames: o,
    getValues: s
  };
}
const xC = /* @__PURE__ */ new WeakMap(), {
  register: jG,
  getItem: RP,
  hasItem: EP,
  getNames: KG,
  getValues: Kae
} = yi("editors");
function XG(t) {
  const e = {}, n = t;
  this.getConstructor = function() {
    return t;
  }, this.getInstance = function(r) {
    return r.guid in e || (e[r.guid] = new n(r)), e[r.guid];
  }, _e.getSingleton().add("afterDestroy", function() {
    e[this.guid] = null;
  });
}
function TP(t, e) {
  let n;
  if (typeof t == "function")
    xC.get(t) || hr(null, t), n = xC.get(t);
  else if (typeof t == "string")
    n = RP(t);
  else
    throw Error('Only strings and functions can be passed as "editor" parameter');
  if (!n)
    throw Error(`No editor registered under name "${t}"`);
  return n.getInstance(e);
}
function Hf(t) {
  if (typeof t == "function")
    return t;
  if (!EP(t))
    throw Error(`No registered editor found under "${t}" name`);
  return RP(t).getConstructor();
}
function hr(t, e) {
  t && typeof t != "string" && (e = t, t = e.EDITOR_TYPE);
  const n = new XG(e);
  typeof t == "string" && jG(t, n), xC.set(e, n);
}
function qG(t, e, n) {
  return e = ZG(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function ZG(t) {
  var e = QG(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function QG(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
let Qd = 0;
class JG {
  /**
   * @param {object} [context=null] An object to which event listeners will be stored.
   * @private
   */
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    qG(this, "context", void 0), this.context = e || this, this.context.eventListeners || (this.context.eventListeners = []);
  }
  /**
   * Register specified listener (`eventName`) to the element.
   *
   * @param {Element} element Target element.
   * @param {string} eventName Event name.
   * @param {Function} callback Function which will be called after event occur.
   * @param {AddEventListenerOptions|boolean} [options] Listener options if object or useCapture if boolean.
   * @returns {Function} Returns function which you can easily call to remove that event.
   */
  addEventListener(e, n, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
    function o(s) {
      r.call(this, ez(s));
    }
    return this.context.eventListeners.push({
      element: e,
      event: n,
      callback: r,
      callbackProxy: o,
      options: i,
      eventManager: this
    }), e.addEventListener(n, o, i), Qd += 1, () => {
      this.removeEventListener(e, n, r);
    };
  }
  /**
   * Remove the event listener previously registered.
   *
   * @param {Element} element Target element.
   * @param {string} eventName Event name.
   * @param {Function} callback Function to remove from the event target. It must be the same as during registration listener.
   * @param {boolean} [onlyOwnEvents] Whether whould remove only events registered using this instance of EventManager.
   */
  removeEventListener(e, n, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, o = this.context.eventListeners.length, s;
    for (; o; )
      if (o -= 1, s = this.context.eventListeners[o], s.event === n && s.element === e) {
        if (r && r !== s.callback || i && s.eventManager !== this)
          continue;
        this.context.eventListeners.splice(o, 1), s.element.removeEventListener(s.event, s.callbackProxy, s.options), Qd -= 1;
      }
  }
  /**
   * Clear all previously registered events.
   *
   * @private
   * @since 0.15.0-beta3
   * @param {boolean} [onlyOwnEvents] Whether whould remove only events registered using this instance of EventManager.
   */
  clearEvents() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    if (!this.context)
      return;
    let n = this.context.eventListeners.length;
    for (; n; ) {
      n -= 1;
      const r = this.context.eventListeners[n];
      e && r.eventManager !== this || (this.context.eventListeners.splice(n, 1), r.element.removeEventListener(r.event, r.callbackProxy, r.options), Qd -= 1);
    }
  }
  /**
   * Clear all previously registered events.
   */
  clear() {
    this.clearEvents();
  }
  /**
   * Destroy instance of EventManager, clearing all events of the context.
   */
  destroy() {
    this.clearEvents(), this.context = null;
  }
  /**
   * Destroy instance of EventManager, clearing only the own events.
   */
  destroyWithOwnEventsOnly() {
    this.clearEvents(!0), this.context = null;
  }
  /**
   * Trigger event at the specified target element.
   *
   * @param {Element} element Target element.
   * @param {string} eventName Event name.
   */
  fireEvent(e, n) {
    let r = e.document, i = e;
    r || (r = e.ownerDocument ? e.ownerDocument : e, i = r.defaultView);
    const o = {
      bubbles: !0,
      cancelable: n !== "mousemove",
      view: i,
      detail: 0,
      screenX: 0,
      screenY: 0,
      clientX: 1,
      clientY: 1,
      ctrlKey: !1,
      altKey: !1,
      shiftKey: !1,
      metaKey: !1,
      button: 0,
      relatedTarget: void 0
    };
    let s;
    r.createEvent ? (s = r.createEvent("MouseEvents"), s.initMouseEvent(n, o.bubbles, o.cancelable, o.view, o.detail, o.screenX, o.screenY, o.clientX, o.clientY, o.ctrlKey, o.altKey, o.shiftKey, o.metaKey, o.button, r.body.parentNode)) : s = r.createEventObject(), e.dispatchEvent ? e.dispatchEvent(s) : e.fireEvent(`on${n}`, s);
  }
}
function ez(t) {
  const e = t.stopImmediatePropagation;
  return t.stopImmediatePropagation = function() {
    e.apply(this), Kr(this);
  }, t;
}
const _r = JG;
function tz() {
  return Qd;
}
function A0(t, e) {
  nz(t, e), e.add(t);
}
function nz(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function zo(t, e, n) {
  return e = rz(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function rz(t) {
  var e = iz(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function iz(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function I0(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const Bg = "editorManager.navigation";
var P0 = /* @__PURE__ */ new WeakSet(), x0 = /* @__PURE__ */ new WeakSet();
class HC {
  /**
   * @param {Core} hotInstance The Handsontable instance.
   * @param {TableMeta} tableMeta The table meta instance.
   * @param {Selection} selection The selection instance.
   */
  constructor(e, n, r) {
    A0(this, x0), A0(this, P0), zo(this, "hot", void 0), zo(this, "tableMeta", void 0), zo(this, "selection", void 0), zo(this, "eventManager", void 0), zo(this, "destroyed", !1), zo(this, "lock", !1), zo(this, "activeEditor", void 0), zo(this, "cellProperties", void 0), this.hot = e, this.tableMeta = n, this.selection = r, this.eventManager = new _r(e), this.hot.addHook("afterDocumentKeyDown", (i) => I0(this, P0, oz).call(this, i)), this.eventManager.addEventListener(this.hot.rootDocument.documentElement, "compositionstart", (i) => {
      !this.destroyed && this.hot.isListening() && this.openEditor("", i);
    }), this.hot.view._wt.update("onCellDblClick", (i, o, s) => I0(this, x0, sz).call(this, i, o, s));
  }
  /**
   * Lock the editor from being prepared and closed. Locking the editor prevents its closing and
   * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.
   */
  lockEditor() {
    this.lock = !0;
  }
  /**
   * Unlock the editor from being prepared and closed. This method restores the original behavior of
   * the editors where for every new selection its instances are closed.
   */
  unlockEditor() {
    this.lock = !1;
  }
  /**
   * Destroy current editor, if exists.
   *
   * @param {boolean} revertOriginal If `false` and the cell using allowInvalid option,
   *                                 then an editor won't be closed until validation is passed.
   */
  destroyEditor(e) {
    this.lock || this.closeEditor(e);
  }
  /**
   * Get active editor.
   *
   * @returns {BaseEditor}
   */
  getActiveEditor() {
    return this.activeEditor;
  }
  /**
   * Prepare text input to be displayed at given grid cell.
   */
  prepareEditor() {
    if (this.lock)
      return;
    if (this.activeEditor && this.activeEditor.isWaiting()) {
      this.closeEditor(!1, !1, (l) => {
        l && this.prepareEditor();
      });
      return;
    }
    const {
      highlight: e
    } = this.hot.getSelectedRangeLast();
    if (e.isHeader())
      return;
    const {
      row: n,
      col: r
    } = e, i = this.hot.runHooks("modifyGetCellCoords", n, r);
    let o = n, s = r;
    if (Array.isArray(i) && ([o, s] = i), this.cellProperties = this.hot.getCellMeta(o, s), !this.isCellEditable()) {
      this.clearActiveEditor();
      return;
    }
    const a = this.hot.getCell(n, r, !0);
    if (a) {
      const l = this.hot.getCellEditor(this.cellProperties), u = this.hot.colToProp(s), c = this.hot.getSourceDataAtCell(this.hot.toPhysicalRow(o), s);
      this.activeEditor = TP(l, this.hot), this.activeEditor.prepare(n, r, u, a, c, this.cellProperties);
    }
  }
  /**
   * Check is editor is opened/showed.
   *
   * @returns {boolean}
   */
  isEditorOpened() {
    return this.activeEditor && this.activeEditor.isOpened();
  }
  /**
   * Open editor with initial value.
   *
   * @param {null|string} newInitialValue New value from which editor will start if handled property it's not the `null`.
   * @param {Event} event The event object.
   * @param {boolean} [enableFullEditMode=false] When true, an editor works in full editing mode. Mode disallows closing an editor
   *                                             when arrow keys are pressed.
   */
  openEditor(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    if (!this.isCellEditable()) {
      this.clearActiveEditor();
      return;
    }
    this.activeEditor || (this.hot.scrollToFocusedCell(), this.prepareEditor()), this.activeEditor && (r && this.activeEditor.enableFullEditMode(), this.activeEditor.beginEditing(e, n));
  }
  /**
   * Close editor, finish editing cell.
   *
   * @param {boolean} restoreOriginalValue If `true`, then closes editor without saving value from the editor into a cell.
   * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.
   * @param {Function} callback The callback function, fired after editor closing.
   */
  closeEditor(e, n, r) {
    this.activeEditor ? this.activeEditor.finishEditing(e, n, r) : r && r(!1);
  }
  /**
   * Close editor and save changes.
   *
   * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.
   */
  closeEditorAndSaveChanges(e) {
    this.closeEditor(!1, e);
  }
  /**
   * Close editor and restore original value.
   *
   * @param {boolean} isCtrlPressed Indication of whether the CTRL button is pressed.
   */
  closeEditorAndRestoreOriginalValue(e) {
    this.closeEditor(!0, e);
  }
  /**
   * Clears reference to an instance of the active editor.
   *
   * @private
   */
  clearActiveEditor() {
    this.activeEditor = void 0;
  }
  /**
   * Checks if the currently selected cell (pointed by selection highlight coords) is editable.
   * Editable cell is when:
   *   - the cell has defined an editor type;
   *   - the cell is not marked as read-only;
   *   - the cell is not hidden.
   *
   * @private
   * @returns {boolean}
   */
  isCellEditable() {
    const e = this.hot.getSelectedRangeLast();
    if (!e)
      return !1;
    const n = this.hot.getCellEditor(this.cellProperties), {
      row: r,
      col: i
    } = e.highlight, {
      rowIndexMapper: o,
      columnIndexMapper: s
    } = this.hot, a = o.isHidden(this.hot.toPhysicalRow(r)) || s.isHidden(this.hot.toPhysicalColumn(i));
    return !(this.cellProperties.readOnly || !n || a);
  }
  /**
   * Controls selection's behaviour after clicking `Enter`.
   *
   * @private
   * @param {boolean} isShiftPressed If `true`, then the selection will move up after hit enter.
   */
  moveSelectionAfterEnter(e) {
    const n = typeof this.tableMeta.enterMoves == "function" ? this.tableMeta.enterMoves(event) : this.tableMeta.enterMoves;
    e ? this.selection.transformStart(-n.row, -n.col) : this.selection.transformStart(n.row, n.col, !0);
  }
  /**
   * Destroy the instance.
   */
  destroy() {
    this.destroyed = !0, this.eventManager.destroy();
  }
}
function oz(t) {
  const e = this.hot.getSelectedRangeLast();
  if (!this.hot.isListening() || !e || e.highlight.isHeader() || us(t))
    return;
  const {
    keyCode: n
  } = t, r = (t.ctrlKey || t.metaKey) && !t.altKey;
  if ((!this.activeEditor || this.activeEditor && !this.activeEditor.isWaiting()) && !RS(n) && !SP(n) && !r && !this.isEditorOpened()) {
    const o = this.hot.getShortcutManager().getContext("editor"), s = {
      runOnlyIf: () => Re(this.hot.getSelected()),
      group: Bg
    };
    o.addShortcuts([{
      keys: [["ArrowUp"]],
      callback: () => {
        this.hot.selection.transformStart(-1, 0);
      }
    }, {
      keys: [["ArrowDown"]],
      callback: () => {
        this.hot.selection.transformStart(1, 0);
      }
    }, {
      keys: [["ArrowLeft"]],
      callback: () => {
        this.hot.selection.transformStart(0, -1 * this.hot.getDirectionFactor());
      }
    }, {
      keys: [["ArrowRight"]],
      callback: () => {
        this.hot.selection.transformStart(0, this.hot.getDirectionFactor());
      }
    }], s), this.openEditor("", t);
  }
}
function sz(t, e, n) {
  n.nodeName === "TD" && this.openEditor(null, t, !0);
}
const H0 = /* @__PURE__ */ new WeakMap();
HC.getInstance = function(t, e, n) {
  let r = H0.get(t);
  return r || (r = new HC(t, e, n), H0.set(t, r)), r;
};
const az = HC;
function Oh(t, e) {
  _P(t, e), e.add(t);
}
function du(t, e, n) {
  _P(t, e), e.set(t, n);
}
function _P(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Al(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function jt(t, e) {
  var n = MP(t, e, "get");
  return lz(t, n);
}
function lz(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function fu(t, e, n) {
  var r = MP(t, e, "set");
  return uz(t, r, n), n;
}
function MP(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function uz(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
const ms = Object.freeze({
  CELL: "cell",
  MIXED: "mixed"
});
var In = /* @__PURE__ */ new WeakMap(), Ah = /* @__PURE__ */ new WeakMap(), Ih = /* @__PURE__ */ new WeakMap(), Ph = /* @__PURE__ */ new WeakMap(), xh = /* @__PURE__ */ new WeakMap(), Df = /* @__PURE__ */ new WeakSet(), D0 = /* @__PURE__ */ new WeakSet(), N0 = /* @__PURE__ */ new WeakSet(), L0 = /* @__PURE__ */ new WeakSet();
class cz {
  constructor(e) {
    var n = this;
    Oh(this, L0), Oh(this, N0), Oh(this, D0), Oh(this, Df), du(this, In, {
      writable: !0,
      value: void 0
    }), du(this, Ah, {
      writable: !0,
      value: void 0
    }), du(this, Ih, {
      writable: !0,
      value: 50
    }), du(this, Ph, {
      writable: !0,
      value: null
    }), du(this, xh, {
      writable: !0,
      value: /* @__PURE__ */ new Map()
    });
    const r = e.getSettings();
    fu(this, In, e), fu(this, Ah, r.imeFastEdit ? ms.MIXED : ms.CELL), jt(this, In).addHook("afterUpdateSettings", function() {
      for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++)
        o[s] = arguments[s];
      return Al(n, L0, fz).call(n, ...o);
    }), jt(this, In).addHook("afterSelection", function() {
      for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++)
        o[s] = arguments[s];
      return Al(n, D0, hz).call(n, ...o);
    }), jt(this, In).addHook("afterSelectionEnd", function() {
      for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++)
        o[s] = arguments[s];
      return Al(n, N0, dz).call(n, ...o);
    });
  }
  /**
   * Get the current focus mode.
   *
   * @returns {'cell' | 'mixed'}
   */
  getFocusMode() {
    return jt(this, Ah);
  }
  /**
   * Set the focus mode.
   *
   * @param {'cell' | 'mixed'} focusMode The new focus mode.
   */
  setFocusMode(e) {
    Object.values(ms).includes(e) ? fu(this, Ah, e) : Pt(`"${e}" is not a valid focus mode.`);
  }
  /**
   * Get the delay after which the focus will change from the cell elements to the active editor's `TEXTAREA`
   * element if the focus mode is set to 'mixed'.
   *
   * @returns {number} Delay in milliseconds.
   */
  getRefocusDelay() {
    return jt(this, Ih);
  }
  /**
   * Set the delay after which the focus will change from the cell elements to the active editor's `TEXTAREA`
   * element if the focus mode is set to 'mixed'.
   *
   * @param {number} delay Delay in milliseconds.
   */
  setRefocusDelay(e) {
    fu(this, Ih, e);
  }
  /**
   * Set the function to be used as the "refocus element" getter. It should return a focusable HTML element.
   *
   * @param {Function} getRefocusElementFunction The refocus element getter.
   */
  setRefocusElementGetter(e) {
    fu(this, Ph, e);
  }
  /**
   * Get the element to be used when refocusing the browser after a delay in case of the focus mode being 'mixed'.
   *
   * @returns {HTMLTextAreaElement|HTMLElement|undefined}
   */
  getRefocusElement() {
    if (typeof jt(this, Ph) == "function")
      return jt(this, Ph).call(this);
    var e;
    return (e = jt(this, In).getActiveEditor()) === null || e === void 0 ? void 0 : e.TEXTAREA;
  }
  /**
   * Set the browser's focus to the highlighted cell of the last selection.
   *
   * @param {HTMLTableCellElement} [selectedCell] The highlighted cell/header element.
   */
  focusOnHighlightedCell(e) {
    const n = (r) => {
      var i, o;
      const s = (i = jt(this, In).getSelectedRangeLast()) === null || i === void 0 ? void 0 : i.highlight;
      if (!s)
        return;
      let a = jt(this, In).runHooks("modifyFocusedElement", s.row, s.col, r);
      a instanceof HTMLElement || (a = r), a && !((o = jt(this, In).getActiveEditor()) !== null && o !== void 0 && o.isOpened()) && a.focus({
        preventScroll: !0
      });
    };
    e ? n(e) : Al(this, Df, TS).call(this, (r) => n(r));
  }
  /**
   * Set the focus to the active editor's `TEXTAREA` element after the provided delay. If no delay is provided, it
   * will be taken from the manager's configuration.
   *
   * @param {number} [delay] Delay in milliseconds.
   */
  refocusToEditorTextarea() {
    var e;
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : jt(this, Ih);
    const r = this.getRefocusElement();
    jt(this, In).getSettings().imeFastEdit && !((e = jt(this, In).getActiveEditor()) !== null && e !== void 0 && e.isOpened()) && r && (jt(this, xh).has(n) || jt(this, xh).set(n, kg(() => {
      r.select();
    }, n)), jt(this, xh).get(n)());
  }
}
function TS(t) {
  var e;
  const n = (e = jt(this, In).getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
  if (!n || !jt(this, In).selection.isCellVisible(n)) {
    t(null);
    return;
  }
  const r = jt(this, In).getCell(n.row, n.col, !0);
  r === null ? jt(this, In).addHookOnce("afterScroll", () => {
    t(jt(this, In).getCell(n.row, n.col, !0));
  }) : t(r);
}
function hz() {
  Al(this, Df, TS).call(this, (t) => {
    const {
      activeElement: e
    } = jt(this, In).rootDocument;
    e && $g(e) && e.blur(), this.focusOnHighlightedCell(t);
  });
}
function dz() {
  Al(this, Df, TS).call(this, (t) => {
    this.getFocusMode() === ms.MIXED && t.nodeName === "TD" && this.refocusToEditorTextarea();
  });
}
function fz(t) {
  t.imeFastEdit && this.getFocusMode() !== ms.MIXED ? this.setFocusMode(ms.MIXED) : !t.imeFastEdit && this.getFocusMode() !== ms.CELL && this.setFocusMode(ms.CELL);
}
const OP = {
  "&nbsp;": " ",
  "&amp;": "&",
  "&lt;": "<",
  "&gt;": ">"
}, gz = new RegExp(Object.keys(OP).map((t) => `(${t})`).join("|"), "gi");
function mz(t) {
  return (t && t.nodeName || "") === "TABLE";
}
function DC(t) {
  const e = t.hasColHeaders(), n = t.hasRowHeaders(), r = [e ? -1 : 0, n ? -1 : 0, t.countRows() - 1, t.countCols() - 1], i = t.getData(...r), o = i.length, s = o > 0 ? i[0].length : 0, a = ["<table>", "</table>"], l = e ? ["<thead>", "</thead>"] : [], u = ["<tbody>", "</tbody>"], c = n ? 1 : 0, d = e ? 1 : 0;
  for (let g = 0; g < o; g += 1) {
    const p = e && g === 0, C = [];
    for (let I = 0; I < s; I += 1) {
      const M = !p && n && I === 0;
      let y = "";
      if (p)
        y = `<th>${t.getColHeader(I - c)}</th>`;
      else if (M)
        y = `<th>${t.getRowHeader(g - d)}</th>`;
      else {
        const $ = i[g][I], {
          hidden: X,
          rowspan: G,
          colspan: q
        } = t.getCellMeta(g - d, I - c);
        if (!X) {
          const re = [];
          if (G && re.push(`rowspan="${G}"`), q && re.push(`colspan="${q}"`), gn($))
            y = `<td ${re.join(" ")}></td>`;
          else {
            const v = $.toString().replace("<", "&lt;").replace(">", "&gt;").replace(/(<br(\s*|\/)>(\r\n|\n)?|\r\n|\n)/g, `<br>\r
`).replace(/\x20/gi, "&nbsp;").replace(/\t/gi, "&#9;");
            y = `<td ${re.join(" ")}>${v}</td>`;
          }
        }
      }
      C.push(y);
    }
    const E = ["<tr>", ...C, "</tr>"].join("");
    p ? l.splice(1, 0, E) : u.splice(-1, 0, E);
  }
  return a.splice(1, 0, l.join(""), u.join("")), a.join("");
}
function NC(t) {
  const e = t.length, n = ["<table>"];
  for (let r = 0; r < e; r += 1) {
    const i = t[r], o = i.length, s = [];
    r === 0 && n.push("<tbody>");
    for (let a = 0; a < o; a += 1) {
      const l = i[a], u = gn(l) ? "" : l.toString().replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/(<br(\s*|\/)>(\r\n|\n)?|\r\n|\n)/g, `<br>\r
`).replace(/\x20{2,}/gi, (c) => `<span style="mso-spacerun: yes">${"&nbsp;".repeat(c.length - 1)} </span>`).replace(/\t/gi, "&#9;");
      s.push(`<td>${u}</td>`);
    }
    n.push("<tr>", ...s, "</tr>"), r + 1 === e && n.push("</tbody>");
  }
  return n.push("</table>"), n.join("");
}
function AP(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document;
  const n = {}, r = e.createDocumentFragment(), i = e.createElement("div");
  r.appendChild(i);
  let o = t;
  if (typeof o == "string") {
    const $ = o.replace(/<td\b[^>]*?>([\s\S]*?)<\/\s*td>/g, (X) => {
      const G = X.match(/<td\b[^>]*?>/g)[0], q = X.substring(G.length, X.lastIndexOf("<")).replace(/(<(?!br)([^>]+)>)/gi, "");
      return `${G}${q}</td>`;
    });
    i.insertAdjacentHTML("afterbegin", `${$}`), o = i.querySelector("table");
  }
  if (!o || !mz(o))
    return;
  const s = i.querySelector('meta[name$="enerator"]'), a = o.querySelector("tbody th") !== null, l = o.querySelector("tr"), u = l ? Array.from(l.cells).reduce(($, X) => $ + X.colSpan, 0) - (a ? 1 : 0) : 0, c = o.tFoot && Array.from(o.tFoot.rows) || [], d = [];
  let g = !1, p = 0, C = 0;
  if (o.tHead) {
    const $ = Array.from(o.tHead.rows).filter((X) => {
      const G = X.querySelector("td") !== null;
      return G && d.push(X), !G;
    });
    p = $.length, g = p > 0, p > 1 ? n.nestedHeaders = Array.from($).reduce((X, G) => {
      const q = Array.from(G.cells).reduce((re, v, S) => {
        if (a && S === 0)
          return re;
        const {
          colSpan: b,
          innerHTML: L
        } = v, P = b > 1 ? {
          label: L,
          colspan: b
        } : L;
        return re.push(P), re;
      }, []);
      return X.push(q), X;
    }, []) : g && (n.colHeaders = Array.from($[0].children).reduce((X, G, q) => (a && q === 0 || X.push(G.innerHTML), X), []));
  }
  d.length && (n.fixedRowsTop = d.length), c.length && (n.fixedRowsBottom = c.length);
  const E = [...d, ...Array.from(o.tBodies).reduce(($, X) => ($.push(...Array.from(X.rows)), $), []), ...c];
  C = E.length;
  const I = new Array(C);
  for (let $ = 0; $ < C; $++)
    I[$] = new Array(u);
  const M = [], y = [];
  for (let $ = 0; $ < C; $++) {
    const X = E[$], G = Array.from(X.cells), q = G.length;
    for (let re = 0; re < q; re++) {
      const v = G[re], {
        nodeName: S,
        innerHTML: b,
        rowSpan: L,
        colSpan: P
      } = v, x = I[$].findIndex((W) => W === void 0);
      if (S === "TD") {
        if (L > 1 || P > 1) {
          for (let z = $; z < $ + L; z++)
            if (z < C)
              for (let w = x; w < x + P; w++)
                I[z][w] = null;
          const D = v.getAttribute("style");
          D && D.includes("mso-ignore:colspan") || M.push({
            col: x,
            row: $,
            rowspan: L,
            colspan: P
          });
        }
        let W = "";
        s && /excel/gi.test(s.content) ? W = b.replace(/[\r\n][\x20]{0,2}/g, " ").replace(/<br(\s*|\/)>[\r\n]?[\x20]{0,3}/gim, `\r
`) : W = b.replace(/<br(\s*|\/)>[\r\n]?/gim, `\r
`), I[$][x] = W.replace(gz, (D) => OP[D]);
      } else
        y.push(b);
    }
  }
  return M.length && (n.mergeCells = M), y.length && (n.rowHeaders = y), I.length && (n.data = I), n;
}
const pz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  _dataToHTML: NC,
  htmlToGridSettings: AP,
  instanceToHTML: DC
}, Symbol.toStringTag, { value: "Module" }));
function Jn(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  const n = typeof t;
  if (n === "number")
    return !isNaN(t) && isFinite(t);
  if (n === "string") {
    if (t.length === 0)
      return !1;
    if (t.length === 1)
      return /\d/.test(t);
    const r = Array.from(/* @__PURE__ */ new Set([".", ...e])).map((i) => `\\${i}`).join("|");
    return new RegExp(`^[+-]?\\s*(((${r})?\\d+((${r})\\d+)?(e[+-]?\\d+)?)|(0x[a-f\\d]+))$`, "i").test(t.trim());
  } else if (n === "object")
    return !!t && typeof t.valueOf() == "number" && !(t instanceof Date);
  return !1;
}
function IP(t) {
  return Jn(t, [","]);
}
function xe(t, e, n) {
  let r = -1;
  for (typeof e == "function" ? (n = e, e = t) : r = t - 1; ++r <= e && n(r) !== !1; )
    ;
}
function Nf(t, e, n) {
  let r = t + 1;
  for (typeof e == "function" && (n = e, e = 0); --r >= e && n(r) !== !1; )
    ;
}
function _S(t, e) {
  return e = parseInt(e.toString().replace("%", ""), 10), e = isNaN(e) ? 0 : e, parseInt(t * e / 100, 10);
}
function mr(t, e, n) {
  return Math.min(t, e) === t ? e : Math.max(t, n) === t ? n : t;
}
const wz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  clamp: mr,
  isNumeric: Jn,
  isNumericLike: IP,
  rangeEach: xe,
  rangeEachReverse: Nf,
  valueAccordingPercent: _S
}, Symbol.toStringTag, { value: "Module" })), LC = "asc", Cz = "desc", $0 = /* @__PURE__ */ new Map([[LC, [-1, 1]], [Cz, [1, -1]]]), vz = (t) => `The priority '${t}' is already declared in a map.`, Sz = (t) => `The priority '${t}' is not a number.`;
function yz() {
  let {
    errorPriorityExists: t,
    errorPriorityNaN: e
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const n = /* @__PURE__ */ new Map();
  t = At(t) ? t : vz, e = At(e) ? e : Sz;
  function r(o, s) {
    if (!Jn(o))
      throw new Error(e(o));
    if (n.has(o))
      throw new Error(t(o));
    n.set(o, s);
  }
  function i() {
    let o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : LC;
    const [s, a] = $0.get(o) || $0.get(LC);
    return [...n].sort((l, u) => l[0] < u[0] ? s : a).map((l) => l[1]);
  }
  return {
    addItem: r,
    getItems: i
  };
}
const bz = (t) => `The id '${t}' is already declared in a map.`;
function Ug() {
  let {
    errorIdExists: t
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const e = /* @__PURE__ */ new Map();
  t = At(t) ? t : bz;
  function n(u, c) {
    if (l(u))
      throw new Error(t(u));
    e.set(u, c);
  }
  function r(u) {
    return e.delete(u);
  }
  function i() {
    e.clear();
  }
  function o(u) {
    const [c] = a().find((d) => {
      let [g, p] = d;
      return u === p ? g : !1;
    }) || [null];
    return c;
  }
  function s(u) {
    return e.get(u);
  }
  function a() {
    return [...e];
  }
  function l(u) {
    return e.has(u);
  }
  return {
    addItem: n,
    clear: i,
    getId: o,
    getItem: s,
    getItems: a,
    hasItem: l,
    removeItem: r
  };
}
const Rz = (t) => `'${t}' value is already declared in a unique set.`;
function Ez() {
  let {
    errorItemExists: t
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const e = /* @__PURE__ */ new Set();
  t = At(t) ? t : Rz;
  function n(o) {
    if (e.has(o))
      throw new Error(t(o));
    e.add(o);
  }
  function r() {
    return [...e];
  }
  function i() {
    e.clear();
  }
  return {
    addItem: n,
    clear: i,
    getItems: r
  };
}
const MS = (t) => `There is already registered "${t}" plugin.`, Tz = (t) => `There is already registered plugin on priority "${t}".`, _z = (t) => `The priority "${t}" is not a number.`, PP = yz({
  errorPriorityExists: Tz,
  errorPriorityNaN: _z
}), xP = Ez({
  errorItemExists: MS
}), $C = Ug({
  errorIdExists: MS
});
function OS() {
  return [...PP.getItems(), ...xP.getItems()];
}
function nh(t) {
  const e = Fn(t);
  return $C.getItem(e);
}
function Mz(t) {
  return !!nh(t);
}
function dt(t, e, n) {
  [t, e, n] = Az(t, e, n), nh(t) === void 0 && Oz(t, e, n);
}
function Oz(t, e, n) {
  const r = Fn(t);
  if ($C.hasItem(r))
    throw new Error(MS(r));
  n === void 0 ? xP.addItem(r) : PP.addItem(n, r), $C.addItem(r, e);
}
function Az(t, e, n) {
  return typeof t == "function" && (e = t, t = e.PLUGIN_KEY, n = e.PLUGIN_PRIORITY), [t, e, n];
}
const {
  register: Iz,
  getItem: Pz,
  hasItem: HP,
  getNames: xz,
  getValues: Xae
} = yi("renderers");
function Lf(t) {
  if (typeof t == "function")
    return t;
  if (!HP(t))
    throw Error(`No registered renderer found under "${t}" name`);
  return Pz(t);
}
function ki(t, e) {
  typeof t != "string" && (e = t, t = e.RENDERER_TYPE), Iz(t, e);
}
const {
  register: Hz,
  getItem: Dz,
  hasItem: DP,
  getNames: Nz,
  getValues: qae
} = yi("validators");
function AS(t) {
  if (typeof t == "function")
    return t;
  if (!DP(t))
    throw Error(`No registered validator found under "${t}" name`);
  return Dz(t);
}
function Il(t, e) {
  typeof t != "string" && (e = t, t = e.VALIDATOR_TYPE), Hz(t, e);
}
var NP = {}, Lz = _1, $z = Nv, kz = Object.keys || function(e) {
  return Lz(e, $z);
}, Fz = Xi, Wz = S1, Vz = _a, Bz = Gc, Uz = pg, Yz = kz;
NP.f = Fz && !Wz ? Object.defineProperties : function(e, n) {
  Bz(e);
  for (var r = Uz(n), i = Yz(n), o = i.length, s = 0, a; o > s; )
    Vz.f(e, a = i[s++], r[a]);
  return e;
};
var Gz = Gc, zz = NP, k0 = Nv, jz = xv, Kz = W1, Xz = Iv, qz = b1, F0 = ">", W0 = "<", kC = "prototype", FC = "script", LP = qz("IE_PROTO"), Zm = function() {
}, $P = function(t) {
  return W0 + FC + F0 + t + W0 + "/" + FC + F0;
}, V0 = function(t) {
  t.write($P("")), t.close();
  var e = t.parentWindow.Object;
  return t = null, e;
}, Zz = function() {
  var t = Xz("iframe"), e = "java" + FC + ":", n;
  return t.style.display = "none", Kz.appendChild(t), t.src = String(e), n = t.contentWindow.document, n.open(), n.write($P("document.F=Object")), n.close(), n.F;
}, Hh, Jd = function() {
  try {
    Hh = new ActiveXObject("htmlfile");
  } catch {
  }
  Jd = typeof document < "u" ? document.domain && Hh ? V0(Hh) : Zz() : V0(Hh);
  for (var t = k0.length; t--; )
    delete Jd[kC][k0[t]];
  return Jd();
};
jz[LP] = !0;
var Qz = Object.create || function(e, n) {
  var r;
  return e !== null ? (Zm[kC] = Gz(e), r = new Zm(), Zm[kC] = null, r[LP] = e) : r = Jd(), n === void 0 ? r : zz.f(r, n);
}, Jz = Cg, ej = Qz, tj = _a.f, WC = Jz("unscopables"), VC = Array.prototype;
VC[WC] === void 0 && tj(VC, WC, {
  configurable: !0,
  value: ej(null)
});
var kP = function(t) {
  VC[WC][t] = !0;
}, nj = Ma, rj = wg, ij = vg, oj = Dv, sj = kP;
nj({ target: "Array", proto: !0 }, {
  at: function(e) {
    var n = rj(this), r = ij(n), i = oj(e), o = i >= 0 ? i : r + i;
    return o < 0 || o >= r ? void 0 : n[o];
  }
});
sj("at");
const ha = 1, Ln = 2;
function B0(t, e, n) {
  aj(t, e), e.set(t, n);
}
function aj(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function no(t, e, n) {
  return e = lj(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function lj(t) {
  var e = uj(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function uj(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function cn(t, e) {
  var n = FP(t, e, "get");
  return cj(t, n);
}
function cj(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function U0(t, e, n) {
  var r = FP(t, e, "set");
  return hj(t, r, n), n;
}
function FP(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function hj(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var Dh = /* @__PURE__ */ new WeakMap(), hn = /* @__PURE__ */ new WeakMap();
class IS {
  /**
   * Default column width.
   *
   * @type {number}
   */
  static get DEFAULT_WIDTH() {
    return 50;
  }
  /**
   * Number of rendered/visible columns.
   *
   * @type {number}
   */
  /**
   * @param {ViewportColumnsCalculatorOptions} options Object with all options specified for column viewport calculation.
   */
  constructor(e) {
    no(this, "count", 0), no(this, "startColumn", null), no(this, "endColumn", null), no(this, "startPosition", null), no(this, "isVisibleInTrimmingContainer", !1), no(this, "stretchAllRatio", 0), no(this, "stretchLastWidth", 0), B0(this, Dh, {
      writable: !0,
      value: 0
    }), no(this, "needVerifyLastColumnWidth", !0), no(this, "stretchAllColumnsWidth", []), B0(this, hn, {
      writable: !0,
      value: void 0
    }), U0(this, hn, e), typeof cn(this, hn).stretchingColumnWidthFn != "function" && (cn(this, hn).stretchingColumnWidthFn = (n) => n), this.calculate();
  }
  /**
   * Calculates viewport.
   */
  calculate() {
    const {
      calculationType: e,
      overrideFn: n,
      scrollOffset: r,
      totalColumns: i,
      viewportWidth: o
    } = cn(this, hn), s = Math.max(cn(this, hn).scrollOffset, 0), a = s > 0 ? o + 1 : o;
    let l = 0, u = !0;
    const c = [];
    let d, g = 0, p = 0;
    for (let M = 0; M < i; M++)
      if (d = this._getColumnWidth(M), l <= s && e !== Ln && (this.startColumn = M, g = d), l >= s && l + (e === Ln ? d : 0) <= s + a && ((this.startColumn === null || this.startColumn === void 0) && (this.startColumn = M, g = d), this.endColumn = M), c.push(l), l += d, p = d, e !== Ln && (this.endColumn = M), l >= s + o) {
        u = !1;
        break;
      }
    const C = r + o - a, E = e === Ln ? 0 : p, I = e === Ln ? g : 0;
    if (// the table is to the left of the viewport
    C < -1 * cn(this, hn).inlineStartOffset || r > c.at(-1) + E || // the table is to the right of the viewport
    -1 * cn(this, hn).scrollOffset - cn(this, hn).viewportWidth > -1 * I ? this.isVisibleInTrimmingContainer = !1 : this.isVisibleInTrimmingContainer = !0, this.endColumn === i - 1 && u)
      for (this.startColumn = this.endColumn; this.startColumn > 0; ) {
        const M = c[this.endColumn] + d - c[this.startColumn - 1];
        if ((M <= o || e !== Ln) && (this.startColumn -= 1), M > o)
          break;
      }
    e === ha && this.startColumn !== null && n && n(this), this.startPosition = c[this.startColumn], this.startPosition === void 0 && (this.startPosition = null), i < this.endColumn && (this.endColumn = i - 1), this.startColumn !== null && (this.count = this.endColumn - this.startColumn + 1);
  }
  /**
   * Recalculate columns stretching.
   *
   * @param {number} totalWidth The total width of the table.
   */
  refreshStretching(e) {
    if (cn(this, hn).stretchMode === "none")
      return;
    let n = e;
    U0(this, Dh, n);
    const r = cn(this, hn).totalColumns;
    let i = 0;
    for (let s = 0; s < r; s++) {
      const a = this._getColumnWidth(s), l = cn(this, hn).stretchingColumnWidthFn(void 0, s);
      typeof l == "number" ? n -= l : i += a;
    }
    const o = n - i;
    if (cn(this, hn).stretchMode === "all" && o > 0)
      this.stretchAllRatio = n / i, this.stretchAllColumnsWidth = [], this.needVerifyLastColumnWidth = !0;
    else if (cn(this, hn).stretchMode === "last" && n !== 1 / 0) {
      const s = this._getColumnWidth(r - 1), a = o + s;
      this.stretchLastWidth = a >= 0 ? a : s;
    }
  }
  /**
   * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.
   *
   * @param {number} column The visual column index.
   * @param {number} baseWidth The default column width.
   * @returns {number|null}
   */
  getStretchedColumnWidth(e, n) {
    let r = null;
    return cn(this, hn).stretchMode === "all" && this.stretchAllRatio !== 0 ? r = this._getStretchedAllColumnWidth(e, n) : cn(this, hn).stretchMode === "last" && this.stretchLastWidth !== 0 && (r = this._getStretchedLastColumnWidth(e)), r;
  }
  /**
   * @param {number} column The visual column index.
   * @param {number} baseWidth The default column width.
   * @returns {number}
   * @private
   */
  _getStretchedAllColumnWidth(e, n) {
    let r = 0;
    const i = cn(this, hn).totalColumns;
    if (!this.stretchAllColumnsWidth[e]) {
      const o = Math.round(n * this.stretchAllRatio), s = cn(this, hn).stretchingColumnWidthFn(o, e);
      s === void 0 ? this.stretchAllColumnsWidth[e] = o : this.stretchAllColumnsWidth[e] = isNaN(s) ? this._getColumnWidth(e) : s;
    }
    if (this.stretchAllColumnsWidth.length === i && this.needVerifyLastColumnWidth) {
      this.needVerifyLastColumnWidth = !1;
      for (let o = 0; o < this.stretchAllColumnsWidth.length; o++)
        r += this.stretchAllColumnsWidth[o];
      r !== cn(this, Dh) && (this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += cn(this, Dh) - r);
    }
    return this.stretchAllColumnsWidth[e];
  }
  /**
   * @param {number} column The visual column index.
   * @returns {number|null}
   * @private
   */
  _getStretchedLastColumnWidth(e) {
    const n = cn(this, hn).totalColumns;
    return e === n - 1 ? this.stretchLastWidth : null;
  }
  /**
   * @param {number} column The visual column index.
   * @returns {number}
   * @private
   */
  _getColumnWidth(e) {
    let n = cn(this, hn).columnWidthFn(e);
    return isNaN(n) && (n = IS.DEFAULT_WIDTH), n;
  }
}
const PS = IS;
function dj(t, e, n) {
  fj(t, e), e.set(t, n);
}
function fj(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function gu(t, e, n) {
  return e = gj(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function gj(t) {
  var e = mj(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function mj(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Qm(t, e) {
  var n = WP(t, e, "get");
  return pj(t, n);
}
function pj(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function wj(t, e, n) {
  var r = WP(t, e, "set");
  return Cj(t, r, n), n;
}
function WP(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Cj(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var mu = /* @__PURE__ */ new WeakMap();
class xS {
  /**
   * Default row height.
   *
   * @type {number}
   */
  static get DEFAULT_HEIGHT() {
    return 23;
  }
  /**
   * Number of rendered/visible rows.
   *
   * @type {number}
   */
  /**
   * @param {ViewportRowsCalculatorOptions} options Object with all options specified for row viewport calculation.
   */
  constructor(e) {
    gu(this, "count", 0), gu(this, "startRow", null), gu(this, "endRow", null), gu(this, "startPosition", null), gu(this, "isVisibleInTrimmingContainer", !1), dj(this, mu, {
      writable: !0,
      value: void 0
    }), wj(this, mu, e), this.calculate();
  }
  /**
   * Calculates viewport.
   */
  calculate() {
    const {
      calculationType: e,
      overrideFn: n,
      rowHeightFn: r,
      scrollOffset: i,
      totalRows: o,
      viewportHeight: s
    } = Qm(this, mu), a = Math.max(Qm(this, mu).scrollOffset, 0), l = Qm(this, mu).horizontalScrollbarHeight || 0;
    let u = 0, c = !0;
    const d = [];
    let g, p = 0, C = 0;
    for (let y = 0; y < o; y++)
      if (g = r(y), isNaN(g) && (g = xS.DEFAULT_HEIGHT), u <= a && e !== Ln && (this.startRow = y, p = g), u >= a && u + (e === Ln ? g : 0) <= a + s - l && (this.startRow === null && (this.startRow = y, p = g), this.endRow = y), d.push(u), u += g, C = g, e !== Ln && (this.endRow = y), u >= a + s - l) {
        c = !1;
        break;
      }
    const E = i + s - l, I = e === Ln ? p : 0, M = e === Ln ? 0 : C;
    if (E < I || i > d.at(-1) + M ? this.isVisibleInTrimmingContainer = !1 : this.isVisibleInTrimmingContainer = !0, this.endRow === o - 1 && c)
      for (this.startRow = this.endRow; this.startRow > 0; ) {
        const y = d[this.endRow] + g - d[this.startRow - 1];
        if ((y <= s - l || e !== Ln) && (this.startRow -= 1), y >= s - l)
          break;
      }
    e === ha && this.startRow !== null && n && n(this), this.startPosition = d[this.startRow], this.startPosition === void 0 && (this.startPosition = null), o < this.endRow && (this.endRow = o - 1), this.startRow !== null && (this.count = this.endRow - this.startRow + 1);
  }
}
const VP = xS;
function vj(t, e, n) {
  Sj(t, e), e.set(t, n);
}
function Sj(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Y0(t, e, n) {
  return e = yj(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function yj(t) {
  var e = bj(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function bj(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function ka(t, e) {
  var n = BP(t, e, "get");
  return Rj(t, n);
}
function Rj(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function G0(t, e, n) {
  var r = BP(t, e, "set");
  return Ej(t, r, n), n;
}
function BP(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Ej(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var ro = /* @__PURE__ */ new WeakMap();
class $f {
  constructor(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    Y0(this, "row", null), Y0(this, "col", null), vj(this, ro, {
      writable: !0,
      value: !1
    }), G0(this, ro, r), typeof e < "u" && typeof n < "u" && (this.row = e, this.col = n);
  }
  /**
   * Checks if the coordinates in your `CellCoords` instance are valid
   * in the context of given table parameters.
   *
   * The `row` index:
   * - Must be an integer.
   * - Must be higher than the number of column headers in the table.
   * - Must be lower than the total number of rows in the table.
   *
   * The `col` index:
   * - Must be an integer.
   * - Must be higher than the number of row headers in the table.
   * - Must be lower than the total number of columns in the table.
   *
   * @param {object} [tableParams] An object with a defined table size.
   * @param {number} [tableParams.countRows=0] The total number of rows.
   * @param {number} [tableParams.countCols=0] The total number of columns.
   * @param {number} [tableParams.countRowHeaders=0] A number of row headers.
   * @param {number} [tableParams.countColHeaders=0] A number of column headers.
   * @returns {boolean} `true`: The coordinates are valid.
   */
  isValid(e) {
    const {
      countRows: n,
      countCols: r,
      countRowHeaders: i,
      countColHeaders: o
    } = {
      countRows: 0,
      countCols: 0,
      countRowHeaders: 0,
      countColHeaders: 0,
      ...e
    };
    return !(!Number.isInteger(this.row) || !Number.isInteger(this.col) || this.row < -o || this.col < -i || this.row >= n || this.col >= r);
  }
  /**
   * Checks if another set of coordinates (`coords`)
   * is equal to the coordinates in your `CellCoords` instance.
   *
   * @param {CellCoords} coords Coordinates to check.
   * @returns {boolean}
   */
  isEqual(e) {
    return e === this ? !0 : this.row === e.row && this.col === e.col;
  }
  /**
   * Checks if the coordinates point to the headers range. If one of the axis (row or col) point to
   * the header (negative value) then method returns `true`.
   *
   * @returns {boolean}
   */
  isHeader() {
    return !this.isCell();
  }
  /**
   * Checks if the coordinates point to the cells range. If all axis (row and col) point to
   * the cell (positive value) then method returns `true`.
   *
   * @returns {boolean}
   */
  isCell() {
    return this.row >= 0 && this.col >= 0;
  }
  /**
   * Checks if the coordinates runs in RTL mode.
   *
   * @returns {boolean}
   */
  isRtl() {
    return ka(this, ro);
  }
  /**
   * Checks if another set of coordinates (`testedCoords`)
   * is south-east of the coordinates in your `CellCoords` instance.
   *
   * @param {CellCoords} testedCoords Coordinates to check.
   * @returns {boolean}
   */
  isSouthEastOf(e) {
    return this.row >= e.row && (ka(this, ro) ? this.col <= e.col : this.col >= e.col);
  }
  /**
   * Checks if another set of coordinates (`testedCoords`)
   * is north-west of the coordinates in your `CellCoords` instance.
   *
   * @param {CellCoords} testedCoords Coordinates to check.
   * @returns {boolean}
   */
  isNorthWestOf(e) {
    return this.row <= e.row && (ka(this, ro) ? this.col >= e.col : this.col <= e.col);
  }
  /**
   * Checks if another set of coordinates (`testedCoords`)
   * is south-west of the coordinates in your `CellCoords` instance.
   *
   * @param {CellCoords} testedCoords Coordinates to check.
   * @returns {boolean}
   */
  isSouthWestOf(e) {
    return this.row >= e.row && (ka(this, ro) ? this.col >= e.col : this.col <= e.col);
  }
  /**
   * Checks if another set of coordinates (`testedCoords`)
   * is north-east of the coordinates in your `CellCoords` instance.
   *
   * @param {CellCoords} testedCoords Coordinates to check.
   * @returns {boolean}
   */
  isNorthEastOf(e) {
    return this.row <= e.row && (ka(this, ro) ? this.col <= e.col : this.col >= e.col);
  }
  /**
   * Normalizes the coordinates in your `CellCoords` instance to the nearest valid position.
   *
   * Coordinates that point to headers (negative values) are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  normalize() {
    return this.row = this.row === null ? this.row : Math.max(this.row, 0), this.col = this.col === null ? this.col : Math.max(this.col, 0), this;
  }
  /**
   * Assigns the coordinates from another `CellCoords` instance (or compatible literal object)
   * to your `CellCoords` instance.
   *
   * @param {CellCoords | { row: number | undefined, col: number | undefined }} coords The CellCoords
   * instance or compatible literal object.
   * @returns {CellCoords}
   */
  assign(e) {
    return Number.isInteger(e == null ? void 0 : e.row) && (this.row = e.row), Number.isInteger(e == null ? void 0 : e.col) && (this.col = e.col), e instanceof $f && G0(this, ro, e.isRtl()), this;
  }
  /**
   * Clones your `CellCoords` instance.
   *
   * @returns {CellCoords}
   */
  clone() {
    return new $f(this.row, this.col, ka(this, ro));
  }
  /**
   * Converts your `CellCoords` instance into an object literal with `row` and `col` properties.
   *
   * @returns {{row: number, col: number}} An object literal with `row` and `col` properties.
   */
  toObject() {
    return {
      row: this.row,
      col: this.col
    };
  }
}
const kf = $f;
function Tj(t, e, n) {
  _j(t, e), e.set(t, n);
}
function _j(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Jm(t, e, n) {
  return e = Mj(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Mj(t) {
  var e = Oj(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Oj(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Ei(t, e) {
  var n = UP(t, e, "get");
  return Aj(t, n);
}
function Aj(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function Ij(t, e, n) {
  var r = UP(t, e, "set");
  return Pj(t, r, n), n;
}
function UP(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Pj(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var Ir = /* @__PURE__ */ new WeakMap();
class HS {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : e, i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
    Jm(this, "highlight", null), Jm(this, "from", null), Jm(this, "to", null), Tj(this, Ir, {
      writable: !0,
      value: !1
    }), this.highlight = e.clone(), this.from = n.clone(), this.to = r.clone(), Ij(this, Ir, i);
  }
  /**
   * Highlights cell selection at the `coords` coordinates.
   *
   * @param {CellCoords} coords Coordinates to use.
   * @returns {CellRange}
   */
  setHighlight(e) {
    return this.highlight = e.clone(), this;
  }
  /**
   * Sets the `coords` coordinates as the start of your range.
   *
   * @param {CellCoords} coords Coordinates to use.
   * @returns {CellRange}
   */
  setFrom(e) {
    return this.from = e.clone(), this;
  }
  /**
   * Sets the `coords` coordinates as the end of your range.
   *
   * @param {CellCoords} coords Coordinates to use.
   * @returns {CellRange}
   */
  setTo(e) {
    return this.to = e.clone(), this;
  }
  /**
   * Checks if the coordinates in your `CellRange` instance are valid
   * in the context of given table parameters.
   *
   * See the [`isValid()`](@/api/cellCoords.md#isvalid) method of the [`CellCoords`](@/api/cellCoords.md) class.
   *
   * @param {object} tableParams An object with a defined table size.
   * @param {number} tableParams.countRows The total number of rows.
   * @param {number} tableParams.countCols The total number of columns.
   * @param {number} tableParams.countRowHeaders A number of row headers.
   * @param {number} tableParams.countColHeaders A number of column headers.
   * @returns {boolean}
   */
  isValid(e) {
    return this.from.isValid(e) && this.to.isValid(e);
  }
  /**
   * Checks if your range is just a single cell or header.
   *
   * @returns {boolean}
   */
  isSingle() {
    return this.isSingleCell() || this.isSingleHeader();
  }
  /**
   * Checks if your range is just a single cell.
   *
   * @returns {boolean}
   */
  isSingleCell() {
    return this.from.row >= 0 && this.from.row === this.to.row && this.from.col >= 0 && this.from.col === this.to.col;
  }
  /**
   * Checks if your range is just a single header.
   *
   * @returns {boolean}
   */
  isSingleHeader() {
    return (this.from.row < 0 || this.from.col < 0) && this.from.row === this.to.row && this.from.col === this.to.col;
  }
  /**
   * Checks if your range overlaps headers range (negative coordinates).
   *
   * @returns {boolean}
   */
  containsHeaders() {
    return this.from.isHeader() || this.to.isHeader();
  }
  /**
   * Returns the height of your range (as a number of rows, including row headers).
   *
   * @returns {number}
   */
  getOuterHeight() {
    return Math.max(this.from.row, this.to.row) - Math.min(this.from.row, this.to.row) + 1;
  }
  /**
   * Returns the width of your range (as a number of columns, including column headers).
   *
   * @returns {number}
   */
  getOuterWidth() {
    return Math.max(this.from.col, this.to.col) - Math.min(this.from.col, this.to.col) + 1;
  }
  /**
   * Returns the height of your range (as a number of rows, excluding row headers).
   *
   * @returns {number}
   */
  getHeight() {
    if (this.from.row < 0 && this.to.row < 0)
      return 0;
    const e = Math.max(this.from.row, 0), n = Math.max(this.to.row, 0);
    return Math.max(e, n) - Math.min(e, n) + 1;
  }
  /**
   * Returns the width of your range (as a number of columns, excluding column headers).
   *
   * @returns {number}
   */
  getWidth() {
    if (this.from.col < 0 && this.to.col < 0)
      return 0;
    const e = Math.max(this.from.col, 0), n = Math.max(this.to.col, 0);
    return Math.max(e, n) - Math.min(e, n) + 1;
  }
  /**
   * Returns the number of cells within your range (excluding column and row headers).
   *
   * @returns {number}
   */
  getCellsCount() {
    return this.getWidth() * this.getHeight();
  }
  /**
   * Checks if another set of coordinates (`cellCoords`)
   * is within the `from` and `to` coordinates of your range.
   *
   * @param {CellCoords} cellCoords Coordinates to check.
   * @returns {boolean}
   */
  includes(e) {
    const {
      row: n,
      col: r
    } = e, i = this.getOuterTopStartCorner(), o = this.getOuterBottomEndCorner();
    return i.row <= n && o.row >= n && i.col <= r && o.col >= r;
  }
  /**
   * Checks if another range (`cellRange`) is within your range.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  includesRange(e) {
    return this.includes(e.getOuterTopStartCorner()) && this.includes(e.getOuterBottomEndCorner());
  }
  /**
   * Checks if another range (`cellRange`) is equal to your range.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  isEqual(e) {
    return Math.min(this.from.row, this.to.row) === Math.min(e.from.row, e.to.row) && Math.max(this.from.row, this.to.row) === Math.max(e.from.row, e.to.row) && Math.min(this.from.col, this.to.col) === Math.min(e.from.col, e.to.col) && Math.max(this.from.col, this.to.col) === Math.max(e.from.col, e.to.col);
  }
  /**
   * Checks if another range (`cellRange`) overlaps your range.
   *
   * Range A overlaps range B if the intersection of A and B (or B and A) is not empty.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  overlaps(e) {
    return e.isSouthEastOf(this.getOuterTopLeftCorner()) && e.isNorthWestOf(this.getOuterBottomRightCorner());
  }
  /**
   * Checks if another range (`cellRange`) is south-east of your range.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  isSouthEastOf(e) {
    return this.getOuterTopLeftCorner().isSouthEastOf(e) || this.getOuterBottomRightCorner().isSouthEastOf(e);
  }
  /**
   * Checks if another range (`cellRange`) is north-west of your range.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  isNorthWestOf(e) {
    return this.getOuterTopLeftCorner().isNorthWestOf(e) || this.getOuterBottomRightCorner().isNorthWestOf(e);
  }
  /**
   * Checks if another range (`cellRange`) overlaps your range horizontally.
   *
   * For example: returns `true` if the last column of your range is `5`
   * and the first column of the `cellRange` range is `3`.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  isOverlappingHorizontally(e) {
    return this.getOuterTopRightCorner().col >= e.getOuterTopLeftCorner().col && this.getOuterTopRightCorner().col <= e.getOuterTopRightCorner().col || this.getOuterTopLeftCorner().col <= e.getOuterTopRightCorner().col && this.getOuterTopLeftCorner().col >= e.getOuterTopLeftCorner().col;
  }
  /**
   * Checks if another range (`cellRange`) overlaps your range vertically.
   *
   * For example: returns `true` if the last row of your range is `5`
   * and the first row of the `cellRange` range is `3`.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  isOverlappingVertically(e) {
    return this.getOuterBottomRightCorner().row >= e.getOuterTopRightCorner().row && this.getOuterBottomRightCorner().row <= e.getOuterBottomRightCorner().row || this.getOuterTopRightCorner().row <= e.getOuterBottomRightCorner().row && this.getOuterTopRightCorner().row >= e.getOuterTopRightCorner().row;
  }
  /**
   * Adds a cell to your range, at `cellCoords` coordinates.
   *
   * The `cellCoords` coordinates must exceed a corner of your range.
   *
   * @param {CellCoords} cellCoords A new cell's coordinates.
   * @returns {boolean}
   */
  expand(e) {
    const n = this.getOuterTopStartCorner(), r = this.getOuterBottomEndCorner();
    return e.row < n.row || e.col < n.col || e.row > r.row || e.col > r.col ? (this.from = this._createCellCoords(Math.min(n.row, e.row), Math.min(n.col, e.col)), this.to = this._createCellCoords(Math.max(r.row, e.row), Math.max(r.col, e.col)), !0) : !1;
  }
  /**
   * Expand your range with another range (`expandingRange`).
   *
   * @param {CellRange} expandingRange A new range.
   * @returns {boolean}
   */
  expandByRange(e) {
    if (this.includesRange(e) || !this.overlaps(e))
      return !1;
    const n = this.getOuterTopStartCorner(), r = this.getOuterBottomEndCorner(), i = this.getDirection(), o = e.getOuterTopStartCorner(), s = e.getOuterBottomEndCorner(), a = Math.min(n.row, o.row), l = Math.min(n.col, o.col), u = Math.max(r.row, s.row), c = Math.max(r.col, s.col), d = this._createCellCoords(a, l), g = this._createCellCoords(u, c);
    return this.from = d, this.to = g, this.setDirection(i), this.highlight.row === this.getOuterBottomRightCorner().row && this.getVerticalDirection() === "N-S" && this.flipDirectionVertically(), this.highlight.col === this.getOuterTopRightCorner().col && this.getHorizontalDirection() === "W-E" && this.flipDirectionHorizontally(), !0;
  }
  /**
   * Gets the direction of the selection.
   *
   * @returns {string} Returns one of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.
   */
  getDirection() {
    if (this.from.isNorthWestOf(this.to))
      return "NW-SE";
    if (this.from.isNorthEastOf(this.to))
      return "NE-SW";
    if (this.from.isSouthEastOf(this.to))
      return "SE-NW";
    if (this.from.isSouthWestOf(this.to))
      return "SW-NE";
  }
  /**
   * Sets the direction of the selection.
   *
   * @param {string} direction One of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.
   */
  setDirection(e) {
    switch (e) {
      case "NW-SE":
        [this.from, this.to] = [this.getOuterTopLeftCorner(), this.getOuterBottomRightCorner()];
        break;
      case "NE-SW":
        [this.from, this.to] = [this.getOuterTopRightCorner(), this.getOuterBottomLeftCorner()];
        break;
      case "SE-NW":
        [this.from, this.to] = [this.getOuterBottomRightCorner(), this.getOuterTopLeftCorner()];
        break;
      case "SW-NE":
        [this.from, this.to] = [this.getOuterBottomLeftCorner(), this.getOuterTopRightCorner()];
        break;
    }
  }
  /**
   * Gets the vertical direction of the selection.
   *
   * @returns {string} Returns one of the values: `N-S` (north->south), `S-N` (south->north).
   */
  getVerticalDirection() {
    return ["NE-SW", "NW-SE"].indexOf(this.getDirection()) > -1 ? "N-S" : "S-N";
  }
  /**
   * Gets the horizontal direction of the selection.
   *
   * @returns {string} Returns one of the values: `W-E` (west->east), `E-W` (east->west).
   */
  getHorizontalDirection() {
    return ["NW-SE", "SW-NE"].indexOf(this.getDirection()) > -1 ? "W-E" : "E-W";
  }
  /**
   * Flips the direction of your range vertically (e.g., `NW-SE` changes to `SW-NE`).
   */
  flipDirectionVertically() {
    switch (this.getDirection()) {
      case "NW-SE":
        this.setDirection("SW-NE");
        break;
      case "NE-SW":
        this.setDirection("SE-NW");
        break;
      case "SE-NW":
        this.setDirection("NE-SW");
        break;
      case "SW-NE":
        this.setDirection("NW-SE");
        break;
    }
  }
  /**
   * Flips the direction of your range horizontally (e.g., `NW-SE` changes to `NE-SW`).
   */
  flipDirectionHorizontally() {
    switch (this.getDirection()) {
      case "NW-SE":
        this.setDirection("NE-SW");
        break;
      case "NE-SW":
        this.setDirection("NW-SE");
        break;
      case "SE-NW":
        this.setDirection("SW-NE");
        break;
      case "SW-NE":
        this.setDirection("SE-NW");
        break;
    }
  }
  /**
   * Gets the top-left (in LTR) or top-right (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getTopStartCorner() {
    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col)).normalize();
  }
  /**
   * Gets the top-left corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getTopLeftCorner() {
    return Ei(this, Ir) ? this.getTopEndCorner() : this.getTopStartCorner();
  }
  /**
   * Gets the bottom right (in LTR) or bottom left (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getBottomEndCorner() {
    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col)).normalize();
  }
  /**
   * Gets the bottom right corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getBottomRightCorner() {
    return Ei(this, Ir) ? this.getBottomStartCorner() : this.getBottomEndCorner();
  }
  /**
   * Gets the top right (in LTR) or top left (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getTopEndCorner() {
    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col)).normalize();
  }
  /**
   * Gets the top right corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getTopRightCorner() {
    return Ei(this, Ir) ? this.getTopStartCorner() : this.getTopEndCorner();
  }
  /**
   * Gets the bottom left (in LTR) or bottom right (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getBottomStartCorner() {
    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col)).normalize();
  }
  /**
   * Gets the bottom left corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getBottomLeftCorner() {
    return Ei(this, Ir) ? this.getBottomEndCorner() : this.getBottomStartCorner();
  }
  /**
   * Gets the top left (in LTR) or top right (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the top and start coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterTopStartCorner() {
    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
  }
  /**
   * Gets the top left corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the top and left coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterTopLeftCorner() {
    return Ei(this, Ir) ? this.getOuterTopEndCorner() : this.getOuterTopStartCorner();
  }
  /**
   * Gets the bottom right (in LTR) or bottom left (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the top and start coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterBottomEndCorner() {
    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
  }
  /**
   * Gets the bottom right corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the top and left coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterBottomRightCorner() {
    return Ei(this, Ir) ? this.getOuterBottomStartCorner() : this.getOuterBottomEndCorner();
  }
  /**
   * Gets the top right (in LTR) or top left (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the top and start coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterTopEndCorner() {
    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
  }
  /**
   * Gets the top right corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the top and left coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterTopRightCorner() {
    return Ei(this, Ir) ? this.getOuterTopStartCorner() : this.getOuterTopEndCorner();
  }
  /**
   * Gets the bottom left (in LTR) or bottom right (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the top and start coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterBottomStartCorner() {
    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
  }
  /**
   * Gets the bottom left corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the top and left coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterBottomLeftCorner() {
    return Ei(this, Ir) ? this.getOuterBottomEndCorner() : this.getOuterBottomStartCorner();
  }
  /**
   * Checks if a set of coordinates (`coords`) matches one of the 4 corners of your range.
   *
   * @param {CellCoords} coords Coordinates to check.
   * @param {CellRange} [expandedRange] A range to compare with.
   * @returns {boolean}
   */
  isCorner(e, n) {
    return n && n.includes(e) && (this.getOuterTopLeftCorner().isEqual(this._createCellCoords(n.from.row, n.from.col)) || this.getOuterTopRightCorner().isEqual(this._createCellCoords(n.from.row, n.to.col)) || this.getOuterBottomLeftCorner().isEqual(this._createCellCoords(n.to.row, n.from.col)) || this.getOuterBottomRightCorner().isEqual(this._createCellCoords(n.to.row, n.to.col))) ? !0 : e.isEqual(this.getOuterTopLeftCorner()) || e.isEqual(this.getOuterTopRightCorner()) || e.isEqual(this.getOuterBottomLeftCorner()) || e.isEqual(this.getOuterBottomRightCorner());
  }
  /**
   * Gets the coordinates of a range corner opposite to the provided `coords`.
   *
   * For example: if the `coords` coordinates match the bottom-right corner of your range,
   * the coordinates of the top-left corner of your range are returned.
   *
   * @param {CellCoords} coords Coordinates to check.
   * @param {CellRange} [expandedRange] A range to compare with.
   * @returns {CellCoords}
   */
  getOppositeCorner(e, n) {
    if (!(e instanceof kf))
      return !1;
    if (n) {
      const {
        from: r,
        to: i
      } = n;
      if (n.includes(e)) {
        if (this.getOuterTopStartCorner().isEqual(this._createCellCoords(r.row, r.col)))
          return this.getOuterBottomEndCorner();
        if (this.getOuterTopEndCorner().isEqual(this._createCellCoords(r.row, i.col)))
          return this.getOuterBottomStartCorner();
        if (this.getOuterBottomStartCorner().isEqual(this._createCellCoords(i.row, r.col)))
          return this.getOuterTopEndCorner();
        if (this.getOuterBottomEndCorner().isEqual(this._createCellCoords(i.row, i.col)))
          return this.getOuterTopStartCorner();
      }
    }
    if (e.isEqual(this.getOuterBottomEndCorner()))
      return this.getOuterTopStartCorner();
    if (e.isEqual(this.getOuterTopStartCorner()))
      return this.getOuterBottomEndCorner();
    if (e.isEqual(this.getOuterTopEndCorner()))
      return this.getOuterBottomStartCorner();
    if (e.isEqual(this.getOuterBottomStartCorner()))
      return this.getOuterTopEndCorner();
  }
  /**
   * Indicates which borders (top, right, bottom, left) are shared between
   * your `CellRange`instance and another `range` that's within your range.
   *
   * @param {CellRange} range A range to compare with.
   * @returns {Array<'top' | 'right' | 'bottom' | 'left'>}
   */
  getBordersSharedWith(e) {
    if (!this.includesRange(e))
      return [];
    const n = {
      top: Math.min(this.from.row, this.to.row),
      bottom: Math.max(this.from.row, this.to.row),
      left: Math.min(this.from.col, this.to.col),
      right: Math.max(this.from.col, this.to.col)
    }, r = {
      top: Math.min(e.from.row, e.to.row),
      bottom: Math.max(e.from.row, e.to.row),
      left: Math.min(e.from.col, e.to.col),
      right: Math.max(e.from.col, e.to.col)
    }, i = [];
    return n.top === r.top && i.push("top"), n.right === r.right && i.push("right"), n.bottom === r.bottom && i.push("bottom"), n.left === r.left && i.push("left"), i;
  }
  /**
   * Gets the coordinates of the inner cells of your range.
   *
   * @returns {CellCoords[]}
   */
  getInner() {
    const e = this.getOuterTopStartCorner(), n = this.getOuterBottomEndCorner(), r = [];
    for (let i = e.row; i <= n.row; i++)
      for (let o = e.col; o <= n.col; o++)
        !(this.from.row === i && this.from.col === o) && !(this.to.row === i && this.to.col === o) && r.push(this._createCellCoords(i, o));
    return r;
  }
  /**
   * Gets the coordinates of all cells of your range.
   *
   * @returns {CellCoords[]}
   */
  getAll() {
    const e = this.getOuterTopStartCorner(), n = this.getOuterBottomEndCorner(), r = [];
    for (let i = e.row; i <= n.row; i++)
      for (let o = e.col; o <= n.col; o++)
        e.row === i && e.col === o ? r.push(e) : n.row === i && n.col === o ? r.push(n) : r.push(this._createCellCoords(i, o));
    return r;
  }
  /**
   * Runs a callback function on all cells within your range.
   *
   * You can break the iteration by returning `false` in the callback function.
   *
   * @param {function(number, number): boolean} callback A callback function.
   */
  forAll(e) {
    const n = this.getOuterTopStartCorner(), r = this.getOuterBottomEndCorner();
    for (let i = n.row; i <= r.row; i++)
      for (let o = n.col; o <= r.col; o++)
        if (e(i, o) === !1)
          return;
  }
  /**
   * Clones your `CellRange` instance.
   *
   * @returns {CellRange}
   */
  clone() {
    return new HS(this.highlight, this.from, this.to, Ei(this, Ir));
  }
  /**
   * Converts your `CellRange` instance into an object literal with the following properties:
   *
   * - `from`
   *    - `row`
   *    - `col`
   * - `to`
   *    - `row`
   *    - `col`
   *
   * @returns {{from: {row: number, col: number}, to: {row: number, col: number}}} An object literal with `from` and `to` properties.
   */
  toObject() {
    return {
      from: this.from.toObject(),
      to: this.to.toObject()
    };
  }
  /**
   * Creates and returns a new instance of the `CellCoords` class.
   *
   * The new `CellCoords` instance automatically inherits the LTR/RTL flag
   * from your `CellRange` instance.
   *
   * @private
   * @param {number} row A row index.
   * @param {number} column A column index.
   * @returns {CellCoords}
   */
  _createCellCoords(e, n) {
    return new kf(e, n, Ei(this, Ir));
  }
}
const DS = HS;
function Yg(t) {
  return window.requestAnimationFrame(t);
}
function Dc(t) {
  window.cancelAnimationFrame(t);
}
function NS() {
  return "ontouchstart" in window;
}
let Fa;
function YP(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return Fa || (typeof Intl == "object" ? Fa = new Intl.Collator(t, e).compare : typeof String.prototype.localeCompare == "function" ? Fa = (n, r) => `${n}`.localeCompare(r) : Fa = (n, r) => n === r ? 0 : n > r ? -1 : 1, Fa);
}
const xj = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  cancelAnimationFrame: Dc,
  getComparisonFunction: YP,
  isTouchSupported: NS,
  requestAnimationFrame: Yg
}, Symbol.toStringTag, { value: "Module" }));
function Ti(t, e, n) {
  Hj(t, e), e.set(t, n);
}
function Hj(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function De(t, e) {
  var n = GP(t, e, "get");
  return Dj(t, n);
}
function Dj(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function jo(t, e, n) {
  var r = GP(t, e, "set");
  return Nj(t, r, n), n;
}
function GP(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Nj(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var Pr = /* @__PURE__ */ new WeakMap(), ep = /* @__PURE__ */ new WeakMap(), vn = /* @__PURE__ */ new WeakMap(), Wa = /* @__PURE__ */ new WeakMap(), Nh = /* @__PURE__ */ new WeakMap(), Zr = /* @__PURE__ */ new WeakMap(), tp = /* @__PURE__ */ new WeakMap(), pu = /* @__PURE__ */ new WeakMap(), Ns = /* @__PURE__ */ new WeakMap(), _i = /* @__PURE__ */ new WeakMap();
let Lj = class {
  /**
   * @param {FacadeGetter} facadeGetter Gets an instance facade.
   * @param {DomBindings} domBindings Bindings into dom.
   * @param {Settings} wtSettings The walkontable settings.
   * @param {EventManager} eventManager The walkontable event manager.
   * @param {Table} wtTable The table.
   * @param {SelectionManager} selectionManager Selections.
   * @param {Event} [parent=null] The main Event instance.
   */
  constructor(e, n, r, i, o, s) {
    let a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
    Ti(this, Pr, {
      writable: !0,
      value: void 0
    }), Ti(this, ep, {
      writable: !0,
      value: void 0
    }), Ti(this, vn, {
      writable: !0,
      value: void 0
    }), Ti(this, Wa, {
      writable: !0,
      value: void 0
    }), Ti(this, Nh, {
      writable: !0,
      value: void 0
    }), Ti(this, Zr, {
      writable: !0,
      value: void 0
    }), Ti(this, tp, {
      writable: !0,
      value: void 0
    }), Ti(this, pu, {
      writable: !0,
      value: void 0
    }), Ti(this, Ns, {
      writable: !0,
      value: [null, null]
    }), Ti(this, _i, {
      writable: !0,
      value: [null, null]
    }), jo(this, Pr, r), jo(this, ep, n), jo(this, vn, o), jo(this, Wa, s), jo(this, Nh, a), jo(this, Zr, i), jo(this, tp, e), this.registerEvents();
  }
  /**
   * Adds listeners for mouse and touch events.
   *
   * @private
   */
  registerEvents() {
    De(this, Zr).addEventListener(De(this, vn).holder, "contextmenu", (r) => this.onContextMenu(r)), De(this, Zr).addEventListener(De(this, vn).TABLE, "mouseover", (r) => this.onMouseOver(r)), De(this, Zr).addEventListener(De(this, vn).TABLE, "mouseout", (r) => this.onMouseOut(r));
    const e = () => {
      De(this, Zr).addEventListener(De(this, vn).holder, "touchstart", (r) => this.onTouchStart(r)), De(this, Zr).addEventListener(De(this, vn).holder, "touchend", (r) => this.onTouchEnd(r)), this.momentumScrolling || (this.momentumScrolling = {}), De(this, Zr).addEventListener(De(this, vn).holder, "scroll", () => {
        clearTimeout(this.momentumScrolling._timeout), this.momentumScrolling.ongoing || De(this, Pr).getSetting("onBeforeTouchScroll"), this.momentumScrolling.ongoing = !0, this.momentumScrolling._timeout = setTimeout(() => {
          this.touchApplied || (this.momentumScrolling.ongoing = !1, De(this, Pr).getSetting("onAfterMomentumScroll"));
        }, 200);
      });
    }, n = () => {
      De(this, Zr).addEventListener(De(this, vn).holder, "mouseup", (r) => this.onMouseUp(r)), De(this, Zr).addEventListener(De(this, vn).holder, "mousedown", (r) => this.onMouseDown(r));
    };
    Mo() ? e() : (NS() && e(), n());
  }
  /**
   * Checks if an element is already selected.
   *
   * @private
   * @param {Element} touchTarget An element to check.
   * @returns {boolean}
   */
  selectedCellWasTouched(e) {
    const r = this.parentCell(e).coords;
    if (De(this, pu) && r) {
      const [i, o] = [r.row, De(this, pu).from.row], [s, a] = [r.col, De(this, pu).from.col];
      return i === o && s === a;
    }
    return !1;
  }
  /**
   * Gets closest TD or TH element.
   *
   * @private
   * @param {Element} elem An element from the traversing starts.
   * @returns {object} Contains coordinates and reference to TD or TH if it exists. Otherwise it's empty object.
   */
  parentCell(e) {
    const n = {}, r = De(this, vn).TABLE, i = Qu(e, ["TD", "TH"], r);
    return i ? (n.coords = De(this, vn).getCoords(i), n.TD = i) : Ve(e, "wtBorder") && Ve(e, "current") ? (n.coords = De(this, Wa).getFocusSelection().cellRange.highlight, n.TD = De(this, vn).getCell(n.coords)) : Ve(e, "wtBorder") && Ve(e, "area") && De(this, Wa).getAreaSelection().cellRange && (n.coords = De(this, Wa).getAreaSelection().cellRange.to, n.TD = De(this, vn).getCell(n.coords)), n;
  }
  /**
   * OnMouseDown callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onMouseDown(e) {
    const n = De(this, ep).rootDocument.activeElement, r = CS(XI, e.target), i = e.target;
    if (!["TD", "TH"].includes(n.nodeName) && (i === n || r(0) === n || r(1) === n))
      return;
    const o = this.parentCell(i);
    Ve(i, "corner") ? De(this, Pr).getSetting("onCellCornerMouseDown", e, i) : o.TD && De(this, Pr).has("onCellMouseDown") && this.callListener("onCellMouseDown", e, o.coords, o.TD), (e.button === 0 || this.touchApplied) && o.TD && (De(this, _i)[0] = o.TD, clearTimeout(De(this, Ns)[0]), De(this, Ns)[0] = setTimeout(() => {
      De(this, _i)[0] = null;
    }, 1e3));
  }
  /**
   * OnContextMenu callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onContextMenu(e) {
    if (De(this, Pr).has("onCellContextMenu")) {
      const n = this.parentCell(e.target);
      n.TD && this.callListener("onCellContextMenu", e, n.coords, n.TD);
    }
  }
  /**
   * OnMouseOver callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onMouseOver(e) {
    if (!De(this, Pr).has("onCellMouseOver"))
      return;
    const n = De(this, vn).TABLE, r = Qu(e.target, ["TD", "TH"], n), i = De(this, Nh) || this;
    r && r !== i.lastMouseOver && vs(r, n) && (i.lastMouseOver = r, this.callListener("onCellMouseOver", e, De(this, vn).getCoords(r), r));
  }
  /**
   * OnMouseOut callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onMouseOut(e) {
    if (!De(this, Pr).has("onCellMouseOut"))
      return;
    const n = De(this, vn).TABLE, r = Qu(e.target, ["TD", "TH"], n), i = Qu(e.relatedTarget, ["TD", "TH"], n), o = De(this, Nh) || this;
    r && r !== i && vs(r, n) && (this.callListener("onCellMouseOut", e, De(this, vn).getCoords(r), r), i === null && (o.lastMouseOver = null));
  }
  /**
   * OnMouseUp callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onMouseUp(e) {
    const n = this.parentCell(e.target);
    n.TD && De(this, Pr).has("onCellMouseUp") && this.callListener("onCellMouseUp", e, n.coords, n.TD), !(e.button !== 0 && !this.touchApplied) && (n.TD === De(this, _i)[0] && n.TD === De(this, _i)[1] ? (Ve(e.target, "corner") ? this.callListener("onCellCornerDblClick", e, n.coords, n.TD) : this.callListener("onCellDblClick", e, n.coords, n.TD), De(this, _i)[0] = null, De(this, _i)[1] = null) : n.TD === De(this, _i)[0] && (De(this, _i)[1] = n.TD, clearTimeout(De(this, Ns)[1]), De(this, Ns)[1] = setTimeout(() => {
      De(this, _i)[1] = null;
    }, 500)));
  }
  /**
   * OnTouchStart callback. Simulates mousedown event.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onTouchStart(e) {
    jo(this, pu, De(this, Wa).getFocusSelection().cellRange), this.touchApplied = !0, this.onMouseDown(e);
  }
  /**
   * OnTouchEnd callback. Simulates mouseup event.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onTouchEnd(e) {
    var n;
    const r = e.target, i = (n = this.parentCell(r)) === null || n === void 0 ? void 0 : n.coords, o = Re(i) && i.row >= 0 && i.col >= 0;
    if (e.cancelable && o && De(this, Pr).getSetting("isDataViewInstance")) {
      const a = ["A", "BUTTON", "INPUT"];
      yS() && (pP() || wP()) && this.selectedCellWasTouched(r) && !a.includes(r.tagName) ? e.preventDefault() : this.selectedCellWasTouched(r) || e.preventDefault();
    }
    this.onMouseUp(e), this.touchApplied = !1;
  }
  /**
   * Call listener with backward compatibility.
   *
   * @private
   * @param {string} name Name of listener.
   * @param {MouseEvent} event The event object.
   * @param {CellCoords} coords Coordinates.
   * @param {HTMLElement} target Event target.
   */
  callListener(e, n, r, i) {
    const o = De(this, Pr).getSettingPure(e);
    o && o(n, r, i, De(this, tp).call(this));
  }
  /**
   * Clears double-click timeouts and destroys the internal eventManager instance.
   */
  destroy() {
    clearTimeout(De(this, Ns)[0]), clearTimeout(De(this, Ns)[1]), De(this, Zr).destroy();
  }
};
const zP = Lj;
function np(t, e, n) {
  return e = $j(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function $j(t) {
  var e = kj(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function kj(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class Fj {
  /**
   * @param {number} offset The scroll horizontal offset.
   * @param {number} total The total width of the table.
   * @param {number} countTH The number of rendered row headers.
   */
  constructor(e, n, r) {
    np(this, "offset", void 0), np(this, "total", void 0), np(this, "countTH", void 0), this.offset = e, this.total = n, this.countTH = r;
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  offsetted(e) {
    return e + this.offset;
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  unOffsetted(e) {
    return e - this.offset;
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  renderedToSource(e) {
    return this.offsetted(e);
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  sourceToRendered(e) {
    return this.unOffsetted(e);
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  offsettedTH(e) {
    return e - this.countTH;
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  unOffsettedTH(e) {
    return e + this.countTH;
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  visibleRowHeadedColumnToSourceColumn(e) {
    return this.renderedToSource(this.offsettedTH(e));
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  sourceColumnToVisibleRowHeadedColumn(e) {
    return this.unOffsettedTH(this.sourceToRendered(e));
  }
}
const Wj = Fj;
function rp(t, e, n) {
  return e = Vj(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Vj(t) {
  var e = Bj(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Bj(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class Uj {
  /**
   * @param {number} offset The scroll vertical offset.
   * @param {number} total The total height of the table.
   * @param {number} countTH The number of rendered column headers.
   */
  constructor(e, n, r) {
    rp(this, "offset", void 0), rp(this, "total", void 0), rp(this, "countTH", void 0), this.offset = e, this.total = n, this.countTH = r;
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  offsetted(e) {
    return e + this.offset;
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  unOffsetted(e) {
    return e - this.offset;
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  renderedToSource(e) {
    return this.offsetted(e);
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  sourceToRendered(e) {
    return this.unOffsetted(e);
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  offsettedTH(e) {
    return e - this.countTH;
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  unOffsettedTH(e) {
    return e + this.countTH;
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  visibleColHeadedRowToSourceRow(e) {
    return this.renderedToSource(this.offsettedTH(e));
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  sourceRowToVisibleColHeadedRow(e) {
    return this.unOffsettedTH(this.sourceToRendered(e));
  }
}
const Yj = Uj, Gj = 0, Ff = 1, Wf = 2;
function Lh(t, e, n) {
  return e = zj(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function zj(t) {
  var e = jj(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function jj(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class z0 {
  constructor() {
    Lh(this, "currentSize", 0), Lh(this, "nextSize", 0), Lh(this, "currentOffset", 0), Lh(this, "nextOffset", 0);
  }
  /**
   * Sets new size of the rendered DOM elements.
   *
   * @param {number} size The size.
   */
  setSize(e) {
    this.currentSize = this.nextSize, this.nextSize = e;
  }
  /**
   * Sets new offset.
   *
   * @param {number} offset The offset.
   */
  setOffset(e) {
    this.currentOffset = this.nextOffset, this.nextOffset = e;
  }
}
function ip(t, e, n) {
  return e = Kj(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Kj(t) {
  var e = Xj(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Xj(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class qj {
  constructor() {
    ip(this, "size", new z0()), ip(this, "workingSpace", Gj), ip(this, "sharedSize", null);
  }
  /**
   * Sets the size for rendered elements. It can be a size for rows, cells or size for row
   * headers etc.
   *
   * @param {number} size The size.
   */
  setSize(e) {
    this.size.setSize(e);
  }
  /**
   * Sets the offset for rendered elements. The offset describes the shift between 0 and
   * the first rendered element according to the scroll position.
   *
   * @param {number} offset The offset.
   */
  setOffset(e) {
    this.size.setOffset(e);
  }
  /**
   * Returns ViewSize instance.
   *
   * @returns {ViewSize}
   */
  getViewSize() {
    return this.size;
  }
  /**
   * Checks if this ViewSizeSet is sharing the size with another instance.
   *
   * @returns {boolean}
   */
  isShared() {
    return this.sharedSize instanceof z0;
  }
  /**
   * Checks what working space describes this size instance.
   *
   * @param {number} workingSpace The number which describes the type of the working space (see constants.js).
   * @returns {boolean}
   */
  isPlaceOn(e) {
    return this.workingSpace === e;
  }
  /**
   * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.
   *
   * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.
   */
  append(e) {
    this.workingSpace = Ff, e.workingSpace = Wf, this.sharedSize = e.getViewSize();
  }
  /**
   * Prepends the ViewSize instance to this instance that turns it into a shared mode.
   *
   * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.
   */
  prepend(e) {
    this.workingSpace = Wf, e.workingSpace = Ff, this.sharedSize = e.getViewSize();
  }
}
function Va(t, e, n) {
  return e = Zj(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Zj(t) {
  var e = Qj(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Qj(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class jP {
  constructor(e, n, r) {
    Va(this, "rootNode", void 0), Va(this, "nodesPool", void 0), Va(this, "sizeSet", new qj()), Va(this, "childNodeType", void 0), Va(this, "visualIndex", 0), Va(this, "collectedNodes", []), this.rootNode = e, this.nodesPool = n, this.childNodeType = r.toUpperCase();
  }
  /**
   * Sets the size for rendered elements. It can be a size for rows, cells or size for row
   * headers etc. It depends for what table renderer this instance was created.
   *
   * @param {number} size The size.
   * @returns {OrderView}
   */
  setSize(e) {
    return this.sizeSet.setSize(e), this;
  }
  /**
   * Sets the offset for rendered elements. The offset describes the shift between 0 and
   * the first rendered element according to the scroll position.
   *
   * @param {number} offset The offset.
   * @returns {OrderView}
   */
  setOffset(e) {
    return this.sizeSet.setOffset(e), this;
  }
  /**
   * Checks if this instance of the view shares the root node with another instance. This happens only once when
   * a row (TR) as a root node is managed by two OrderView instances. If this happens another DOM injection
   * algorithm is performed to achieve consistent order.
   *
   * @returns {boolean}
   */
  isSharedViewSet() {
    return this.sizeSet.isShared();
  }
  /**
   * Returns rendered DOM element based on visual index.
   *
   * @param {number} visualIndex The visual index.
   * @returns {HTMLElement}
   */
  getNode(e) {
    return e < this.collectedNodes.length ? this.collectedNodes[e] : null;
  }
  /**
   * Returns currently processed DOM element.
   *
   * @returns {HTMLElement}
   */
  getCurrentNode() {
    const e = this.collectedNodes.length;
    return e > 0 ? this.collectedNodes[e - 1] : null;
  }
  /**
   * Returns rendered child count for this instance.
   *
   * @returns {number}
   */
  getRenderedChildCount() {
    const {
      rootNode: e,
      sizeSet: n
    } = this;
    let r = 0;
    if (this.isSharedViewSet()) {
      let i = e.firstElementChild;
      for (; i; ) {
        if (i.tagName === this.childNodeType)
          r += 1;
        else if (n.isPlaceOn(Ff))
          break;
        i = i.nextElementSibling;
      }
    } else
      r = e.childElementCount;
    return r;
  }
  /**
   * Setups and prepares all necessary properties and start the rendering process.
   * This method has to be called only once (at the start) for the render cycle.
   */
  start() {
    this.collectedNodes.length = 0, this.visualIndex = 0;
    const {
      rootNode: e,
      sizeSet: n
    } = this, r = this.isSharedViewSet(), {
      nextSize: i
    } = n.getViewSize();
    let o = this.getRenderedChildCount();
    for (; o < i; ) {
      const a = this.nodesPool();
      !r || r && n.isPlaceOn(Wf) ? e.appendChild(a) : e.insertBefore(a, e.firstChild), o += 1;
    }
    const s = r && n.isPlaceOn(Ff);
    for (; o > i; )
      e.removeChild(s ? e.firstChild : e.lastChild), o -= 1;
  }
  /**
   * Renders the DOM element based on visual index (which is calculated internally).
   * This method has to be called as many times as the size count is met (to cover all previously rendered DOM elements).
   */
  render() {
    const {
      rootNode: e,
      sizeSet: n
    } = this;
    let r = this.visualIndex;
    this.isSharedViewSet() && n.isPlaceOn(Wf) && (r += n.sharedSize.nextSize);
    let i = e.childNodes[r];
    if (i.tagName !== this.childNodeType) {
      const o = this.nodesPool();
      e.replaceChild(o, i), i = o;
    }
    this.collectedNodes.push(i), this.visualIndex += 1;
  }
  /**
   * Ends the render process.
   * This method has to be called only once (at the end) for the render cycle.
   */
  end() {
  }
}
class KP extends jP {
  /**
   * The method results in merging external order view into the current order. This happens only for order views which
   * operate on the same root node.
   *
   * In the table, there is only one scenario when this happens. TR root element
   * has a common root node with cells order view and row headers order view. Both classes have to share
   * information about their order sizes to make proper diff calculations.
   *
   * @param {OrderView} orderView The order view to merging with. The view will be added at the beginning of the list.
   * @returns {SharedOrderView}
   */
  prependView(e) {
    return this.sizeSet.prepend(e.sizeSet), e.sizeSet.append(this.sizeSet), this;
  }
  /**
   * The method results in merging external order view into the current order. This happens only for order views which
   * operate on the same root node.
   *
   * In the table, there is only one scenario when this happens. TR root element
   * has a common root node with cells order view and row headers order view. Both classes have to share
   * information about their order sizes to make proper diff calculations.
   *
   * @param {OrderView} orderView The order view to merging with. The view will be added at the end of the list.
   * @returns {SharedOrderView}
   */
  appendView(e) {
    return this.sizeSet.append(e.sizeSet), e.sizeSet.prepend(this.sizeSet), this;
  }
}
function Jj(t, e, n) {
  return e = eK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function eK(t) {
  var e = tK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function tK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class nK {
  constructor(e) {
    Jj(this, "nodeType", void 0), this.nodeType = e.toUpperCase();
  }
  /**
   * Set document owner for this instance.
   *
   * @param {HTMLDocument} rootDocument The document window owner.
   */
  setRootDocument(e) {
    this.rootDocument = e;
  }
  /**
   * Obtains an element. The returned elements in the feature can be cached.
   *
   * @returns {HTMLElement}
   */
  obtain() {
    return this.rootDocument.createElement(this.nodeType);
  }
}
function wu(t, e, n) {
  return e = rK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function rK(t) {
  var e = iK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function iK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class rh {
  constructor(e, n) {
    wu(this, "nodesPool", null), wu(this, "nodeType", void 0), wu(this, "rootNode", void 0), wu(this, "table", null), wu(this, "renderedNodes", 0), this.nodesPool = typeof e == "string" ? new nK(e) : null, this.nodeType = e, this.rootNode = n;
  }
  /**
   * Sets the table renderer instance to the current renderer.
   *
   * @param {TableRenderer} table The TableRenderer instance.
   */
  setTable(e) {
    this.nodesPool && this.nodesPool.setRootDocument(e.rootDocument), this.table = e;
  }
  /**
   * Adjusts the number of rendered nodes.
   */
  adjust() {
  }
  /**
   * Renders the contents to the elements.
   */
  render() {
  }
}
function j0(t, e, n) {
  return e = oK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function oK(t) {
  var e = sK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function sK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class aK extends rh {
  constructor() {
    super("TH"), j0(this, "orderViews", /* @__PURE__ */ new WeakMap()), j0(this, "sourceRowIndex", 0);
  }
  /**
   * Obtains the instance of the SharedOrderView class which is responsible for rendering the nodes to the root node.
   *
   * @param {HTMLTableRowElement} rootNode The TR element, which is root element for row headers (TH).
   * @returns {SharedOrderView}
   */
  obtainOrderView(e) {
    let n;
    return this.orderViews.has(e) ? n = this.orderViews.get(e) : (n = new KP(e, (r) => this.nodesPool.obtain(this.sourceRowIndex, r), this.nodeType), this.orderViews.set(e, n)), n;
  }
  /**
   * Renders the cells.
   */
  render() {
    const {
      rowsToRender: e,
      rowHeaderFunctions: n,
      rowHeadersCount: r,
      rows: i,
      cells: o
    } = this.table;
    for (let s = 0; s < e; s++) {
      const a = this.table.renderedRowToSource(s), l = i.getRenderedNode(s);
      this.sourceRowIndex = a;
      const u = this.obtainOrderView(l), c = o.obtainOrderView(l);
      u.appendView(c).setSize(r).setOffset(this.table.renderedColumnToSource(0)).start();
      for (let d = 0; d < r; d++) {
        u.render();
        const g = u.getCurrentNode();
        g.className = "", g.removeAttribute("style"), Ia(g, [new RegExp("aria-(.*)"), new RegExp("role")]), this.table.isAriaEnabled() && Ne(g, [kY(), zY(), cS(d + 1), Kl(-1)]), n[d](a, g, d);
      }
      u.end();
    }
  }
}
class lK extends rh {
  constructor(e) {
    super(null, e);
  }
  /**
   * Adjusts the number of the rendered elements.
   */
  adjust() {
    const {
      columnHeadersCount: e,
      rowHeadersCount: n
    } = this.table;
    let r = this.rootNode.firstChild;
    if (e) {
      const {
        columnsToRender: i
      } = this.table, o = i + n;
      for (let a = 0, l = e; a < l; a++) {
        for (r = this.rootNode.childNodes[a], r || (r = this.table.rootDocument.createElement("tr"), this.rootNode.appendChild(r)), this.renderedNodes = r.childNodes.length; this.renderedNodes < o; )
          r.appendChild(this.table.rootDocument.createElement("th")), this.renderedNodes += 1;
        for (; this.renderedNodes > o; )
          r.removeChild(r.lastChild), this.renderedNodes -= 1;
      }
      const s = this.rootNode.childNodes.length;
      if (s > e)
        for (let a = e; a < s; a++)
          this.rootNode.removeChild(this.rootNode.lastChild);
    } else
      r && vi(r);
  }
  /**
   * Renders the TH elements.
   */
  render() {
    const {
      columnHeadersCount: e
    } = this.table;
    this.table.isAriaEnabled() && Ne(this.rootNode, [YI()]);
    for (let n = 0; n < e; n += 1) {
      const {
        columnHeaderFunctions: r,
        columnsToRender: i,
        rowHeadersCount: o
      } = this.table, s = this.rootNode.childNodes[n];
      this.table.isAriaEnabled() && Ne(s, [AC(), KI(n + 1)]);
      for (let a = -1 * o; a < i; a += 1) {
        const l = this.table.renderedColumnToSource(a), u = s.childNodes[a + o];
        u.className = "", u.removeAttribute("style"), Ia(u, [new RegExp("aria-(.*)"), new RegExp("role")]), this.table.isAriaEnabled() && Ne(u, [cS(a + 1 + this.table.rowHeadersCount), Kl(-1), FY(), ...a >= 0 ? [GY()] : [
          // Adding `role=row` to the corner headers to prevent
          // https://github.com/handsontable/dev-handsontable/issues/1574
          AC()
        ]]), r[n](l, u, n);
      }
    }
  }
}
class uK extends rh {
  constructor(e) {
    super(null, e);
  }
  /**
   * Adjusts the number of the rendered elements.
   */
  adjust() {
    const {
      columnsToRender: e,
      rowHeadersCount: n
    } = this.table, r = e + n;
    for (; this.renderedNodes < r; )
      this.rootNode.appendChild(this.table.rootDocument.createElement("col")), this.renderedNodes += 1;
    for (; this.renderedNodes > r; )
      this.rootNode.removeChild(this.rootNode.lastChild), this.renderedNodes -= 1;
  }
  /**
   * Renders the col group elements.
   */
  render() {
    this.adjust();
    const {
      columnsToRender: e,
      rowHeadersCount: n
    } = this.table;
    for (let i = 0; i < n; i++) {
      const o = this.table.renderedColumnToSource(i), s = this.table.columnUtils.getHeaderWidth(o);
      this.rootNode.childNodes[i].style.width = `${s}px`;
    }
    for (let i = 0; i < e; i++) {
      const o = this.table.renderedColumnToSource(i), s = this.table.columnUtils.getStretchedColumnWidth(o);
      this.rootNode.childNodes[i + n].style.width = `${s}px`;
    }
    const r = this.rootNode.firstChild;
    r && ce(r, "rowHeader");
  }
}
function cK(t, e, n) {
  return e = hK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function hK(t) {
  var e = dK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function dK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
let K0 = !1;
class fK extends rh {
  constructor(e) {
    super("TR", e), cK(this, "orderView", void 0), this.orderView = new jP(e, (n) => this.nodesPool.obtain(n), this.nodeType);
  }
  /**
   * Returns currently rendered node.
   *
   * @param {string} visualIndex Visual index of the rendered node (it always goeas from 0 to N).
   * @returns {HTMLTableRowElement}
   */
  getRenderedNode(e) {
    return this.orderView.getNode(e);
  }
  /**
   * Renders the cells.
   */
  render() {
    const {
      rowsToRender: e
    } = this.table;
    !K0 && e > 1e3 && (K0 = !0, Pt(bt`Performance tip: Handsontable rendered more than 1000 visible rows. Consider limiting\x20
        the number of rendered rows by specifying the table height and/or turning off the "renderAllRows" option.`)), this.table.isAriaEnabled() && Ne(this.rootNode, [YI()]), this.orderView.setSize(e).setOffset(this.table.renderedRowToSource(0)).start();
    for (let i = 0; i < e; i++) {
      this.orderView.render();
      const o = this.orderView.getCurrentNode(), s = this.table.renderedRowToSource(i);
      if (this.table.isAriaEnabled()) {
        var n, r;
        Ne(o, [
          AC(),
          // `aria-rowindex` is incremented by both tbody and thead rows.
          KI(s + ((n = (r = this.table.rowUtils) === null || r === void 0 || (r = r.dataAccessObject) === null || r === void 0 ? void 0 : r.columnHeaders.length) !== null && n !== void 0 ? n : 0) + 1)
        ]);
      }
    }
    this.orderView.end();
  }
}
function X0(t, e, n) {
  return e = gK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function gK(t) {
  var e = mK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function mK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class pK extends rh {
  constructor() {
    super("TD"), X0(this, "orderViews", /* @__PURE__ */ new WeakMap()), X0(this, "sourceRowIndex", 0);
  }
  /**
   * Obtains the instance of the SharedOrderView class which is responsible for rendering the nodes to the root node.
   *
   * @param {HTMLTableRowElement} rootNode The TR element, which is root element for cells (TD).
   * @returns {SharedOrderView}
   */
  obtainOrderView(e) {
    let n;
    return this.orderViews.has(e) ? n = this.orderViews.get(e) : (n = new KP(e, (r) => this.nodesPool.obtain(this.sourceRowIndex, r), this.nodeType), this.orderViews.set(e, n)), n;
  }
  /**
   * Renders the cells.
   */
  render() {
    const {
      rowsToRender: e,
      columnsToRender: n,
      rows: r,
      rowHeaders: i
    } = this.table;
    for (let a = 0; a < e; a++) {
      const l = this.table.renderedRowToSource(a), u = r.getRenderedNode(a);
      this.sourceRowIndex = l;
      const c = this.obtainOrderView(u), d = i.obtainOrderView(u);
      c.prependView(d).setSize(n).setOffset(this.table.renderedColumnToSource(0)).start();
      for (let g = 0; g < n; g++) {
        c.render();
        const p = c.getCurrentNode(), C = this.table.renderedColumnToSource(g);
        if (Ve(p, "hide") || (p.className = ""), p.removeAttribute("style"), p.removeAttribute("dir"), Ia(p, [new RegExp("aria-(.*)"), new RegExp("role")]), this.table.cellRenderer(l, C, p), this.table.isAriaEnabled()) {
          var o, s;
          Ne(p, [
            ...p.hasAttribute("role") ? [] : [$Y()],
            Kl(-1),
            // `aria-colindex` is incremented by both tbody and thead rows.
            cS(C + ((o = (s = this.table.rowUtils) === null || s === void 0 || (s = s.dataAccessObject) === null || s === void 0 ? void 0 : s.rowHeaders.length) !== null && o !== void 0 ? o : 0) + 1)
          ]);
        }
      }
      c.end();
    }
  }
}
function Sn(t, e, n) {
  return e = wK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function wK(t) {
  var e = CK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function CK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class vK {
  constructor(e) {
    let {
      cellRenderer: n
    } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Sn(this, "rootNode", void 0), Sn(this, "rootDocument", void 0), Sn(this, "rowHeaders", null), Sn(this, "columnHeaders", null), Sn(this, "colGroup", null), Sn(this, "rows", null), Sn(this, "cells", null), Sn(this, "rowFilter", null), Sn(this, "columnFilter", null), Sn(this, "rowUtils", null), Sn(this, "columnUtils", null), Sn(this, "rowsToRender", 0), Sn(this, "columnsToRender", 0), Sn(this, "rowHeaderFunctions", []), Sn(this, "rowHeadersCount", 0), Sn(this, "columnHeaderFunctions", []), Sn(this, "columnHeadersCount", 0), Sn(this, "cellRenderer", void 0), this.rootNode = e, this.rootDocument = this.rootNode.ownerDocument, this.cellRenderer = n;
  }
  /**
   * Set row and column util classes.
   *
   * @param {RowUtils} rowUtils RowUtils instance which provides useful methods related to row sizes.
   * @param {ColumnUtils} columnUtils ColumnUtils instance which provides useful methods related to row sizes.
   */
  setAxisUtils(e, n) {
    this.rowUtils = e, this.columnUtils = n;
  }
  /**
   * Sets viewport size of the table.
   *
   * @param {number} rowsCount An amount of rows to render.
   * @param {number} columnsCount An amount of columns to render.
   */
  setViewportSize(e, n) {
    this.rowsToRender = e, this.columnsToRender = n;
  }
  /**
   * Sets row and column filter instances.
   *
   * @param {RowFilter} rowFilter Row filter instance which contains all necessary information about row index transformation.
   * @param {ColumnFilter} columnFilter Column filter instance which contains all necessary information about row
   * index transformation.
   */
  setFilters(e, n) {
    this.rowFilter = e, this.columnFilter = n;
  }
  /**
   * Sets row and column header functions.
   *
   * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.
   * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.
   */
  setHeaderContentRenderers(e, n) {
    this.rowHeaderFunctions = e, this.rowHeadersCount = e.length, this.columnHeaderFunctions = n, this.columnHeadersCount = n.length;
  }
  /**
   * Sets table renderers.
   *
   * @param {renderers} renderers The renderer units.
   * @param {RowHeadersRenderer} renderers.rowHeaders Row headers renderer.
   * @param {ColumnHeadersRenderer} renderers.columnHeaders Column headers renderer.
   * @param {ColGroupRenderer} renderers.colGroup Col group renderer.
   * @param {RowsRenderer} renderers.rows Rows renderer.
   * @param {CellsRenderer} renderers.cells Cells renderer.
   */
  setRenderers() {
    let {
      rowHeaders: e,
      columnHeaders: n,
      colGroup: r,
      rows: i,
      cells: o
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    e.setTable(this), n.setTable(this), r.setTable(this), i.setTable(this), o.setTable(this), this.rowHeaders = e, this.columnHeaders = n, this.colGroup = r, this.rows = i, this.cells = o;
  }
  /**
   * Transforms visual/rendered row index to source index.
   *
   * @param {number} rowIndex Rendered index.
   * @returns {number}
   */
  renderedRowToSource(e) {
    return this.rowFilter.renderedToSource(e);
  }
  /**
   * Transforms visual/rendered column index to source index.
   *
   * @param {number} columnIndex Rendered index.
   * @returns {number}
   */
  renderedColumnToSource(e) {
    return this.columnFilter.renderedToSource(e);
  }
  /**
   * Returns `true` if the accessibility-related ARIA tags should be added to the table, `false` otherwise.
   *
   * @returns {boolean}
   */
  isAriaEnabled() {
    return this.rowUtils.wtSettings.getSetting("ariaTags");
  }
  /**
   * Renders the table.
   */
  render() {
    this.colGroup.adjust(), this.columnHeaders.adjust(), this.rows.adjust(), this.rowHeaders.adjust(), this.columnHeaders.render(), this.rows.render(), this.rowHeaders.render(), this.cells.render(), this.columnUtils.calculateWidths(), this.colGroup.render();
    const {
      rowsToRender: e,
      rows: n
    } = this;
    for (let r = 0; r < e; r++) {
      const i = n.getRenderedNode(r);
      if (i.firstChild) {
        const o = this.renderedRowToSource(r), s = this.rowUtils.getHeight(o);
        s ? i.firstChild.style.height = `${s - 1}px` : i.firstChild.style.height = "";
      }
    }
  }
}
class SK {
  constructor() {
    let {
      TABLE: e,
      THEAD: n,
      COLGROUP: r,
      TBODY: i,
      rowUtils: o,
      columnUtils: s,
      cellRenderer: a
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.renderer = new vK(e, {
      cellRenderer: a
    }), this.renderer.setRenderers({
      rowHeaders: new aK(),
      columnHeaders: new lK(n),
      colGroup: new uK(r),
      rows: new fK(i),
      cells: new pK()
    }), this.renderer.setAxisUtils(o, s);
  }
  /**
   * Sets filter calculators for newly calculated row and column position. The filters are used to transform visual
   * indexes (0 to N) to source indexes provided by Handsontable.
   *
   * @param {RowFilter} rowFilter The row filter instance.
   * @param {ColumnFilter} columnFilter The column filter instance.
   * @returns {Renderer}
   */
  setFilters(e, n) {
    return this.renderer.setFilters(e, n), this;
  }
  /**
   * Sets the viewport size of the rendered table.
   *
   * @param {number} rowsCount An amount of rows to render.
   * @param {number} columnsCount An amount of columns to render.
   * @returns {Renderer}
   */
  setViewportSize(e, n) {
    return this.renderer.setViewportSize(e, n), this;
  }
  /**
   * Sets row and column header functions.
   *
   * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.
   * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.
   * @returns {Renderer}
   */
  setHeaderContentRenderers(e, n) {
    return this.renderer.setHeaderContentRenderers(e, n), this;
  }
  /**
   * Adjusts the table (preparing for render).
   */
  adjust() {
    this.renderer.adjust();
  }
  /**
   * Renders the table.
   */
  render() {
    this.renderer.render();
  }
}
function op(t, e, n) {
  return e = yK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function yK(t) {
  var e = bK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function bK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class RK {
  /**
   * @param {TableDao} dataAccessObject The table Data Access Object.
   * @param {Settings} wtSettings The walkontable settings.
   */
  constructor(e, n) {
    op(this, "dataAccessObject", void 0), op(this, "wtSettings", void 0), op(this, "headerWidths", /* @__PURE__ */ new Map()), this.dataAccessObject = e, this.wtSettings = n;
  }
  /**
   * Returns column width based on passed source index.
   *
   * @param {number} sourceIndex Column source index.
   * @returns {number}
   */
  getWidth(e) {
    return this.wtSettings.getSetting("columnWidth", e) || this.wtSettings.getSetting("defaultColumnWidth");
  }
  /**
   * Returns stretched column width based on passed source index.
   *
   * @param {number} sourceIndex Column source index.
   * @returns {number}
   */
  getStretchedColumnWidth(e) {
    const n = this.dataAccessObject.wtViewport.columnsRenderCalculator;
    let r = this.getWidth(e);
    if (n) {
      const i = n.getStretchedColumnWidth(e, r);
      i && (r = i);
    }
    return r;
  }
  /**
   * Returns column header height based on passed header level.
   *
   * @param {number} level Column header level.
   * @returns {number}
   */
  getHeaderHeight(e) {
    let n = this.wtSettings.getSetting("defaultRowHeight");
    const r = this.dataAccessObject.wtViewport.oversizedColumnHeaders[e];
    return r !== void 0 && (n = n ? Math.max(n, r) : r), n;
  }
  /**
   * Returns column header width based on passed source index.
   *
   * @param {number} sourceIndex Column source index.
   * @returns {number}
   */
  getHeaderWidth(e) {
    return this.headerWidths.get(this.dataAccessObject.wtTable.columnFilter.sourceToRendered(e));
  }
  /**
   * Calculates column header widths that can be retrieved from the cache.
   */
  calculateWidths() {
    const {
      wtSettings: e
    } = this, {
      wtTable: n,
      wtViewport: r,
      cloneSource: i
    } = this.dataAccessObject, o = i ? i.wtTable.holder : n.holder, s = o.offsetHeight < o.scrollHeight ? wn() : 0;
    let a = e.getSetting("rowHeaderWidth");
    if (r.columnsRenderCalculator.refreshStretching(r.getViewportWidth() - s), a = e.getSetting("onModifyRowHeaderWidth", a), a != null) {
      const l = e.getSetting("rowHeaders").length, u = e.getSetting("defaultColumnWidth");
      for (let c = 0; c < l; c++) {
        let d = Array.isArray(a) ? a[c] : a;
        d = d ?? u, this.headerWidths.set(c, d);
      }
    }
  }
}
function q0(t, e, n) {
  return e = EK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function EK(t) {
  var e = TK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function TK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class _K {
  /**
   * @param {TableDao} dataAccessObject The table Data Access Object.
   * @param {Settings} wtSettings The walkontable settings.
   */
  constructor(e, n) {
    q0(this, "dataAccessObject", void 0), q0(this, "wtSettings", void 0), this.dataAccessObject = e, this.wtSettings = n;
  }
  /**
   * Returns row height based on passed source index.
   *
   * @param {number} sourceIndex Row source index.
   * @returns {number}
   */
  getHeight(e) {
    let n = this.wtSettings.getSetting("rowHeight", e);
    const r = this.dataAccessObject.wtViewport.oversizedRows[e];
    return r !== void 0 && (n = n === void 0 ? r : Math.max(n, r)), n;
  }
}
function Mi(t, e, n) {
  return e = MK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function MK(t) {
  var e = OK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function OK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class AK {
  /**
   *
   * @abstract
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {'master'|CLONE_TYPES_ENUM} name Overlay name.
   */
  constructor(e, n, r, i, o) {
    Mi(this, "wtSettings", null), Mi(this, "domBindings", void 0), Mi(this, "TBODY", null), Mi(this, "THEAD", null), Mi(this, "COLGROUP", null), Mi(this, "hasTableHeight", !0), Mi(this, "hasTableWidth", !0), Mi(this, "isTableVisible", !1), Mi(this, "tableOffset", 0), Mi(this, "holderOffset", 0), this.domBindings = r, this.isMaster = o === "master", this.name = o, this.dataAccessObject = e, this.facadeGetter = n, this.wtSettings = i, this.instance = this.dataAccessObject.wot, this.wot = this.dataAccessObject.wot, this.TABLE = r.rootTable, dS(this.TABLE), this.spreader = this.createSpreader(this.TABLE), this.hider = this.createHider(this.spreader), this.holder = this.createHolder(this.hider), this.wtRootElement = this.holder.parentNode, this.isMaster && this.alignOverlaysWithTrimmingContainer(), this.fixTableDomTree(), this.rowFilter = null, this.columnFilter = null, this.correctHeaderWidth = !1;
    const s = this.wtSettings.getSettingPure("rowHeaderWidth");
    this.wtSettings.update("rowHeaderWidth", () => this._modifyRowHeaderWidth(s)), this.rowUtils = new _K(this.dataAccessObject, this.wtSettings), this.columnUtils = new RK(this.dataAccessObject, this.wtSettings), this.tableRenderer = new SK({
      // TODO refactoring, It can be passed through IOC.
      TABLE: this.TABLE,
      THEAD: this.THEAD,
      COLGROUP: this.COLGROUP,
      TBODY: this.TBODY,
      rowUtils: this.rowUtils,
      columnUtils: this.columnUtils,
      cellRenderer: this.wtSettings.getSettingPure("cellRenderer")
    });
  }
  /**
   * Returns a boolean that is true if this Table represents a specific overlay, identified by the overlay name.
   * For MasterTable, it returns false.
   *
   * @param {string} overlayTypeName The overlay type.
   * @returns {boolean}
   */
  is(e) {
    return this.name === e;
  }
  /**
   *
   */
  fixTableDomTree() {
    const e = this.domBindings.rootDocument;
    this.TBODY = this.TABLE.querySelector("tbody"), this.TBODY || (this.TBODY = e.createElement("tbody"), this.TABLE.appendChild(this.TBODY)), this.THEAD = this.TABLE.querySelector("thead"), this.THEAD || (this.THEAD = e.createElement("thead"), this.TABLE.insertBefore(this.THEAD, this.TBODY)), this.COLGROUP = this.TABLE.querySelector("colgroup"), this.COLGROUP || (this.COLGROUP = e.createElement("colgroup"), this.TABLE.insertBefore(this.COLGROUP, this.THEAD));
  }
  /**
   * @param {HTMLTableElement} table An element to process.
   * @returns {HTMLElement}
   */
  createSpreader(e) {
    const n = e.parentNode;
    let r;
    return (!n || n.nodeType !== Node.ELEMENT_NODE || !Ve(n, "wtHolder")) && (r = this.domBindings.rootDocument.createElement("div"), r.className = "wtSpreader", n && n.insertBefore(r, e), r.appendChild(e)), r.style.position = "relative", this.wtSettings.getSetting("ariaTags") && Ne(r, [Gi()]), r;
  }
  /**
   * @param {HTMLElement} spreader An element to the hider element is injected.
   * @returns {HTMLElement}
   */
  createHider(e) {
    const n = e.parentNode;
    let r;
    return (!n || n.nodeType !== Node.ELEMENT_NODE || !Ve(n, "wtHolder")) && (r = this.domBindings.rootDocument.createElement("div"), r.className = "wtHider", n && n.insertBefore(r, e), r.appendChild(e)), this.wtSettings.getSetting("ariaTags") && Ne(r, [Gi()]), r;
  }
  /**
   *
   * @param {HTMLElement} hider An element to the holder element is injected.
   * @returns {HTMLElement}
   */
  createHolder(e) {
    const n = e.parentNode;
    let r;
    return (!n || n.nodeType !== Node.ELEMENT_NODE || !Ve(n, "wtHolder")) && (r = this.domBindings.rootDocument.createElement("div"), r.style.position = "relative", r.className = "wtHolder", n && n.insertBefore(r, e), this.isMaster && (r.parentNode.className += "ht_master handsontable", r.parentNode.setAttribute("dir", this.wtSettings.getSettingPure("rtlMode") ? "rtl" : "ltr"), this.wtSettings.getSetting("ariaTags") && Ne(r.parentNode, [Gi()])), r.appendChild(e)), this.wtSettings.getSetting("ariaTags") && Ne(r, [Gi()]), r;
  }
  /**
   * Redraws the table.
   *
   * @param {boolean} [fastDraw=false] If TRUE, will try to avoid full redraw and only update the border positions.
   *                                   If FALSE or UNDEFINED, will perform a full redraw.
   * @returns {Table}
   */
  draw() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const {
      wtSettings: n
    } = this, {
      wtOverlays: r,
      wtViewport: i
    } = this.dataAccessObject, o = n.getSetting("totalRows"), s = n.getSetting("totalColumns"), a = n.getSetting("rowHeaders"), l = a.length, u = n.getSetting("columnHeaders"), c = u.length;
    let d = !1, g = e;
    if (this.isMaster && (this.holderOffset = an(this.holder), g = i.createRenderCalculators(g), l && !n.getSetting("fixedColumnsStart"))) {
      const C = r.inlineStartOverlay.getScrollPosition(), E = this.correctHeaderWidth;
      this.correctHeaderWidth = C !== 0, E !== this.correctHeaderWidth && (g = !1);
    }
    if (this.isMaster && (d = r.updateStateOfRendering()), g)
      this.isMaster && i.createVisibleCalculators(), r && r.refresh(!0);
    else {
      this.isMaster ? this.tableOffset = an(this.TABLE) : this.tableOffset = this.dataAccessObject.parentTableOffset;
      const C = o > 0 ? this.getFirstRenderedRow() : 0, E = s > 0 ? this.getFirstRenderedColumn() : 0;
      this.rowFilter = new Yj(C, o, c), this.columnFilter = new Wj(E, s, l);
      let I = !0;
      if (this.isMaster) {
        this.alignOverlaysWithTrimmingContainer();
        const M = {};
        this.wtSettings.getSetting("beforeDraw", !0, M), I = M.skipRender !== !0;
      }
      if (I) {
        this.tableRenderer.setHeaderContentRenderers(a, u), (this.is(Ui) || this.is(ys)) && this.tableRenderer.setHeaderContentRenderers(a, []), this.resetOversizedRows(), this.tableRenderer.setViewportSize(this.getRenderedRowsCount(), this.getRenderedColumnsCount()).setFilters(this.rowFilter, this.columnFilter).render();
        let M;
        if (this.isMaster && (M = this.dataAccessObject.workspaceWidth, this.dataAccessObject.wtViewport.containerWidth = null, this.markOversizedColumnHeaders()), this.adjustColumnHeaderHeights(), (this.isMaster || this.is(Ui)) && this.markOversizedRows(), this.isMaster) {
          this.dataAccessObject.wtViewport.createVisibleCalculators(), this.dataAccessObject.wtOverlays.refresh(!1), this.dataAccessObject.wtOverlays.applyToDOM();
          const y = yt(this.hider), $ = yt(this.TABLE);
          y !== 0 && $ !== y && (this.columnUtils.calculateWidths(), this.tableRenderer.renderer.colGroup.render()), M !== this.dataAccessObject.wtViewport.getWorkspaceWidth() && (this.dataAccessObject.wtViewport.containerWidth = null, this.columnUtils.calculateWidths(), this.tableRenderer.renderer.colGroup.render()), this.wtSettings.getSetting("onDraw", !0);
        } else
          this.is(Ui) && this.dataAccessObject.cloneSource.wtOverlays.adjustElementsSize();
      }
    }
    let p = !1;
    return this.isMaster && (p = r.topOverlay.resetFixedPosition(), r.bottomOverlay.clone && (p = r.bottomOverlay.resetFixedPosition() || p), p = r.inlineStartOverlay.resetFixedPosition() || p, r.topInlineStartCornerOverlay && r.topInlineStartCornerOverlay.resetFixedPosition(), r.bottomInlineStartCornerOverlay && r.bottomInlineStartCornerOverlay.clone && r.bottomInlineStartCornerOverlay.resetFixedPosition()), p ? (r.refreshAll(), r.adjustElementsSize()) : this.dataAccessObject.selectionManager.setActiveOverlay(this.facadeGetter()).render(g), d && r.syncScrollWithMaster(), this.dataAccessObject.drawn = !0, this;
  }
  /**
   * @param {number} col The visual column index.
   */
  markIfOversizedColumnHeader(e) {
    const n = this.columnFilter.renderedToSource(e);
    let r = this.wtSettings.getSetting("columnHeaders").length;
    const i = this.wtSettings.getSetting("defaultRowHeight");
    let o, s, a;
    const l = this.wtSettings.getSetting("columnHeaderHeight") || [];
    for (; r; )
      r -= 1, o = this.getColumnHeaderHeight(r), s = this.getColumnHeader(n, r), s && (a = _o(s), (!o && i < a || o < a) && (this.dataAccessObject.wtViewport.oversizedColumnHeaders[r] = a), Array.isArray(l) ? l[r] !== null && l[r] !== void 0 && (this.dataAccessObject.wtViewport.oversizedColumnHeaders[r] = l[r]) : isNaN(l) || (this.dataAccessObject.wtViewport.oversizedColumnHeaders[r] = l), this.dataAccessObject.wtViewport.oversizedColumnHeaders[r] < (l[r] || l) && (this.dataAccessObject.wtViewport.oversizedColumnHeaders[r] = l[r] || l));
  }
  /**
   *
   */
  adjustColumnHeaderHeights() {
    const {
      wtSettings: e
    } = this, n = this.THEAD.childNodes, r = this.dataAccessObject.wtViewport.oversizedColumnHeaders, i = e.getSetting("columnHeaders");
    for (let o = 0, s = i.length; o < s; o++)
      if (r[o]) {
        if (!n[o] || n[o].childNodes.length === 0)
          return;
        n[o].childNodes[0].style.height = `${r[o]}px`;
      }
  }
  /**
   * Resets cache of row heights. The cache should be cached for each render cycle in a case
   * when new cell values have content which increases/decreases cell height.
   */
  resetOversizedRows() {
    const {
      wtSettings: e
    } = this, {
      wtViewport: n
    } = this.dataAccessObject;
    if (!(!this.isMaster && !this.is(Ui)) && !e.getSetting("externalRowCalculator")) {
      const r = this.getRenderedRowsCount();
      for (let i = 0; i < r; i++) {
        const o = this.rowFilter.renderedToSource(i);
        n.oversizedRows && n.oversizedRows[o] && (n.oversizedRows[o] = void 0);
      }
    }
  }
  /**
   * Get cell element at coords.
   * Negative coords.row or coords.col are used to retrieve header cells. If there are multiple header levels, the
   * negative value corresponds to the distance from the working area. For example, when there are 3 levels of column
   * headers, coords.col=-1 corresponds to the most inner header element, while coords.col=-3 corresponds to the
   * outmost header element.
   *
   * In case an element for the coords is not rendered, the method returns an error code.
   * To produce the error code, the input parameters are validated in the order in which they
   * are given. Thus, if both the row and the column coords are out of the rendered bounds,
   * the method returns the error code for the row.
   *
   * @param {CellCoords} coords The cell coordinates.
   * @returns {HTMLElement|number} HTMLElement on success or Number one of the exit codes on error:
   *  -1 row before viewport
   *  -2 row after viewport
   *  -3 column before viewport
   *  -4 column after viewport.
   */
  getCell(e) {
    let n = e.row, r = e.col;
    const i = this.wtSettings.getSetting("onModifyGetCellCoords", n, r);
    if (i && Array.isArray(i) && ([n, r] = i), this.isRowBeforeRenderedRows(n))
      return -1;
    if (this.isRowAfterRenderedRows(n))
      return -2;
    if (this.isColumnBeforeRenderedColumns(r))
      return -3;
    if (this.isColumnAfterRenderedColumns(r))
      return -4;
    const o = this.getRow(n);
    if (!o && n >= 0)
      throw new Error("TR was expected to be rendered but is not");
    const s = o.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(r)];
    if (!s && r >= 0)
      throw new Error("TD or TH was expected to be rendered but is not");
    return s;
  }
  /**
   * Get the DOM element of the row with the provided index.
   *
   * @param {number} rowIndex Row index.
   * @returns {HTMLTableRowElement|boolean} Return the row's DOM element or `false` if the row with the provided
   * index doesn't exist.
   */
  getRow(e) {
    let n = null, r = null;
    if (e < 0) {
      var i;
      n = (i = this.rowFilter) === null || i === void 0 ? void 0 : i.sourceRowToVisibleColHeadedRow(e), r = this.THEAD;
    } else {
      var o;
      n = (o = this.rowFilter) === null || o === void 0 ? void 0 : o.sourceToRendered(e), r = this.TBODY;
    }
    return n !== void 0 && r !== void 0 ? r.childNodes.length < n + 1 ? !1 : r.childNodes[n] : !1;
  }
  /**
   * GetColumnHeader.
   *
   * @param {number} col Column index.
   * @param {number} [level=0] Header level (0 = most distant to the table).
   * @returns {object} HTMLElement on success or undefined on error.
   */
  getColumnHeader(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    const r = this.THEAD.childNodes[n];
    return r == null ? void 0 : r.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(e)];
  }
  /**
   * Gets all columns headers (TH elements) from the table.
   *
   * @param {number} column A source column index.
   * @returns {HTMLTableCellElement[]}
   */
  getColumnHeaders(e) {
    const n = [], r = this.columnFilter.sourceColumnToVisibleRowHeadedColumn(e);
    return this.THEAD.childNodes.forEach((i) => {
      const o = i.childNodes[r];
      o && n.push(o);
    }), n;
  }
  /**
   * GetRowHeader.
   *
   * @param {number} row Row index.
   * @param {number} [level=0] Header level (0 = most distant to the table).
   * @returns {HTMLElement} HTMLElement on success or Number one of the exit codes on error: `null table doesn't have
   *   row headers`.
   */
  getRowHeader(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    const r = this.wtSettings.getSetting("rowHeaders").length;
    if (n >= r)
      return;
    const i = this.rowFilter.sourceToRendered(e), o = i < 0 ? this.rowFilter.sourceRowToVisibleColHeadedRow(e) : i, a = (i < 0 ? this.THEAD : this.TBODY).childNodes[o];
    return a == null ? void 0 : a.childNodes[n];
  }
  /**
   * Gets all rows headers (TH elements) from the table.
   *
   * @param {number} row A source row index.
   * @returns {HTMLTableCellElement[]}
   */
  getRowHeaders(e) {
    const n = [], r = this.wtSettings.getSetting("rowHeaders").length;
    for (let i = 0; i < r; i++) {
      const o = this.TBODY.childNodes[this.rowFilter.sourceToRendered(e)], s = o == null ? void 0 : o.childNodes[i];
      s && n.push(s);
    }
    return n;
  }
  /**
   * Returns cell coords object for a given TD (or a child element of a TD element).
   *
   * @param {HTMLTableCellElement} TD A cell DOM element (or a child of one).
   * @returns {CellCoords|null} The coordinates of the provided TD element (or the closest TD element) or null, if the
   *   provided element is not applicable.
   */
  getCoords(e) {
    let n = e;
    if (n.nodeName !== "TD" && n.nodeName !== "TH" && (n = Es(n, ["TD", "TH"])), n === null)
      return null;
    const r = n.parentNode, i = r.parentNode;
    let o = QI(r), s = n.cellIndex;
    return os(ba, n, this.wtRootElement) || os(Sa, n, this.wtRootElement) ? i.nodeName === "THEAD" && (o -= i.childNodes.length) : os(ys, n, this.wtRootElement) || os(Ui, n, this.wtRootElement) ? o = this.wtSettings.getSetting("totalRows") - i.childNodes.length + o : i === this.THEAD ? o = this.rowFilter.visibleColHeadedRowToSourceRow(o) : o = this.rowFilter.renderedToSource(o), os(ba, n, this.wtRootElement) || os(ya, n, this.wtRootElement) || os(ys, n, this.wtRootElement) ? s = this.columnFilter.offsettedTH(s) : s = this.columnFilter.visibleRowHeadedColumnToSourceColumn(s), this.wot.createCellCoords(o, s);
  }
  /**
   * Check if any of the rendered rows is higher than expected, and if so, cache them.
   */
  markOversizedRows() {
    if (this.wtSettings.getSetting("externalRowCalculator"))
      return;
    let e = this.TBODY.childNodes.length;
    const n = e * this.wtSettings.getSetting("defaultRowHeight"), r = _o(this.TBODY) - 1;
    let i, o, s, a, l;
    if (!(n === r && !this.wtSettings.getSetting("fixedRowsBottom")))
      for (; e; )
        e -= 1, s = this.rowFilter.renderedToSource(e), i = this.getRowHeight(s), a = this.getTrForRow(s), l = a.querySelector("th"), l ? o = _o(l) : o = _o(a) - 1, (!i && this.wtSettings.getSetting("defaultRowHeight") < o || i < o) && (o += 1, this.dataAccessObject.wtViewport.oversizedRows[s] = o);
  }
  /**
   * @param {number} row The visual row index.
   * @returns {HTMLTableElement}
   */
  getTrForRow(e) {
    return this.TBODY.childNodes[this.rowFilter.sourceToRendered(e)];
  }
  /**
   * Checks if the column index (negative value from -1 to N) is rendered.
   *
   * @param {number} column The column index (negative value from -1 to N).
   * @returns {boolean}
   */
  isColumnHeaderRendered(e) {
    if (e >= 0)
      return !1;
    const r = this.wtSettings.getSetting("rowHeaders").length;
    return Math.abs(e) <= r;
  }
  /**
   * Checks if the row index (negative value from -1 to N) is rendered.
   *
   * @param {number} row The row index (negative value from -1 to N).
   * @returns {boolean}
   */
  isRowHeaderRendered(e) {
    if (e >= 0)
      return !1;
    const r = this.wtSettings.getSetting("columnHeaders").length;
    return Math.abs(e) <= r;
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Check if the given row index is lower than the index of the first row that
   * is currently rendered and return TRUE in that case, or FALSE otherwise.
   *
   * Negative row index is used to check the columns' headers.
   *
   *  Headers
   *           +--------------+                                     │
   *       -3  │    │    │    │                                     │
   *           +--------------+                                     │
   *       -2  │    │    │    │                                     │ TRUE
   *           +--------------+                                     │
   *       -1  │    │    │    │                                     │
   *  Cells  +==================+                                   │
   *        0  ┇    ┇    ┇    ┇ <--- For fixedRowsTop: 1            │
   *           +--------------+      the master overlay do       ---+ first rendered row (index 1)
   *        1  │ A2 │ B2 │ C2 │      not render the first row.      │
   *           +--------------+                                     │ FALSE
   *        2  │ A3 │ B3 │ C3 │                                     │
   *           +--------------+                                  ---+ last rendered row
   *                                                                │
   *                                                                │ FALSE
   *
   * @param {number} row The visual row index.
   * @memberof Table#
   * @function isRowBeforeRenderedRows
   * @returns {boolean}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  isRowBeforeRenderedRows(e) {
    const n = this.getFirstRenderedRow();
    return e < 0 && n <= 0 ? !this.isRowHeaderRendered(e) : e < n;
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Check if the given column index is greater than the index of the last column that
   * is currently rendered and return TRUE in that case, or FALSE otherwise.
   *
   * The negative row index is used to check the columns' headers. However,
   * keep in mind that for negative indexes, the method always returns FALSE as
   * it is not possible to render headers partially. The "after" index can not be
   * lower than -1.
   *
   *  Headers
   *           +--------------+                                     │
   *       -3  │    │    │    │                                     │
   *           +--------------+                                     │
   *       -2  │    │    │    │                                     │ FALSE
   *           +--------------+                                     │
   *       -1  │    │    │    │                                     │
   *  Cells  +==================+                                   │
   *        0  ┇    ┇    ┇    ┇ <--- For fixedRowsTop: 1            │
   *           +--------------+      the master overlay do       ---+ first rendered row (index 1)
   *        1  │ A2 │ B2 │ C2 │      not render the first rows      │
   *           +--------------+                                     │ FALSE
   *        2  │ A3 │ B3 │ C3 │                                     │
   *           +--------------+                                  ---+ last rendered row
   *                                                                │
   *                                                                │ TRUE
   *
   * @param {number} row The visual row index.
   * @memberof Table#
   * @function isRowAfterRenderedRows
   * @returns {boolean}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  isRowAfterRenderedRows(e) {
    return e > this.getLastRenderedRow();
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Check if the given column index is lower than the index of the first column that
   * is currently rendered and return TRUE in that case, or FALSE otherwise.
   *
   * Negative column index is used to check the rows' headers.
   *
   *                            For fixedColumnsStart: 1 the master overlay
   *                            do not render this first columns.
   *  Headers    -3   -2   -1    |
   *           +----+----+----║┄ ┄ +------+------+
   *           │    │    │    ║    │  B1  │  C1  │
   *           +--------------║┄ ┄ --------------│
   *           │    │    │    ║    │  B2  │  C2  │
   *           +--------------║┄ ┄ --------------│
   *           │    │    │    ║    │  B3  │  C3  │
   *           +----+----+----║┄ ┄ +------+------+
   *                               ╷             ╷
   *      -------------------------+-------------+---------------->
   *          TRUE             first    FALSE   last         FALSE
   *                           rendered         rendered
   *                           column           column
   *
   * @param {number} column The visual column index.
   * @memberof Table#
   * @function isColumnBeforeRenderedColumns
   * @returns {boolean}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  isColumnBeforeRenderedColumns(e) {
    const n = this.getFirstRenderedColumn();
    return e < 0 && n <= 0 ? !this.isColumnHeaderRendered(e) : e < n;
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Check if the given column index is greater than the index of the last column that
   * is currently rendered and return TRUE in that case, or FALSE otherwise.
   *
   * The negative column index is used to check the rows' headers. However,
   * keep in mind that for negative indexes, the method always returns FALSE as
   * it is not possible to render headers partially. The "after" index can not be
   * lower than -1.
   *
   *                            For fixedColumnsStart: 1 the master overlay
   *                            do not render this first columns.
   *  Headers    -3   -2   -1    |
   *           +----+----+----║┄ ┄ +------+------+
   *           │    │    │    ║    │  B1  │  C1  │
   *           +--------------║┄ ┄ --------------│
   *           │    │    │    ║    │  B2  │  C2  │
   *           +--------------║┄ ┄ --------------│
   *           │    │    │    ║    │  B3  │  C3  │
   *           +----+----+----║┄ ┄ +------+------+
   *                               ╷             ╷
   *      -------------------------+-------------+---------------->
   *          FALSE             first    FALSE   last         TRUE
   *                           rendered         rendered
   *                           column           column
   *
   * @param {number} column The visual column index.
   * @memberof Table#
   * @function isColumnAfterRenderedColumns
   * @returns {boolean}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  isColumnAfterRenderedColumns(e) {
    return this.columnFilter && e > this.getLastRenderedColumn();
  }
  isColumnAfterViewport(e) {
    return this.columnFilter && e > this.getLastVisibleColumn();
  }
  isRowAfterViewport(e) {
    return this.rowFilter && e > this.getLastVisibleRow();
  }
  isColumnBeforeViewport(e) {
    return this.columnFilter && this.columnFilter.sourceToRendered(e) < 0 && e >= 0;
  }
  isLastRowFullyVisible() {
    return this.getLastVisibleRow() === this.getLastRenderedRow();
  }
  isLastColumnFullyVisible() {
    return this.getLastVisibleColumn() === this.getLastRenderedColumn();
  }
  allRowsInViewport() {
    return this.wtSettings.getSetting("totalRows") === this.getVisibleRowsCount();
  }
  allColumnsInViewport() {
    return this.wtSettings.getSetting("totalColumns") === this.getVisibleColumnsCount();
  }
  /**
   * Checks if any of the row's cells content exceeds its initial height, and if so, returns the oversized height.
   *
   * @param {number} sourceRow The physical row index.
   * @returns {number}
   */
  getRowHeight(e) {
    return this.rowUtils.getHeight(e);
  }
  /**
   * @param {number} level The column level.
   * @returns {number}
   */
  getColumnHeaderHeight(e) {
    return this.columnUtils.getHeaderHeight(e);
  }
  /**
   * @param {number} sourceColumn The physical column index.
   * @returns {number}
   */
  getColumnWidth(e) {
    return this.columnUtils.getWidth(e);
  }
  /**
   * @param {number} sourceColumn The physical column index.
   * @returns {number}
   */
  getStretchedColumnWidth(e) {
    return this.columnUtils.getStretchedColumnWidth(e);
  }
  /**
   * Checks if the table has defined size. It returns `true` when the table has width and height
   * set bigger than `0px`.
   *
   * @returns {boolean}
   */
  hasDefinedSize() {
    return this.hasTableHeight && this.hasTableWidth;
  }
  /**
   * Gets table's width. The returned width is the width of the rendered cells that fit in the
   * current viewport. The value may change depends on the viewport position (scroll position).
   *
   * @returns {number}
   */
  getWidth() {
    return yt(this.TABLE);
  }
  /**
   * Gets table's height. The returned height is the height of the rendered cells that fit in the
   * current viewport. The value may change depends on the viewport position (scroll position).
   *
   * @returns {number}
   */
  getHeight() {
    return Bt(this.TABLE);
  }
  /**
   * Gets table's total width. The returned width is the width of all rendered cells (including headers)
   * that can be displayed in the table.
   *
   * @returns {number}
   */
  getTotalWidth() {
    const e = yt(this.hider);
    return e !== 0 ? e : this.getWidth();
  }
  /**
   * Gets table's total height. The returned height is the height of all rendered cells (including headers)
   * that can be displayed in the table.
   *
   * @returns {number}
   */
  getTotalHeight() {
    const e = Bt(this.hider);
    return e !== 0 ? e : this.getHeight();
  }
  /**
   * Checks if the table is visible. It returns `true` when the holder element (or its parents)
   * has CSS 'display' property different than 'none'.
   *
   * @returns {boolean}
   */
  isVisible() {
    return _s(this.TABLE);
  }
  /**
   * Modify row header widths provided by user in class contructor.
   *
   * @private
   * @param {Function} rowHeaderWidthFactory The function which can provide default width values for rows..
   * @returns {number}
   */
  _modifyRowHeaderWidth(e) {
    let n = At(e) ? e() : null;
    return Array.isArray(n) ? (n = [...n], n[n.length - 1] = this._correctRowHeaderWidth(n[n.length - 1])) : n = this._correctRowHeaderWidth(n), n;
  }
  /**
   * Correct row header width if necessary.
   *
   * @private
   * @param {number} width The width to process.
   * @returns {number}
   */
  _correctRowHeaderWidth(e) {
    let n = e;
    return typeof e != "number" && (n = this.wtSettings.getSetting("defaultColumnWidth")), this.correctHeaderWidth && (n += 1), n;
  }
}
const Zl = AK, IK = "stickyRowsBottom", XP = {
  /**
   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedRow() {
    const t = this.wtSettings.getSetting("totalRows"), e = this.wtSettings.getSetting("fixedRowsBottom"), n = t - e;
    return t === 0 || e === 0 ? -1 : n < 0 ? 0 : n;
  },
  /**
   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleRow() {
    return this.getFirstRenderedRow();
  },
  /**
   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedRow() {
    return this.wtSettings.getSetting("totalRows") - 1;
  },
  /**
   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleRow() {
    return this.getLastRenderedRow();
  },
  /**
   * Get the number of rendered rows.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedRowsCount() {
    const t = this.wtSettings.getSetting("totalRows");
    return Math.min(this.wtSettings.getSetting("fixedRowsBottom"), t);
  },
  /**
   * Get the number of fully visible rows in the viewport.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleRowsCount() {
    return this.getRenderedRowsCount();
  },
  /**
   * Get the number of rendered column headers.
   *
   * @returns {number}
   * @this Table
   */
  getColumnHeadersCount() {
    return 0;
  }
};
Ji(XP, "MIXIN_NAME", IK, {
  writable: !1,
  enumerable: !1
});
const qP = XP, PK = "stickyColumnsStart", ZP = {
  /**
   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedColumn() {
    return this.wtSettings.getSetting("totalColumns") === 0 ? -1 : 0;
  },
  /**
   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
   * Assumes that all rendered columns are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleColumn() {
    return this.getFirstRenderedColumn();
  },
  /**
   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedColumn() {
    return this.getRenderedColumnsCount() - 1;
  },
  /**
   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
   * Assumes that all rendered columns are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleColumn() {
    return this.getLastRenderedColumn();
  },
  /**
   * Get the number of rendered columns.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedColumnsCount() {
    const t = this.wtSettings.getSetting("totalColumns");
    return Math.min(this.wtSettings.getSetting("fixedColumnsStart"), t);
  },
  /**
   * Get the number of fully visible columns in the viewport.
   * Assumes that all rendered columns are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleColumnsCount() {
    return this.getRenderedColumnsCount();
  },
  /**
   * Get the number of rendered row headers.
   *
   * @returns {number}
   * @this Table
   */
  getRowHeadersCount() {
    return this.dataAccessObject.rowHeaders.length;
  }
};
Ji(ZP, "MIXIN_NAME", PK, {
  writable: !1,
  enumerable: !1
});
const LS = ZP;
class $S extends Zl {
  /**
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   */
  constructor(e, n, r, i) {
    super(e, n, r, i, ys);
  }
}
_t($S, qP);
_t($S, LS);
const xK = $S, Sa = "top", Ui = "bottom", ya = "inline_start", ba = "top_inline_start_corner", ys = "bottom_inline_start_corner", HK = [Sa, Ui, ya, ba, ys], DK = /* @__PURE__ */ new Map([[Sa, `ht_clone_${Sa}`], [Ui, `ht_clone_${Ui}`], [ya, `ht_clone_${ya} ht_clone_left`], [ba, `ht_clone_${ba} ht_clone_top_left_corner`], [ys, `ht_clone_${ys} ht_clone_bottom_left_corner`]]);
function sp(t, e, n) {
  return e = NK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function NK(t) {
  var e = LK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function LK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class $K {
  /**
   * @param {ScrollDao} dataAccessObject Tha data access object.
   */
  constructor(e) {
    sp(this, "dataAccessObject", void 0), sp(this, "lastScrolledColumnPos", -1), sp(this, "lastScrolledRowPos", -1), this.dataAccessObject = e;
  }
  /**
   * Scrolls viewport to a cell.
   *
   * @param {CellCoords} coords The cell coordinates.
   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
   * @returns {boolean}
   */
  scrollViewport(e, n, r, i, o) {
    const s = this.scrollViewportHorizontally(e.col, r, o), a = this.scrollViewportVertically(e.row, n, i);
    return s || a;
  }
  /**
   * Scrolls viewport to a column.
   *
   * @param {number} column Visual column index.
   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
   * @returns {boolean}
   */
  scrollViewportHorizontally(e, n, r) {
    const {
      drawn: i,
      totalColumns: o
    } = this.dataAccessObject;
    if (!i || !Number.isInteger(e) || e < 0 || e > o)
      return !1;
    const s = this.getFirstVisibleColumn(), a = this.getLastVisibleColumn(), l = n === void 0 && r === void 0, {
      fixedColumnsStart: u,
      inlineStartOverlay: c
    } = this.dataAccessObject;
    if (l && e < u)
      return !1;
    let d = !1;
    return e = this.dataAccessObject.wtSettings.getSetting("onBeforeViewportScrollHorizontally", e), s === -1 ? d = c.scrollTo(e, l ? e > this.lastScrolledColumnPos : n) : (l && (e < s || e > a) || !l) && (d = c.scrollTo(e, l ? e > a : n)), d && (this.lastScrolledColumnPos = e), d;
  }
  /**
   * Scrolls viewport to a row.
   *
   * @param {number} row Visual row index.
   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
   * @returns {boolean}
   */
  scrollViewportVertically(e, n, r) {
    const {
      drawn: i,
      totalRows: o
    } = this.dataAccessObject;
    if (!i || !Number.isInteger(e) || e < 0 || e > o)
      return !1;
    const s = this.getFirstVisibleRow(), a = this.getLastVisibleRow(), l = n === void 0 && r === void 0, {
      fixedRowsBottom: u,
      fixedRowsTop: c,
      topOverlay: d
    } = this.dataAccessObject;
    if (l && (e < c || e > o - u - 1))
      return !1;
    let g = !1;
    return e = this.dataAccessObject.wtSettings.getSetting("onBeforeViewportScrollVertically", e), s === -1 ? g = d.scrollTo(e, l ? e > this.lastScrolledRowPos : r) : (l && (e < s || e > a) || !l) && (g = d.scrollTo(e, l ? e > a : r)), g && (this.lastScrolledRowPos = e), g;
  }
  /**
   * Get first visible row based on virtual dom and how table is visible in browser window viewport.
   *
   * @returns {number}
   */
  getFirstVisibleRow() {
    const {
      topOverlay: e,
      wtTable: n,
      wtViewport: r,
      totalRows: i,
      fixedRowsTop: o,
      rootWindow: s
    } = this.dataAccessObject;
    let a = n.getFirstVisibleRow();
    if (e.mainTableScrollableElement === s) {
      const l = an(n.wtRootElement), u = _o(n.hider), c = _o(s), d = Pc(s, s);
      if (l.top + u - c <= d) {
        let g = r.getColumnHeaderHeight();
        g += e.sumCellSizes(0, o);
        for (let p = i; p > 0; p--)
          if (g += e.sumCellSizes(p - 1, p), l.top + u - g <= d) {
            a = p;
            break;
          }
      }
    }
    return a;
  }
  /**
   * Get last visible row based on virtual dom and how table is visible in browser window viewport.
   *
   * @returns {number}
   */
  getLastVisibleRow() {
    const {
      topOverlay: e,
      wtTable: n,
      wtViewport: r,
      totalRows: i,
      rootWindow: o
    } = this.dataAccessObject;
    let s = n.getLastVisibleRow();
    if (e.mainTableScrollableElement === o) {
      const a = an(n.wtRootElement), l = Pc(o, o);
      if (a.top > l) {
        const u = _o(o);
        let c = r.getColumnHeaderHeight();
        for (let d = 1; d <= i; d++)
          if (c += e.sumCellSizes(d - 1, d), a.top + c - l >= u) {
            s = d - 2;
            break;
          }
      }
    }
    return s;
  }
  /**
   * Get first visible column based on virtual dom and how table is visible in browser window viewport.
   *
   * @returns {number}
   */
  getFirstVisibleColumn() {
    const {
      inlineStartOverlay: e,
      wtTable: n,
      wtViewport: r,
      totalColumns: i,
      rootWindow: o
    } = this.dataAccessObject;
    let s = n.getFirstVisibleColumn();
    if (e.mainTableScrollableElement === o) {
      const a = an(n.wtRootElement), l = uc(n.hider), u = uc(o), c = Math.abs(If(o, o));
      if (a.left + l - u <= c) {
        let d = r.getRowHeaderWidth();
        for (let g = i; g > 0; g--)
          if (d += e.sumCellSizes(g - 1, g), a.left + l - d <= c) {
            s = g;
            break;
          }
      }
    }
    return s;
  }
  /**
   * Get last visible column based on virtual dom and how table is visible in browser window viewport.
   *
   * @returns {number}
   */
  getLastVisibleColumn() {
    const {
      wtSettings: e,
      inlineStartOverlay: n,
      wtTable: r,
      wtViewport: i,
      totalColumns: o,
      rootWindow: s
    } = this.dataAccessObject;
    let a = r.getLastVisibleColumn();
    if (n.mainTableScrollableElement === s) {
      const l = e.getSetting("rtlMode");
      let u = null;
      if (l) {
        const d = r.TABLE.getBoundingClientRect(), p = this.dataAccessObject.rootWindow.document.documentElement.offsetWidth;
        u = Math.abs(d.right - p);
      } else
        u = an(r.wtRootElement).left;
      const c = Math.abs(If(s, s));
      if (u > c) {
        const d = uc(s);
        let g = i.getRowHeaderWidth();
        for (let p = 1; p <= o; p++)
          if (g += n.sumCellSizes(p - 1, p), u + g - c >= d) {
            a = p - 2;
            break;
          }
      }
    }
    return a;
  }
}
const kK = $K;
function Qr(t, e, n) {
  return e = FK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function FK(t) {
  var e = WK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function WK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class kS {
  get eventManager() {
    return new _r(this);
  }
  /**
   * @param {HTMLTableElement} table Main table.
   * @param {Settings} settings The Walkontable settings.
   */
  constructor(e, n) {
    Qr(this, "wtTable", void 0), Qr(this, "wtScroll", void 0), Qr(this, "wtViewport", void 0), Qr(this, "wtOverlays", void 0), Qr(this, "selectionManager", void 0), Qr(this, "wtEvent", void 0), Qr(this, "guid", `wt_${sS()}`), Qr(this, "drawInterrupted", !1), Qr(this, "drawn", !1), Qr(this, "domBindings", void 0), Qr(this, "wtSettings", void 0), this.domBindings = {
      rootTable: e,
      rootDocument: e.ownerDocument,
      rootWindow: e.ownerDocument.defaultView
    }, this.wtSettings = n, this.wtScroll = new kK(this.createScrollDao());
  }
  findOriginalHeaders() {
    const e = [];
    if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {
      for (let n = 0, r = this.wtTable.THEAD.childNodes[0].childNodes.length; n < r; n++)
        e.push(this.wtTable.THEAD.childNodes[0].childNodes[n].innerHTML);
      this.wtSettings.getSetting("columnHeaders").length || this.wtSettings.update("columnHeaders", [function(n, r) {
        Ts(r, e[n]);
      }]);
    }
  }
  /**
   * Creates and returns the CellCoords object.
   *
   * @param {*} row The row index.
   * @param {*} column The column index.
   * @returns {CellCoords}
   */
  createCellCoords(e, n) {
    return new kf(e, n, this.wtSettings.getSetting("rtlMode"));
  }
  /**
   * Creates and returns the CellRange object.
   *
   * @param {CellCoords} highlight The highlight coordinates.
   * @param {CellCoords} from The from coordinates.
   * @param {CellCoords} to The to coordinates.
   * @returns {CellRange}
   */
  createCellRange(e, n, r) {
    return new DS(e, n, r, this.wtSettings.getSetting("rtlMode"));
  }
  /**
   * Force rerender of Walkontable.
   *
   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
   *                                   the data. It will only work if Table.draw() does not force
   *                                   rendering anyway.
   * @returns {Walkontable}
   */
  draw() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    return this.drawInterrupted = !1, !e && !this.wtTable.isVisible() ? this.drawInterrupted = !0 : this.wtTable.draw(e), this;
  }
  /**
   * Returns the TD at coords. If topmost is set to true, returns TD from the topmost overlay layer,
   * if not set or set to false, returns TD from the master table.
   *
   * @param {CellCoords} coords The cell coordinates.
   * @param {boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,
   *                                  if the wanted cell is in the range of fixed rows, it will return a TD element
   *                                  from the top overlay.
   * @returns {HTMLElement}
   */
  getCell(e) {
    if (!(arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1))
      return this.wtTable.getCell(e);
    const r = this.wtSettings.getSetting("totalRows"), i = this.wtSettings.getSetting("fixedRowsTop"), o = this.wtSettings.getSetting("fixedRowsBottom"), s = this.wtSettings.getSetting("fixedColumnsStart");
    if (e.row < i && e.col < s)
      return this.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.getCell(e);
    if (e.row < i)
      return this.wtOverlays.topOverlay.clone.wtTable.getCell(e);
    if (e.col < s && e.row >= r - o) {
      if (this.wtOverlays.bottomInlineStartCornerOverlay && this.wtOverlays.bottomInlineStartCornerOverlay.clone)
        return this.wtOverlays.bottomInlineStartCornerOverlay.clone.wtTable.getCell(e);
    } else {
      if (e.col < s)
        return this.wtOverlays.inlineStartOverlay.clone.wtTable.getCell(e);
      if (e.row < r && e.row >= r - o && this.wtOverlays.bottomOverlay && this.wtOverlays.bottomOverlay.clone)
        return this.wtOverlays.bottomOverlay.clone.wtTable.getCell(e);
    }
    return this.wtTable.getCell(e);
  }
  /**
   * Scrolls the viewport to a cell (rerenders if needed).
   *
   * @param {CellCoords} coords The cell coordinates to scroll to.
   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
   * @returns {boolean}
   */
  scrollViewport(e, n, r, i, o) {
    return e.col < 0 || e.row < 0 ? !1 : this.wtScroll.scrollViewport(e, n, r, i, o);
  }
  /**
   * Scrolls the viewport to a column (rerenders if needed).
   *
   * @param {number} column Visual column index.
   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
   * @returns {boolean}
   */
  scrollViewportHorizontally(e, n, r) {
    return e < 0 ? !1 : this.wtScroll.scrollViewportHorizontally(e, n, r);
  }
  /**
   * Scrolls the viewport to a row (rerenders if needed).
   *
   * @param {number} row Visual row index.
   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
   * @returns {boolean}
   */
  scrollViewportVertically(e, n, r) {
    return e < 0 ? !1 : this.wtScroll.scrollViewportVertically(e, n, r);
  }
  /**
   * @returns {Array}
   */
  getViewport() {
    return [this.wtTable.getFirstVisibleRow(), this.wtTable.getFirstVisibleColumn(), this.wtTable.getLastVisibleRow(), this.wtTable.getLastVisibleColumn()];
  }
  /**
   * Destroy instance.
   */
  destroy() {
    this.wtOverlays.destroy(), this.wtEvent.destroy();
  }
  /**
   * Create data access object for scroll.
   *
   * @protected
   * @returns {ScrollDao}
   */
  createScrollDao() {
    const e = this;
    return {
      get drawn() {
        return e.drawn;
      },
      get topOverlay() {
        return e.wtOverlays.topOverlay;
      },
      get inlineStartOverlay() {
        return e.wtOverlays.inlineStartOverlay;
      },
      get wtTable() {
        return e.wtTable;
      },
      get wtViewport() {
        return e.wtViewport;
      },
      get wtSettings() {
        return e.wtSettings;
      },
      get rootWindow() {
        return e.domBindings.rootWindow;
      },
      // TODO refactoring, consider about using injecting wtSettings into scroll (it'll enables remove dao layer)
      get totalRows() {
        return e.wtSettings.getSetting("totalRows");
      },
      get totalColumns() {
        return e.wtSettings.getSetting("totalColumns");
      },
      get fixedRowsTop() {
        return e.wtSettings.getSetting("fixedRowsTop");
      },
      get fixedRowsBottom() {
        return e.wtSettings.getSetting("fixedRowsBottom");
      },
      get fixedColumnsStart() {
        return e.wtSettings.getSetting("fixedColumnsStart");
      }
    };
  }
  // TODO refactoring: it will be much better to not use DAO objects. They are needed for now to provide
  // dynamically access to related objects
  /**
   * Create data access object for wtTable.
   *
   * @protected
   * @returns {TableDao}
   */
  getTableDao() {
    const e = this;
    return {
      get wot() {
        return e;
      },
      get parentTableOffset() {
        return e.cloneSource.wtTable.tableOffset;
      },
      get cloneSource() {
        return e.cloneSource;
      },
      get workspaceWidth() {
        return e.wtViewport.getWorkspaceWidth();
      },
      get wtViewport() {
        return e.wtViewport;
      },
      get wtOverlays() {
        return e.wtOverlays;
      },
      get selectionManager() {
        return e.selectionManager;
      },
      get drawn() {
        return e.drawn;
      },
      set drawn(n) {
        e.drawn = n;
      },
      get wtTable() {
        return e.wtTable;
      },
      get startColumnRendered() {
        return e.wtViewport.columnsRenderCalculator.startColumn;
      },
      get startColumnVisible() {
        return e.wtViewport.columnsVisibleCalculator.startColumn;
      },
      get endColumnRendered() {
        return e.wtViewport.columnsRenderCalculator.endColumn;
      },
      get endColumnVisible() {
        return e.wtViewport.columnsVisibleCalculator.endColumn;
      },
      get countColumnsRendered() {
        return e.wtViewport.columnsRenderCalculator.count;
      },
      get countColumnsVisible() {
        return e.wtViewport.columnsVisibleCalculator.count;
      },
      get startRowRendered() {
        return e.wtViewport.rowsRenderCalculator.startRow;
      },
      get startRowVisible() {
        return e.wtViewport.rowsVisibleCalculator.startRow;
      },
      get endRowRendered() {
        return e.wtViewport.rowsRenderCalculator.endRow;
      },
      get endRowVisible() {
        return e.wtViewport.rowsVisibleCalculator.endRow;
      },
      get countRowsRendered() {
        return e.wtViewport.rowsRenderCalculator.count;
      },
      get countRowsVisible() {
        return e.wtViewport.rowsVisibleCalculator.count;
      },
      get columnHeaders() {
        return e.wtSettings.getSetting("columnHeaders");
      },
      get rowHeaders() {
        return e.wtSettings.getSetting("rowHeaders");
      }
    };
  }
}
function Z0(t, e, n) {
  return e = VK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function VK(t) {
  var e = BK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function BK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class UK extends kS {
  /**
   * @param {HTMLTableElement} table Main table.
   * @param {SettingsPure|Settings} settings The Walkontable settings.
   * @param {WalkontableCloneOptions} clone Clone data.
   */
  constructor(e, n, r) {
    super(e, n), Z0(this, "cloneSource", void 0), Z0(this, "cloneOverlay", void 0);
    const i = this.wtSettings.getSetting("facade", this);
    this.cloneSource = r.source, this.cloneOverlay = r.overlay, this.wtTable = this.cloneOverlay.createTable(this.getTableDao(), i, this.domBindings, this.wtSettings), this.wtViewport = r.viewport, this.selectionManager = r.selectionManager, this.wtEvent = new zP(i, this.domBindings, this.wtSettings, this.eventManager, this.wtTable, this.selectionManager, r.event), this.findOriginalHeaders();
  }
}
function YK(t, e, n) {
  return e = GK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function GK(t) {
  var e = zK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function zK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class ih {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {CLONE_TYPES_ENUM} type The overlay type name (clone name).
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {DomBindings} domBindings Dom elements bound to the current instance.
   */
  constructor(e, n, r, i, o) {
    YK(this, "wtSettings", null), Ji(this, "wot", e, {
      writable: !1
    }), this.domBindings = o, this.facadeGetter = n, this.wtSettings = i;
    const {
      TABLE: s,
      hider: a,
      spreader: l,
      holder: u,
      wtRootElement: c
    } = this.wot.wtTable;
    this.instance = this.wot, this.type = r, this.mainTableScrollableElement = null, this.TABLE = s, this.hider = a, this.spreader = l, this.holder = u, this.wtRootElement = c, this.trimmingContainer = va(this.hider.parentNode.parentNode), this.updateStateOfRendering(), this.clone = this.makeClone();
  }
  /**
   * Update internal state of object with an information about the need of full rendering of the overlay.
   *
   * @returns {boolean} Returns `true` if the state has changed since the last check.
   */
  updateStateOfRendering() {
    const e = this.needFullRender;
    this.needFullRender = this.shouldBeRendered();
    const n = e !== this.needFullRender;
    return n && !this.needFullRender && this.reset(), n;
  }
  /**
   * Checks if overlay should be fully rendered.
   *
   * @returns {boolean}
   */
  shouldBeRendered() {
    return !0;
  }
  /**
   * Update the trimming container.
   */
  updateTrimmingContainer() {
    this.trimmingContainer = va(this.hider.parentNode.parentNode);
  }
  /**
   * Update the main scrollable element.
   */
  updateMainScrollableElement() {
    const {
      wtTable: e
    } = this.wot, {
      rootWindow: n
    } = this.domBindings;
    n.getComputedStyle(e.wtRootElement.parentNode).getPropertyValue("overflow") === "hidden" ? this.mainTableScrollableElement = this.wot.wtTable.holder : this.mainTableScrollableElement = xc(e.TABLE);
  }
  /**
   * Calculates coordinates of the provided element, relative to the root Handsontable element.
   * NOTE: The element needs to be a child of the overlay in order for the method to work correctly.
   *
   * @param {HTMLElement} element The cell element to calculate the position for.
   * @param {number} rowIndex Visual row index.
   * @param {number} columnIndex Visual column index.
   * @returns {{top: number, start: number}|undefined}
   */
  getRelativeCellPosition(e, n, r) {
    if (this.clone.wtTable.holder.contains(e) === !1) {
      Pt(`The provided element is not a child of the ${this.type} overlay`);
      return;
    }
    const i = this.mainTableScrollableElement === this.domBindings.rootWindow, o = r < this.wtSettings.getSetting("fixedColumnsStart"), s = n < this.wtSettings.getSetting("fixedRowsTop"), a = n >= this.wtSettings.getSetting("totalRows") - this.wtSettings.getSetting("fixedRowsBottom"), l = this.clone.wtTable.spreader, u = {
      start: this.getRelativeStartPosition(l),
      top: l.offsetTop
    }, c = {
      start: this.getRelativeStartPosition(e),
      top: e.offsetTop
    };
    let d = null;
    return i ? d = this.getRelativeCellPositionWithinWindow(s, o, c, u) : d = this.getRelativeCellPositionWithinHolder(s, a, o, c, u), d;
  }
  /**
   * Get inline start value depending of direction.
   *
   * @param {HTMLElement} el Element.
   * @returns {number}
   */
  getRelativeStartPosition(e) {
    return this.isRtl() ? e.offsetParent.offsetWidth - e.offsetLeft - e.offsetWidth : e.offsetLeft;
  }
  /**
   * Calculates coordinates of the provided element, relative to the root Handsontable element within a table with window
   * as a scrollable element.
   *
   * @private
   * @param {boolean} onFixedRowTop `true` if the coordinates point to a place within the top fixed rows.
   * @param {boolean} onFixedColumn `true` if the coordinates point to a place within the fixed columns.
   * @param {number} elementOffset Offset position of the cell element.
   * @param {number} spreaderOffset Offset position of the spreader element.
   * @returns {{top: number, left: number}}
   */
  getRelativeCellPositionWithinWindow(e, n, r, i) {
    const o = this.wot.wtTable.wtRootElement.getBoundingClientRect();
    let s = 0, a = 0;
    if (!n)
      s = i.start;
    else {
      let l = o.left;
      this.isRtl() && (l = this.domBindings.rootWindow.innerWidth - (o.left + o.width + wn())), s = l <= 0 ? -1 * l : 0;
    }
    return e ? a = this.clone.wtTable.TABLE.getBoundingClientRect().top - o.top : a = i.top, {
      start: r.start + s,
      top: r.top + a
    };
  }
  /**
   * Calculates coordinates of the provided element, relative to the root Handsontable element within a table with window
   * as a scrollable element.
   *
   * @private
   * @param {boolean} onFixedRowTop `true` if the coordinates point to a place within the top fixed rows.
   * @param {boolean} onFixedRowBottom `true` if the coordinates point to a place within the bottom fixed rows.
   * @param {boolean} onFixedColumn `true` if the coordinates point to a place within the fixed columns.
   * @param {number} elementOffset Offset position of the cell element.
   * @param {number} spreaderOffset Offset position of the spreader element.
   * @returns {{top: number, left: number}}
   */
  getRelativeCellPositionWithinHolder(e, n, r, i, o) {
    const s = {
      horizontal: this.wot.wtOverlays.inlineStartOverlay.getScrollPosition(),
      vertical: this.wot.wtOverlays.topOverlay.getScrollPosition()
    };
    let a = 0, l = 0;
    if (r || (a = s.horizontal - o.start), n) {
      const u = this.wot.wtTable.wtRootElement.getBoundingClientRect();
      l = this.clone.wtTable.TABLE.getBoundingClientRect().top * -1 + u.top;
    } else
      e || (l = s.vertical - o.top);
    return {
      start: i.start - a,
      top: i.top - l
    };
  }
  /**
   * Make a clone of table for overlay.
   *
   * @returns {Clone}
   */
  makeClone() {
    if (HK.indexOf(this.type) === -1)
      throw new Error(`Clone type "${this.type}" is not supported.`);
    const {
      wtTable: e,
      wtSettings: n
    } = this.wot, {
      rootDocument: r,
      rootWindow: i
    } = this.domBindings, o = r.createElement("div"), s = r.createElement("table"), a = e.wtRootElement.parentNode;
    o.className = `${DK.get(this.type)} handsontable`, o.setAttribute("dir", this.isRtl() ? "rtl" : "ltr"), o.style.position = "absolute", o.style.top = 0, o.style.overflow = "visible", this.isRtl() ? o.style.right = 0 : o.style.left = 0, n.getSetting("ariaTags") && Ne(o, [Gi()]), s.className = e.TABLE.className, e.TABLE.getAttribute("role") && s.setAttribute("role", e.TABLE.getAttribute("role")), o.appendChild(s), a.appendChild(o);
    const u = this.wtSettings.getSetting("preventOverflow");
    return u === !0 || u === "horizontal" && this.type === Sa || u === "vertical" && this.type === ya ? this.mainTableScrollableElement = i : i.getComputedStyle(a).getPropertyValue("overflow") === "hidden" ? this.mainTableScrollableElement = e.holder : this.mainTableScrollableElement = xc(e.TABLE), new UK(s, this.wtSettings, {
      // todo ioc factory
      source: this.wot,
      overlay: this,
      viewport: this.wot.wtViewport,
      // todo ioc , or factor func if used only here
      event: this.wot.wtEvent,
      // todo ioc , or factory func if used only here
      selectionManager: this.wot.selectionManager
      // todo ioc , or factory func if used only here
    });
  }
  /**
   * Refresh/Redraw overlay.
   *
   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
   *                                   the data. It will only work if Table.draw() does not force
   *                                   rendering anyway.
   */
  refresh() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const n = this.shouldBeRendered();
    this.clone && (this.needFullRender || n) && this.clone.draw(e), this.needFullRender = n;
  }
  /**
   * Reset overlay styles to initial values.
   */
  reset() {
    if (!this.clone)
      return;
    const e = this.clone.wtTable.holder, n = this.clone.wtTable.hider, r = e.style, i = n.style, o = e.parentNode.style;
    H([r, i, o], (s) => {
      s.width = "", s.height = "";
    });
  }
  /**
   * Determine if Walkontable is running in RTL mode.
   *
   * @returns {boolean}
   */
  isRtl() {
    return this.wtSettings.getSetting("rtlMode");
  }
  /**
   * Destroy overlay instance.
   */
  destroy() {
    this.clone.eventManager.destroy();
  }
}
class jK extends ih {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {DomBindings} domBindings Dom elements bound to the current instance.
   * @param {BottomOverlay} bottomOverlay The instance of the Top overlay.
   * @param {InlineStartOverlay} inlineStartOverlay The instance of the InlineStart overlay.
   */
  constructor(e, n, r, i, o, s) {
    super(e, n, ys, r, i), this.bottomOverlay = o, this.inlineStartOverlay = s;
  }
  /**
   * Factory method to create a subclass of `Table` that is relevant to this overlay.
   *
   * @see Table#constructor
   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
   * @returns {BottomInlineStartCornerOverlayTable}
   */
  createTable() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return new xK(...n);
  }
  /**
   * Checks if overlay should be fully rendered.
   *
   * @returns {boolean}
   */
  shouldBeRendered() {
    return this.wtSettings.getSetting("shouldRenderBottomOverlay") && this.wtSettings.getSetting("shouldRenderInlineStartOverlay");
  }
  /**
   * Updates the corner overlay position.
   *
   * @returns {boolean}
   */
  resetFixedPosition() {
    const {
      wot: e
    } = this;
    if (this.updateTrimmingContainer(), !e.wtTable.holder.parentNode)
      return !1;
    const n = this.clone.wtTable.holder.parentNode;
    if (n.style.top = "", this.trimmingContainer === this.domBindings.rootWindow) {
      const o = this.inlineStartOverlay.getOverlayOffset(), s = this.bottomOverlay.getOverlayOffset();
      n.style[this.isRtl() ? "right" : "left"] = `${o}px`, n.style.bottom = `${s}px`;
    } else
      Jc(n), this.repositionOverlay();
    let r = Bt(this.clone.wtTable.TABLE);
    const i = yt(this.clone.wtTable.TABLE);
    return this.wot.wtTable.hasDefinedSize() || (r = 0), n.style.height = `${r}px`, n.style.width = `${i}px`, !1;
  }
  /**
   * Reposition the overlay.
   */
  repositionOverlay() {
    const {
      wtTable: e,
      wtViewport: n
    } = this.wot, {
      rootDocument: r
    } = this.domBindings, i = this.clone.wtTable.holder.parentNode;
    let o = 0;
    n.hasVerticalScroll() || (o += n.getWorkspaceHeight() - e.getTotalHeight()), n.hasVerticalScroll() && n.hasHorizontalScroll() && (o += wn(r)), i.style.bottom = `${o}px`;
  }
}
const KK = "calculatedColumns", QP = {
  /**
   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedColumn() {
    const t = this.dataAccessObject.startColumnRendered;
    return t === null ? -1 : t;
  },
  /**
   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleColumn() {
    const t = this.dataAccessObject.startColumnVisible;
    return t === null ? -1 : t;
  },
  /**
   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedColumn() {
    const t = this.dataAccessObject.endColumnRendered;
    return t === null ? -1 : t;
  },
  /**
   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleColumn() {
    const t = this.dataAccessObject.endColumnVisible;
    return t === null ? -1 : t;
  },
  /**
   * Get the number of rendered columns.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedColumnsCount() {
    return this.dataAccessObject.countColumnsRendered;
  },
  /**
   * Get the number of fully visible columns in the viewport.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleColumnsCount() {
    return this.dataAccessObject.countColumnsVisible;
  },
  /**
   * Get the number of rendered row headers.
   *
   * @returns {number}
   * @this Table
   */
  getRowHeadersCount() {
    return this.dataAccessObject.rowHeaders.length;
  }
};
Ji(QP, "MIXIN_NAME", KK, {
  writable: !1,
  enumerable: !1
});
const FS = QP;
class WS extends Zl {
  /**
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   */
  constructor(e, n, r, i) {
    super(e, n, r, i, Ui);
  }
}
_t(WS, qP);
_t(WS, FS);
const XK = WS;
function qK(t, e, n) {
  return e = ZK(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function ZK(t) {
  var e = QK(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function QK(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class JK extends ih {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {DomBindings} domBindings Dom elements bound to the current instance.
   */
  constructor(e, n, r, i) {
    super(e, n, Ui, r, i), qK(this, "cachedFixedRowsBottom", -1), this.cachedFixedRowsBottom = this.wtSettings.getSetting("fixedRowsBottom");
  }
  /**
   * Factory method to create a subclass of `Table` that is relevant to this overlay.
   *
   * @see Table#constructor
   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
   * @returns {BottomOverlayTable}
   */
  createTable() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return new XK(...n);
  }
  /**
   * Checks if overlay should be fully rendered.
   *
   * @returns {boolean}
   */
  shouldBeRendered() {
    return this.wtSettings.getSetting("shouldRenderBottomOverlay");
  }
  /**
   * Updates the top overlay position.
   *
   * @returns {boolean}
   */
  resetFixedPosition() {
    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode)
      return !1;
    const {
      rootWindow: e
    } = this.domBindings, n = this.clone.wtTable.holder.parentNode;
    n.style.top = "";
    let r = 0;
    const i = this.wtSettings.getSetting("preventOverflow");
    this.trimmingContainer === e && (!i || i !== "vertical") ? (r = this.getOverlayOffset(), n.style.bottom = `${r}px`) : (r = this.getScrollPosition(), this.repositionOverlay());
    const o = this.adjustHeaderBordersPosition(r);
    return this.adjustElementsSize(), o;
  }
  /**
   * Updates the bottom overlay position.
   */
  repositionOverlay() {
    const {
      wtTable: e,
      wtViewport: n
    } = this.wot, {
      rootDocument: r
    } = this.domBindings, i = this.clone.wtTable.holder.parentNode;
    let o = 0;
    n.hasVerticalScroll() || (o += n.getWorkspaceHeight() - e.getTotalHeight()), n.hasVerticalScroll() && n.hasHorizontalScroll() && (o += wn(r)), i.style.bottom = `${o}px`;
  }
  /**
   * Sets the main overlay's vertical scroll position.
   *
   * @param {number} pos The scroll position.
   * @returns {boolean}
   */
  setScrollPosition(e) {
    const {
      rootWindow: n
    } = this.domBindings;
    let r = !1;
    return this.mainTableScrollableElement === n ? (n.scrollTo(Ng(n), e), r = !0) : this.mainTableScrollableElement.scrollTop !== e && (this.mainTableScrollableElement.scrollTop = e, r = !0), r;
  }
  /**
   * Triggers onScroll hook callback.
   */
  onScroll() {
    this.wtSettings.getSetting("onScrollHorizontally");
  }
  /**
   * Calculates total sum cells height.
   *
   * @param {number} from Row index which calculates started from.
   * @param {number} to Row index where calculation is finished.
   * @returns {number} Height sum.
   */
  sumCellSizes(e, n) {
    const {
      wtTable: r,
      wtSettings: i
    } = this.wot, o = i.getSetting("defaultRowHeight");
    let s = e, a = 0;
    for (; s < n; ) {
      const l = r.getRowHeight(s);
      a += l === void 0 ? o : l, s += 1;
    }
    return a;
  }
  /**
   * Adjust overlay root element, childs and master table element sizes (width, height).
   *
   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.
   */
  adjustElementsSize() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    this.updateTrimmingContainer(), (this.needFullRender || e) && (this.adjustRootElementSize(), this.adjustRootChildrenSize());
  }
  /**
   * Adjust overlay root element size (width and height).
   */
  adjustRootElementSize() {
    const {
      wtTable: e,
      wtViewport: n
    } = this.wot, {
      rootDocument: r,
      rootWindow: i
    } = this.domBindings, o = wn(r), a = this.clone.wtTable.holder.parentNode.style, l = this.wtSettings.getSetting("preventOverflow");
    if (this.trimmingContainer !== i || l === "horizontal") {
      let c = n.getWorkspaceWidth();
      this.wot.wtOverlays.hasScrollbarRight && (c -= o), c = Math.min(c, e.wtRootElement.scrollWidth), a.width = `${c}px`;
    } else
      a.width = "";
    this.clone.wtTable.holder.style.width = a.width;
    let u = Bt(this.clone.wtTable.TABLE);
    this.wot.wtTable.hasDefinedSize() || (u = 0), a.height = `${u}px`;
  }
  /**
   * Adjust overlay root childs size.
   */
  adjustRootChildrenSize() {
    const {
      holder: e
    } = this.clone.wtTable;
    this.clone.wtTable.hider.style.width = this.hider.style.width, e.style.width = e.parentNode.style.width, e.style.height = e.parentNode.style.height;
  }
  /**
   * Adjust the overlay dimensions and position.
   */
  applyToDOM() {
    const e = this.wtSettings.getSetting("totalRows");
    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition == "number")
      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;
    else if (e === 0)
      this.spreader.style.top = "0";
    else
      throw new Error("Incorrect value of the rowsRenderCalculator");
    this.spreader.style.bottom = "", this.needFullRender && this.syncOverlayOffset();
  }
  /**
   * Synchronize calculated left position to an element.
   */
  syncOverlayOffset() {
    const e = this.isRtl() ? "right" : "left", {
      spreader: n
    } = this.clone.wtTable;
    typeof this.wot.wtViewport.columnsRenderCalculator.startPosition == "number" ? n.style[e] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px` : n.style[e] = "";
  }
  /**
   * Scrolls vertically to a row.
   *
   * @param {number} sourceRow Row index which you want to scroll to.
   * @param {boolean} [bottomEdge=false] If `true`, scrolls according to the bottom edge (top edge is by default).
   */
  scrollTo(e, n) {
    let r = this.getTableParentOffset();
    const o = (this.wot.cloneSource ? this.wot.cloneSource : this.wot).wtTable.holder;
    let s = 0;
    n && o.offsetHeight !== o.clientHeight && (s = wn(this.domBindings.rootDocument)), n ? (r += this.sumCellSizes(0, e + 1), r -= this.wot.wtViewport.getViewportHeight(), r += 1) : r += this.sumCellSizes(this.wtSettings.getSetting("fixedRowsBottom"), e), r += s, this.setScrollPosition(r);
  }
  /**
   * Gets table parent top position.
   *
   * @returns {number}
   */
  getTableParentOffset() {
    return this.mainTableScrollableElement === this.domBindings.rootWindow ? this.wot.wtTable.holderOffset.top : 0;
  }
  /**
   * Gets the main overlay's vertical scroll position.
   *
   * @returns {number} Main table's vertical scroll position.
   */
  getScrollPosition() {
    return Pc(this.mainTableScrollableElement, this.domBindings.rootWindow);
  }
  /**
   * Gets the main overlay's vertical overlay offset.
   *
   * @returns {number} Main table's vertical overlay offset.
   */
  getOverlayOffset() {
    const {
      rootWindow: e
    } = this.domBindings, n = this.wtSettings.getSetting("preventOverflow");
    let r = 0;
    if (this.trimmingContainer === e && (!n || n !== "vertical")) {
      const i = this.wot.wtTable.getTotalHeight(), o = this.clone.wtTable.getTotalHeight(), s = i - o, a = this.domBindings.rootDocument.documentElement.clientHeight;
      r = Math.max(this.getTableParentOffset() - this.getScrollPosition() - a + i, 0), r > s && (r = 0);
    }
    return r;
  }
  /**
   * Adds css classes to hide the header border's header (cell-selection border hiding issue).
   *
   * @param {number} position Header Y position if trimming container is window or scroll top if not.
   * @returns {boolean}
   */
  adjustHeaderBordersPosition(e) {
    const n = this.wtSettings.getSetting("fixedRowsBottom"), r = this.cachedFixedRowsBottom !== n, i = this.wtSettings.getSetting("columnHeaders");
    let o = !1;
    if ((r || n === 0) && i.length > 0) {
      const s = this.wot.wtTable.holder.parentNode, a = Ve(s, "innerBorderBottom");
      this.cachedFixedRowsBottom = this.wtSettings.getSetting("fixedRowsBottom"), e || this.wtSettings.getSetting("totalRows") === 0 ? (ce(s, "innerBorderBottom"), o = !a) : (Ye(s, "innerBorderBottom"), o = a);
    }
    return o;
  }
}
const e3 = "calculatedRows", JP = {
  /**
   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedRow() {
    const t = this.dataAccessObject.startRowRendered;
    return t === null ? -1 : t;
  },
  /**
   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleRow() {
    const t = this.dataAccessObject.startRowVisible;
    return t === null ? -1 : t;
  },
  /**
   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedRow() {
    const t = this.dataAccessObject.endRowRendered;
    return t === null ? -1 : t;
  },
  /**
   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleRow() {
    const t = this.dataAccessObject.endRowVisible;
    return t === null ? -1 : t;
  },
  /**
   * Get the number of rendered rows.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedRowsCount() {
    return this.dataAccessObject.countRowsRendered;
  },
  /**
   * Get the number of fully visible rows in the viewport.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleRowsCount() {
    return this.dataAccessObject.countRowsVisible;
  },
  /**
   * Get the number of rendered column headers.
   *
   * @returns {number}
   * @this Table
   */
  getColumnHeadersCount() {
    return this.dataAccessObject.columnHeaders.length;
  }
};
Ji(JP, "MIXIN_NAME", e3, {
  writable: !1,
  enumerable: !1
});
const ex = JP;
class VS extends Zl {
  /**
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   */
  constructor(e, n, r, i) {
    super(e, n, r, i, ya);
  }
}
_t(VS, ex);
_t(VS, LS);
const t3 = VS, n3 = "localHooks", tx = {
  /**
   * Internal hooks storage.
   */
  _localHooks: /* @__PURE__ */ Object.create(null),
  /**
   * Add hook to the collection.
   *
   * @param {string} key The hook name.
   * @param {Function} callback The hook callback.
   * @returns {object}
   */
  addLocalHook(t, e) {
    return this._localHooks[t] || (this._localHooks[t] = []), this._localHooks[t].push(e), this;
  },
  /**
   * Run hooks.
   *
   * @param {string} key The name of the hook to run.
   * @param {*} [arg1] An additional parameter passed to the callback function.
   * @param {*} [arg2] An additional parameter passed to the callback function.
   * @param {*} [arg3] An additional parameter passed to the callback function.
   * @param {*} [arg4] An additional parameter passed to the callback function.
   * @param {*} [arg5] An additional parameter passed to the callback function.
   * @param {*} [arg6] An additional parameter passed to the callback function.
   */
  runLocalHooks(t, e, n, r, i, o, s) {
    if (this._localHooks[t]) {
      const a = this._localHooks[t].length;
      for (let l = 0; l < a; l++)
        xf(this._localHooks[t][l], this, e, n, r, i, o, s);
    }
  },
  /**
   * Clear all added hooks.
   *
   * @returns {object}
   */
  clearLocalHooks() {
    return this._localHooks = {}, this;
  }
};
Ji(tx, "MIXIN_NAME", n3, {
  writable: !1,
  enumerable: !1
});
const pr = tx;
let nx = class {
  /**
   * @param {object} settings The selection settings object. @todo type.
   * @param {CellRange} cellRange The cell range instance.
   */
  constructor(e, n) {
    this.settings = e, this.cellRange = n || null;
  }
  /**
   * Checks if selection is empty.
   *
   * @returns {boolean}
   */
  isEmpty() {
    return this.cellRange === null;
  }
  /**
   * Adds a cell coords to the selection.
   *
   * @param {CellCoords} coords The cell coordinates to add.
   * @returns {Selection}
   */
  add(e) {
    return this.isEmpty() ? this.cellRange = this.settings.createCellRange(e) : this.cellRange.expand(e), this;
  }
  /**
   * If selection range from or to property equals oldCoords, replace it with newCoords. Return boolean
   * information about success.
   *
   * @param {CellCoords} oldCoords An old cell coordinates to replace.
   * @param {CellCoords} newCoords The new cell coordinates.
   * @returns {boolean}
   */
  replace(e, n) {
    if (!this.isEmpty()) {
      if (this.cellRange.from.isEqual(e))
        return this.cellRange.from = n, !0;
      if (this.cellRange.to.isEqual(e))
        return this.cellRange.to = n, !0;
    }
    return !1;
  }
  /**
   * Clears selection.
   *
   * @returns {Selection}
   */
  clear() {
    return this.cellRange = null, this;
  }
  /**
   * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection coordinates.
   *
   * @returns {number[]} Returns array of coordinates for example `[1, 1, 5, 5]`.
   */
  getCorners() {
    const e = this.cellRange.getOuterTopStartCorner(), n = this.cellRange.getOuterBottomEndCorner();
    return [e.row, e.col, n.row, n.col];
  }
  /**
   * Destroys the instance.
   */
  destroy() {
    this.runLocalHooks("destroy");
  }
};
_t(nx, pr);
const r3 = nx, rx = "active-header", BS = "header", US = "area", YS = "focus", i3 = "fill", o3 = "row", s3 = "column", a3 = "custom-selection", GS = Object.freeze({
  width: "6px",
  height: "6px",
  borderWidth: "1px",
  borderStyle: "solid",
  borderColor: "#FFF"
});
var l3 = kP;
l3("flat");
function u3(t, e) {
  ix(t, e), e.add(t);
}
function Q0(t, e, n) {
  ix(t, e), e.set(t, n);
}
function ix(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ap(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function on(t, e) {
  var n = ox(t, e, "get");
  return c3(t, n);
}
function c3(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function J0(t, e, n) {
  var r = ox(t, e, "set");
  return h3(t, r, n), n;
}
function ox(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function h3(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var Jr = /* @__PURE__ */ new WeakMap(), sr = /* @__PURE__ */ new WeakMap(), $h = /* @__PURE__ */ new WeakSet();
class d3 {
  constructor() {
    u3(this, $h), Q0(this, Jr, {
      writable: !0,
      value: void 0
    }), Q0(this, sr, {
      writable: !0,
      value: void 0
    });
  }
  /**
   * Sets the Walkontable instance that will be taking into account while scanning the table.
   *
   * @param {Walkontable} activeOverlaysWot The Walkontable instance.
   * @returns {SelectionScanner}
   */
  setActiveOverlay(e) {
    return J0(this, sr, e), this;
  }
  /**
   * Sets the Selection instance to process.
   *
   * @param {Selection} selection The Selection instance.
   * @returns {SelectionScanner}
   */
  setActiveSelection(e) {
    return J0(this, Jr, e), this;
  }
  /**
   * Scans the rendered table with selection and returns elements that intersects
   * with selection coordinates.
   *
   * @returns {HTMLTableElement[]}
   */
  scan() {
    const e = on(this, Jr).settings.selectionType, n = /* @__PURE__ */ new Set();
    return e === "active-header" ? (this.scanColumnsInHeadersRange((r) => n.add(r)), this.scanRowsInHeadersRange((r) => n.add(r))) : e === "area" ? this.scanCellsRange((r) => n.add(r)) : e === "focus" ? (this.scanColumnsInHeadersRange((r) => n.add(r)), this.scanRowsInHeadersRange((r) => n.add(r)), this.scanCellsRange((r) => n.add(r))) : e === "fill" ? this.scanCellsRange((r) => n.add(r)) : e === "header" ? (this.scanColumnsInHeadersRange((r) => n.add(r)), this.scanRowsInHeadersRange((r) => n.add(r))) : e === "row" ? (this.scanRowsInHeadersRange((r) => n.add(r)), this.scanRowsInCellsRange((r) => n.add(r))) : e === "column" && (this.scanColumnsInHeadersRange((r) => n.add(r)), this.scanColumnsInCellsRange((r) => n.add(r))), n;
  }
  /**
   * Scans the table (only rendered headers) and collect all column headers (TH) that match
   * the coordinates passed in the Selection instance.
   *
   * @param {function(HTMLTableElement): void} callback The callback function to trigger.
   */
  scanColumnsInHeadersRange(e) {
    const [n, r, i, o] = on(this, Jr).getCorners(), {
      wtTable: s
    } = on(this, sr), a = s.getRenderedColumnsCount(), l = s.getColumnHeadersCount();
    let u = 0;
    for (let c = -s.getRowHeadersCount(); c < a; c++) {
      const d = s.columnFilter.renderedToSource(c);
      if (!(d < r || d > o)) {
        for (let g = -l; g < 0; g++) {
          if (g < n || g > i)
            continue;
          const p = g + l;
          let C = s.getColumnHeader(d, p);
          const E = on(this, sr).getSetting("onBeforeHighlightingColumnHeader", d, p, {
            selectionType: on(this, Jr).settings.selectionType,
            columnCursor: u,
            selectionWidth: o - r + 1
          });
          E !== null && (E !== d && (C = s.getColumnHeader(E, p)), e(C));
        }
        u += 1;
      }
    }
  }
  /**
   * Scans the table (only rendered headers) and collect all row headers (TH) that match
   * the coordinates passed in the Selection instance.
   *
   * @param {function(HTMLTableElement): void} callback The callback function to trigger.
   */
  scanRowsInHeadersRange(e) {
    const [n, r, i, o] = on(this, Jr).getCorners(), {
      wtTable: s
    } = on(this, sr), a = s.getRenderedRowsCount(), l = s.getRowHeadersCount();
    let u = 0;
    for (let c = -s.getColumnHeadersCount(); c < a; c++) {
      const d = s.rowFilter.renderedToSource(c);
      if (!(d < n || d > i)) {
        for (let g = -l; g < 0; g++) {
          if (g < r || g > o)
            continue;
          const p = g + l;
          let C = s.getRowHeader(d, p);
          const E = on(this, sr).getSetting("onBeforeHighlightingRowHeader", d, p, {
            selectionType: on(this, Jr).settings.selectionType,
            rowCursor: u,
            selectionHeight: i - n + 1
          });
          E !== null && (E !== d && (C = s.getRowHeader(E, p)), e(C));
        }
        u += 1;
      }
    }
  }
  /**
   * Scans the table (only rendered cells) and collect all cells (TR) that match
   * the coordinates passed in the Selection instance.
   *
   * @param {function(HTMLTableElement): void} callback The callback function to trigger.
   */
  scanCellsRange(e) {
    const [n, r, i, o] = on(this, Jr).getCorners(), {
      wtTable: s
    } = on(this, sr);
    ap(this, $h, lp).call(this, (a, l) => {
      if (a >= n && a <= i && l >= r && l <= o) {
        const u = s.getCell(on(this, sr).createCellCoords(a, l)), c = on(this, sr).getSetting("onAfterDrawSelection", a, l, on(this, Jr).settings.layerLevel);
        typeof c == "string" && ce(u, c), e(u);
      }
    });
  }
  /**
   * Scans the table (only rendered cells) and collects all cells (TR) that match the coordinates
   * passed in the Selection instance but only for the X axis (rows).
   *
   * @param {function(HTMLTableElement): void} callback The callback function to trigger.
   */
  scanRowsInCellsRange(e) {
    const [n, , r] = on(this, Jr).getCorners(), {
      wtTable: i
    } = on(this, sr);
    ap(this, $h, lp).call(this, (o, s) => {
      if (o >= n && o <= r) {
        const a = i.getCell(on(this, sr).createCellCoords(o, s));
        e(a);
      }
    });
  }
  /**
   * Scans the table (only rendered cells) and collects all cells (TR) that match the coordinates
   * passed in the Selection instance but only for the Y axis (columns).
   *
   * @param {function(HTMLTableElement): void} callback The callback function to trigger.
   */
  scanColumnsInCellsRange(e) {
    const [, n, , r] = on(this, Jr).getCorners(), {
      wtTable: i
    } = on(this, sr);
    ap(this, $h, lp).call(this, (o, s) => {
      if (s >= n && s <= r) {
        const a = i.getCell(on(this, sr).createCellCoords(o, s));
        e(a);
      }
    });
  }
}
function lp(t) {
  const {
    wtTable: e
  } = on(this, sr), n = e.getRenderedRowsCount(), r = e.getRenderedColumnsCount();
  for (let i = 0; i < n; i += 1) {
    const o = e.rowFilter.renderedToSource(i);
    for (let s = 0; s < r; s += 1)
      t(o, e.columnFilter.renderedToSource(s));
  }
}
class f3 {
  // TODO As this is an internal class, should be designed for using {Walkontable}. It uses the facade,
  // TODO Con. Because the class is created on place where the instance reference comes from external origin.
  // TODO Imho, the discrimination for handling both, facade and non-facade should be handled.
  /**
   * @param {WalkontableFacade} wotInstance The Walkontable instance.
   * @param {object} settings The border settings.
   */
  constructor(e, n) {
    n && (this.eventManager = e.eventManager, this.instance = e, this.wot = e, this.settings = n, this.mouseDown = !1, this.main = null, this.top = null, this.bottom = null, this.start = null, this.end = null, this.topStyle = null, this.bottomStyle = null, this.startStyle = null, this.endStyle = null, this.cornerDefaultStyle = GS, this.cornerCenterPointOffset = -(parseInt(this.cornerDefaultStyle.width, 10) / 2), this.corner = null, this.cornerStyle = null, this.createBorders(n), this.registerListeners());
  }
  /**
   * Register all necessary events.
   */
  registerListeners() {
    const e = this.wot.rootDocument.body;
    this.eventManager.addEventListener(e, "mousedown", () => this.onMouseDown()), this.eventManager.addEventListener(e, "mouseup", () => this.onMouseUp());
    for (let n = 0, r = this.main.childNodes.length; n < r; n++) {
      const i = this.main.childNodes[n];
      this.eventManager.addEventListener(i, "mouseenter", (o) => this.onMouseEnter(o, this.main.childNodes[n]));
    }
  }
  /**
   * Mouse down listener.
   *
   * @private
   */
  onMouseDown() {
    this.mouseDown = !0;
  }
  /**
   * Mouse up listener.
   *
   * @private
   */
  onMouseUp() {
    this.mouseDown = !1;
  }
  /**
   * Mouse enter listener for fragment selection functionality.
   *
   * @private
   * @param {Event} event Dom event.
   * @param {HTMLElement} parentElement Part of border element.
   */
  onMouseEnter(e, n) {
    if (!this.mouseDown || !this.wot.getSetting("hideBorderOnMouseDownOver"))
      return;
    e.preventDefault(), Kr(e);
    const r = this, i = this.wot.rootDocument.body, o = n.getBoundingClientRect();
    n.style.display = "none";
    function s(l) {
      if (l.clientY < Math.floor(o.top) || l.clientY > Math.ceil(o.top + o.height) || l.clientX < Math.floor(o.left) || l.clientX > Math.ceil(o.left + o.width))
        return !0;
    }
    function a(l) {
      s(l) && (r.eventManager.removeEventListener(i, "mousemove", a), n.style.display = "block");
    }
    this.eventManager.addEventListener(i, "mousemove", a);
  }
  /**
   * Create border elements.
   *
   * @param {object} settings The border settings.
   */
  createBorders(e) {
    const {
      rootDocument: n
    } = this.wot;
    this.main = n.createElement("div");
    const r = ["top", "start", "bottom", "end", "corner"];
    let i = this.main.style;
    i.position = "absolute", i.top = 0, i.left = 0;
    for (let a = 0; a < 5; a++) {
      const l = r[a], u = n.createElement("div");
      u.className = `wtBorder ${this.settings.className || ""}`, this.settings[l] && this.settings[l].hide && (u.className += " hidden"), i = u.style, i.backgroundColor = this.settings[l] && this.settings[l].color ? this.settings[l].color : e.border.color, i.height = this.settings[l] && this.settings[l].width ? `${this.settings[l].width}px` : `${e.border.width}px`, i.width = this.settings[l] && this.settings[l].width ? `${this.settings[l].width}px` : `${e.border.width}px`, this.main.appendChild(u);
    }
    this.top = this.main.childNodes[0], this.start = this.main.childNodes[1], this.bottom = this.main.childNodes[2], this.end = this.main.childNodes[3], this.topStyle = this.top.style, this.startStyle = this.start.style, this.bottomStyle = this.bottom.style, this.endStyle = this.end.style, this.corner = this.main.childNodes[4], this.corner.className += " corner", this.cornerStyle = this.corner.style, this.cornerStyle.width = this.cornerDefaultStyle.width, this.cornerStyle.height = this.cornerDefaultStyle.height, this.cornerStyle.border = [this.cornerDefaultStyle.borderWidth, this.cornerDefaultStyle.borderStyle, this.cornerDefaultStyle.borderColor].join(" "), Mo() && this.createMultipleSelectorHandles(), this.disappear();
    const {
      wtTable: o
    } = this.wot;
    let s = o.bordersHolder;
    s || (s = n.createElement("div"), s.className = "htBorders", o.bordersHolder = s, o.spreader.appendChild(s)), s.appendChild(this.main);
  }
  /**
   * Create multiple selector handler for mobile devices.
   */
  createMultipleSelectorHandles() {
    const {
      rootDocument: e
    } = this.wot;
    this.selectionHandles = {
      top: e.createElement("DIV"),
      topHitArea: e.createElement("DIV"),
      bottom: e.createElement("DIV"),
      bottomHitArea: e.createElement("DIV")
    };
    const n = 10, r = 40;
    this.selectionHandles.top.className = "topSelectionHandle topLeftSelectionHandle", this.selectionHandles.topHitArea.className = "topSelectionHandle-HitArea topLeftSelectionHandle-HitArea", this.selectionHandles.bottom.className = "bottomSelectionHandle bottomRightSelectionHandle", this.selectionHandles.bottomHitArea.className = "bottomSelectionHandle-HitArea bottomRightSelectionHandle-HitArea", this.selectionHandles.styles = {
      top: this.selectionHandles.top.style,
      topHitArea: this.selectionHandles.topHitArea.style,
      bottom: this.selectionHandles.bottom.style,
      bottomHitArea: this.selectionHandles.bottomHitArea.style
    };
    const i = {
      position: "absolute",
      height: `${r}px`,
      width: `${r}px`,
      "border-radius": `${parseInt(r / 1.5, 10)}px`
    };
    Ze(i, (s, a) => {
      this.selectionHandles.styles.bottomHitArea[a] = s, this.selectionHandles.styles.topHitArea[a] = s;
    });
    const o = {
      position: "absolute",
      height: `${n}px`,
      width: `${n}px`,
      "border-radius": `${parseInt(n / 1.5, 10)}px`,
      background: "#F5F5FF",
      border: "1px solid #4285c8"
    };
    Ze(o, (s, a) => {
      this.selectionHandles.styles.bottom[a] = s, this.selectionHandles.styles.top[a] = s;
    }), this.main.appendChild(this.selectionHandles.top), this.main.appendChild(this.selectionHandles.bottom), this.main.appendChild(this.selectionHandles.topHitArea), this.main.appendChild(this.selectionHandles.bottomHitArea);
  }
  /**
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @returns {boolean}
   */
  isPartRange(e, n) {
    const r = this.wot.selectionManager.getAreaSelection();
    return !!(r.cellRange && (e !== r.cellRange.to.row || n !== r.cellRange.to.col));
  }
  /**
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number} top The top position of the handler.
   * @param {number} left The left position of the handler.
   * @param {number} width The width of the handler.
   * @param {number} height The height of the handler.
   */
  updateMultipleSelectionHandlesPosition(e, n, r, i, o, s) {
    const l = this.wot.wtSettings.getSetting("rtlMode") ? "right" : "left", {
      top: u,
      topHitArea: c,
      bottom: d,
      bottomHitArea: g
    } = this.selectionHandles.styles, p = parseInt(u.borderWidth, 10), C = parseInt(u.width, 10), E = parseInt(c.width, 10), I = this.wot.wtTable.getWidth(), M = this.wot.wtTable.getHeight();
    u.top = `${parseInt(r - C - 1, 10)}px`, u[l] = `${parseInt(i - C - 1, 10)}px`, c.top = `${parseInt(r - E / 4 * 3, 10)}px`, c[l] = `${parseInt(i - E / 4 * 3, 10)}px`;
    const y = Math.min(parseInt(i + o, 10), I - C - p * 2), $ = Math.min(parseInt(i + o - E / 4, 10), I - E - p * 2);
    d[l] = `${y}px`, g[l] = `${$}px`;
    const X = Math.min(parseInt(r + s, 10), M - C - p * 2), G = Math.min(parseInt(r + s - E / 4, 10), M - E - p * 2);
    d.top = `${X}px`, g.top = `${G}px`, this.settings.border.cornerVisible && this.settings.border.cornerVisible() ? (u.display = "block", c.display = "block", this.isPartRange(e, n) ? (d.display = "none", g.display = "none") : (d.display = "block", g.display = "block")) : (u.display = "none", d.display = "none", c.display = "none", g.display = "none"), e === this.wot.wtSettings.getSetting("fixedRowsTop") || n === this.wot.wtSettings.getSetting("fixedColumnsStart") ? (u.zIndex = "9999", c.zIndex = "9999") : (u.zIndex = "", c.zIndex = "");
  }
  /**
   * Show border around one or many cells.
   *
   * @param {Array} corners The corner coordinates.
   */
  appear(e) {
    if (this.disabled)
      return;
    const {
      wtTable: n,
      rootDocument: r,
      rootWindow: i
    } = this.wot;
    let o, s, a, l, u, c;
    const d = n.getRenderedRowsCount();
    for (let w = 0; w < d; w += 1) {
      const h = n.rowFilter.renderedToSource(w);
      if (h >= e[0] && h <= e[2]) {
        o = h, u = e[0];
        break;
      }
    }
    for (let w = d - 1; w >= 0; w -= 1) {
      const h = n.rowFilter.renderedToSource(w);
      if (h >= e[0] && h <= e[2]) {
        s = h;
        break;
      }
    }
    const g = n.getRenderedColumnsCount();
    for (let w = 0; w < g; w += 1) {
      const h = n.columnFilter.renderedToSource(w);
      if (h >= e[1] && h <= e[3]) {
        a = h, c = e[1];
        break;
      }
    }
    for (let w = g - 1; w >= 0; w -= 1) {
      const h = n.columnFilter.renderedToSource(w);
      if (h >= e[1] && h <= e[3]) {
        l = h;
        break;
      }
    }
    if (o === void 0 || a === void 0) {
      this.disappear();
      return;
    }
    let p = n.getCell(this.wot.createCellCoords(o, a));
    const C = o !== s || a !== l, E = C ? n.getCell(this.wot.createCellCoords(s, l)) : p, I = an(p), M = C ? an(E) : I, y = an(n.TABLE), $ = yt(n.TABLE), X = I.top, G = I.left, q = this.wot.wtSettings.getSetting("rtlMode");
    let re = 0, v = 0;
    if (q) {
      const w = yt(p), h = i.innerWidth - y.left - $;
      v = G + w - M.left, re = i.innerWidth - G - w - h - 1;
    } else
      v = M.left + yt(E) - G, re = G - y.left - 1;
    if (this.isEntireColumnSelected(o, s)) {
      const w = this.getDimensionsFromHeader("columns", a, l, u, y);
      let h = null;
      w && ([h, re, v] = w), h && (p = h);
    }
    let S = X - y.top - 1, b = M.top + Bt(E) - X;
    if (this.isEntireRowSelected(a, l)) {
      const w = this.getDimensionsFromHeader("rows", o, s, c, y);
      let h = null;
      w && ([h, S, b] = w), h && (p = h);
    }
    const L = No(p, i);
    parseInt(L.borderTopWidth, 10) > 0 && (S += 1, b = b > 0 ? b - 1 : 0), parseInt(L[q ? "borderRightWidth" : "borderLeftWidth"], 10) > 0 && (re += 1, v = v > 0 ? v - 1 : 0);
    const P = q ? "right" : "left";
    this.topStyle.top = `${S}px`, this.topStyle[P] = `${re}px`, this.topStyle.width = `${v}px`, this.topStyle.display = "block", this.startStyle.top = `${S}px`, this.startStyle[P] = `${re}px`, this.startStyle.height = `${b}px`, this.startStyle.display = "block";
    const x = Math.floor(this.settings.border.width / 2);
    this.bottomStyle.top = `${S + b - x}px`, this.bottomStyle[P] = `${re}px`, this.bottomStyle.width = `${v}px`, this.bottomStyle.display = "block", this.endStyle.top = `${S}px`, this.endStyle[P] = `${re + v - x}px`, this.endStyle.height = `${b + 1}px`, this.endStyle.display = "block";
    let W = this.settings.border.cornerVisible;
    W = typeof W == "function" ? W(this.settings.layerLevel) : W;
    const D = this.wot.getSetting("onModifyGetCellCoords", s, l);
    let [B, z] = [s, l];
    if (D && Array.isArray(D) && ([, , B, z] = D), Mo() || !W || this.isPartRange(B, z))
      this.cornerStyle.display = "none";
    else {
      this.cornerStyle.top = `${S + b + this.cornerCenterPointOffset - 1}px`, this.cornerStyle[P] = `${re + v + this.cornerCenterPointOffset - 1}px`, this.cornerStyle.borderRightWidth = this.cornerDefaultStyle.borderWidth, this.cornerStyle.width = this.cornerDefaultStyle.width, this.cornerStyle.display = "none";
      let w = va(n.TABLE);
      const h = w === i;
      h && (w = r.documentElement);
      const f = parseInt(this.cornerDefaultStyle.width, 10) / 2, m = parseInt(this.cornerDefaultStyle.height, 10) / 2;
      if (l === this.wot.getSetting("totalColumns") - 1) {
        const T = h ? E.getBoundingClientRect().left : E.offsetLeft;
        let O = !1, _ = 0;
        q ? (_ = T - parseInt(this.cornerDefaultStyle.width, 10) / 2, O = _ < 0) : (_ = T + yt(E) + parseInt(this.cornerDefaultStyle.width, 10) / 2, O = _ >= uc(w)), O && (this.cornerStyle[P] = `${Math.floor(re + v + this.cornerCenterPointOffset - f)}px`, this.cornerStyle[q ? "borderLeftWidth" : "borderRightWidth"] = 0);
      }
      s === this.wot.getSetting("totalRows") - 1 && (h ? E.getBoundingClientRect().top : E.offsetTop) + Bt(E) + parseInt(this.cornerDefaultStyle.height, 10) / 2 >= _o(w) && (this.cornerStyle.top = `${Math.floor(S + b + this.cornerCenterPointOffset - m)}px`, this.cornerStyle.borderBottomWidth = 0), this.cornerStyle.display = "block";
    }
    Mo() && this.updateMultipleSelectionHandlesPosition(s, l, S, re, v, b);
  }
  /**
   * Check whether an entire column of cells is selected.
   *
   * @private
   * @param {number} startRowIndex Start row index.
   * @param {number} endRowIndex End row index.
   * @returns {boolean}
   */
  isEntireColumnSelected(e, n) {
    return e === this.wot.wtTable.getFirstRenderedRow() && n === this.wot.wtTable.getLastRenderedRow();
  }
  /**
   * Check whether an entire row of cells is selected.
   *
   * @private
   * @param {number} startColumnIndex Start column index.
   * @param {number} endColumnIndex End column index.
   * @returns {boolean}
   */
  isEntireRowSelected(e, n) {
    return e === this.wot.wtTable.getFirstRenderedColumn() && n === this.wot.wtTable.getLastRenderedColumn();
  }
  /**
   * Get left/top index and width/height depending on the `direction` provided.
   *
   * @private
   * @param {string} direction `rows` or `columns`, defines if an entire column or row is selected.
   * @param {number} fromIndex Start index of the selection.
   * @param {number} toIndex End index of the selection.
   * @param {number} headerIndex The header index as negative value.
   * @param {number} containerOffset Offset of the container.
   * @returns {Array|boolean} Returns an array of [headerElement, left, width] or [headerElement, top, height], depending on `direction` (`false` in case of an error getting the headers).
   */
  getDimensionsFromHeader(e, n, r, i, o) {
    const {
      wtTable: s
    } = this.wot, a = s.wtRootElement.parentNode;
    let l = null, u = null, c = null, d = null, g = null, p = null, C = null, E = null;
    switch (e) {
      case "rows":
        l = function() {
          return s.getRowHeader(...arguments);
        }, u = function() {
          return Bt(...arguments);
        }, c = "ht__selection--rows", p = "top";
        break;
      case "columns":
        l = function() {
          return s.getColumnHeader(...arguments);
        }, u = function() {
          return yt(...arguments);
        }, c = "ht__selection--columns", p = "left";
        break;
    }
    if (a.classList.contains(c)) {
      const I = this.wot.getSetting("columnHeaders").length;
      if (C = l(n, I - i), E = l(r, I - i), !C || !E)
        return !1;
      const M = an(C), y = an(E);
      return C && E && (d = M[p] - o[p] - 1, g = y[p] + u(E) - M[p]), [C, d, g];
    }
    return !1;
  }
  /**
   * Change border style.
   *
   * @private
   * @param {string} borderElement Coordinate where add/remove border: top, bottom, start, end.
   * @param {object} border The border object descriptor.
   */
  changeBorderStyle(e, n) {
    const r = this[e].style, i = n[e];
    !i || i.hide ? ce(this[e], "hidden") : (Ve(this[e], "hidden") && Ye(this[e], "hidden"), r.backgroundColor = i.color, (e === "top" || e === "bottom") && (r.height = `${i.width}px`), (e === "start" || e === "end") && (r.width = `${i.width}px`));
  }
  /**
   * Change border style to default.
   *
   * @private
   * @param {string} position The position type ("top", "bottom", "start", "end") to change.
   */
  changeBorderToDefaultStyle(e) {
    const n = {
      width: 1,
      color: "#000"
    }, r = this[e].style;
    r.backgroundColor = n.color, r.width = `${n.width}px`, r.height = `${n.width}px`;
  }
  /**
   * Toggle class 'hidden' to element.
   *
   * @private
   * @param {string} borderElement Coordinate where add/remove border: top, bottom, start, end.
   * @param {boolean} [remove] Defines type of the action to perform.
   */
  toggleHiddenClass(e, n) {
    this.changeBorderToDefaultStyle(e), n ? ce(this[e], "hidden") : Ye(this[e], "hidden");
  }
  /**
   * Hide border.
   */
  disappear() {
    this.topStyle.display = "none", this.bottomStyle.display = "none", this.startStyle.display = "none", this.endStyle.display = "none", this.cornerStyle.display = "none", Mo() && (this.selectionHandles.styles.top.display = "none", this.selectionHandles.styles.topHitArea.display = "none", this.selectionHandles.styles.bottom.display = "none", this.selectionHandles.styles.bottomHitArea.display = "none");
  }
  /**
   * Cleans up all the DOM state related to a Border instance. Call this prior to deleting a Border instance.
   */
  destroy() {
    this.eventManager.destroyWithOwnEventsOnly(), this.main.parentNode.removeChild(this.main);
  }
}
const eE = f3;
function g3(t, e) {
  sx(t, e), e.add(t);
}
function Ba(t, e, n) {
  sx(t, e), e.set(t, n);
}
function sx(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function m3(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function rt(t, e) {
  var n = ax(t, e, "get");
  return p3(t, n);
}
function p3(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function tE(t, e, n) {
  var r = ax(t, e, "set");
  return w3(t, r, n), n;
}
function ax(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function w3(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var Nn = /* @__PURE__ */ new WeakMap(), dr = /* @__PURE__ */ new WeakMap(), up = /* @__PURE__ */ new WeakMap(), Ju = /* @__PURE__ */ new WeakMap(), cp = /* @__PURE__ */ new WeakMap(), Ls = /* @__PURE__ */ new WeakMap(), nE = /* @__PURE__ */ new WeakSet();
class C3 {
  constructor(e) {
    g3(this, nE), Ba(this, Nn, {
      writable: !0,
      value: void 0
    }), Ba(this, dr, {
      writable: !0,
      value: void 0
    }), Ba(this, up, {
      writable: !0,
      value: new d3()
    }), Ba(this, Ju, {
      writable: !0,
      value: /* @__PURE__ */ new WeakMap()
    }), Ba(this, cp, {
      writable: !0,
      value: /* @__PURE__ */ new WeakSet()
    }), Ba(this, Ls, {
      writable: !0,
      value: /* @__PURE__ */ new Map()
    }), tE(this, dr, e);
  }
  /**
   * Sets the active Walkontable instance.
   *
   * @param {Walkontable} activeWot The overlays or master Walkontable instance.
   * @returns {SelectionManager}
   */
  setActiveOverlay(e) {
    return tE(this, Nn, e), rt(this, up).setActiveOverlay(rt(this, Nn)), rt(this, Ju).has(rt(this, Nn)) || rt(this, Ju).set(rt(this, Nn), /* @__PURE__ */ new Set()), this;
  }
  /**
   * Gets the Selection instance of the "focus" type.
   *
   * @returns {Selection|null}
   */
  getFocusSelection() {
    return rt(this, dr) !== null ? rt(this, dr).getFocus() : null;
  }
  /**
   * Gets the Selection instance of the "area" type.
   *
   * @returns {Selection|null}
   */
  getAreaSelection() {
    return rt(this, dr) !== null ? rt(this, dr).createLayeredArea() : null;
  }
  /**
   * Gets the Border instance associated with Selection instance.
   *
   * @param {Selection} selection The selection instance.
   * @returns {Border|null} Returns the Border instance (new for each overlay Walkontable instance).
   */
  getBorderInstance(e) {
    if (!e.settings.border)
      return null;
    if (rt(this, Ls).has(e)) {
      const r = rt(this, Ls).get(e);
      if (r.has(rt(this, Nn)))
        return r.get(rt(this, Nn));
      const i = new eE(rt(this, Nn), e.settings);
      return r.set(rt(this, Nn), i), i;
    }
    const n = new eE(rt(this, Nn), e.settings);
    return rt(this, Ls).set(e, /* @__PURE__ */ new Map([[rt(this, Nn), n]])), n;
  }
  /**
   * Gets all Border instances associated with Selection instance for all overlays.
   *
   * @param {Selection} selection The selection instance.
   * @returns {Border[]}
   */
  getBorderInstances(e) {
    var n, r;
    return Array.from((n = (r = rt(this, Ls).get(e)) === null || r === void 0 ? void 0 : r.values()) !== null && n !== void 0 ? n : []);
  }
  /**
   * Destroys the Border instance associated with Selection instance.
   *
   * @param {Selection} selection The selection instance.
   */
  destroyBorders(e) {
    rt(this, Ls).get(e).forEach((n) => n.destroy()), rt(this, Ls).delete(e);
  }
  /**
   * Renders all the selections (add CSS classes to cells and draw borders).
   *
   * @param {boolean} fastDraw Indicates the render cycle type (fast/slow).
   */
  render(e) {
    if (rt(this, dr) === null)
      return;
    e && m3(this, nE, v3).call(this);
    const n = Array.from(rt(this, dr)), r = /* @__PURE__ */ new Map(), i = /* @__PURE__ */ new Map();
    for (let o = 0; o < n.length; o++) {
      const s = n[o], {
        className: a,
        headerAttributes: l,
        createLayers: u,
        selectionType: c
      } = s.settings;
      rt(this, cp).has(s) || (rt(this, cp).add(s), s.addLocalHook("destroy", () => this.destroyBorders(s)));
      const d = this.getBorderInstance(s);
      if (s.isEmpty()) {
        d == null || d.disappear();
        continue;
      }
      a && rt(this, up).setActiveSelection(s).scan().forEach((C) => {
        if (r.has(C)) {
          const E = r.get(C);
          E.has(a) && u === !0 ? E.set(a, E.get(a) + 1) : E.set(a, 1);
        } else
          r.set(C, /* @__PURE__ */ new Map([[a, 1]]));
        l && (i.has(C) || i.set(C, []), C.nodeName === "TH" && i.get(C).push(...l));
      });
      const g = s.getCorners();
      rt(this, Nn).getSetting("onBeforeDrawBorders", g, c), d == null || d.appear(g);
    }
    r.forEach((o, s) => {
      var a;
      const l = Array.from(o).map((u) => {
        let [c, d] = u;
        return d === 1 ? c : [c, ...Array.from({
          length: d - 1
        }, (g, p) => `${c}-${p + 1}`)];
      }).flat();
      l.forEach((u) => rt(this, Ju).get(rt(this, Nn)).add(u)), ce(s, l), s.nodeName === "TD" && Array.isArray((a = rt(this, dr).options) === null || a === void 0 ? void 0 : a.cellAttributes) && Ne(s, rt(this, dr).options.cellAttributes);
    }), Array.from(i.keys()).forEach((o) => {
      Ne(o, [...i.get(o)]);
    });
  }
}
function v3() {
  const t = rt(this, Ju).get(rt(this, Nn)), e = rt(this, Nn).wtSettings.getSetting("onBeforeRemoveCellClassNames");
  if (Array.isArray(e))
    for (let n = 0; n < e.length; n++)
      t.add(e[n]);
  t.forEach((n) => {
    var r, i;
    const o = rt(this, Nn).wtTable.TABLE.querySelectorAll(`.${n}`);
    let s = [];
    Array.isArray((r = rt(this, dr).options) === null || r === void 0 ? void 0 : r.cellAttributes) && (s = rt(this, dr).options.cellAttributes.map((a) => a[0])), Array.isArray((i = rt(this, dr).options) === null || i === void 0 ? void 0 : i.headerAttributes) && (s = [...s, ...rt(this, dr).options.headerAttributes.map((a) => a[0])]);
    for (let a = 0, l = o.length; a < l; a++)
      Ye(o[a], n), Ia(o[a], s);
  }), t.clear();
}
class S3 extends ih {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {DomBindings} domBindings Dom elements bound to the current instance.
   */
  constructor(e, n, r, i) {
    super(e, n, ya, r, i);
  }
  /**
   * Factory method to create a subclass of `Table` that is relevant to this overlay.
   *
   * @see Table#constructor
   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
   * @returns {InlineStartOverlayTable}
   */
  createTable() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return new t3(...n);
  }
  /**
   * Checks if overlay should be fully rendered.
   *
   * @returns {boolean}
   */
  shouldBeRendered() {
    return this.wtSettings.getSetting("shouldRenderInlineStartOverlay");
  }
  /**
   * Updates the left overlay position.
   *
   * @returns {boolean}
   */
  resetFixedPosition() {
    const {
      wtTable: e
    } = this.wot;
    if (!this.needFullRender || !e.holder.parentNode)
      return !1;
    const {
      rootWindow: n
    } = this.domBindings, r = this.clone.wtTable.holder.parentNode, i = this.wtSettings.getSetting("preventOverflow");
    let o = 0;
    this.trimmingContainer === n && (!i || i !== "horizontal") ? (o = this.getOverlayOffset() * (this.isRtl() ? -1 : 1), Lg(r, `${o}px`, "0px")) : (o = this.getScrollPosition(), Jc(r));
    const s = this.adjustHeaderBordersPosition(o);
    return this.adjustElementsSize(), s;
  }
  /**
   * Sets the main overlay's horizontal scroll position.
   *
   * @param {number} pos The scroll position.
   * @returns {boolean}
   */
  setScrollPosition(e) {
    const {
      rootWindow: n
    } = this.domBindings;
    let r = !1;
    return this.isRtl() && (e = -e), this.mainTableScrollableElement === n && n.scrollX !== e ? (n.scrollTo(e, fS(n)), r = !0) : this.mainTableScrollableElement.scrollLeft !== e && (this.mainTableScrollableElement.scrollLeft = e, r = !0), r;
  }
  /**
   * Triggers onScroll hook callback.
   */
  onScroll() {
    this.wtSettings.getSetting("onScrollVertically");
  }
  /**
   * Calculates total sum cells width.
   *
   * @param {number} from Column index which calculates started from.
   * @param {number} to Column index where calculation is finished.
   * @returns {number} Width sum.
   */
  sumCellSizes(e, n) {
    const r = this.wtSettings.getSetting("defaultColumnWidth");
    let i = e, o = 0;
    for (; i < n; )
      o += this.wot.wtTable.getStretchedColumnWidth(i) || r, i += 1;
    return o;
  }
  /**
   * Adjust overlay root element, childs and master table element sizes (width, height).
   *
   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.
   */
  adjustElementsSize() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    this.updateTrimmingContainer(), (this.needFullRender || e) && (this.adjustRootElementSize(), this.adjustRootChildrenSize());
  }
  /**
   * Adjust overlay root element size (width and height).
   */
  adjustRootElementSize() {
    const {
      wtTable: e
    } = this.wot, {
      rootDocument: n,
      rootWindow: r
    } = this.domBindings, i = wn(n), s = this.clone.wtTable.holder.parentNode.style, a = this.wtSettings.getSetting("preventOverflow");
    if (this.trimmingContainer !== r || a === "vertical") {
      let u = this.wot.wtViewport.getWorkspaceHeight();
      this.wot.wtOverlays.hasScrollbarBottom && (u -= i), u = Math.min(u, e.wtRootElement.scrollHeight), s.height = `${u}px`;
    } else
      s.height = "";
    this.clone.wtTable.holder.style.height = s.height;
    const l = yt(this.clone.wtTable.TABLE);
    s.width = `${l}px`;
  }
  /**
   * Adjust overlay root childs size.
   */
  adjustRootChildrenSize() {
    const {
      holder: e
    } = this.clone.wtTable, n = this.wot.selectionManager.getFocusSelection() ? parseInt(GS.width, 10) / 2 : 0;
    this.clone.wtTable.hider.style.height = this.hider.style.height, e.style.height = e.parentNode.style.height, e.style.width = `${parseInt(e.parentNode.style.width, 10) + n}px`;
  }
  /**
   * Adjust the overlay dimensions and position.
   */
  applyToDOM() {
    const e = this.wtSettings.getSetting("totalColumns"), n = this.isRtl() ? "right" : "left";
    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition == "number")
      this.spreader.style[n] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;
    else if (e === 0)
      this.spreader.style[n] = "0";
    else
      throw new Error("Incorrect value of the columnsRenderCalculator");
    this.isRtl() ? this.spreader.style.left = "" : this.spreader.style.right = "", this.needFullRender && this.syncOverlayOffset();
  }
  /**
   * Synchronize calculated top position to an element.
   */
  syncOverlayOffset() {
    typeof this.wot.wtViewport.rowsRenderCalculator.startPosition == "number" ? this.clone.wtTable.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px` : this.clone.wtTable.spreader.style.top = "";
  }
  /**
   * Scrolls horizontally to a column at the left edge of the viewport.
   *
   * @param {number} sourceCol  Column index which you want to scroll to.
   * @param {boolean} [beyondRendered]  If `true`, scrolls according to the right
   *                                    edge (left edge is by default).
   * @returns {boolean}
   */
  scrollTo(e, n) {
    let r = this.getTableParentOffset();
    const o = (this.wot.cloneSource ? this.wot.cloneSource : this.wot).wtTable.holder;
    let s = 0;
    if (n) {
      const a = this.wot.wtTable.getColumnWidth(e), l = this.wot.wtViewport.getViewportWidth();
      a > l && (n = !1);
    }
    return n && o.offsetWidth !== o.clientWidth && (s = wn(this.domBindings.rootDocument)), n ? (r += this.sumCellSizes(0, e + 1), r -= this.wot.wtViewport.getViewportWidth()) : r += this.sumCellSizes(this.wtSettings.getSetting("fixedColumnsStart"), e), r += s, this.setScrollPosition(r);
  }
  /**
   * Gets table parent left position.
   *
   * @returns {number}
   */
  getTableParentOffset() {
    const e = this.wtSettings.getSetting("preventOverflow");
    let n = 0;
    return !e && this.trimmingContainer === this.domBindings.rootWindow && (n = this.wot.wtTable.holderOffset.left), n;
  }
  /**
   * Gets the main overlay's horizontal scroll position.
   *
   * @returns {number} Main table's horizontal scroll position.
   */
  getScrollPosition() {
    return Math.abs(If(this.mainTableScrollableElement, this.domBindings.rootWindow));
  }
  /**
   * Gets the main overlay's horizontal overlay offset.
   *
   * @returns {number} Main table's horizontal overlay offset.
   */
  getOverlayOffset() {
    const {
      rootWindow: e
    } = this.domBindings, n = this.wtSettings.getSetting("preventOverflow");
    let r = 0;
    if (this.trimmingContainer === e && (!n || n !== "horizontal")) {
      this.isRtl() ? r = Math.abs(Math.min(this.getTableParentOffset() - this.getScrollPosition(), 0)) : r = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);
      const i = this.wot.wtTable.getTotalWidth(), o = this.clone.wtTable.getTotalWidth(), s = i - o;
      r > s && (r = 0);
    }
    return r;
  }
  /**
   * Adds css classes to hide the header border's header (cell-selection border hiding issue).
   *
   * @param {number} position Header X position if trimming container is window or scroll top if not.
   * @returns {boolean}
   */
  adjustHeaderBordersPosition(e) {
    const n = this.wot.wtTable.holder.parentNode, r = this.wtSettings.getSetting("rowHeaders"), i = this.wtSettings.getSetting("fixedColumnsStart");
    this.wtSettings.getSetting("totalRows") ? Ye(n, "emptyRows") : ce(n, "emptyRows");
    let s = !1;
    if (i && !r.length)
      ce(n, "innerBorderLeft innerBorderInlineStart");
    else if (!i && r.length) {
      const a = Ve(n, "innerBorderInlineStart");
      e ? (ce(n, "innerBorderLeft innerBorderInlineStart"), s = !a) : (Ye(n, "innerBorderLeft innerBorderInlineStart"), s = a);
    }
    return s;
  }
}
const y3 = "stickyRowsTop", lx = {
  /**
   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedRow() {
    return this.wtSettings.getSetting("totalRows") === 0 ? -1 : 0;
  },
  /**
   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleRow() {
    return this.getFirstRenderedRow();
  },
  /**
   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedRow() {
    return this.getRenderedRowsCount() - 1;
  },
  /**
   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleRow() {
    return this.getLastRenderedRow();
  },
  /**
   * Get the number of rendered rows.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedRowsCount() {
    const t = this.wtSettings.getSetting("totalRows");
    return Math.min(this.wtSettings.getSetting("fixedRowsTop"), t);
  },
  /**
   * Get the number of fully visible rows in the viewport.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleRowsCount() {
    return this.getRenderedRowsCount();
  },
  /**
   * Get the number of rendered column headers.
   *
   * @returns {number}
   * @this Table
   */
  getColumnHeadersCount() {
    return this.dataAccessObject.columnHeaders.length;
  }
};
Ji(lx, "MIXIN_NAME", y3, {
  writable: !1,
  enumerable: !1
});
const ux = lx;
class zS extends Zl {
  /**
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   */
  constructor(e, n, r, i) {
    super(e, n, r, i, ba);
  }
}
_t(zS, ux);
_t(zS, LS);
const b3 = zS;
function rE(t, e, n) {
  return e = R3(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function R3(t) {
  var e = E3(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function E3(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class T3 extends ih {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {DomBindings} domBindings Dom elements bound to the current instance.
   * @param {TopOverlay} topOverlay The instance of the Top overlay.
   * @param {InlineStartOverlay} inlineStartOverlay The instance of the InlineStart overlay.
   */
  constructor(e, n, r, i, o, s) {
    super(e, n, ba, r, i), rE(this, "topOverlay", void 0), rE(this, "inlineStartOverlay", void 0), this.topOverlay = o, this.inlineStartOverlay = s;
  }
  /**
   * Factory method to create a subclass of `Table` that is relevant to this overlay.
   *
   * @see Table#constructor
   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
   * @returns {TopInlineStartCornerOverlayTable}
   */
  createTable() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return new b3(...n);
  }
  /**
   * Checks if overlay should be fully rendered.
   *
   * @returns {boolean}
   */
  shouldBeRendered() {
    return this.wtSettings.getSetting("shouldRenderTopOverlay") && this.wtSettings.getSetting("shouldRenderInlineStartOverlay");
  }
  /**
   * Updates the corner overlay position.
   *
   * @returns {boolean}
   */
  resetFixedPosition() {
    if (this.updateTrimmingContainer(), !this.wot.wtTable.holder.parentNode)
      return !1;
    const e = this.clone.wtTable.holder.parentNode;
    if (this.trimmingContainer === this.domBindings.rootWindow) {
      const i = this.inlineStartOverlay.getOverlayOffset() * (this.isRtl() ? -1 : 1), o = this.topOverlay.getOverlayOffset();
      Lg(e, `${i}px`, `${o}px`);
    } else
      Jc(e);
    let n = Bt(this.clone.wtTable.TABLE);
    const r = yt(this.clone.wtTable.TABLE);
    return this.wot.wtTable.hasDefinedSize() || (n = 0), e.style.height = `${n}px`, e.style.width = `${r}px`, !1;
  }
}
class jS extends Zl {
  /**
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   */
  constructor(e, n, r, i) {
    super(e, n, r, i, Sa);
  }
}
_t(jS, ux);
_t(jS, FS);
const _3 = jS;
function M3(t, e, n) {
  return e = O3(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function O3(t) {
  var e = A3(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function A3(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class I3 extends ih {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {DomBindings} domBindings Dom elements bound to the current instance.
   */
  constructor(e, n, r, i) {
    super(e, n, Sa, r, i), M3(this, "cachedFixedRowsTop", -1), this.cachedFixedRowsTop = this.wtSettings.getSetting("fixedRowsTop");
  }
  /**
   * Factory method to create a subclass of `Table` that is relevant to this overlay.
   *
   * @see Table#constructor
   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
   * @returns {TopOverlayTable}
   */
  createTable() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return new _3(...n);
  }
  /**
   * Checks if overlay should be fully rendered.
   *
   * @returns {boolean}
   */
  shouldBeRendered() {
    return this.wtSettings.getSetting("shouldRenderTopOverlay");
  }
  /**
   * Updates the top overlay position.
   *
   * @returns {boolean}
   */
  resetFixedPosition() {
    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode)
      return !1;
    const e = this.clone.wtTable.holder.parentNode, {
      rootWindow: n
    } = this.domBindings, r = this.wtSettings.getSetting("preventOverflow");
    let i = 0, o = !1;
    if (this.trimmingContainer === n && (!r || r !== "vertical")) {
      const {
        wtTable: a
      } = this.wot, l = a.hider.getBoundingClientRect(), u = Math.ceil(l.bottom), c = e.offsetHeight;
      o = u === c, i = this.getOverlayOffset(), Lg(e, "0px", `${i}px`);
    } else
      i = this.getScrollPosition(), Jc(e);
    const s = this.adjustHeaderBordersPosition(i, o);
    return this.adjustElementsSize(), s;
  }
  /**
   * Sets the main overlay's vertical scroll position.
   *
   * @param {number} pos The scroll position.
   * @returns {boolean}
   */
  setScrollPosition(e) {
    const n = this.domBindings.rootWindow;
    let r = !1;
    return this.mainTableScrollableElement === n && n.scrollY !== e ? (n.scrollTo(Ng(n), e), r = !0) : this.mainTableScrollableElement.scrollTop !== e && (this.mainTableScrollableElement.scrollTop = e, r = !0), r;
  }
  /**
   * Triggers onScroll hook callback.
   */
  onScroll() {
    this.wtSettings.getSetting("onScrollHorizontally");
  }
  /**
   * Calculates total sum cells height.
   *
   * @param {number} from Row index which calculates started from.
   * @param {number} to Row index where calculation is finished.
   * @returns {number} Height sum.
   */
  sumCellSizes(e, n) {
    const r = this.wtSettings.getSetting("defaultRowHeight");
    let i = e, o = 0;
    for (; i < n; ) {
      const s = this.wot.wtTable.getRowHeight(i);
      o += s === void 0 ? r : s, i += 1;
    }
    return o;
  }
  /**
   * Adjust overlay root element, childs and master table element sizes (width, height).
   *
   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.
   */
  adjustElementsSize() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    this.updateTrimmingContainer(), (this.needFullRender || e) && (this.adjustRootElementSize(), this.adjustRootChildrenSize());
  }
  /**
   * Adjust overlay root element size (width and height).
   */
  adjustRootElementSize() {
    const {
      wtTable: e
    } = this.wot, {
      rootDocument: n,
      rootWindow: r
    } = this.domBindings, i = wn(n), s = this.clone.wtTable.holder.parentNode.style, a = this.wtSettings.getSetting("preventOverflow");
    if (this.trimmingContainer !== r || a === "horizontal") {
      let u = this.wot.wtViewport.getWorkspaceWidth();
      this.wot.wtOverlays.hasScrollbarRight && (u -= i), u = Math.min(u, e.wtRootElement.scrollWidth), s.width = `${u}px`;
    } else
      s.width = "";
    this.clone.wtTable.holder.style.width = s.width;
    let l = Bt(this.clone.wtTable.TABLE);
    this.wot.wtTable.hasDefinedSize() || (l = 0), s.height = `${l}px`;
  }
  /**
   * Adjust overlay root childs size.
   */
  adjustRootChildrenSize() {
    const {
      holder: e
    } = this.clone.wtTable, n = this.wot.selectionManager.getFocusSelection() ? parseInt(GS.height, 10) / 2 : 0;
    this.clone.wtTable.hider.style.width = this.hider.style.width, e.style.width = e.parentNode.style.width, e.style.height = `${parseInt(e.parentNode.style.height, 10) + n}px`;
  }
  /**
   * Adjust the overlay dimensions and position.
   */
  applyToDOM() {
    const e = this.wtSettings.getSetting("totalRows");
    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition == "number")
      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;
    else if (e === 0)
      this.spreader.style.top = "0";
    else
      throw new Error("Incorrect value of the rowsRenderCalculator");
    this.spreader.style.bottom = "", this.needFullRender && this.syncOverlayOffset();
  }
  /**
   * Synchronize calculated left position to an element.
   */
  syncOverlayOffset() {
    const e = this.isRtl() ? "right" : "left", {
      spreader: n
    } = this.clone.wtTable;
    typeof this.wot.wtViewport.columnsRenderCalculator.startPosition == "number" ? n.style[e] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px` : n.style[e] = "";
  }
  /**
   * Scrolls vertically to a row.
   *
   * @param {number} sourceRow Row index which you want to scroll to.
   * @param {boolean} [bottomEdge] If `true`, scrolls according to the bottom edge (top edge is by default).
   * @returns {boolean}
   */
  scrollTo(e, n) {
    const {
      wot: r,
      wtSettings: i
    } = this, s = (r.cloneSource ? r.cloneSource : r).wtTable.holder;
    let a = this.getTableParentOffset(), l = 0;
    if (n) {
      const u = this.wot.wtTable.getRowHeight(e), c = this.wot.wtViewport.getViewportHeight();
      u > c && (n = !1);
    }
    if (n && s.offsetHeight !== s.clientHeight && (l = wn(this.domBindings.rootDocument)), n) {
      const u = i.getSetting("fixedRowsBottom"), c = i.getSetting("totalRows");
      a += this.sumCellSizes(0, e + 1), a -= r.wtViewport.getViewportHeight() - this.sumCellSizes(c - u, c), a += 1;
    } else
      a += this.sumCellSizes(i.getSetting("fixedRowsTop"), e);
    return a += l, this.setScrollPosition(a);
  }
  /**
   * Gets table parent top position.
   *
   * @returns {number}
   */
  getTableParentOffset() {
    return this.mainTableScrollableElement === this.domBindings.rootWindow ? this.wot.wtTable.holderOffset.top : 0;
  }
  /**
   * Gets the main overlay's vertical scroll position.
   *
   * @returns {number} Main table's vertical scroll position.
   */
  getScrollPosition() {
    return Pc(this.mainTableScrollableElement, this.domBindings.rootWindow);
  }
  /**
   * Gets the main overlay's vertical overlay offset.
   *
   * @returns {number} Main table's vertical overlay offset.
   */
  getOverlayOffset() {
    const {
      rootWindow: e
    } = this.domBindings, n = this.wtSettings.getSetting("preventOverflow");
    let r = 0;
    if (this.trimmingContainer === e && (!n || n !== "vertical")) {
      const i = this.wot.wtTable.getTotalHeight(), o = this.clone.wtTable.getTotalHeight(), s = i - o;
      r = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0), r > s && (r = 0);
    }
    return r;
  }
  /**
   * Adds css classes to hide the header border's header (cell-selection border hiding issue).
   *
   * @param {number} position Header Y position if trimming container is window or scroll top if not.
   * @param {boolean} [skipInnerBorderAdjusting=false] If `true` the inner border adjusting will be skipped.
   * @returns {boolean}
   */
  adjustHeaderBordersPosition(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const r = this.wot.wtTable.holder.parentNode;
    this.wtSettings.getSetting("totalColumns") ? Ye(r, "emptyColumns") : ce(r, "emptyColumns");
    let o = !1;
    if (!n) {
      const s = this.wtSettings.getSetting("fixedRowsTop"), a = this.cachedFixedRowsTop !== s, l = this.wtSettings.getSetting("columnHeaders");
      if ((a || s === 0) && l.length > 0) {
        const u = Ve(r, "innerBorderTop");
        this.cachedFixedRowsTop = this.wtSettings.getSetting("fixedRowsTop"), e || this.wtSettings.getSetting("totalRows") === 0 ? (ce(r, "innerBorderTop"), o = !u) : (Ye(r, "innerBorderTop"), o = u);
      }
    }
    return o;
  }
}
function io(t, e, n) {
  return e = P3(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function P3(t) {
  var e = x3(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function x3(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class H3 {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @todo refactoring remove.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {EventManager} eventManager The walkontable event manager.
   * @param {MasterTable} wtTable The master table.
   */
  constructor(e, n, r, i, o, s) {
    io(this, "wot", null), io(this, "topOverlay", null), io(this, "bottomOverlay", null), io(this, "inlineStartOverlay", null), io(this, "topInlineStartCornerOverlay", null), io(this, "bottomInlineStartCornerOverlay", null), io(this, "browserLineHeight", void 0), io(this, "wtSettings", null), io(this, "resizeObserver", new ResizeObserver((c) => {
      Yg(() => {
        !Array.isArray(c) || !c.length || this.wtSettings.getSetting("onContainerElementResize");
      });
    })), this.wot = e, this.wtSettings = i, this.domBindings = r, this.facadeGetter = n, this.wtTable = s;
    const {
      rootDocument: a,
      rootWindow: l
    } = this.domBindings;
    this.instance = this.wot, this.eventManager = o, this.scrollbarSize = wn(a);
    const u = l.getComputedStyle(s.wtRootElement.parentNode).getPropertyValue("overflow") === "hidden";
    this.scrollableElement = u ? s.holder : xc(s.TABLE), this.initOverlays(), this.hasScrollbarBottom = !1, this.hasScrollbarRight = !1, this.destroyed = !1, this.keyPressed = !1, this.spreaderLastSize = {
      width: null,
      height: null
    }, this.verticalScrolling = !1, this.horizontalScrolling = !1, this.initBrowserLineHeight(), this.registerListeners(), this.lastScrollX = l.scrollX, this.lastScrollY = l.scrollY;
  }
  /**
   * Get the list of references to all overlays.
   *
   * @param {boolean} [includeMaster = false] If set to `true`, the list will contain the master table as the last
   * element.
   * @returns {(TopOverlay|TopInlineStartCornerOverlay|InlineStartOverlay|BottomOverlay|BottomInlineStartCornerOverlay)[]}
   */
  getOverlays() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const n = [this.topOverlay, this.topInlineStartCornerOverlay, this.inlineStartOverlay, this.bottomOverlay, this.bottomInlineStartCornerOverlay];
    return e && n.push(this.wtTable), n;
  }
  /**
   * Retrieve browser line height and apply its value to `browserLineHeight`.
   *
   * @private
   */
  initBrowserLineHeight() {
    const {
      rootWindow: e,
      rootDocument: n
    } = this.domBindings, r = e.getComputedStyle(n.body), i = parseInt(r.lineHeight, 10), o = parseInt(r.fontSize, 10) * 1.2;
    this.browserLineHeight = i || o;
  }
  /**
   * Prepare overlays based on user settings.
   *
   * @private
   */
  initOverlays() {
    const e = [this.wot, this.facadeGetter, this.wtSettings, this.domBindings];
    this.topOverlay = new I3(...e), this.bottomOverlay = new JK(...e), this.inlineStartOverlay = new S3(...e), this.topInlineStartCornerOverlay = new T3(...e, this.topOverlay, this.inlineStartOverlay), this.bottomInlineStartCornerOverlay = new jK(...e, this.bottomOverlay, this.inlineStartOverlay);
  }
  /**
   * Update state of rendering, check if changed.
   *
   * @package
   * @returns {boolean} Returns `true` if changes applied to overlay needs scroll synchronization.
   */
  updateStateOfRendering() {
    let e = this.topOverlay.updateStateOfRendering();
    return e = this.bottomOverlay.updateStateOfRendering() || e, e = this.inlineStartOverlay.updateStateOfRendering() || e, this.inlineStartOverlay.needFullRender && (this.topOverlay.needFullRender && (e = this.topInlineStartCornerOverlay.updateStateOfRendering() || e), this.bottomOverlay.needFullRender && (e = this.bottomInlineStartCornerOverlay.updateStateOfRendering() || e)), e;
  }
  /**
   * Refresh and redraw table.
   */
  refreshAll() {
    if (this.wot.drawn) {
      if (!this.wtTable.holder.parentNode) {
        this.destroy();
        return;
      }
      this.wot.draw(!0), this.verticalScrolling && this.inlineStartOverlay.onScroll(), this.horizontalScrolling && this.topOverlay.onScroll(), this.verticalScrolling = !1, this.horizontalScrolling = !1;
    }
  }
  /**
   * Register all necessary event listeners.
   */
  registerListeners() {
    const {
      rootDocument: e,
      rootWindow: n
    } = this.domBindings, {
      mainTableScrollableElement: r
    } = this.topOverlay, {
      mainTableScrollableElement: i
    } = this.inlineStartOverlay;
    this.eventManager.addEventListener(e.documentElement, "keydown", (d) => this.onKeyDown(d)), this.eventManager.addEventListener(e.documentElement, "keyup", () => this.onKeyUp()), this.eventManager.addEventListener(e, "visibilitychange", () => this.onKeyUp()), this.eventManager.addEventListener(r, "scroll", (d) => this.onTableScroll(d), {
      passive: !0
    }), r !== i && this.eventManager.addEventListener(i, "scroll", (d) => this.onTableScroll(d), {
      passive: !0
    });
    const o = n.devicePixelRatio && n.devicePixelRatio > 1, s = this.scrollableElement === n, a = this.wtSettings.getSetting("preventWheel"), l = {
      passive: s
    };
    (a || o || !vS()) && this.eventManager.addEventListener(this.wtTable.wtRootElement, "wheel", (d) => this.onCloneWheel(d, a), l), [this.topOverlay, this.bottomOverlay, this.inlineStartOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay].forEach((d) => {
      if (d && d.needFullRender) {
        const {
          holder: g
        } = d.clone.wtTable;
        this.eventManager.addEventListener(g, "wheel", (p) => this.onCloneWheel(p, a), l);
      }
    });
    let c;
    this.eventManager.addEventListener(n, "resize", () => {
      clearTimeout(c), c = setTimeout(() => {
        this.wtSettings.getSetting("onWindowResize");
      }, 200);
    }), s || this.resizeObserver.observe(this.wtTable.wtRootElement.parentElement);
  }
  /**
   * Deregister all previously registered listeners.
   */
  deregisterListeners() {
    this.eventManager.clearEvents(!0);
  }
  /**
   * Scroll listener.
   *
   * @param {Event} event The mouse event object.
   */
  onTableScroll(e) {
    const n = this.domBindings.rootWindow, r = this.inlineStartOverlay.mainTableScrollableElement, i = this.topOverlay.mainTableScrollableElement, o = e.target;
    this.keyPressed && (i !== n && o !== n && !e.target.contains(i) || r !== n && o !== n && !e.target.contains(r)) || this.syncScrollPositions(e);
  }
  /**
   * Wheel listener for cloned overlays.
   *
   * @param {Event} event The mouse event object.
   * @param {boolean} preventDefault If `true`, the `preventDefault` will be called on event object.
   */
  onCloneWheel(e, n) {
    const {
      rootWindow: r
    } = this.domBindings, i = this.inlineStartOverlay.mainTableScrollableElement, o = this.topOverlay.mainTableScrollableElement, s = e.target, a = o !== r && s !== r && !s.contains(o), l = i !== r && s !== r && !s.contains(i);
    if (this.keyPressed && (a || l))
      return;
    const u = this.translateMouseWheelToScroll(e);
    (n || this.scrollableElement !== r && u) && e.preventDefault();
  }
  /**
   * Key down listener.
   *
   * @param {Event} event The keyboard event object.
   */
  onKeyDown(e) {
    this.keyPressed = ql(e.keyCode, "ARROW_UP|ARROW_RIGHT|ARROW_DOWN|ARROW_LEFT");
  }
  /**
   * Key up listener.
   */
  onKeyUp() {
    this.keyPressed = !1;
  }
  /**
   * Translate wheel event into scroll event and sync scroll overlays position.
   *
   * @private
   * @param {Event} event The mouse event object.
   * @returns {boolean}
   */
  translateMouseWheelToScroll(e) {
    let n = isNaN(e.deltaY) ? -1 * e.wheelDeltaY : e.deltaY, r = isNaN(e.deltaX) ? -1 * e.wheelDeltaX : e.deltaX;
    e.deltaMode === 1 && (r += r * this.browserLineHeight, n += n * this.browserLineHeight);
    const i = this.scrollVertically(n), o = this.scrollHorizontally(r);
    return i || o;
  }
  /**
   * Scrolls main scrollable element horizontally.
   *
   * @param {number} delta Relative value to scroll.
   * @returns {boolean}
   */
  scrollVertically(e) {
    const n = this.scrollableElement.scrollTop;
    return this.scrollableElement.scrollTop += e, n !== this.scrollableElement.scrollTop;
  }
  /**
   * Scrolls main scrollable element horizontally.
   *
   * @param {number} delta Relative value to scroll.
   * @returns {boolean}
   */
  scrollHorizontally(e) {
    const n = this.scrollableElement.scrollLeft;
    return this.scrollableElement.scrollLeft += e, n !== this.scrollableElement.scrollLeft;
  }
  /**
   * Synchronize scroll position between master table and overlay table.
   *
   * @private
   */
  syncScrollPositions() {
    if (this.destroyed)
      return;
    const {
      rootWindow: e
    } = this.domBindings, n = this.topOverlay.clone.wtTable.holder, r = this.inlineStartOverlay.clone.wtTable.holder, [i, o] = [this.scrollableElement.scrollLeft, this.scrollableElement.scrollTop];
    if (this.horizontalScrolling = n.scrollLeft !== i || this.lastScrollX !== e.scrollX, this.verticalScrolling = r.scrollTop !== o || this.lastScrollY !== e.scrollY, this.lastScrollX = e.scrollX, this.lastScrollY = e.scrollY, this.horizontalScrolling) {
      n.scrollLeft = i;
      const s = this.bottomOverlay.needFullRender ? this.bottomOverlay.clone.wtTable.holder : null;
      s && (s.scrollLeft = i);
    }
    this.verticalScrolling && (r.scrollTop = o), this.refreshAll();
  }
  /**
   * Synchronize overlay scrollbars with the master scrollbar.
   */
  syncScrollWithMaster() {
    const e = this.topOverlay.mainTableScrollableElement, {
      scrollLeft: n,
      scrollTop: r
    } = e;
    this.topOverlay.needFullRender && (this.topOverlay.clone.wtTable.holder.scrollLeft = n), this.bottomOverlay.needFullRender && (this.bottomOverlay.clone.wtTable.holder.scrollLeft = n), this.inlineStartOverlay.needFullRender && (this.inlineStartOverlay.clone.wtTable.holder.scrollTop = r);
  }
  /**
   * Update the main scrollable elements for all the overlays.
   */
  updateMainScrollableElements() {
    this.deregisterListeners(), this.inlineStartOverlay.updateMainScrollableElement(), this.topOverlay.updateMainScrollableElement(), this.bottomOverlay.needFullRender && this.bottomOverlay.updateMainScrollableElement();
    const {
      wtTable: e
    } = this, {
      rootWindow: n
    } = this.domBindings;
    n.getComputedStyle(e.wtRootElement.parentNode).getPropertyValue("overflow") === "hidden" ? this.scrollableElement = e.holder : this.scrollableElement = xc(e.TABLE), this.registerListeners();
  }
  /**
   *
   */
  destroy() {
    this.resizeObserver.disconnect(), this.eventManager.destroy(), this.topOverlay.destroy(), this.bottomOverlay.clone && this.bottomOverlay.destroy(), this.inlineStartOverlay.destroy(), this.topInlineStartCornerOverlay && this.topInlineStartCornerOverlay.destroy(), this.bottomInlineStartCornerOverlay && this.bottomInlineStartCornerOverlay.clone && this.bottomInlineStartCornerOverlay.destroy(), this.destroyed = !0;
  }
  /**
   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
   *                                   the data. It will only work if Table.draw() does not force
   *                                   rendering anyway.
   */
  refresh() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    this.updateLastSpreaderSize() && this.adjustElementsSize(), this.bottomOverlay.clone && this.bottomOverlay.refresh(e), this.inlineStartOverlay.refresh(e), this.topOverlay.refresh(e), this.topInlineStartCornerOverlay && this.topInlineStartCornerOverlay.refresh(e), this.bottomInlineStartCornerOverlay && this.bottomInlineStartCornerOverlay.clone && this.bottomInlineStartCornerOverlay.refresh(e);
  }
  /**
   * Update the last cached spreader size with the current size.
   *
   * @returns {boolean} `true` if the lastSpreaderSize cache was updated, `false` otherwise.
   */
  updateLastSpreaderSize() {
    const e = this.wtTable.spreader, n = e.clientWidth, r = e.clientHeight, i = n !== this.spreaderLastSize.width || r !== this.spreaderLastSize.height;
    return i && (this.spreaderLastSize.width = n, this.spreaderLastSize.height = r), i;
  }
  /**
   * Adjust overlays elements size and master table size.
   *
   * @param {boolean} [force=false] When `true`, it adjust the DOM nodes sizes for all overlays.
   */
  adjustElementsSize() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const {
      wtViewport: n
    } = this.wot, {
      wtTable: r
    } = this, i = this.wtSettings.getSetting("totalColumns"), o = this.wtSettings.getSetting("totalRows"), s = n.getRowHeaderWidth(), a = n.getColumnHeaderHeight(), l = r.hider.style;
    if (l.width = `${s + this.inlineStartOverlay.sumCellSizes(0, i)}px`, l.height = `${a + this.topOverlay.sumCellSizes(0, o) + 1}px`, this.scrollbarSize > 0) {
      const {
        scrollHeight: u,
        scrollWidth: c
      } = r.wtRootElement, {
        scrollHeight: d,
        scrollWidth: g
      } = r.holder;
      this.hasScrollbarRight = u < d, this.hasScrollbarBottom = c < g, this.hasScrollbarRight && r.hider.scrollWidth + this.scrollbarSize > c ? this.hasScrollbarBottom = !0 : this.hasScrollbarBottom && r.hider.scrollHeight + this.scrollbarSize > u && (this.hasScrollbarRight = !0);
    }
    this.topOverlay.adjustElementsSize(e), this.inlineStartOverlay.adjustElementsSize(e), this.bottomOverlay.adjustElementsSize(e);
  }
  /**
   *
   */
  applyToDOM() {
    this.wtTable.isVisible() && (this.topOverlay.applyToDOM(), this.bottomOverlay.clone && this.bottomOverlay.applyToDOM(), this.inlineStartOverlay.applyToDOM());
  }
  /**
   * Get the parent overlay of the provided element.
   *
   * @param {HTMLElement} element An element to process.
   * @returns {object|null}
   */
  getParentOverlay(e) {
    if (!e)
      return null;
    const n = [this.topOverlay, this.inlineStartOverlay, this.bottomOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];
    let r = null;
    return H(n, (i) => {
      i && i.clone && i.clone.wtTable.TABLE.contains(e) && (r = i.clone);
    }), r;
  }
  /**
   * Synchronize the class names between the main overlay table and the tables on the other overlays.
   *
   */
  syncOverlayTableClassNames() {
    const e = this.wtTable.TABLE, n = [this.topOverlay, this.inlineStartOverlay, this.bottomOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];
    H(n, (r) => {
      r && (r.clone.wtTable.TABLE.className = e.className);
    });
  }
}
const D3 = H3;
function iE(t, e, n) {
  return e = N3(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function N3(t) {
  var e = L3(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function L3(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class $3 {
  /**
   * @param {SettingsPure} settings The user defined settings.
   */
  constructor(e) {
    iE(this, "settings", {}), iE(this, "defaults", Object.freeze(this.getDefaults())), Ze(this.defaults, (n, r) => {
      if (e[r] !== void 0)
        this.settings[r] = e[r];
      else {
        if (n === void 0)
          throw new Error(`A required setting "${r}" was not provided`);
        this.settings[r] = n;
      }
    });
  }
  /**
   * Generate defaults for a settings.
   * Void 0 means it is required, null means it can be empty.
   *
   * @private
   * @returns {SettingsPure}
   */
  getDefaults() {
    return {
      facade: void 0,
      table: void 0,
      // Determines whether the Walkontable instance is used as dataset viewer. When its instance is used as
      // a context menu, autocomplete list, etc, the returned value is `false`.
      isDataViewInstance: !0,
      // presentation mode
      externalRowCalculator: !1,
      stretchH: "none",
      // values: all, last, none
      currentRowClassName: null,
      currentColumnClassName: null,
      preventOverflow() {
        return !1;
      },
      preventWheel: !1,
      // data source
      data: void 0,
      freezeOverlays: !1,
      // Number of renderable columns for the left overlay.
      fixedColumnsStart: 0,
      // Number of renderable rows for the top overlay.
      fixedRowsTop: 0,
      // Number of renderable rows for the bottom overlay.
      fixedRowsBottom: 0,
      // Enable the inline start overlay when conditions are met (left for LTR and right for RTL document mode).
      shouldRenderInlineStartOverlay: () => this.getSetting("fixedColumnsStart") > 0 || this.getSetting("rowHeaders").length > 0,
      // Enable the top overlay when conditions are met.
      shouldRenderTopOverlay: () => this.getSetting("fixedRowsTop") > 0 || this.getSetting("columnHeaders").length > 0,
      // Enable the bottom overlay when conditions are met.
      shouldRenderBottomOverlay: () => this.getSetting("fixedRowsBottom") > 0,
      minSpareRows: 0,
      // this must be array of functions: [function (row, TH) {}]
      rowHeaders() {
        return [];
      },
      // this must be array of functions: [function (column, TH) {}]
      columnHeaders() {
        return [];
      },
      totalRows: void 0,
      totalColumns: void 0,
      cellRenderer: (e, n, r) => {
        const i = this.getSetting("data", e, n);
        Ts(r, i ?? "");
      },
      // columnWidth: 50,
      columnWidth() {
      },
      rowHeight() {
      },
      defaultRowHeight: 23,
      defaultColumnWidth: 50,
      selections: null,
      hideBorderOnMouseDownOver: !1,
      viewportRowCalculatorOverride: null,
      viewportColumnCalculatorOverride: null,
      // callbacks
      onCellMouseDown: null,
      onCellContextMenu: null,
      onCellMouseOver: null,
      onCellMouseOut: null,
      onCellMouseUp: null,
      // onCellMouseOut: null,
      onCellDblClick: null,
      onCellCornerMouseDown: null,
      onCellCornerDblClick: null,
      beforeDraw: null,
      onDraw: null,
      onBeforeRemoveCellClassNames: null,
      onAfterDrawSelection: null,
      onBeforeDrawBorders: null,
      // viewport scroll hooks
      onBeforeViewportScrollHorizontally: (e) => e,
      onBeforeViewportScrollVertically: (e) => e,
      // native scroll hooks
      onScrollHorizontally: null,
      onScrollVertically: null,
      //
      onBeforeTouchScroll: null,
      onAfterMomentumScroll: null,
      onBeforeStretchingColumnWidth: (e) => e,
      onModifyRowHeaderWidth: null,
      onModifyGetCellCoords: null,
      onBeforeHighlightingRowHeader: (e) => e,
      onBeforeHighlightingColumnHeader: (e) => e,
      onWindowResize: null,
      onContainerElementResize: null,
      renderAllRows: !1,
      groups: !1,
      rowHeaderWidth: null,
      columnHeaderHeight: null,
      headerClassName: null,
      rtlMode: !1,
      ariaTags: !0
    };
  }
  /**
   * Update settings.
   *
   * @param {object|string} settings The singular settings to update or if passed as object to merge with.
   * @param {*} value The value to set if the first argument is passed as string.
   * @returns {Settings}
   */
  update(e, n) {
    return n === void 0 ? Ze(e, (r, i) => {
      this.settings[i] = r;
    }) : this.settings[e] = n, this;
  }
  /**
   * Get setting by name.
   *
   * @param {$Keys<SettingsPure>} key The settings key to retrieve.
   * @param {*} [param1] Additional parameter passed to the options defined as function.
   * @param {*} [param2] Additional parameter passed to the options defined as function.
   * @param {*} [param3] Additional parameter passed to the options defined as function.
   * @param {*} [param4] Additional parameter passed to the options defined as function.
   * @returns {*}
   */
  getSetting(e, n, r, i, o) {
    return typeof this.settings[e] == "function" ? this.settings[e](n, r, i, o) : n !== void 0 && Array.isArray(this.settings[e]) ? this.settings[e][n] : this.settings[e];
  }
  /**
   * Get a setting value without any evaluation.
   *
   * @param {string} key The settings key to retrieve.
   * @returns {*}
   */
  getSettingPure(e) {
    return this.settings[e];
  }
  /**
   * Checks if setting exists.
   *
   * @param {boolean} key The settings key to check.
   * @returns {boolean}
   */
  has(e) {
    return !!this.settings[e];
  }
}
class KS extends Zl {
  /**
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   */
  constructor(e, n, r, i) {
    super(e, n, r, i, "master");
  }
  alignOverlaysWithTrimmingContainer() {
    const e = va(this.wtRootElement), {
      rootWindow: n
    } = this.domBindings;
    if (e === n)
      this.wtSettings.getSetting("preventOverflow") || (this.holder.style.overflow = "visible", this.wtRootElement.style.overflow = "visible");
    else {
      const r = e.parentElement, i = Wl(e, "height", n), o = Wl(e, "overflow", n), s = this.holder.style, {
        scrollWidth: a,
        scrollHeight: l
      } = e;
      let u = e.offsetWidth, c = e.offsetHeight;
      if (r && ["auto", "hidden", "scroll"].includes(o)) {
        const g = e.cloneNode(!1);
        g.style.overflow = "auto", g.style.position = "absolute", e.nextElementSibling ? r.insertBefore(g, e.nextElementSibling) : r.appendChild(g);
        const p = parseInt(No(g, n).height, 10);
        r.removeChild(g), p === 0 && (c = 0);
      }
      c = Math.min(c, l), s.height = i === "auto" ? "auto" : `${c}px`, u = Math.min(u, a), s.width = `${u}px`, s.overflow = "", this.hasTableHeight = s.height === "auto" ? !0 : c > 0, this.hasTableWidth = u > 0;
    }
    this.isTableVisible = _s(this.TABLE);
  }
  markOversizedColumnHeaders() {
    const {
      wtSettings: e
    } = this, {
      wtViewport: n
    } = this.dataAccessObject, r = "master", o = e.getSetting("columnHeaders").length;
    if (o && !n.hasOversizedColumnHeadersMarked[r]) {
      const a = e.getSetting("rowHeaders").length, l = this.getRenderedColumnsCount();
      for (let u = 0; u < o; u++)
        for (let c = -1 * a; c < l; c++)
          this.markIfOversizedColumnHeader(c);
      n.hasOversizedColumnHeadersMarked[r] = !0;
    }
  }
}
_t(KS, ex);
_t(KS, FS);
const k3 = KS;
class F3 {
  /**
   * @param {ViewportDao} dataAccessObject The Walkontable instance.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {EventManager} eventManager The instance event manager.
   * @param {Table} wtTable The table.
   */
  constructor(e, n, r, i, o) {
    this.dataAccessObject = e, this.wot = e.wot, this.instance = this.wot, this.domBindings = n, this.wtSettings = r, this.wtTable = o, this.oversizedRows = [], this.oversizedColumnHeaders = [], this.hasOversizedColumnHeadersMarked = {}, this.clientHeight = 0, this.containerWidth = NaN, this.rowHeaderWidth = NaN, this.rowsVisibleCalculator = null, this.columnsVisibleCalculator = null, this.eventManager = i, this.eventManager.addEventListener(this.domBindings.rootWindow, "resize", () => {
      this.clientHeight = this.getWorkspaceHeight();
    });
  }
  /**
   * @returns {number}
   */
  getWorkspaceHeight() {
    const e = this.domBindings.rootDocument, n = this.dataAccessObject.topOverlayTrimmingContainer;
    let r = 0;
    return n === this.domBindings.rootWindow ? r = e.documentElement.clientHeight : r = Bt(n) > 0 && n.clientHeight > 0 ? n.clientHeight : 1 / 0, r;
  }
  getWorkspaceWidth() {
    const {
      wtSettings: e
    } = this, {
      rootDocument: n,
      rootWindow: r
    } = this.domBindings, i = this.dataAccessObject.inlineStartOverlayTrimmingContainer, o = n.documentElement.offsetWidth, s = e.getSetting("totalColumns"), a = e.getSetting("preventOverflow"), l = e.getSetting("rtlMode"), u = this.wtTable.TABLE.getBoundingClientRect(), c = l ? u.right - o : u.left, d = o - c;
    let g, p;
    if (a)
      return yt(this.wtTable.wtRootElement);
    if (e.getSetting("freezeOverlays") ? g = Math.min(d, o) : g = Math.min(this.getContainerFillWidth(), d, o), i === r && s > 0 && this.sumColumnWidths(0, s - 1) > g)
      return n.documentElement.clientWidth;
    if (i !== r && (p = Wl(this.dataAccessObject.inlineStartOverlayTrimmingContainer, "overflow", r), p === "scroll" || p === "hidden" || p === "auto"))
      return Math.max(g, i.clientWidth);
    const C = e.getSetting("stretchH");
    return C === "none" || !C ? Math.max(g, yt(this.wtTable.TABLE)) : g;
  }
  /**
   * Checks if viewport has vertical scroll.
   *
   * @returns {boolean}
   */
  hasVerticalScroll() {
    return this.wtTable.hider.offsetHeight > this.getWorkspaceHeight();
  }
  /**
   * Checks if viewport has horizontal scroll.
   *
   * @returns {boolean}
   */
  hasHorizontalScroll() {
    return this.wtTable.hider.offsetWidth > this.getWorkspaceWidth();
  }
  /**
   * @param {number} from The visual column index from the width sum is start calculated.
   * @param {number} length The length of the column to traverse.
   * @returns {number}
   */
  sumColumnWidths(e, n) {
    let r = 0, i = e;
    for (; i < n; )
      r += this.wtTable.getColumnWidth(i), i += 1;
    return r;
  }
  /**
   * @returns {number}
   */
  getContainerFillWidth() {
    if (this.containerWidth)
      return this.containerWidth;
    const e = this.wtTable.holder, n = this.domBindings.rootDocument.createElement("div");
    n.style.width = "100%", n.style.height = "1px", e.appendChild(n);
    const r = n.offsetWidth;
    return this.containerWidth = r, e.removeChild(n), r;
  }
  /**
   * @returns {number}
   */
  getWorkspaceOffset() {
    return an(this.wtTable.TABLE);
  }
  /**
   * @returns {number}
   */
  getColumnHeaderHeight() {
    return this.wtSettings.getSetting("columnHeaders").length ? isNaN(this.columnHeaderHeight) && (this.columnHeaderHeight = Bt(this.wtTable.THEAD)) : this.columnHeaderHeight = 0, this.columnHeaderHeight;
  }
  /**
   * @returns {number}
   */
  getViewportHeight() {
    let e = this.getWorkspaceHeight();
    if (e === 1 / 0)
      return e;
    const n = this.getColumnHeaderHeight();
    return n > 0 && (e -= n), e;
  }
  /**
   * @returns {number}
   */
  getRowHeaderWidth() {
    const e = this.wtSettings.getSetting("rowHeaderWidth"), n = this.wtSettings.getSetting("rowHeaders");
    if (e) {
      this.rowHeaderWidth = 0;
      for (let r = 0, i = n.length; r < i; r++)
        this.rowHeaderWidth += e[r] || e;
    }
    if (isNaN(this.rowHeaderWidth))
      if (n.length) {
        let r = this.wtTable.TABLE.querySelector("TH");
        this.rowHeaderWidth = 0;
        for (let i = 0, o = n.length; i < o; i++)
          r ? (this.rowHeaderWidth += yt(r), r = r.nextSibling) : this.rowHeaderWidth += 50;
      } else
        this.rowHeaderWidth = 0;
    return this.rowHeaderWidth = this.wtSettings.getSetting("onModifyRowHeaderWidth", this.rowHeaderWidth) || this.rowHeaderWidth, this.rowHeaderWidth;
  }
  /**
   * @returns {number}
   */
  getViewportWidth() {
    const e = this.getWorkspaceWidth();
    if (e === 1 / 0)
      return e;
    const n = this.getRowHeaderWidth();
    return n > 0 ? e - n : e;
  }
  /**
   * Creates:
   * - rowsRenderCalculator (before draw, to qualify rows for rendering)
   * - rowsVisibleCalculator (after draw, to measure which rows are actually visible).
   *
   * @param {number} calculationType The render type ID, which determines for what type of
   *                                 calculation calculator is created.
   * @returns {ViewportRowsCalculator}
   */
  createRowsCalculator() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ha;
    const {
      wtSettings: n,
      wtTable: r
    } = this;
    let i, o, s;
    this.rowHeaderWidth = NaN, n.getSetting("renderAllRows") && e === ha ? i = 1 / 0 : i = this.getViewportHeight();
    let a = this.dataAccessObject.topScrollPosition - this.dataAccessObject.topParentOffset;
    const l = n.getSetting("fixedRowsTop"), u = n.getSetting("fixedRowsBottom"), c = n.getSetting("totalRows");
    return l && a >= 0 && (s = this.dataAccessObject.topOverlay.sumCellSizes(0, l), a += s, i -= s), u && this.dataAccessObject.bottomOverlay.clone && (s = this.dataAccessObject.bottomOverlay.sumCellSizes(c - u, c), i -= s), r.holder.clientHeight === r.holder.offsetHeight ? o = 0 : o = wn(this.domBindings.rootDocument), new VP({
      viewportHeight: i,
      scrollOffset: a,
      totalRows: n.getSetting("totalRows"),
      rowHeightFn: (d) => r.getRowHeight(d),
      overrideFn: n.getSettingPure("viewportRowCalculatorOverride"),
      calculationType: e,
      horizontalScrollbarHeight: o
    });
  }
  /**
   * Creates:
   * - columnsRenderCalculator (before draw, to qualify columns for rendering)
   * - columnsVisibleCalculator (after draw, to measure which columns are actually visible).
   *
   * @param {number} calculationType The render type ID, which determines for what type of
   *                                 calculation calculator is created.
   * @returns {ViewportColumnsCalculator}
   */
  createColumnsCalculator() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ha;
    const {
      wtSettings: n,
      wtTable: r
    } = this;
    let i = this.getViewportWidth(), o = Math.abs(this.dataAccessObject.inlineStartScrollPosition) - this.dataAccessObject.inlineStartParentOffset;
    this.columnHeaderHeight = NaN;
    const s = n.getSetting("fixedColumnsStart");
    if (s && o >= 0) {
      const a = this.dataAccessObject.inlineStartOverlay.sumCellSizes(0, s);
      o += a, i -= a;
    }
    return r.holder.clientWidth !== r.holder.offsetWidth && (i -= wn(this.domBindings.rootDocument)), new PS({
      viewportWidth: i,
      scrollOffset: o,
      totalColumns: n.getSetting("totalColumns"),
      columnWidthFn: (a) => r.getColumnWidth(a),
      overrideFn: n.getSettingPure("viewportColumnCalculatorOverride"),
      calculationType: e,
      stretchMode: n.getSetting("stretchH"),
      stretchingColumnWidthFn: (a, l) => n.getSetting("onBeforeStretchingColumnWidth", a, l),
      inlineStartOffset: this.dataAccessObject.inlineStartParentOffset
    });
  }
  /**
   * Creates rowsRenderCalculator and columnsRenderCalculator (before draw, to determine what rows and
   * cols should be rendered).
   *
   * @param {boolean} fastDraw If `true`, will try to avoid full redraw and only update the border positions.
   *                           If `false` or `undefined`, will perform a full redraw.
   * @returns {boolean} The fastDraw value, possibly modified.
   */
  createRenderCalculators() {
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    if (n) {
      const r = this.createRowsCalculator(Ln), i = this.createColumnsCalculator(Ln);
      this.areAllProposedVisibleRowsAlreadyRendered(r) && this.areAllProposedVisibleColumnsAlreadyRendered(i) || (n = !1);
    }
    return n || (this.rowsRenderCalculator = this.createRowsCalculator(ha), this.columnsRenderCalculator = this.createColumnsCalculator(ha)), this.rowsVisibleCalculator = null, this.columnsVisibleCalculator = null, n;
  }
  /**
   * Creates rowsVisibleCalculator and columnsVisibleCalculator (after draw, to determine what are
   * the actually fully visible rows and columns).
   */
  createVisibleCalculators() {
    this.rowsVisibleCalculator = this.createRowsCalculator(Ln), this.columnsVisibleCalculator = this.createColumnsCalculator(Ln);
  }
  /**
   * Returns information whether proposedRowsVisibleCalculator viewport
   * is contained inside rows rendered in previous draw (cached in rowsRenderCalculator).
   *
   * @param {ViewportRowsCalculator} proposedRowsVisibleCalculator The instance of the viewport calculator to compare with.
   * @returns {boolean} Returns `true` if all proposed visible rows are already rendered (meaning: redraw is not needed).
   *                    Returns `false` if at least one proposed visible row is not already rendered (meaning: redraw is needed).
   */
  areAllProposedVisibleRowsAlreadyRendered(e) {
    if (!this.rowsVisibleCalculator)
      return !1;
    const {
      startRow: n,
      endRow: r,
      isVisibleInTrimmingContainer: i
    } = e;
    if (n === null && r === null)
      return !i;
    const {
      startRow: o,
      endRow: s
    } = this.rowsRenderCalculator;
    return n < o || n === o && n > 0 ? !1 : !(r > s || r === s && r < this.wtSettings.getSetting("totalRows") - 1);
  }
  /**
   * Returns information whether proposedColumnsVisibleCalculator viewport
   * is contained inside column rendered in previous draw (cached in columnsRenderCalculator).
   *
   * @param {ViewportRowsCalculator} proposedColumnsVisibleCalculator The instance of the viewport calculator to compare with.
   * @returns {boolean} Returns `true` if all proposed visible columns are already rendered (meaning: redraw is not needed).
   *                    Returns `false` if at least one proposed visible column is not already rendered (meaning: redraw is needed).
   */
  areAllProposedVisibleColumnsAlreadyRendered(e) {
    if (!this.columnsVisibleCalculator)
      return !1;
    const {
      startColumn: n,
      endColumn: r,
      isVisibleInTrimmingContainer: i
    } = e;
    if (n === null && r === null)
      return !i;
    const {
      startColumn: o,
      endColumn: s
    } = this.columnsRenderCalculator;
    return n < o || n === o && n > 0 ? !1 : !(r > s || r === s && r < this.wtSettings.getSetting("totalColumns") - 1);
  }
  /**
   * Resets values in keys of the hasOversizedColumnHeadersMarked object after updateSettings.
   */
  resetHasOversizedColumnHeadersMarked() {
    Ze(this.hasOversizedColumnHeadersMarked, (e, n, r) => {
      r[n] = void 0;
    });
  }
}
const W3 = F3;
class V3 extends kS {
  /**
   * @param {HTMLTableElement} table Main table.
   * @param {SettingsPure} settings The Walkontable settings.
   */
  constructor(e, n) {
    super(e, new $3(n));
    const r = this.wtSettings.getSetting("facade", this);
    this.wtTable = new k3(this.getTableDao(), r, this.domBindings, this.wtSettings), this.wtViewport = new W3(this.getViewportDao(), this.domBindings, this.wtSettings, this.eventManager, this.wtTable), this.selectionManager = new C3(this.wtSettings.getSetting("selections")), this.wtEvent = new zP(r, this.domBindings, this.wtSettings, this.eventManager, this.wtTable, this.selectionManager), this.wtOverlays = new D3(
      // TODO create DAO and remove reference to the Walkontable instance.
      this,
      r,
      this.domBindings,
      this.wtSettings,
      this.eventManager,
      this.wtTable
    ), this.exportSettingsAsClassNames(), this.findOriginalHeaders();
  }
  /**
   * Export settings as class names added to the parent element of the table.
   */
  exportSettingsAsClassNames() {
    const e = {
      rowHeaders: "htRowHeaders",
      columnHeaders: "htColumnHeaders"
    }, n = [], r = [];
    Ze(e, (i, o) => {
      this.wtSettings.getSetting(o).length && r.push(i), n.push(i);
    }), Ye(this.wtTable.wtRootElement.parentNode, n), ce(this.wtTable.wtRootElement.parentNode, r);
  }
  /**
   * @returns {ViewportDao}
   */
  getViewportDao() {
    const e = this;
    return {
      get wot() {
        return e;
      },
      get topOverlayTrimmingContainer() {
        return e.wtOverlays.topOverlay.trimmingContainer;
      },
      get inlineStartOverlayTrimmingContainer() {
        return e.wtOverlays.inlineStartOverlay.trimmingContainer;
      },
      get topScrollPosition() {
        return e.wtOverlays.topOverlay.getScrollPosition();
      },
      get topParentOffset() {
        return e.wtOverlays.topOverlay.getTableParentOffset();
      },
      get inlineStartScrollPosition() {
        return e.wtOverlays.inlineStartOverlay.getScrollPosition();
      },
      get inlineStartParentOffset() {
        return e.wtOverlays.inlineStartOverlay.getTableParentOffset();
      },
      get topOverlay() {
        return e.wtOverlays.topOverlay;
      },
      get inlineStartOverlay() {
        return e.wtOverlays.inlineStartOverlay;
      },
      get bottomOverlay() {
        return e.wtOverlays.bottomOverlay;
      }
    };
  }
}
class XS {
  /**
   * @param {SettingsPure|Walkontable} settingsOrInstance The Walkontable settings.
   */
  constructor(e) {
    e instanceof kS ? this._wot = e : this._initFromSettings(e);
  }
  _initFromSettings(e) {
    e.facade = (n) => {
      const r = new XS(n);
      return () => r;
    }, this._wot = new V3(e.table, e);
  }
  get guid() {
    return this._wot.guid;
  }
  get rootDocument() {
    return this._wot.domBindings.rootDocument;
  }
  get rootWindow() {
    return this._wot.domBindings.rootWindow;
  }
  get wtSettings() {
    return this._wot.wtSettings;
  }
  get cloneSource() {
    return this._wot.cloneSource;
  }
  get cloneOverlay() {
    return this._wot.cloneOverlay;
  }
  get selectionManager() {
    return this._wot.selectionManager;
  }
  get wtViewport() {
    return this._wot.wtViewport;
  }
  get wtOverlays() {
    return this._wot.wtOverlays;
  }
  get wtTable() {
    return this._wot.wtTable;
  }
  get wtEvent() {
    return this._wot.wtEvent;
  }
  get wtScroll() {
    return this._wot.wtScroll;
  }
  get drawn() {
    return this._wot.drawn;
  }
  set drawn(e) {
    this._wot.drawn = e;
  }
  get drawInterrupted() {
    return this._wot.drawInterrupted;
  }
  set drawInterrupted(e) {
    this._wot.drawInterrupted = e;
  }
  get lastMouseOver() {
    return this._wot.lastMouseOver;
  }
  set lastMouseOver(e) {
    this._wot.lastMouseOver = e;
  }
  get momentumScrolling() {
    return this._wot.momentumScrolling;
  }
  set momentumScrolling(e) {
    this._wot.momentumScrolling = e;
  }
  get touchApplied() {
    return this._wot.touchApplied;
  }
  set touchApplied(e) {
    this._wot.touchApplied = e;
  }
  get domBindings() {
    return this._wot.domBindings;
  }
  get eventListeners() {
    return this._wot.eventListeners;
  }
  set eventListeners(e) {
    this._wot.eventListeners = e;
  }
  get eventManager() {
    return this._wot.eventManager;
  }
  createCellCoords(e, n) {
    return this._wot.createCellCoords(e, n);
  }
  createCellRange(e, n, r) {
    return this._wot.createCellRange(e, n, r);
  }
  draw() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    return this._wot.draw(e), this;
  }
  getCell(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    return this._wot.getCell(e, n);
  }
  scrollViewport(e, n, r, i, o) {
    return this._wot.scrollViewport(e, n, r, i, o);
  }
  scrollViewportHorizontally(e, n, r) {
    return this._wot.scrollViewportHorizontally(e, n, r);
  }
  scrollViewportVertically(e, n, r) {
    return this._wot.scrollViewportVertically(e, n, r);
  }
  getViewport() {
    return this._wot.getViewport();
  }
  getOverlayName() {
    return this._wot.cloneOverlay ? this._wot.cloneOverlay.type : "master";
  }
  exportSettingsAsClassNames() {
    return this._wot.exportSettingsAsClassNames();
  }
  update(e, n) {
    return this._wot.wtSettings.update(e, n), this;
  }
  getSetting(e, n, r, i, o) {
    return this._wot.wtSettings.getSetting(e, n, r, i, o);
  }
  hasSetting(e) {
    return this._wot.wtSettings.hasSetting(e);
  }
  destroy() {
    this._wot.destroy();
  }
}
function oE(t) {
  let {
    isShiftKey: e,
    isLeftClick: n,
    isRightClick: r,
    coords: i,
    selection: o,
    controller: s,
    cellCoordsFactory: a
  } = t;
  const l = o.isSelected() ? o.getSelectedRange().current() : null, u = o.isSelectedByCorner(), c = o.isSelectedByRowHeader();
  if (e && l)
    i.row >= 0 && i.col >= 0 && !s.cell ? o.setRangeEnd(i) : (u || c) && i.row >= 0 && i.col >= 0 && !s.cell ? o.setRangeEnd(a(i.row, i.col)) : u && i.row < 0 && !s.column ? o.setRangeEnd(a(l.to.row, i.col)) : c && i.col < 0 && !s.row ? o.setRangeEnd(a(i.row, l.to.col)) : (!u && !c && i.col < 0 || u && i.col < 0) && !s.row ? o.selectRows(Math.max(l.from.row, 0), i.row, i.col) : (!u && !c && i.row < 0 || c && i.row < 0) && !s.column && o.selectColumns(Math.max(l.from.col, 0), i.col, i.row);
  else {
    const d = !o.inInSelection(i), g = n || r && d;
    i.row < 0 && i.col >= 0 && !s.column ? g && o.selectColumns(i.col, i.col, i.row) : i.col < 0 && i.row >= 0 && !s.row ? g && o.selectRows(i.row, i.row, i.col) : i.col >= 0 && i.row >= 0 && !s.cell ? g && o.setRangeStart(i) : i.col < 0 && i.row < 0 && o.selectAll(!0, !0, {
      disableHeadersHighlight: !0,
      focusPosition: {
        row: 0,
        col: 0
      }
    });
  }
}
function B3(t) {
  let {
    isLeftClick: e,
    coords: n,
    selection: r,
    controller: i,
    cellCoordsFactory: o
  } = t;
  if (!e)
    return;
  const s = r.isSelectedByRowHeader(), a = r.isSelectedByColumnHeader(), l = r.tableProps.countCols(), u = r.tableProps.countRows();
  a && !i.column ? r.setRangeEnd(o(u - 1, n.col)) : s && !i.row ? r.setRangeEnd(o(n.row, l - 1)) : i.cell || r.setRangeEnd(n);
}
const U3 = /* @__PURE__ */ new Map([["mousedown", oE], ["mouseover", B3], ["touchstart", oE]]);
function sE(t, e) {
  let {
    coords: n,
    selection: r,
    controller: i,
    cellCoordsFactory: o
  } = e;
  U3.get(t.type)({
    coords: n,
    selection: r,
    controller: i,
    cellCoordsFactory: o,
    isShiftKey: t.shiftKey,
    isLeftClick: Vg(t) || t.type === "touchstart",
    isRightClick: Ms(t)
  });
}
const cx = /* @__PURE__ */ new WeakMap(), qS = Symbol("rootInstance");
function Y3(t) {
  cx.set(t, !0);
}
function G3(t) {
  return t === qS;
}
function ef(t) {
  return cx.has(t);
}
function aE(t, e) {
  hx(t, e), e.add(t);
}
function $s(t, e, n) {
  hx(t, e), e.set(t, n);
}
function hx(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Ko(t, e, n) {
  return e = z3(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function z3(t) {
  var e = j3(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function j3(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function BC(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function yn(t, e) {
  var n = dx(t, e, "get");
  return K3(t, n);
}
function K3(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function xr(t, e, n) {
  var r = dx(t, e, "set");
  return X3(t, r, n), n;
}
function dx(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function X3(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var hp = /* @__PURE__ */ new WeakMap(), kh = /* @__PURE__ */ new WeakMap(), Fh = /* @__PURE__ */ new WeakMap(), oo = /* @__PURE__ */ new WeakMap(), ei = /* @__PURE__ */ new WeakMap(), dp = /* @__PURE__ */ new WeakMap(), fp = /* @__PURE__ */ new WeakMap(), UC = /* @__PURE__ */ new WeakSet(), lE = /* @__PURE__ */ new WeakSet();
class q3 {
  /**
   * @param {Hanstontable} hotInstance Instance of {@link Handsontable}.
   */
  constructor(e) {
    aE(this, lE), aE(this, UC), Ko(this, "hot", void 0), Ko(this, "eventManager", void 0), Ko(this, "settings", void 0), Ko(this, "THEAD", void 0), Ko(this, "TBODY", void 0), Ko(this, "_wt", void 0), Ko(this, "activeWt", void 0), $s(this, hp, {
      writable: !0,
      value: 0
    }), $s(this, kh, {
      writable: !0,
      value: 0
    }), Ko(this, "postponedAdjustElementsSize", !1), $s(this, Fh, {
      writable: !0,
      value: !1
    }), $s(this, oo, {
      writable: !0,
      value: void 0
    }), $s(this, ei, {
      writable: !0,
      value: void 0
    }), $s(this, dp, {
      writable: !0,
      value: 0
    }), $s(this, fp, {
      writable: !0,
      value: 0
    }), this.hot = e, this.eventManager = new _r(this.hot), this.settings = this.hot.getSettings(), this.createElements(), this.registerEvents(), this.initializeWalkontable();
  }
  /**
   * Renders WalkontableUI.
   */
  render() {
    this.hot.isRenderSuspended() || (this.hot.runHooks("beforeRender", this.hot.forceFullRender), this.postponedAdjustElementsSize && (this.postponedAdjustElementsSize = !1, this.adjustElementsSize(!0)), this._wt.draw(!this.hot.forceFullRender), this.hot.runHooks("afterRender", this.hot.forceFullRender), this.hot.forceFullRender = !1, this.hot.renderCall = !1);
  }
  /**
   * Adjust overlays elements size and master table size.
   *
   * @param {boolean} [force=false] When `true`, it adjust the DOM nodes sizes for all overlays.
   */
  adjustElementsSize() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    this.hot.isRenderSuspended() ? this.postponedAdjustElementsSize = !0 : this._wt.wtOverlays.adjustElementsSize(e);
  }
  /**
   * Returns td object given coordinates.
   *
   * @param {CellCoords} coords Renderable cell coordinates.
   * @param {boolean} topmost Indicates whether the cell should be calculated from the topmost.
   * @returns {HTMLTableCellElement|null}
   */
  getCellAtCoords(e, n) {
    const r = this._wt.getCell(e, n);
    return r < 0 ? null : r;
  }
  /**
   * Scroll viewport to a cell.
   *
   * @param {CellCoords} coords Renderable cell coordinates.
   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right side of the table.
   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom side of the table.
   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left side of the table.
   * @returns {boolean}
   */
  scrollViewport(e, n, r, i, o) {
    return this._wt.scrollViewport(e, n, r, i, o);
  }
  /**
   * Scroll viewport to a column.
   *
   * @param {number} column Renderable column index.
   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right side of the table.
   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left side of the table.
   * @returns {boolean}
   */
  scrollViewportHorizontally(e, n, r) {
    return this._wt.scrollViewportHorizontally(e, n, r);
  }
  /**
   * Scroll viewport to a row.
   *
   * @param {number} row Renderable row index.
   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom side of the table.
   * @returns {boolean}
   */
  scrollViewportVertically(e, n, r) {
    return this._wt.scrollViewportVertically(e, n, r);
  }
  /**
   * Prepares DOMElements and adds correct className to the root element.
   *
   * @private
   */
  createElements() {
    const {
      rootElement: e,
      rootDocument: n
    } = this.hot, r = e.getAttribute("style");
    r && e.setAttribute("data-originalstyle", r), ce(e, "handsontable"), xr(this, ei, n.createElement("TABLE")), ce(yn(this, ei), "htCore"), this.hot.getSettings().tableClassName && ce(yn(this, ei), this.hot.getSettings().tableClassName), this.settings.ariaTags && (Ne(yn(this, ei), [Gi()]), Ne(e, [LY(), jI(-1), Dg(this.hot.countCols()), XY()])), this.THEAD = n.createElement("THEAD"), yn(this, ei).appendChild(this.THEAD), this.TBODY = n.createElement("TBODY"), yn(this, ei).appendChild(this.TBODY), this.hot.table = yn(this, ei), this.hot.container.insertBefore(yn(this, ei), this.hot.container.firstChild);
  }
  /**
   * Attaches necessary listeners.
   *
   * @private
   */
  registerEvents() {
    const {
      rootElement: e,
      rootDocument: n,
      selection: r
    } = this.hot, i = n.documentElement;
    this.eventManager.addEventListener(e, "mousedown", (o) => {
      if (xr(this, Fh, !0), !this.isTextSelectionAllowed(o.target)) {
        const {
          rootWindow: s
        } = this.hot;
        IC(s), o.preventDefault(), s.focus();
      }
    }), this.eventManager.addEventListener(e, "mouseup", () => {
      xr(this, Fh, !1);
    }), this.eventManager.addEventListener(e, "mousemove", (o) => {
      yn(this, Fh) && !this.isTextSelectionAllowed(o.target) && (this.settings.fragmentSelection && IC(this.hot.rootWindow), o.preventDefault());
    }), this.eventManager.addEventListener(i, "keyup", (o) => {
      r.isInProgress() && !o.shiftKey && r.finish();
    }), this.eventManager.addEventListener(i, "mouseup", (o) => {
      r.isInProgress() && Vg(o) && r.finish(), xr(this, oo, !1);
      const s = $g(n.activeElement);
      s && (s || !r.isSelected() && !r.isSelectedByAnyHeader() && !e.contains(o.target) && !Ms(o)) && this.hot.unlisten();
    }), this.eventManager.addEventListener(i, "contextmenu", (o) => {
      r.isInProgress() && Ms(o) && (r.finish(), xr(this, oo, !1));
    }), this.eventManager.addEventListener(i, "touchend", () => {
      r.isInProgress() && r.finish(), xr(this, oo, !1);
    }), this.eventManager.addEventListener(i, "mousedown", (o) => {
      const s = o.target, a = o.x || o.clientX, l = o.y || o.clientY;
      let u = o.target;
      if (yn(this, oo) || !e || !this.hot.view)
        return;
      const {
        holder: c
      } = this.hot.view._wt.wtTable;
      if (u === c) {
        const g = wn(n);
        if (n.elementFromPoint(a + g, l) !== c || n.elementFromPoint(a, l + g) !== c)
          return;
      } else
        for (; u !== i; ) {
          if (u === null) {
            if (o.isTargetWebComponent)
              break;
            return;
          }
          if (u === e)
            return;
          u = u.parentNode;
        }
      (typeof this.settings.outsideClickDeselects == "function" ? this.settings.outsideClickDeselects(s) : this.settings.outsideClickDeselects) ? this.hot.deselectCell() : this.hot.destroyEditor(!1, !1);
    }), this.eventManager.addEventListener(yn(this, ei), "selectstart", (o) => {
      this.settings.fragmentSelection || Pf(o.target) || o.preventDefault();
    });
  }
  /**
   * Translate renderable cell coordinates to visual coordinates.
   *
   * @param {CellCoords} coords The cell coordinates.
   * @returns {CellCoords}
   */
  translateFromRenderableToVisualCoords(e) {
    let {
      row: n,
      col: r
    } = e;
    return this.hot._createCellCoords(...this.translateFromRenderableToVisualIndex(n, r));
  }
  /**
   * Translate renderable row and column indexes to visual row and column indexes.
   *
   * @param {number} renderableRow Renderable row index.
   * @param {number} renderableColumn Renderable columnIndex.
   * @returns {number[]}
   */
  translateFromRenderableToVisualIndex(e, n) {
    let r = e >= 0 ? this.hot.rowIndexMapper.getVisualFromRenderableIndex(e) : e, i = n >= 0 ? this.hot.columnIndexMapper.getVisualFromRenderableIndex(n) : n;
    return r === null && (r = e), i === null && (i = n), [r, i];
  }
  /**
   * Returns the number of renderable indexes.
   *
   * @private
   * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.
   * @param {number} maxElements Maximum number of elements (rows or columns).
   *
   * @returns {number|*}
   */
  countRenderableIndexes(e, n) {
    const r = Math.min(e.getNotTrimmedIndexesLength(), n), i = e.getNearestNotHiddenIndex(r - 1, -1);
    return i === null ? 0 : e.getRenderableFromVisualIndex(i) + 1;
  }
  /**
   * Returns the number of renderable columns.
   *
   * @returns {number}
   */
  countRenderableColumns() {
    return this.countRenderableIndexes(this.hot.columnIndexMapper, this.settings.maxCols);
  }
  /**
   * Returns the number of renderable rows.
   *
   * @returns {number}
   */
  countRenderableRows() {
    return this.countRenderableIndexes(this.hot.rowIndexMapper, this.settings.maxRows);
  }
  /**
   * Returns number of not hidden row indexes counting from the passed starting index.
   * The counting direction can be controlled by `incrementBy` argument.
   *
   * @param {number} visualIndex The visual index from which the counting begins.
   * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.
   * @returns {number}
   */
  countNotHiddenRowIndexes(e, n) {
    return this.countNotHiddenIndexes(e, n, this.hot.rowIndexMapper, this.countRenderableRows());
  }
  /**
   * Returns number of not hidden column indexes counting from the passed starting index.
   * The counting direction can be controlled by `incrementBy` argument.
   *
   * @param {number} visualIndex The visual index from which the counting begins.
   * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.
   * @returns {number}
   */
  countNotHiddenColumnIndexes(e, n) {
    return this.countNotHiddenIndexes(e, n, this.hot.columnIndexMapper, this.countRenderableColumns());
  }
  /**
   * Returns number of not hidden indexes counting from the passed starting index.
   * The counting direction can be controlled by `incrementBy` argument.
   *
   * @param {number} visualIndex The visual index from which the counting begins.
   * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.
   * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.
   * @param {number} renderableIndexesCount Total count of renderable indexes for specific axis.
   * @returns {number}
   */
  countNotHiddenIndexes(e, n, r, i) {
    if (isNaN(e) || e < 0)
      return 0;
    const o = r.getNearestNotHiddenIndex(e, n), s = r.getRenderableFromVisualIndex(o);
    if (!Number.isInteger(s))
      return 0;
    let a = 0;
    return n < 0 ? a = s + 1 : n > 0 && (a = i - s), a;
  }
  /**
   * The function returns the number of not hidden column indexes that fit between the first and
   * last fixed column in the left (or right in RTL mode) overlay.
   *
   * @returns {number}
   */
  countNotHiddenFixedColumnsStart() {
    const e = this.hot.countCols(), n = Math.min(parseInt(this.settings.fixedColumnsStart, 10), e) - 1;
    return this.countNotHiddenColumnIndexes(n, -1);
  }
  /**
   * The function returns the number of not hidden row indexes that fit between the first and
   * last fixed row in the top overlay.
   *
   * @returns {number}
   */
  countNotHiddenFixedRowsTop() {
    const e = this.hot.countRows(), n = Math.min(parseInt(this.settings.fixedRowsTop, 10), e) - 1;
    return this.countNotHiddenRowIndexes(n, -1);
  }
  /**
   * The function returns the number of not hidden row indexes that fit between the first and
   * last fixed row in the bottom overlay.
   *
   * @returns {number}
   */
  countNotHiddenFixedRowsBottom() {
    const e = this.hot.countRows(), n = Math.max(e - parseInt(this.settings.fixedRowsBottom, 10), 0);
    return this.countNotHiddenRowIndexes(n, 1);
  }
  /**
   * The function returns the number of renderable column indexes within the passed range of the visual indexes.
   *
   * @param {number} columnStart The column visual start index.
   * @param {number} columnEnd The column visual end index.
   * @returns {number}
   */
  countRenderableColumnsInRange(e, n) {
    let r = 0;
    for (let i = e; i <= n; i++)
      this.hot.columnIndexMapper.getRenderableFromVisualIndex(i) !== null && (r += 1);
    return r;
  }
  /**
   * The function returns the number of renderable row indexes within the passed range of the visual indexes.
   *
   * @param {number} rowStart The row visual start index.
   * @param {number} rowEnd The row visual end index.
   * @returns {number}
   */
  countRenderableRowsInRange(e, n) {
    let r = 0;
    for (let i = e; i <= n; i++)
      this.hot.rowIndexMapper.getRenderableFromVisualIndex(i) !== null && (r += 1);
    return r;
  }
  /**
   * Checks if at least one cell than belongs to the main table is not covered by the top, left or
   * bottom overlay.
   *
   * @returns {boolean}
   */
  isMainTableNotFullyCoveredByOverlays() {
    const e = this.countNotHiddenFixedRowsTop() + this.countNotHiddenFixedRowsBottom(), n = this.countNotHiddenFixedColumnsStart();
    return this.hot.countRenderedRows() > e && this.hot.countRenderedCols() > n;
  }
  /**
   * Defines default configuration and initializes WalkOnTable instance.
   *
   * @private
   */
  initializeWalkontable() {
    const e = {
      ariaTags: this.settings.ariaTags,
      rtlMode: this.hot.isRtl(),
      externalRowCalculator: this.hot.getPlugin("autoRowSize") && this.hot.getPlugin("autoRowSize").isEnabled(),
      table: yn(this, ei),
      isDataViewInstance: () => ef(this.hot),
      preventOverflow: () => this.settings.preventOverflow,
      preventWheel: () => this.settings.preventWheel,
      stretchH: () => this.settings.stretchH,
      data: (o, s) => this.hot.getDataAtCell(...this.translateFromRenderableToVisualIndex(o, s)),
      totalRows: () => this.countRenderableRows(),
      totalColumns: () => this.countRenderableColumns(),
      // Number of renderable columns for the left overlay.
      fixedColumnsStart: () => this.countNotHiddenFixedColumnsStart(),
      // Number of renderable rows for the top overlay.
      fixedRowsTop: () => this.countNotHiddenFixedRowsTop(),
      // Number of renderable rows for the bottom overlay.
      fixedRowsBottom: () => this.countNotHiddenFixedRowsBottom(),
      // Enable the inline start overlay when conditions are met.
      shouldRenderInlineStartOverlay: () => this.settings.fixedColumnsStart > 0 || e.rowHeaders().length > 0,
      // Enable the top overlay when conditions are met.
      shouldRenderTopOverlay: () => this.settings.fixedRowsTop > 0 || e.columnHeaders().length > 0,
      // Enable the bottom overlay when conditions are met.
      shouldRenderBottomOverlay: () => this.settings.fixedRowsBottom > 0,
      minSpareRows: () => this.settings.minSpareRows,
      renderAllRows: this.settings.renderAllRows,
      rowHeaders: () => {
        const o = [];
        return this.hot.hasRowHeaders() && o.push((s, a) => {
          const l = s >= 0 ? this.hot.rowIndexMapper.getVisualFromRenderableIndex(s) : s;
          this.appendRowHeader(l, a);
        }), this.hot.runHooks("afterGetRowHeaderRenderers", o), xr(this, kh, o.length), this.hot.getSettings().ariaTags && BC(this, UC, fx).call(this) === this.hot.countCols() && BC(this, lE, Z3).call(this, yn(this, kh)), o;
      },
      columnHeaders: () => {
        const o = [];
        return this.hot.hasColHeaders() && o.push((s, a) => {
          const l = s >= 0 ? this.hot.columnIndexMapper.getVisualFromRenderableIndex(s) : s;
          this.appendColHeader(l, a);
        }), this.hot.runHooks("afterGetColumnHeaderRenderers", o), xr(this, hp, o.length), o;
      },
      columnWidth: (o) => {
        const s = this.hot.columnIndexMapper.getVisualFromRenderableIndex(o);
        return this.hot.getColWidth(s === null ? o : s);
      },
      rowHeight: (o) => {
        const s = this.hot.rowIndexMapper.getVisualFromRenderableIndex(o);
        return this.hot.getRowHeight(s === null ? o : s);
      },
      cellRenderer: (o, s, a) => {
        const [l, u] = this.translateFromRenderableToVisualIndex(o, s), c = this.hot.runHooks("modifyGetCellCoords", l, u);
        let d = l, g = u;
        Array.isArray(c) && ([d, g] = c);
        const p = this.hot.getCellMeta(d, g), C = this.hot.colToProp(g);
        let E = this.hot.getDataAtRowProp(d, C);
        this.hot.hasHook("beforeValueRender") && (E = this.hot.runHooks("beforeValueRender", E, p)), this.hot.runHooks("beforeRenderer", a, l, u, C, E, p), this.hot.getCellRenderer(p)(this.hot, a, l, u, C, E, p), this.hot.runHooks("afterRenderer", a, l, u, C, E, p);
      },
      selections: this.hot.selection.highlight,
      hideBorderOnMouseDownOver: () => this.settings.fragmentSelection,
      onWindowResize: () => {
        this.hot && !this.hot.isDestroyed && this.hot.refreshDimensions();
      },
      onContainerElementResize: () => {
        this.hot && !this.hot.isDestroyed && _s(this.hot.rootElement) && this.hot.refreshDimensions();
      },
      onCellMouseDown: (o, s, a, l) => {
        const u = this.translateFromRenderableToVisualCoords(s), c = {
          row: !1,
          column: !1,
          cell: !1
        };
        this.hot.listen(), this.activeWt = l, xr(this, oo, !0), this.hot.runHooks("beforeOnCellMouseDown", o, u, a, c), !us(o) && (sE(o, {
          coords: u,
          selection: this.hot.selection,
          controller: c,
          cellCoordsFactory: (d, g) => this.hot._createCellCoords(d, g)
        }), this.hot.runHooks("afterOnCellMouseDown", o, u, a), this.activeWt = this._wt);
      },
      onCellContextMenu: (o, s, a, l) => {
        const u = this.translateFromRenderableToVisualCoords(s);
        this.activeWt = l, xr(this, oo, !1), this.hot.selection.isInProgress() && this.hot.selection.finish(), this.hot.runHooks("beforeOnCellContextMenu", o, u, a), !us(o) && (this.hot.runHooks("afterOnCellContextMenu", o, u, a), this.activeWt = this._wt);
      },
      onCellMouseOut: (o, s, a, l) => {
        const u = this.translateFromRenderableToVisualCoords(s);
        this.activeWt = l, this.hot.runHooks("beforeOnCellMouseOut", o, u, a), !us(o) && (this.hot.runHooks("afterOnCellMouseOut", o, u, a), this.activeWt = this._wt);
      },
      onCellMouseOver: (o, s, a, l) => {
        const u = this.translateFromRenderableToVisualCoords(s), c = {
          row: !1,
          column: !1,
          cell: !1
        };
        this.activeWt = l, this.hot.runHooks("beforeOnCellMouseOver", o, u, a, c), !us(o) && (yn(this, oo) && sE(o, {
          coords: u,
          selection: this.hot.selection,
          controller: c,
          cellCoordsFactory: (d, g) => this.hot._createCellCoords(d, g)
        }), this.hot.runHooks("afterOnCellMouseOver", o, u, a), this.activeWt = this._wt);
      },
      onCellMouseUp: (o, s, a, l) => {
        const u = this.translateFromRenderableToVisualCoords(s);
        this.activeWt = l, this.hot.runHooks("beforeOnCellMouseUp", o, u, a), !(us(o) || this.hot.isDestroyed) && (this.hot.runHooks("afterOnCellMouseUp", o, u, a), this.activeWt = this._wt);
      },
      onCellCornerMouseDown: (o) => {
        o.preventDefault(), this.hot.runHooks("afterOnCellCornerMouseDown", o);
      },
      onCellCornerDblClick: (o) => {
        o.preventDefault(), this.hot.runHooks("afterOnCellCornerDblClick", o);
      },
      beforeDraw: (o, s) => this.beforeRender(o, s),
      onDraw: (o) => this.afterRender(o),
      onBeforeViewportScrollVertically: (o) => {
        const s = this.hot.rowIndexMapper, a = o < 0;
        let l = o;
        return !a && (l = s.getVisualFromRenderableIndex(o), l === null) ? o : (l = this.hot.runHooks("beforeViewportScrollVertically", l), this.hot.runHooks("beforeViewportScroll"), a ? l : s.getRenderableFromVisualIndex(l));
      },
      onBeforeViewportScrollHorizontally: (o) => {
        const s = this.hot.columnIndexMapper, a = o < 0;
        let l = o;
        return !a && (l = s.getVisualFromRenderableIndex(o), l === null) ? o : (l = this.hot.runHooks("beforeViewportScrollHorizontally", l), this.hot.runHooks("beforeViewportScroll"), a ? l : s.getRenderableFromVisualIndex(l));
      },
      onScrollVertically: () => {
        this.hot.runHooks("afterScrollVertically"), this.hot.runHooks("afterScroll");
      },
      onScrollHorizontally: () => {
        this.hot.runHooks("afterScrollHorizontally"), this.hot.runHooks("afterScroll");
      },
      onBeforeRemoveCellClassNames: () => this.hot.runHooks("beforeRemoveCellClassNames"),
      onBeforeHighlightingRowHeader: (o, s, a) => {
        const l = this.hot.rowIndexMapper, u = o < 0;
        let c = o;
        u || (c = l.getVisualFromRenderableIndex(o));
        const d = this.hot.runHooks("beforeHighlightingRowHeader", c, s, a);
        return u ? d : l.getRenderableFromVisualIndex(l.getNearestNotHiddenIndex(d, 1));
      },
      onBeforeHighlightingColumnHeader: (o, s, a) => {
        const l = this.hot.columnIndexMapper, u = o < 0;
        let c = o;
        u || (c = l.getVisualFromRenderableIndex(o));
        const d = this.hot.runHooks("beforeHighlightingColumnHeader", c, s, a);
        return u ? d : l.getRenderableFromVisualIndex(l.getNearestNotHiddenIndex(d, 1));
      },
      onAfterDrawSelection: (o, s, a) => {
        let l;
        const [u, c] = this.translateFromRenderableToVisualIndex(o, s), d = this.hot.selection.getSelectedRange();
        if (d.size() > 0) {
          const p = d.peekByIndex(a ?? 0);
          l = [p.from.row, p.from.col, p.to.row, p.to.col];
        }
        return this.hot.runHooks("afterDrawSelection", u, c, l, a);
      },
      onBeforeDrawBorders: (o, s) => {
        const [a, l, u, c] = o, d = [this.hot.rowIndexMapper.getVisualFromRenderableIndex(a), this.hot.columnIndexMapper.getVisualFromRenderableIndex(l), this.hot.rowIndexMapper.getVisualFromRenderableIndex(u), this.hot.columnIndexMapper.getVisualFromRenderableIndex(c)];
        return this.hot.runHooks("beforeDrawBorders", d, s);
      },
      onBeforeTouchScroll: () => this.hot.runHooks("beforeTouchScroll"),
      onAfterMomentumScroll: () => this.hot.runHooks("afterMomentumScroll"),
      onBeforeStretchingColumnWidth: (o, s) => {
        const a = this.hot.columnIndexMapper.getVisualFromRenderableIndex(s);
        return this.hot.runHooks("beforeStretchingColumnWidth", o, a);
      },
      onModifyRowHeaderWidth: (o) => this.hot.runHooks("modifyRowHeaderWidth", o),
      onModifyGetCellCoords: (o, s, a) => {
        const l = this.hot.rowIndexMapper, u = this.hot.columnIndexMapper, c = s >= 0 ? u.getVisualFromRenderableIndex(s) : s, d = o >= 0 ? l.getVisualFromRenderableIndex(o) : o, g = this.hot.runHooks("modifyGetCellCoords", d, c, a);
        if (Array.isArray(g)) {
          const [p, C, E, I] = g;
          return [p >= 0 ? l.getRenderableFromVisualIndex(l.getNearestNotHiddenIndex(p, 1)) : p, C >= 0 ? u.getRenderableFromVisualIndex(u.getNearestNotHiddenIndex(C, 1)) : C, E >= 0 ? l.getRenderableFromVisualIndex(l.getNearestNotHiddenIndex(E, -1)) : E, I >= 0 ? u.getRenderableFromVisualIndex(u.getNearestNotHiddenIndex(I, -1)) : I];
        }
      },
      viewportRowCalculatorOverride: (o) => {
        let s = this.settings.viewportRowRenderingOffset;
        if (s === "auto" && this.settings.fixedRowsTop && (s = 10), s > 0 || s === "auto") {
          const a = this.countRenderableRows(), l = o.startRow, u = o.endRow;
          if (typeof s == "number")
            o.startRow = Math.max(l - s, 0), o.endRow = Math.min(u + s, a - 1);
          else if (s === "auto") {
            const c = Math.ceil(u / a * 12);
            o.startRow = Math.max(l - c, 0), o.endRow = Math.min(u + c, a - 1);
          }
        }
        this.hot.runHooks("afterViewportRowCalculatorOverride", o);
      },
      viewportColumnCalculatorOverride: (o) => {
        let s = this.settings.viewportColumnRenderingOffset;
        if (s === "auto" && this.settings.fixedColumnsStart && (s = 10), s > 0 || s === "auto") {
          const a = this.countRenderableColumns(), l = o.startColumn, u = o.endColumn;
          if (typeof s == "number" && (o.startColumn = Math.max(l - s, 0), o.endColumn = Math.min(u + s, a - 1)), s === "auto") {
            const c = Math.ceil(u / a * 6);
            o.startColumn = Math.max(l - c, 0), o.endColumn = Math.min(u + c, a - 1);
          }
        }
        this.hot.runHooks("afterViewportColumnCalculatorOverride", o);
      },
      rowHeaderWidth: () => this.settings.rowHeaderWidth,
      columnHeaderHeight: () => {
        const o = this.hot.runHooks("modifyColumnHeaderHeight");
        return this.settings.columnHeaderHeight || o;
      }
    };
    this.hot.runHooks("beforeInitWalkontable", e), this._wt = new XS(e), this.activeWt = this._wt;
    const n = this._wt.wtTable.spreader, {
      width: r,
      height: i
    } = this.hot.rootElement.getBoundingClientRect();
    this.setLastSize(r, i), this.eventManager.addEventListener(n, "mousedown", (o) => {
      o.target === n && o.which === 3 && o.stopPropagation();
    }), this.eventManager.addEventListener(n, "contextmenu", (o) => {
      o.target === n && o.which === 3 && o.stopPropagation();
    }), this.eventManager.addEventListener(this.hot.rootDocument.documentElement, "click", () => {
      this.settings.observeDOMVisibility && this._wt.drawInterrupted && (this.hot.forceFullRender = !0, this.render());
    });
  }
  /**
   * Checks if it's possible to create text selection in element.
   *
   * @private
   * @param {HTMLElement} el The element to check.
   * @returns {boolean}
   */
  isTextSelectionAllowed(e) {
    if (Pf(e))
      return !0;
    const n = vs(e, this.hot.view._wt.wtTable.spreader);
    return !!(this.settings.fragmentSelection === !0 && n || this.settings.fragmentSelection === "cell" && this.isSelectedOnlyCell() && n || !this.settings.fragmentSelection && this.isCellEdited() && this.isSelectedOnlyCell());
  }
  /**
   * Checks if user's been called mousedown.
   *
   * @private
   * @returns {boolean}
   */
  isMouseDown() {
    return yn(this, oo);
  }
  /**
   * Check if selected only one cell.
   *
   * @private
   * @returns {boolean}
   */
  isSelectedOnlyCell() {
    var e, n;
    return (e = (n = this.hot.getSelectedRangeLast()) === null || n === void 0 ? void 0 : n.isSingleCell()) !== null && e !== void 0 ? e : !1;
  }
  /**
   * Checks if active cell is editing.
   *
   * @private
   * @returns {boolean}
   */
  isCellEdited() {
    const e = this.hot.getActiveEditor();
    return e && e.isOpened();
  }
  /**
   * `beforeDraw` callback.
   *
   * @private
   * @param {boolean} force If `true` rendering was triggered by a change of settings or data or `false` if
   *                        rendering was triggered by scrolling or moving selection.
   * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering
   *                            cycle will be skipped.
   */
  beforeRender(e, n) {
    e && this.hot.runHooks("beforeViewRender", this.hot.forceFullRender, n);
  }
  /**
   * `afterRender` callback.
   *
   * @private
   * @param {boolean} force If `true` rendering was triggered by a change of settings or data or `false` if
   *                        rendering was triggered by scrolling or moving selection.
   */
  afterRender(e) {
    e && this.hot.runHooks("afterViewRender", this.hot.forceFullRender);
  }
  /**
   * Append row header to a TH element.
   *
   * @private
   * @param {number} visualRowIndex The visual row index.
   * @param {HTMLTableHeaderCellElement} TH The table header element.
   */
  appendRowHeader(e, n) {
    if (n.firstChild) {
      const r = n.firstChild;
      if (!Ve(r, "relative")) {
        vi(n), this.appendRowHeader(e, n);
        return;
      }
      this.updateCellHeader(r.querySelector(".rowHeader"), e, this.hot.getRowHeader);
    } else {
      const {
        rootDocument: r,
        getRowHeader: i
      } = this.hot, o = r.createElement("div"), s = r.createElement("span");
      o.className = "relative", s.className = "rowHeader", this.updateCellHeader(s, e, i), o.appendChild(s), n.appendChild(o);
    }
    this.hot.runHooks("afterGetRowHeader", e, n);
  }
  /**
   * Append column header to a TH element.
   *
   * @private
   * @param {number} visualColumnIndex Visual column index.
   * @param {HTMLTableCellElement} TH The table header element.
   * @param {Function} [label] The function that returns the header label.
   * @param {number} [headerLevel=0] The index of header level counting from the top (positive
   *                                 values counting from 0 to N).
   */
  appendColHeader(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hot.getColHeader, i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    if (n.firstChild) {
      const o = n.firstChild;
      Ve(o, "relative") ? this.updateCellHeader(o.querySelector(".colHeader"), e, r, i) : (vi(n), this.appendColHeader(e, n, r, i));
    } else {
      const {
        rootDocument: o
      } = this.hot, s = o.createElement("div"), a = o.createElement("span");
      s.className = "relative", a.className = "colHeader", this.settings.ariaTags && (Ne(s, ...Gi()), Ne(a, ...Gi())), this.updateCellHeader(a, e, r, i), s.appendChild(a), n.appendChild(s);
    }
    this.hot.runHooks("afterGetColHeader", e, n, i);
  }
  /**
   * Updates header cell content.
   *
   * @private
   * @param {HTMLElement} element Element to update.
   * @param {number} index Row index or column index.
   * @param {Function} content Function which should be returns content for this cell.
   * @param {number} [headerLevel=0] The index of header level counting from the top (positive
   *                                 values counting from 0 to N).
   */
  updateCellHeader(e, n, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, o = n;
    const s = this._wt.wtOverlays.getParentOverlay(e) || this._wt;
    e.parentNode && (Ve(e, "colHeader") ? o = s.wtTable.columnFilter.sourceToRendered(n) : Ve(e, "rowHeader") && (o = s.wtTable.rowFilter.sourceToRendered(n))), o > -1 ? Pa(e, r(n, i)) : (Ts(e, String.fromCharCode(160)), ce(e, "cornerHeader"));
  }
  /**
   * Given a element's left (or right in RTL mode) position relative to the viewport, returns maximum
   * element width until the right (or left) edge of the viewport (before scrollbar).
   *
   * @private
   * @param {number} inlineOffset The left (or right in RTL mode) offset.
   * @returns {number}
   */
  maximumVisibleElementWidth(e) {
    const r = this._wt.wtViewport.getWorkspaceWidth() - e;
    return r > 0 ? r : 0;
  }
  /**
   * Given a element's top position relative to the viewport, returns maximum element height until the bottom
   * edge of the viewport (before scrollbar).
   *
   * @private
   * @param {number} topOffset The top offset.
   * @returns {number}
   */
  maximumVisibleElementHeight(e) {
    const r = this._wt.wtViewport.getWorkspaceHeight() - e;
    return r > 0 ? r : 0;
  }
  /**
   * Sets new dimensions of the container.
   *
   * @param {number} width The table width.
   * @param {number} height The table height.
   */
  setLastSize(e, n) {
    xr(this, dp, e), xr(this, fp, n);
  }
  /**
   * Returns cached dimensions.
   *
   * @returns {object}
   */
  getLastSize() {
    return {
      width: yn(this, dp),
      height: yn(this, fp)
    };
  }
  /**
   * Returns the first fully visible row in the table viewport.
   *
   * @returns {number}
   */
  getFirstFullyVisibleRow() {
    return this.hot.rowIndexMapper.getVisualFromRenderableIndex(this.hot.view._wt.wtScroll.getFirstVisibleRow());
  }
  /**
   * Returns the last fully visible row in the table viewport.
   *
   * @returns {number}
   */
  getLastFullyVisibleRow() {
    return this.hot.rowIndexMapper.getVisualFromRenderableIndex(this.hot.view._wt.wtScroll.getLastVisibleRow());
  }
  /**
   * Returns the first fully visible column in the table viewport.
   *
   * @returns {number}
   */
  getFirstFullyVisibleColumn() {
    return this.hot.columnIndexMapper.getVisualFromRenderableIndex(this.hot.view._wt.wtScroll.getFirstVisibleColumn());
  }
  /**
   * Returns the last fully visible column in the table viewport.
   *
   * @returns {number}
   */
  getLastFullyVisibleColumn() {
    return this.hot.columnIndexMapper.getVisualFromRenderableIndex(this.hot.view._wt.wtScroll.getLastVisibleColumn());
  }
  /**
   * Returns the total count of the rendered column headers.
   *
   * @returns {number}
   */
  getColumnHeadersCount() {
    return yn(this, hp);
  }
  /**
   * Returns the total count of the rendered row headers.
   *
   * @returns {number}
   */
  getRowHeadersCount() {
    return yn(this, kh);
  }
  /**
   * Destroys internal WalkOnTable's instance. Detaches all of the bonded listeners.
   *
   * @private
   */
  destroy() {
    this._wt.destroy(), this.eventManager.destroy();
  }
}
function fx() {
  return parseInt(this.hot.rootElement.getAttribute(Dg()[0]), 10);
}
function Z3(t) {
  const e = BC(this, UC, fx).call(this) + t;
  Ne(this.hot.rootElement, ...Dg(e));
}
const Q3 = q3, gx = "ABCDEFGHIJKLMNOPQRSTUVWXYZ", YC = gx.length;
function Gg(t) {
  let e = t + 1, n = "", r;
  for (; e > 0; )
    r = (e - 1) % YC, n = String.fromCharCode(65 + r) + n, e = parseInt((e - r) / YC, 10);
  return n;
}
function J3(t) {
  let e = 0;
  if (t)
    for (let n = 0, r = t.length - 1; n < t.length; n += 1, r -= 1)
      e += YC ** r * (gx.indexOf(t[n]) + 1);
  return e -= 1, e;
}
function eX() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 100, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 4;
  const n = [];
  let r, i;
  for (r = 0; r < t; r++) {
    const o = [];
    for (i = 0; i < e; i++)
      o.push(Gg(i) + (r + 1));
    n.push(o);
  }
  return n;
}
function tX() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 100, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 4;
  const n = [];
  let r, i;
  for (r = 0; r < t; r++) {
    const o = {};
    for (i = 0; i < e; i++)
      o[`prop${i}`] = Gg(i) + (r + 1);
    n.push(o);
  }
  return n;
}
function nX(t, e) {
  const n = [];
  let r;
  for (let i = 0; i < t; i++) {
    r = [];
    for (let o = 0; o < e; o++)
      r.push("");
    n.push(r);
  }
  return n;
}
function ZS(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, n = t;
  const r = [];
  return (!Array.isArray(t) || !Array.isArray(t[0])) && (n = [t]), n.forEach((i, o) => {
    Array.isArray(i) ? i.forEach((s, a) => {
      r.push([o + e, a, s]);
    }) : Object.keys(i).forEach((s) => {
      r.push([o + e, s, i[s]]);
    });
  }), r;
}
function QS(t) {
  let e = 0;
  return Array.isArray(t) && (t[0] && Array.isArray(t[0]) ? e = t[0].length : t[0] && Xe(t[0]) && (e = Wg(t[0]))), e;
}
function mx(t) {
  return !!(Array.isArray(t) && t.length && t.every((e) => Array.isArray(e)));
}
function px(t) {
  return !!(Array.isArray(t) && t.length && t.every((e) => typeof e == "object" && !Array.isArray(e) && e !== null));
}
const rX = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  countFirstRowKeys: QS,
  createEmptySpreadsheetData: nX,
  createSpreadsheetData: eX,
  createSpreadsheetObjectData: tX,
  dataRowToChangesArray: ZS,
  isArrayOfArrays: mx,
  isArrayOfObjects: px,
  spreadsheetColumnIndex: J3,
  spreadsheetColumnLabel: Gg
}, Symbol.toStringTag, { value: "Module" }));
function Cu(t, e, n) {
  return e = iX(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function iX(t) {
  var e = oX(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function oX(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class sX {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    Cu(this, "hot", void 0), Cu(this, "data", void 0), Cu(this, "dataType", "array"), Cu(this, "colToProp", () => {
    }), Cu(this, "propToCol", () => {
    }), this.hot = e, this.data = n;
  }
  /**
   * Run the `modifyRowData` hook and return either the modified or the source data for the provided row.
   *
   * @private
   * @param {number} rowIndex Row index.
   * @returns {Array|object} Source or modified row of data.
   */
  modifyRowData(e) {
    let n;
    return this.hot.hasHook("modifyRowData") && (n = this.hot.runHooks("modifyRowData", e)), n !== void 0 && !Number.isInteger(n) ? n : this.data[e];
  }
  /**
   * Get all data.
   *
   * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided
   *                                  in another format.
   * @returns {Array}
   */
  getData() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    return !this.data || this.data.length === 0 ? this.data : this.getByRange(null, null, e);
  }
  /**
   * Set new data source.
   *
   * @param {Array} data The new data.
   */
  setData(e) {
    this.data = e;
  }
  /**
   * Returns array of column values from the data source. `column` is the index of the row in the data source.
   *
   * @param {number} column Visual column index.
   * @returns {Array}
   */
  getAtColumn(e) {
    const n = [];
    return H(this.data, (r, i) => {
      const o = this.getAtCell(i, e);
      n.push(o);
    }), n;
  }
  /**
   * Returns a single row of the data or a subset of its columns. If a column range or `toArray` arguments are provided, it
   * operates only on the columns declared by the `columns` setting or the data schema.
   *
   * @param {number} row Physical row index.
   * @param {number} [startColumn] Starting index for the column range (optional).
   * @param {number} [endColumn] Ending index for the column range (optional).
   * @param {boolean} [toArray=false] `true` if the returned value should be forced to be presented as an array.
   * @returns {Array|object}
   */
  getAtRow(e, n, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
    const o = n === void 0 && r === void 0;
    let s = null, a = null;
    if (s = this.modifyRowData(e), Array.isArray(s))
      a = [], o ? s.forEach((l, u) => {
        a[u] = this.getAtPhysicalCell(e, u, s);
      }) : xe(n, r, (l) => {
        a[l - n] = this.getAtPhysicalCell(e, l, s);
      });
    else if (Xe(s) || At(s))
      if (i ? a = [] : a = {}, !o || i) {
        const u = this.countFirstRowKeys() - 1;
        xe(0, u, (c) => {
          const d = this.colToProp(c);
          if (c >= (n || 0) && c <= (r || u) && !Number.isInteger(d)) {
            const g = this.getAtPhysicalCell(e, d, s);
            i ? a.push(g) : qd(a, d, g);
          }
        });
      } else
        Ze(s, (l, u) => {
          qd(a, u, this.getAtPhysicalCell(e, u, s));
        });
    return a;
  }
  /**
   * Set the provided value in the source data set at the provided coordinates.
   *
   * @param {number} row Physical row index.
   * @param {number|string} column Property name / physical column index.
   * @param {*} value The value to be set at the provided coordinates.
   */
  setAtCell(e, n, r) {
    if (!(e >= this.countRows() || n >= this.countFirstRowKeys())) {
      if (this.hot.hasHook("modifySourceData")) {
        const i = gi(r);
        this.hot.runHooks("modifySourceData", e, n, i, "set"), i.isTouched() && (r = i.value);
      }
      Number.isInteger(n) ? this.data[e][n] = r : qd(this.data[e], n, r);
    }
  }
  /**
   * Get data from the source data set using the physical indexes.
   *
   * @private
   * @param {number} row Physical row index.
   * @param {string|number|Function} column Physical column index / property / function.
   * @param {Array|object} dataRow A representation of a data row.
   * @returns {*} Value at the provided coordinates.
   */
  getAtPhysicalCell(e, n, r) {
    let i = null;
    if (r && (typeof n == "string" ? i = fP(r, n) : typeof n == "function" ? i = n(r) : i = r[n]), this.hot.hasHook("modifySourceData")) {
      const o = gi(i);
      this.hot.runHooks("modifySourceData", e, n, o, "get"), o.isTouched() && (i = o.value);
    }
    return i;
  }
  /**
   * Returns a single value from the data.
   *
   * @param {number} row Physical row index.
   * @param {number} columnOrProp Visual column index or property.
   * @returns {*}
   */
  getAtCell(e, n) {
    const r = this.modifyRowData(e);
    return this.getAtPhysicalCell(e, this.colToProp(n), r);
  }
  /**
   * Returns source data by passed range.
   *
   * @param {object} [start] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).
   * @param {object} [end] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).
   * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided
   *                                  in another format.
   * @returns {Array}
   */
  getByRange() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, i = !1, o = null, s = null, a = null, l = null;
    e === null || n === null ? (i = !0, o = 0, a = this.countRows() - 1) : (o = Math.min(e.row, n.row), s = Math.min(e.col, n.col), a = Math.max(e.row, n.row), l = Math.max(e.col, n.col));
    const u = [];
    return xe(o, a, (c) => {
      u.push(i ? this.getAtRow(c, void 0, void 0, r) : this.getAtRow(c, s, l, r));
    }), u;
  }
  /**
   * Count number of rows.
   *
   * @returns {number}
   */
  countRows() {
    if (this.hot.hasHook("modifySourceLength")) {
      const e = this.hot.runHooks("modifySourceLength");
      if (Number.isInteger(e))
        return e;
    }
    return this.data.length;
  }
  /**
   * Count number of columns.
   *
   * @returns {number}
   */
  countFirstRowKeys() {
    return QS(this.data);
  }
  /**
   * Destroy instance.
   */
  destroy() {
    this.data = null, this.hot = null;
  }
}
const aX = sX;
function uE(t, e, n) {
  return e = lX(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function lX(t) {
  var e = uX(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function uX(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class xa {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    uE(this, "indexedValues", []), uE(this, "initValueOrFn", void 0), this.initValueOrFn = e;
  }
  /**
   * Get full list of values for particular indexes.
   *
   * @returns {Array}
   */
  getValues() {
    return this.indexedValues;
  }
  /**
   * Get value for the particular index.
   *
   * @param {number} index Index for which value is got.
   * @returns {*}
   */
  getValueAtIndex(e) {
    const n = this.indexedValues;
    if (e < n.length)
      return n[e];
  }
  /**
   * Set new values for particular indexes.
   *
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @param {Array} values List of set values.
   */
  setValues(e) {
    this.indexedValues = e.slice(), this.runLocalHooks("change");
  }
  /**
   * Set new value for the particular index.
   *
   * @param {number} index The index.
   * @param {*} value The value to save.
   *
   * Note: Please keep in mind that it is not possible to set value beyond the map (not respecting already set
   * map's size). Please use the `setValues` method when you would like to extend the map.
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @returns {boolean}
   */
  setValueAtIndex(e, n) {
    return e < this.indexedValues.length ? (this.indexedValues[e] = n, this.runLocalHooks("change"), !0) : !1;
  }
  /**
   * Clear all values to the defaults.
   */
  clear() {
    this.setDefaultValues();
  }
  /**
   * Get length of the index map.
   *
   * @returns {number}
   */
  getLength() {
    return this.getValues().length;
  }
  /**
   * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.
   *
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @private
   * @param {number} [length] Length of list.
   */
  setDefaultValues() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.indexedValues.length;
    this.indexedValues.length = 0, At(this.initValueOrFn) ? xe(e - 1, (n) => this.indexedValues.push(this.initValueOrFn(n))) : xe(e - 1, () => this.indexedValues.push(this.initValueOrFn)), this.runLocalHooks("change");
  }
  /**
   * Initialize list with default values for particular indexes.
   *
   * @private
   * @param {number} length New length of indexed list.
   * @returns {IndexMap}
   */
  init(e) {
    return this.setDefaultValues(e), this.runLocalHooks("init"), this;
  }
  /**
   * Add values to the list.
   *
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @private
   */
  insert() {
    this.runLocalHooks("change");
  }
  /**
   * Remove values from the list.
   *
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @private
   */
  remove() {
    this.runLocalHooks("change");
  }
  /**
   * Destroys the Map instance.
   */
  destroy() {
    this.clearLocalHooks(), this.indexedValues = null, this.initValueOrFn = null;
  }
}
_t(xa, pr);
function JS(t, e, n, r) {
  const i = n.length ? n[0] : void 0;
  return [...t.slice(0, i), ...n.map((o, s) => At(r) ? r(o, s) : r), ...i === void 0 ? [] : t.slice(i)];
}
function ey(t, e) {
  return Tr(t, (n, r) => e.includes(r) === !1);
}
class Ps extends xa {
  /**
   * Add values to list and reorganize.
   *
   * @private
   * @param {number} insertionIndex Position inside the list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insert(e, n) {
    this.indexedValues = JS(this.indexedValues, e, n, this.initValueOrFn), super.insert(e, n);
  }
  /**
   * Remove values from the list and reorganize.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  remove(e) {
    this.indexedValues = ey(this.indexedValues, e), super.remove(e);
  }
}
class zg extends Ps {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    super(e);
  }
  /**
   * Get physical indexes which are hidden.
   *
   * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.
   *
   * @returns {Array}
   */
  getHiddenIndexes() {
    return nn(this.getValues(), (e, n, r) => (n && e.push(r), e), []);
  }
}
function ty(t, e, n) {
  return [...t.slice(0, e), ...n, ...t.slice(e)];
}
function Nc(t, e) {
  return Tr(t, (n) => e.includes(n) === !1);
}
function ny(t, e) {
  return qe(t, (n) => n - e.filter((r) => r < n).length);
}
function ry(t, e) {
  const n = e[0], r = e.length;
  return qe(t, (i) => i >= n ? i + r : i);
}
function cX(t, e, n) {
  return e = hX(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function hX(t) {
  var e = dX(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function dX(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class jg extends xa {
  constructor() {
    super(...arguments), cX(this, "orderOfIndexes", []);
  }
  /**
   * Get full list of ordered values for particular indexes.
   *
   * @returns {Array}
   */
  getValues() {
    return this.orderOfIndexes.map((e) => this.indexedValues[e]);
  }
  /**
   * Set new values for particular indexes. Entries are linked and stored in a certain order.
   *
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @param {Array} values List of set values.
   */
  setValues(e) {
    this.orderOfIndexes = [...Array(e.length).keys()], super.setValues(e);
  }
  /**
   * Set value at index and add it to the linked list of entries. Entries are stored in a certain order.
   *
   * Note: Value will be added at the end of the queue.
   *
   * @param {number} index The index.
   * @param {*} value The value to save.
   * @param {number} position Position to which entry will be added.
   *
   * @returns {boolean}
   */
  setValueAtIndex(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.orderOfIndexes.length;
    return e < this.indexedValues.length ? (this.indexedValues[e] = n, this.orderOfIndexes.includes(e) === !1 && this.orderOfIndexes.splice(r, 0, e), this.runLocalHooks("change"), !0) : !1;
  }
  /**
   * Clear value for particular index.
   *
   * @param {number} physicalIndex Physical index.
   */
  clearValue(e) {
    this.orderOfIndexes = Nc(this.orderOfIndexes, [e]), At(this.initValueOrFn) ? super.setValueAtIndex(e, this.initValueOrFn(e)) : super.setValueAtIndex(e, this.initValueOrFn);
  }
  /**
   * Get length of the index map.
   *
   * @returns {number}
   */
  getLength() {
    return this.orderOfIndexes.length;
  }
  /**
   * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.
   *
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @private
   * @param {number} [length] Length of list.
   */
  setDefaultValues() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.indexedValues.length;
    this.orderOfIndexes.length = 0, super.setDefaultValues(e);
  }
  /**
   * Add values to list and reorganize. It updates list of indexes related to ordered values.
   *
   * @private
   * @param {number} insertionIndex Position inside the list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insert(e, n) {
    this.indexedValues = JS(this.indexedValues, e, n, this.initValueOrFn), this.orderOfIndexes = ry(this.orderOfIndexes, n), super.insert(e, n);
  }
  /**
   * Remove values from the list and reorganize. It updates list of indexes related to ordered values.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  remove(e) {
    this.indexedValues = ey(this.indexedValues, e), this.orderOfIndexes = Nc(this.orderOfIndexes, e), this.orderOfIndexes = ny(this.orderOfIndexes, e), super.remove(e);
  }
  /**
   * Get every entry containing index and value, respecting order of indexes.
   *
   * @returns {Array}
   */
  getEntries() {
    return this.orderOfIndexes.map((e) => [e, this.getValueAtIndex(e)]);
  }
}
class oh extends Ps {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    super(e);
  }
  /**
   * Get physical indexes which are trimmed.
   *
   * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.
   *
   * @returns {Array}
   */
  getTrimmedIndexes() {
    return nn(this.getValues(), (e, n, r) => (n && e.push(r), e), []);
  }
}
const cE = /* @__PURE__ */ new Map([["indexesSequence", {
  getListWithInsertedItems: ty,
  getListWithRemovedItems: Nc
}], ["physicallyIndexed", {
  getListWithInsertedItems: JS,
  getListWithRemovedItems: ey
}]]), wx = (t) => {
  if (cE.has(t) === !1)
    throw new Error(`Alter strategy with ID '${t}' does not exist.`);
  return cE.get(t);
};
class Cx extends xa {
  constructor() {
    super((e) => e);
  }
  /**
   * Add values to list and reorganize.
   *
   * @private
   * @param {number} insertionIndex Position inside the list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insert(e, n) {
    const r = ry(this.indexedValues, n);
    this.indexedValues = ty(r, e, n), super.insert(e, n);
  }
  /**
   * Remove values from the list and reorganize.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  remove(e) {
    const n = Nc(this.indexedValues, e);
    this.indexedValues = ny(n, e), super.remove(e);
  }
}
const hE = /* @__PURE__ */ new Map([["hiding", zg], ["index", xa], ["linkedPhysicalIndexToValue", jg], ["physicalIndexToValue", Ps], ["trimming", oh]]);
function fX(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
  if (!hE.has(t))
    throw new Error(`The provided map type ("${t}") does not exist.`);
  return new (hE.get(t))(e);
}
function gX(t, e, n) {
  return e = mX(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function mX(t) {
  var e = pX(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function pX(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
let GC = 0;
class iy {
  constructor() {
    gX(this, "collection", /* @__PURE__ */ new Map());
  }
  /**
   * Register custom index map.
   *
   * @param {string} uniqueName Unique name of the index map.
   * @param {IndexMap} indexMap Index map containing miscellaneous (i.e. Meta data, indexes sequence), updated after remove and insert data actions.
   */
  register(e, n) {
    this.collection.has(e) === !1 && (this.collection.set(e, n), n.addLocalHook("change", () => this.runLocalHooks("change", n)), GC += 1);
  }
  /**
   * Unregister custom index map.
   *
   * @param {string} name Name of the index map.
   */
  unregister(e) {
    const n = this.collection.get(e);
    Re(n) && (n.destroy(), this.collection.delete(e), this.runLocalHooks("change", n), GC -= 1);
  }
  /**
   * Unregisters and destroys all collected index map instances.
   */
  unregisterAll() {
    this.collection.forEach((e, n) => this.unregister(n)), this.collection.clear();
  }
  /**
   * Get index map for the provided name.
   *
   * @param {string} [name] Name of the index map.
   * @returns {Array|IndexMap}
   */
  get(e) {
    return It(e) ? Array.from(this.collection.values()) : this.collection.get(e);
  }
  /**
   * Get collection size.
   *
   * @returns {number}
   */
  getLength() {
    return this.collection.size;
  }
  /**
   * Remove some indexes and corresponding mappings and update values of the others within all collection's index maps.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  removeFromEvery(e) {
    this.collection.forEach((n) => {
      n.remove(e);
    });
  }
  /**
   * Insert new indexes and corresponding mapping and update values of the others all collection's index maps.
   *
   * @private
   * @param {number} insertionIndex Position inside the actual list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insertToEvery(e, n) {
    this.collection.forEach((r) => {
      r.insert(e, n);
    });
  }
  /**
   * Set default values to index maps within collection.
   *
   * @param {number} length Destination length for all stored maps.
   */
  initEvery(e) {
    this.collection.forEach((n) => {
      n.init(e);
    });
  }
}
_t(iy, pr);
function wX() {
  return GC;
}
function gp(t, e, n) {
  return e = CX(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function CX(t) {
  var e = vX(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function vX(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class dE extends iy {
  constructor(e, n) {
    super(), gp(this, "mergedValuesCache", []), gp(this, "aggregationFunction", void 0), gp(this, "fallbackValue", void 0), this.aggregationFunction = e, this.fallbackValue = n;
  }
  /**
   * Get merged values for all indexes.
   *
   * @param {boolean} [readFromCache=true] Determine if read results from the cache.
   * @returns {Array}
   */
  getMergedValues() {
    if ((arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) === !0)
      return this.mergedValuesCache;
    if (this.getLength() === 0)
      return [];
    const n = qe(this.get(), (o) => o.getValues()), r = [], i = Re(n[0]) && n[0].length || 0;
    for (let o = 0; o < i; o += 1) {
      const s = [];
      for (let a = 0; a < this.getLength(); a += 1)
        s.push(n[a][o]);
      r.push(s);
    }
    return qe(r, this.aggregationFunction);
  }
  /**
   * Get merged value for particular index.
   *
   * @param {number} index Index for which we calculate single result.
   * @param {boolean} [readFromCache=true] Determine if read results from the cache.
   * @returns {*}
   */
  getMergedValueAtIndex(e, n) {
    const r = this.getMergedValues(n)[e];
    return Re(r) ? r : this.fallbackValue;
  }
  /**
   * Rebuild cache for the collection.
   */
  updateCache() {
    this.mergedValuesCache = this.getMergedValues(!1);
  }
}
function SX(t, e, n) {
  yX(t, e), e.set(t, n);
}
function yX(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function bX(t, e, n) {
  var r = vx(t, e, "set");
  return RX(t, r, n), n;
}
function RX(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function EX(t, e) {
  var n = vx(t, e, "get");
  return TX(t, n);
}
function vx(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function TX(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
var mp = /* @__PURE__ */ new WeakMap();
class Sx {
  constructor() {
    SX(this, mp, {
      writable: !0,
      value: []
    });
  }
  /**
   * Subscribes to the observer.
   *
   * @param {Function} callback A function that will be called when the new changes will appear.
   * @returns {ChangesObserver}
   */
  subscribe(e) {
    return this.addLocalHook("change", e), this._write(EX(this, mp)), this;
  }
  /**
   * Unsubscribes all subscriptions. After the method call, the observer would not produce
   * any new events.
   *
   * @returns {ChangesObserver}
   */
  unsubscribe() {
    return this.runLocalHooks("unsubscribe"), this.clearLocalHooks(), this;
  }
  /**
   * The write method is executed by the ChangesObservable module. The module produces all
   * changes events that are distributed further by the observer.
   *
   * @private
   * @param {object} changes The chunk of changes produced by the ChangesObservable module.
   * @returns {ChangesObserver}
   */
  _write(e) {
    return e.length > 0 && this.runLocalHooks("change", e), this;
  }
  /**
   * The write method is executed by the ChangesObservable module. The module produces initial
   * changes that will be used to notify new subscribers.
   *
   * @private
   * @param {object} initialChanges The chunk of changes produced by the ChangesObservable module.
   */
  _writeInitialChanges(e) {
    bX(this, mp, e);
  }
}
_t(Sx, pr);
function fE(t, e) {
  const n = [];
  let r = 0, i = 0;
  for (; r < t.length && i < e.length; r++, i++)
    t[r] !== e[i] && n.push({
      op: "replace",
      index: i,
      oldValue: t[r],
      newValue: e[i]
    });
  for (; r < e.length; r++)
    n.push({
      op: "insert",
      index: r,
      oldValue: void 0,
      newValue: e[r]
    });
  for (; i < t.length; i++)
    n.push({
      op: "remove",
      index: i,
      oldValue: t[i],
      newValue: void 0
    });
  return n;
}
function vu(t, e, n) {
  _X(t, e), e.set(t, n);
}
function _X(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Hr(t, e) {
  var n = yx(t, e, "get");
  return MX(t, n);
}
function MX(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function Wh(t, e, n) {
  var r = yx(t, e, "set");
  return OX(t, r, n), n;
}
function yx(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function OX(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var Vh = /* @__PURE__ */ new WeakMap(), Su = /* @__PURE__ */ new WeakMap(), Bh = /* @__PURE__ */ new WeakMap(), Uh = /* @__PURE__ */ new WeakMap(), Yh = /* @__PURE__ */ new WeakMap();
class AX {
  constructor() {
    let {
      initialIndexValue: e
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    vu(this, Vh, {
      writable: !0,
      value: /* @__PURE__ */ new Set()
    }), vu(this, Su, {
      writable: !0,
      value: []
    }), vu(this, Bh, {
      writable: !0,
      value: []
    }), vu(this, Uh, {
      writable: !0,
      value: !1
    }), vu(this, Yh, {
      writable: !0,
      value: !1
    }), Wh(this, Yh, e ?? !1);
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Creates and returns a new instance of the ChangesObserver object. The resource
   * allows subscribing to the index changes that during the code running may change.
   * Changes are emitted as an array of the index change. Each change is represented
   * separately as an object with `op`, `index`, `oldValue`, and `newValue` props.
   *
   * For example:
   * ```
   * [
   *   { op: 'replace', index: 1, oldValue: false, newValue: true },
   *   { op: 'replace', index: 3, oldValue: false, newValue: true },
   *   { op: 'insert', index: 4, oldValue: false, newValue: true },
   * ]
   * // or when the new index map changes have less indexes
   * [
   *   { op: 'replace', index: 1, oldValue: false, newValue: true },
   *   { op: 'remove', index: 4, oldValue: false, newValue: true },
   * ]
   * ```
   *
   * @returns {ChangesObserver}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  createObserver() {
    const e = new Sx();
    return Hr(this, Vh).add(e), e.addLocalHook("unsubscribe", () => {
      Hr(this, Vh).delete(e);
    }), e._writeInitialChanges(fE(Hr(this, Su), Hr(this, Bh))), e;
  }
  /**
   * The method is an entry point for triggering new index map changes. Emitting the
   * changes triggers comparing algorithm which compares last saved state with a new
   * state. When there are some differences, the changes are sent to all subscribers.
   *
   * @param {Array} indexesState An array with index map state.
   */
  emit(e) {
    let n = Hr(this, Bh);
    (!Hr(this, Uh) || Hr(this, Su).length !== e.length) && (e.length === 0 ? e = new Array(n.length).fill(Hr(this, Yh)) : Wh(this, Su, new Array(e.length).fill(Hr(this, Yh))), Hr(this, Uh) || (Wh(this, Uh, !0), n = Hr(this, Su)));
    const r = fE(n, e);
    Hr(this, Vh).forEach((i) => i._write(r)), Wh(this, Bh, e);
  }
}
function Gn(t, e, n) {
  return e = IX(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function IX(t) {
  var e = PX(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function PX(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class zC {
  constructor() {
    Gn(this, "indexesSequence", new Cx()), Gn(this, "trimmingMapsCollection", new dE((e) => e.some((n) => n === !0), !1)), Gn(this, "hidingMapsCollection", new dE((e) => e.some((n) => n === !0), !1)), Gn(this, "variousMapsCollection", new iy()), Gn(this, "hidingChangesObservable", new AX({
      initialIndexValue: !1
    })), Gn(this, "notTrimmedIndexesCache", []), Gn(this, "notHiddenIndexesCache", []), Gn(this, "isBatched", !1), Gn(this, "indexesSequenceChanged", !1), Gn(this, "indexesChangeSource", void 0), Gn(this, "trimmedIndexesChanged", !1), Gn(this, "hiddenIndexesChanged", !1), Gn(this, "renderablePhysicalIndexesCache", []), Gn(this, "fromPhysicalToVisualIndexesCache", /* @__PURE__ */ new Map()), Gn(this, "fromVisualToRenderableIndexesCache", /* @__PURE__ */ new Map()), this.indexesSequence.addLocalHook("change", () => {
      this.indexesSequenceChanged = !0, this.updateCache(), this.runLocalHooks("indexesSequenceChange", this.indexesChangeSource), this.runLocalHooks("change", this.indexesSequence, null);
    }), this.trimmingMapsCollection.addLocalHook("change", (e) => {
      this.trimmedIndexesChanged = !0, this.updateCache(), this.runLocalHooks("change", e, this.trimmingMapsCollection);
    }), this.hidingMapsCollection.addLocalHook("change", (e) => {
      this.hiddenIndexesChanged = !0, this.updateCache(), this.runLocalHooks("change", e, this.hidingMapsCollection);
    }), this.variousMapsCollection.addLocalHook("change", (e) => {
      this.runLocalHooks("change", e, this.variousMapsCollection);
    });
  }
  /**
   * Suspends the cache update for this map. The method is helpful to group multiple
   * operations, which affects the cache. In this case, the cache will be updated once after
   * calling the `resumeOperations` method.
   */
  suspendOperations() {
    this.isBatched = !0;
  }
  /**
   * Resumes the cache update for this map. It recalculates the cache and restores the
   * default behavior where each map modification updates the cache.
   */
  resumeOperations() {
    this.isBatched = !1, this.updateCache();
  }
  /**
   * It creates and returns the new instance of the ChangesObserver object. The object
   * allows listening to the index changes that happen while the Handsontable is running.
   *
   * @param {string} indexMapType The index map type which we want to observe.
   *                              Currently, only the 'hiding' index map types are observable.
   * @returns {ChangesObserver}
   */
  createChangesObserver(e) {
    if (e !== "hiding")
      throw new Error(`Unsupported index map type "${e}".`);
    return this.hidingChangesObservable.createObserver();
  }
  /**
   * Creates and registers a new `IndexMap` for a specified `IndexMapper` instance.
   *
   * @param {string} indexName A unique index name.
   * @param {string} mapType The index map type (e.g., "hiding", "trimming", "physicalIndexToValue").
   * @param {*} [initValueOrFn] The initial value for the index map.
   * @returns {IndexMap}
   */
  createAndRegisterIndexMap(e, n, r) {
    return this.registerMap(e, fX(n, r));
  }
  /**
   * Register map which provide some index mappings. Type of map determining to which collection it will be added.
   *
   * @param {string} uniqueName Name of the index map. It should be unique.
   * @param {IndexMap} indexMap Registered index map updated on items removal and insertion.
   * @returns {IndexMap}
   */
  registerMap(e, n) {
    if (this.trimmingMapsCollection.get(e) || this.hidingMapsCollection.get(e) || this.variousMapsCollection.get(e))
      throw Error(`Map with name "${e}" has been already registered.`);
    n instanceof oh ? this.trimmingMapsCollection.register(e, n) : n instanceof zg ? this.hidingMapsCollection.register(e, n) : this.variousMapsCollection.register(e, n);
    const r = this.getNumberOfIndexes();
    return r > 0 && n.init(r), n;
  }
  /**
   * Unregister a map with given name.
   *
   * @param {string} name Name of the index map.
   */
  unregisterMap(e) {
    this.trimmingMapsCollection.unregister(e), this.hidingMapsCollection.unregister(e), this.variousMapsCollection.unregister(e);
  }
  /**
   * Unregisters all collected index map instances from all map collection types.
   */
  unregisterAll() {
    this.trimmingMapsCollection.unregisterAll(), this.hidingMapsCollection.unregisterAll(), this.variousMapsCollection.unregisterAll();
  }
  /**
   * Get a physical index corresponding to the given visual index.
   *
   * @param {number} visualIndex Visual index.
   * @returns {number|null} Returns translated index mapped by passed visual index.
   */
  getPhysicalFromVisualIndex(e) {
    const n = this.notTrimmedIndexesCache[e];
    return Re(n) ? n : null;
  }
  /**
   * Get a physical index corresponding to the given renderable index.
   *
   * @param {number} renderableIndex Renderable index.
   * @returns {null|number}
   */
  getPhysicalFromRenderableIndex(e) {
    const n = this.renderablePhysicalIndexesCache[e];
    return Re(n) ? n : null;
  }
  /**
   * Get a visual index corresponding to the given physical index.
   *
   * @param {number} physicalIndex Physical index to search.
   * @returns {number|null} Returns a visual index of the index mapper.
   */
  getVisualFromPhysicalIndex(e) {
    const n = this.fromPhysicalToVisualIndexesCache.get(e);
    return Re(n) ? n : null;
  }
  /**
   * Get a visual index corresponding to the given renderable index.
   *
   * @param {number} renderableIndex Renderable index.
   * @returns {null|number}
   */
  getVisualFromRenderableIndex(e) {
    return this.getVisualFromPhysicalIndex(this.getPhysicalFromRenderableIndex(e));
  }
  /**
   * Get a renderable index corresponding to the given visual index.
   *
   * @param {number} visualIndex Visual index.
   * @returns {null|number}
   */
  getRenderableFromVisualIndex(e) {
    const n = this.fromVisualToRenderableIndexesCache.get(e);
    return Re(n) ? n : null;
  }
  /**
   * Search for the nearest not-hidden row or column.
   *
   * @param {number} fromVisualIndex The visual index of the row or column from which the search starts.<br><br>
   * If the row or column from which the search starts is not hidden, the method simply returns the `fromVisualIndex` number.
   * @param {number} searchDirection The search direction.<br><br>`1`: search from `fromVisualIndex` to the end of the dataset.<br><br>
   * `-1`: search from `fromVisualIndex` to the beginning of the dataset (i.e., to the row or column at visual index `0`).
   * @param {boolean} searchAlsoOtherWayAround `true`: if a search in a first direction failed, try the opposite direction.<br><br>
   * `false`: search in one direction only.
   *
   * @returns {number|null} A visual index of a row or column, or `null`.
   */
  getNearestNotHiddenIndex(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    if (this.getPhysicalFromVisualIndex(e) === null)
      return null;
    if (this.fromVisualToRenderableIndexesCache.has(e))
      return e;
    const o = Array.from(this.fromVisualToRenderableIndexesCache.keys());
    let s = -1;
    return n > 0 ? s = o.findIndex((a) => a > e) : s = o.reverse().findIndex((a) => a < e), s === -1 ? r ? this.getNearestNotHiddenIndex(e, -n, !1) : null : o[s];
  }
  /**
   * Set default values for all indexes in registered index maps.
   *
   * @param {number} [length] Destination length for all stored index maps.
   */
  initToLength() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getNumberOfIndexes();
    this.notTrimmedIndexesCache = [...new Array(e).keys()], this.notHiddenIndexesCache = [...new Array(e).keys()], this.suspendOperations(), this.indexesChangeSource = "init", this.indexesSequence.init(e), this.indexesChangeSource = void 0, this.trimmingMapsCollection.initEvery(e), this.resumeOperations(), this.suspendOperations(), this.hidingMapsCollection.initEvery(e), this.variousMapsCollection.initEvery(e), this.resumeOperations(), this.runLocalHooks("init");
  }
  /**
   * Trim/extend the mappers to fit the desired length.
   *
   * @param {number} length New mapper length.
   */
  fitToLength(e) {
    const n = this.getNumberOfIndexes();
    if (e < n) {
      const r = [...Array(this.getNumberOfIndexes() - e).keys()].map((i) => i + e);
      this.removeIndexes(r);
    } else
      this.insertIndexes(n, e - n);
  }
  /**
   * Get sequence of indexes.
   *
   * @returns {Array} Physical indexes.
   */
  getIndexesSequence() {
    return this.indexesSequence.getValues();
  }
  /**
   * Set completely new indexes sequence.
   *
   * @param {Array} indexes Physical indexes.
   */
  setIndexesSequence(e) {
    this.indexesChangeSource === void 0 && (this.indexesChangeSource = "update"), this.indexesSequence.setValues(e), this.indexesChangeSource === "update" && (this.indexesChangeSource = void 0);
  }
  /**
   * Get all NOT trimmed indexes.
   *
   * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.
   *
   * @param {boolean} [readFromCache=true] Determine if read indexes from cache.
   * @returns {Array} List of physical indexes. Index of this native array is a "visual index",
   * value of this native array is a "physical index".
   */
  getNotTrimmedIndexes() {
    return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) === !0 ? this.notTrimmedIndexesCache : this.getIndexesSequence().filter((r) => this.isTrimmed(r) === !1);
  }
  /**
   * Get length of all NOT trimmed indexes.
   *
   * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.
   *
   * @returns {number}
   */
  getNotTrimmedIndexesLength() {
    return this.getNotTrimmedIndexes().length;
  }
  /**
   * Get all NOT hidden indexes.
   *
   * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.
   *
   * @param {boolean} [readFromCache=true] Determine if read indexes from cache.
   * @returns {Array} List of physical indexes. Please keep in mind that index of this native array IS NOT a "visual index".
   */
  getNotHiddenIndexes() {
    return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) === !0 ? this.notHiddenIndexesCache : this.getIndexesSequence().filter((r) => this.isHidden(r) === !1);
  }
  /**
   * Get length of all NOT hidden indexes.
   *
   * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.
   *
   * @returns {number}
   */
  getNotHiddenIndexesLength() {
    return this.getNotHiddenIndexes().length;
  }
  /**
   * Get list of physical indexes (respecting the sequence of indexes) which may be rendered (when they are in a viewport).
   *
   * @param {boolean} [readFromCache=true] Determine if read indexes from cache.
   * @returns {Array} List of physical indexes. Index of this native array is a "renderable index",
   * value of this native array is a "physical index".
   */
  getRenderableIndexes() {
    return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) === !0 ? this.renderablePhysicalIndexesCache : this.getNotTrimmedIndexes().filter((r) => this.isHidden(r) === !1);
  }
  /**
   * Get length of all NOT trimmed and NOT hidden indexes.
   *
   * @returns {number}
   */
  getRenderableIndexesLength() {
    return this.getRenderableIndexes().length;
  }
  /**
   * Get number of all indexes.
   *
   * @returns {number}
   */
  getNumberOfIndexes() {
    return this.getIndexesSequence().length;
  }
  /**
   * Move indexes in the index mapper.
   *
   * @param {number|Array} movedIndexes Visual index(es) to move.
   * @param {number} finalIndex Visual index being a start index for the moved elements.
   */
  moveIndexes(e, n) {
    typeof e == "number" && (e = [e]);
    const r = qe(e, (u) => this.getPhysicalFromVisualIndex(u)), i = this.getNotTrimmedIndexesLength(), o = e.length, s = Nc(this.getIndexesSequence(), r), a = s.filter((u) => this.isTrimmed(u) === !1);
    let l = s.indexOf(a[a.length - 1]) + 1;
    if (n + o < i) {
      const u = a[n];
      l = s.indexOf(u);
    }
    this.indexesChangeSource = "move", this.setIndexesSequence(ty(s, l, r)), this.indexesChangeSource = void 0;
  }
  /**
   * Get whether index is trimmed. Index marked as trimmed isn't included in a {@link DataMap} and isn't rendered.
   *
   * @param {number} physicalIndex Physical index.
   * @returns {boolean}
   */
  isTrimmed(e) {
    return this.trimmingMapsCollection.getMergedValueAtIndex(e);
  }
  /**
   * Get whether index is hidden. Index marked as hidden is included in a {@link DataMap}, but isn't rendered.
   *
   * @param {number} physicalIndex Physical index.
   * @returns {boolean}
   */
  isHidden(e) {
    return this.hidingMapsCollection.getMergedValueAtIndex(e);
  }
  /**
   * Insert new indexes and corresponding mapping and update values of the others, for all stored index maps.
   *
   * @private
   * @param {number} firstInsertedVisualIndex First inserted visual index.
   * @param {number} amountOfIndexes Amount of inserted indexes.
   */
  insertIndexes(e, n) {
    const r = this.getNotTrimmedIndexes()[e], i = Re(r) ? r : this.getNumberOfIndexes(), o = this.getIndexesSequence().includes(r) ? this.getIndexesSequence().indexOf(r) : this.getNumberOfIndexes(), s = qe(new Array(n).fill(i), (a, l) => a + l);
    this.suspendOperations(), this.indexesChangeSource = "insert", this.indexesSequence.insert(o, s), this.indexesChangeSource = void 0, this.trimmingMapsCollection.insertToEvery(o, s), this.hidingMapsCollection.insertToEvery(o, s), this.variousMapsCollection.insertToEvery(o, s), this.resumeOperations();
  }
  /**
   * Remove some indexes and corresponding mappings and update values of the others, for all stored index maps.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  removeIndexes(e) {
    this.suspendOperations(), this.indexesChangeSource = "remove", this.indexesSequence.remove(e), this.indexesChangeSource = void 0, this.trimmingMapsCollection.removeFromEvery(e), this.hidingMapsCollection.removeFromEvery(e), this.variousMapsCollection.removeFromEvery(e), this.resumeOperations();
  }
  /**
   * Rebuild cache for some indexes. Every action on indexes sequence or indexes skipped in the process of rendering
   * by default reset cache, thus batching some index maps actions is recommended.
   *
   * @private
   * @param {boolean} [force=false] Determine if force cache update.
   */
  updateCache() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const n = this.indexesSequenceChanged || this.trimmedIndexesChanged || this.hiddenIndexesChanged;
    (e === !0 || this.isBatched === !1 && n === !0) && (this.trimmingMapsCollection.updateCache(), this.hidingMapsCollection.updateCache(), this.notTrimmedIndexesCache = this.getNotTrimmedIndexes(!1), this.notHiddenIndexesCache = this.getNotHiddenIndexes(!1), this.renderablePhysicalIndexesCache = this.getRenderableIndexes(!1), this.cacheFromPhysicalToVisualIndexes(), this.cacheFromVisualToRenderableIndexes(), this.hiddenIndexesChanged && this.hidingChangesObservable.emit(this.hidingMapsCollection.getMergedValues()), this.runLocalHooks("cacheUpdated", {
      indexesSequenceChanged: this.indexesSequenceChanged,
      trimmedIndexesChanged: this.trimmedIndexesChanged,
      hiddenIndexesChanged: this.hiddenIndexesChanged
    }), this.indexesSequenceChanged = !1, this.trimmedIndexesChanged = !1, this.hiddenIndexesChanged = !1);
  }
  /**
   * Update cache for translations from physical to visual indexes.
   *
   * @private
   */
  cacheFromPhysicalToVisualIndexes() {
    const e = this.getNotTrimmedIndexesLength();
    this.fromPhysicalToVisualIndexesCache.clear();
    for (let n = 0; n < e; n += 1) {
      const r = this.getPhysicalFromVisualIndex(n);
      this.fromPhysicalToVisualIndexesCache.set(r, n);
    }
  }
  /**
   * Update cache for translations from visual to renderable indexes.
   *
   * @private
   */
  cacheFromVisualToRenderableIndexes() {
    const e = this.getRenderableIndexesLength();
    this.fromVisualToRenderableIndexesCache.clear();
    for (let n = 0; n < e; n += 1) {
      const r = this.getPhysicalFromRenderableIndex(n), i = this.getVisualFromPhysicalIndex(r);
      this.fromVisualToRenderableIndexesCache.set(i, n);
    }
  }
}
_t(zC, pr);
function xX(t, e) {
  return Ze(e, (n, r) => {
    It(t[r]) && (t[r] = n);
  }), t;
}
function bx(t) {
  const n = /^([a-zA-Z]{2})-([a-zA-Z]{2})$/.exec(t);
  return n ? `${n[1].toLowerCase()}-${n[2].toUpperCase()}` : t;
}
function Rx(t) {
  Re(t) && ES(bt`Language with code "${t}" was not found. You should register particular language\x20
    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.`);
}
function HX(t, e) {
  return Array.isArray(t) && Number.isInteger(e) ? t[e] : t;
}
const {
  register: DX,
  getValues: NX
} = yi("phraseFormatters");
function LX(t, e) {
  DX(t, e);
}
function $X() {
  return NX();
}
LX("pluralize", HX);
const Ex = "ContextMenu:items", je = Ex, oy = `${je}.noItems`, sy = `${je}.insertRowAbove`, ay = `${je}.insertRowBelow`, ly = `${je}.insertColumnOnTheLeft`, uy = `${je}.insertColumnOnTheRight`, cy = `${je}.removeRow`, hy = `${je}.removeColumn`, dy = `${je}.undo`, fy = `${je}.redo`, gy = `${je}.readOnly`, my = `${je}.clearColumn`, py = `${je}.copy`, wy = `${je}.copyWithHeaders`, Cy = `${je}.copyWithGroupHeaders`, vy = `${je}.copyHeadersOnly`, Sy = `${je}.cut`, yy = `${je}.freezeColumn`, by = `${je}.unfreezeColumn`, Ry = `${je}.mergeCells`, Ey = `${je}.unmergeCells`, Ty = `${je}.addComment`, _y = `${je}.editComment`, My = `${je}.removeComment`, Oy = `${je}.readOnlyComment`, Ay = `${je}.align`, Iy = `${je}.align.left`, Py = `${je}.align.center`, xy = `${je}.align.right`, Hy = `${je}.align.justify`, Dy = `${je}.align.top`, Ny = `${je}.align.middle`, Ly = `${je}.align.bottom`, $y = `${je}.borders`, ky = `${je}.borders.top`, Fy = `${je}.borders.right`, Wy = `${je}.borders.bottom`, Vy = `${je}.borders.left`, By = `${je}.borders.remove`, Uy = `${je}.nestedHeaders.insertChildRow`, Yy = `${je}.nestedHeaders.detachFromParent`, Gy = `${je}.hideColumn`, zy = `${je}.showColumn`, jy = `${je}.hideRow`, Ky = `${je}.showRow`, rr = "Filters:", Qt = `${rr}conditions`, Kg = `${Qt}.none`, Xy = `${Qt}.isEmpty`, qy = `${Qt}.isNotEmpty`, Zy = `${Qt}.isEqualTo`, Qy = `${Qt}.isNotEqualTo`, Jy = `${Qt}.beginsWith`, eb = `${Qt}.endsWith`, tb = `${Qt}.contains`, nb = `${Qt}.doesNotContain`, kX = `${Qt}.byValue`, rb = `${Qt}.greaterThan`, ib = `${Qt}.greaterThanOrEqualTo`, ob = `${Qt}.lessThan`, sb = `${Qt}.lessThanOrEqualTo`, ab = `${Qt}.isBetween`, lb = `${Qt}.isNotBetween`, ub = `${Qt}.after`, cb = `${Qt}.before`, hb = `${Qt}.today`, db = `${Qt}.tomorrow`, fb = `${Qt}.yesterday`, gb = `${rr}labels.filterByCondition`, mb = `${rr}labels.filterByValue`, pb = `${rr}labels.conjunction`, Xg = `${rr}labels.disjunction`, Vf = `${rr}values.blankCells`, wb = `${rr}buttons.selectAll`, Cb = `${rr}buttons.clear`, vb = `${rr}buttons.ok`, Sb = `${rr}buttons.cancel`, yb = `${rr}buttons.placeholder.search`, bb = `${rr}buttons.placeholder.value`, Rb = `${rr}buttons.placeholder.secondValue`, Eb = "CheckboxRenderer:", Tb = `${Eb}checked`, _b = `${Eb}unchecked`, FX = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CHECKBOX_CHECKED: Tb,
  CHECKBOX_RENDERER_NAMESPACE: Eb,
  CHECKBOX_UNCHECKED: _b,
  CONTEXTMENU_ITEMS_ADD_COMMENT: Ty,
  CONTEXTMENU_ITEMS_ALIGNMENT: Ay,
  CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM: Ly,
  CONTEXTMENU_ITEMS_ALIGNMENT_CENTER: Py,
  CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY: Hy,
  CONTEXTMENU_ITEMS_ALIGNMENT_LEFT: Iy,
  CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE: Ny,
  CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT: xy,
  CONTEXTMENU_ITEMS_ALIGNMENT_TOP: Dy,
  CONTEXTMENU_ITEMS_BORDERS: $y,
  CONTEXTMENU_ITEMS_BORDERS_BOTTOM: Wy,
  CONTEXTMENU_ITEMS_BORDERS_LEFT: Vy,
  CONTEXTMENU_ITEMS_BORDERS_RIGHT: Fy,
  CONTEXTMENU_ITEMS_BORDERS_TOP: ky,
  CONTEXTMENU_ITEMS_CLEAR_COLUMN: my,
  CONTEXTMENU_ITEMS_COPY: py,
  CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY: vy,
  CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS: Cy,
  CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS: wy,
  CONTEXTMENU_ITEMS_CUT: Sy,
  CONTEXTMENU_ITEMS_EDIT_COMMENT: _y,
  CONTEXTMENU_ITEMS_FREEZE_COLUMN: yy,
  CONTEXTMENU_ITEMS_HIDE_COLUMN: Gy,
  CONTEXTMENU_ITEMS_HIDE_ROW: jy,
  CONTEXTMENU_ITEMS_INSERT_LEFT: ly,
  CONTEXTMENU_ITEMS_INSERT_RIGHT: uy,
  CONTEXTMENU_ITEMS_MERGE_CELLS: Ry,
  CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD: Yy,
  CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD: Uy,
  CONTEXTMENU_ITEMS_NO_ITEMS: oy,
  CONTEXTMENU_ITEMS_READ_ONLY: gy,
  CONTEXTMENU_ITEMS_READ_ONLY_COMMENT: Oy,
  CONTEXTMENU_ITEMS_REDO: fy,
  CONTEXTMENU_ITEMS_REMOVE_BORDERS: By,
  CONTEXTMENU_ITEMS_REMOVE_COLUMN: hy,
  CONTEXTMENU_ITEMS_REMOVE_COMMENT: My,
  CONTEXTMENU_ITEMS_REMOVE_ROW: cy,
  CONTEXTMENU_ITEMS_ROW_ABOVE: sy,
  CONTEXTMENU_ITEMS_ROW_BELOW: ay,
  CONTEXTMENU_ITEMS_SHOW_COLUMN: zy,
  CONTEXTMENU_ITEMS_SHOW_ROW: Ky,
  CONTEXTMENU_ITEMS_UNDO: dy,
  CONTEXTMENU_ITEMS_UNFREEZE_COLUMN: by,
  CONTEXTMENU_ITEMS_UNMERGE_CELLS: Ey,
  CONTEXT_MENU_ITEMS_NAMESPACE: Ex,
  FILTERS_BUTTONS_CANCEL: Sb,
  FILTERS_BUTTONS_CLEAR: Cb,
  FILTERS_BUTTONS_OK: vb,
  FILTERS_BUTTONS_PLACEHOLDER_SEARCH: yb,
  FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE: Rb,
  FILTERS_BUTTONS_PLACEHOLDER_VALUE: bb,
  FILTERS_BUTTONS_SELECT_ALL: wb,
  FILTERS_CONDITIONS_AFTER: ub,
  FILTERS_CONDITIONS_BEFORE: cb,
  FILTERS_CONDITIONS_BEGINS_WITH: Jy,
  FILTERS_CONDITIONS_BETWEEN: ab,
  FILTERS_CONDITIONS_BY_VALUE: kX,
  FILTERS_CONDITIONS_CONTAINS: tb,
  FILTERS_CONDITIONS_EMPTY: Xy,
  FILTERS_CONDITIONS_ENDS_WITH: eb,
  FILTERS_CONDITIONS_EQUAL: Zy,
  FILTERS_CONDITIONS_GREATER_THAN: rb,
  FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL: ib,
  FILTERS_CONDITIONS_LESS_THAN: ob,
  FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL: sb,
  FILTERS_CONDITIONS_NAMESPACE: Qt,
  FILTERS_CONDITIONS_NONE: Kg,
  FILTERS_CONDITIONS_NOT_BETWEEN: lb,
  FILTERS_CONDITIONS_NOT_CONTAIN: nb,
  FILTERS_CONDITIONS_NOT_EMPTY: qy,
  FILTERS_CONDITIONS_NOT_EQUAL: Qy,
  FILTERS_CONDITIONS_TODAY: hb,
  FILTERS_CONDITIONS_TOMORROW: db,
  FILTERS_CONDITIONS_YESTERDAY: fb,
  FILTERS_DIVS_FILTER_BY_CONDITION: gb,
  FILTERS_DIVS_FILTER_BY_VALUE: mb,
  FILTERS_LABELS_CONJUNCTION: pb,
  FILTERS_LABELS_DISJUNCTION: Xg,
  FILTERS_NAMESPACE: rr,
  FILTERS_VALUES_BLANK_CELLS: Vf
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @preserve
 * Authors: Handsoncode
 * Last updated: Nov 15, 2017
 *
 * Description: Definition file for English - United States language-country.
 */
const WX = {
  languageCode: "en-US",
  [oy]: "No available options",
  [sy]: "Insert row above",
  [ay]: "Insert row below",
  [ly]: "Insert column left",
  [uy]: "Insert column right",
  [cy]: ["Remove row", "Remove rows"],
  [hy]: ["Remove column", "Remove columns"],
  [dy]: "Undo",
  [fy]: "Redo",
  [gy]: "Read only",
  [my]: "Clear column",
  [Ay]: "Alignment",
  [Iy]: "Left",
  [Py]: "Center",
  [xy]: "Right",
  [Hy]: "Justify",
  [Dy]: "Top",
  [Ny]: "Middle",
  [Ly]: "Bottom",
  [yy]: "Freeze column",
  [by]: "Unfreeze column",
  [$y]: "Borders",
  [ky]: "Top",
  [Fy]: "Right",
  [Wy]: "Bottom",
  [Vy]: "Left",
  [By]: "Remove border(s)",
  [Ty]: "Add comment",
  [_y]: "Edit comment",
  [My]: "Delete comment",
  [Oy]: "Read-only comment",
  [Ry]: "Merge cells",
  [Ey]: "Unmerge cells",
  [py]: "Copy",
  [wy]: ["Copy with header", "Copy with headers"],
  [Cy]: ["Copy with group header", "Copy with group headers"],
  [vy]: ["Copy header only", "Copy headers only"],
  [Sy]: "Cut",
  [Uy]: "Insert child row",
  [Yy]: "Detach from parent",
  [Gy]: ["Hide column", "Hide columns"],
  [zy]: ["Show column", "Show columns"],
  [jy]: ["Hide row", "Hide rows"],
  [Ky]: ["Show row", "Show rows"],
  [Kg]: "None",
  [Xy]: "Is empty",
  [qy]: "Is not empty",
  [Zy]: "Is equal to",
  [Qy]: "Is not equal to",
  [Jy]: "Begins with",
  [eb]: "Ends with",
  [tb]: "Contains",
  [nb]: "Does not contain",
  [rb]: "Greater than",
  [ib]: "Greater than or equal to",
  [ob]: "Less than",
  [sb]: "Less than or equal to",
  [ab]: "Is between",
  [lb]: "Is not between",
  [ub]: "After",
  [cb]: "Before",
  [hb]: "Today",
  [db]: "Tomorrow",
  [fb]: "Yesterday",
  [Vf]: "Blank cells",
  [gb]: "Filter by condition",
  [mb]: "Filter by value",
  [pb]: "And",
  [Xg]: "Or",
  [wb]: "Select all",
  [Cb]: "Clear",
  [vb]: "OK",
  [Sb]: "Cancel",
  [yb]: "Search",
  [bb]: "Value",
  [Rb]: "Second value",
  [Tb]: "Checked",
  [_b]: "Unchecked"
}, Tx = WX, VX = FX, jC = Tx.languageCode, {
  register: BX,
  getItem: _x,
  hasItem: UX,
  getValues: YX
} = yi("languagesDictionaries");
Mx(Tx);
function Mx(t, e) {
  let n = t, r = e;
  return Xe(t) && (r = t, n = r.languageCode), GX(n, r), BX(n, Wn(r)), Wn(r);
}
function GX(t, e) {
  t !== jC && xX(e, _x(jC));
}
function Ox(t) {
  return Mb(t) ? Wn(_x(t)) : null;
}
function Mb(t) {
  return UX(t);
}
function zX() {
  return YX();
}
function Ax(t, e, n) {
  const r = Ox(t);
  if (r === null)
    return null;
  const i = r[e];
  if (It(i))
    return null;
  const o = jX(i, n);
  return Array.isArray(o) ? o[0] : o;
}
function jX(t, e) {
  let n = t;
  return H($X(), (r) => {
    n = r(t, e);
  }), n;
}
function KX(t) {
  let e = bx(t);
  return Mb(e) || (e = jC, Rx(t)), e;
}
function XX(t, e, n) {
  return e = qX(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function qX(t) {
  var e = ZX(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function ZX(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class QX extends r3 {
  constructor(e, n) {
    super(e, null), XX(this, "visualCellRange", null), this.visualCellRange = n || null, this.commit();
  }
  /**
   * Adds a cell coords to the selection.
   *
   * @param {CellCoords} coords Visual coordinates of a cell.
   * @returns {VisualSelection}
   */
  add(e) {
    return this.visualCellRange === null ? this.visualCellRange = this.settings.createCellRange(e) : this.visualCellRange.expand(e), this;
  }
  /**
   * Clears visual and renderable selection.
   *
   * @returns {VisualSelection}
   */
  clear() {
    return this.visualCellRange = null, super.clear();
  }
  /**
   * Trims the passed cell range object by removing all coordinates that points to the hidden rows
   * or columns. The result is a new cell range object that points only to the visible indexes or `null`.
   *
   * @private
   * @param {CellRange} cellRange Cells range object to be trimmed.
   * @returns {CellRange} Visual non-hidden cells range coordinates.
   */
  trimToVisibleCellsRangeOnly(e) {
    let {
      from: n,
      to: r
    } = e, i = this.getNearestNotHiddenCoords(n, 1), o = this.getNearestNotHiddenCoords(r, -1);
    return i === null || o === null ? null : ((i.row > o.row || i.col > o.col) && (i = n, o = r), this.settings.createCellRange(i, i, o));
  }
  /**
   * Gets nearest coordinates that points to the visible row and column indexes. If there are no visible
   * rows and/or columns the `null` value is returned.
   *
   * @private
   * @param {CellCoords} coords The coords object as starting point for finding the nearest visible coordinates.
   * @param {1|-1} rowSearchDirection The search direction. For value 1, it means searching from top to bottom for
   *                                  rows and from left to right for columns. For -1, it is the other way around.
   * @param {1|-1} columnSearchDirection The same as above but for rows.
   * @returns {CellCoords|null} Visual cell coordinates.
   */
  getNearestNotHiddenCoords(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : n;
    const i = this.getNearestNotHiddenIndex(this.settings.rowIndexMapper, e.row, n);
    if (i === null)
      return null;
    const o = this.getNearestNotHiddenIndex(this.settings.columnIndexMapper, e.col, r);
    return o === null ? null : this.settings.createCellCoords(i, o);
  }
  /**
   * Gets nearest visual index. If there are no visible rows or columns the `null` value is returned.
   *
   * @private
   * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.
   * @param {number} visualIndex The index as starting point for finding the nearest visible index.
   * @param {1|-1} searchDirection The search direction. For value 1, it means searching from top to bottom for
   *                               rows and from left to right for columns. For -1, it is the other way around.
   * @returns {number|null} Visual row/column index.
   */
  getNearestNotHiddenIndex(e, n, r) {
    return n < 0 ? n : e.getNearestNotHiddenIndex(n, r);
  }
  /**
   * Override internally stored visual indexes added by the Selection's `add` function. It should be executed
   * at the end of process of adding visual selection coordinates.
   *
   * @returns {VisualSelection}
   */
  commit() {
    if (this.visualCellRange === null)
      return this;
    const e = this.trimToVisibleCellsRangeOnly(this.visualCellRange);
    return e === null ? this.cellRange = null : this.cellRange = this.createRenderableCellRange(e.from, e.to), this;
  }
  /**
   * Some selection may be a part of broader cell range. This function sync coordinates of current selection
   * and the broader cell range when needed (current selection can't be presented visually).
   *
   * @param {CellRange} broaderCellRange Visual range. Actual cell range may be contained in the broader cell range.
   * When there is no way to represent some cell range visually we try to find range containing just the first visible cell.
   *
   * Warn: Please keep in mind that this function may change coordinates of the handled broader range.
   *
   * @returns {VisualSelection}
   */
  syncWith(e) {
    const n = e.from.clone().normalize(), r = e.getVerticalDirection() === "N-S" ? 1 : -1, i = e.getHorizontalDirection() === "W-E" ? 1 : -1, o = this.settings.visualToRenderableCoords(this.visualCellRange.highlight);
    let s = null;
    if ((o === null || o.col === null || o.row === null) && (s = this.getNearestNotHiddenCoords(n, r, i)), s !== null && e.overlaps(s)) {
      const a = e.highlight.clone();
      if (a.row >= 0 && (a.row = s.row), a.col >= 0 && (a.col = s.col), this.cellRange === null) {
        const l = this.settings.visualToRenderableCoords(a);
        this.cellRange = this.settings.createCellRange(l);
      }
      e.setHighlight(a);
    }
    return this.settings.selectionType === "focus" && o !== null && s === null && e.setHighlight(this.visualCellRange.highlight), this;
  }
  /**
   * Returns the top left (TL) and bottom right (BR) selection coordinates (renderable indexes).
   * The method overwrites the original method to support header selection for hidden cells.
   * To make the header selection working, the CellCoords and CellRange have to support not
   * complete coordinates (`null` values for example, `row: null`, `col: 2`).
   *
   * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.
   */
  getCorners() {
    const {
      from: e,
      to: n
    } = this.cellRange;
    return [Math.min(e.row, n.row), Math.min(e.col, n.col), Math.max(e.row, n.row), Math.max(e.col, n.col)];
  }
  /**
   * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection
   * coordinates (visual indexes).
   *
   * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.
   */
  getVisualCorners() {
    const e = this.settings.renderableToVisualCoords(this.cellRange.getTopStartCorner()), n = this.settings.renderableToVisualCoords(this.cellRange.getBottomEndCorner());
    return [e.row, e.col, n.row, n.col];
  }
  /**
   * Creates a new CellRange object based on visual coordinates which before object creation are
   * translated to renderable indexes.
   *
   * @param {CellCoords} visualFromCoords The CellCoords object which contains coordinates that
   *                                      points to the beginning of the selection.
   * @param {CellCoords} visualToCoords The CellCoords object which contains coordinates that
   *                                    points to the end of the selection.
   * @returns {CellRange|null}
   */
  createRenderableCellRange(e, n) {
    const r = this.settings.visualToRenderableCoords(e), i = this.settings.visualToRenderableCoords(n);
    return r.row === null || r.col === null || i.row === null || i.col === null ? null : this.settings.createCellRange(r, r, i);
  }
}
const Yo = QX;
function pp(t) {
  let {
    activeHeaderClassName: e,
    ...n
  } = t;
  return new Yo({
    className: e,
    ...n,
    selectionType: rx
  });
}
function JX(t) {
  let {
    areaCornerVisible: e,
    ...n
  } = t;
  return new Yo({
    className: "area",
    createLayers: !0,
    border: {
      width: 1,
      color: "#4b89ff",
      cornerVisible: e
    },
    ...n,
    selectionType: US
  });
}
function eq(t) {
  let {
    ...e
  } = t;
  return new Yo({
    className: "highlight",
    ...e,
    selectionType: US
  });
}
function tq(t) {
  let {
    columnClassName: e,
    ...n
  } = t;
  return new Yo({
    className: e,
    ...n,
    selectionType: s3
  });
}
function nq(t) {
  let {
    cellCornerVisible: e,
    ...n
  } = t;
  return new Yo({
    className: "current",
    headerAttributes: [hS()],
    border: {
      width: 2,
      color: "#4b89ff",
      cornerVisible: e
    },
    ...n,
    selectionType: YS
  });
}
function rq(t) {
  let {
    border: e,
    visualCellRange: n,
    ...r
  } = t;
  return new Yo({
    ...e,
    ...r,
    selectionType: a3
  }, n);
}
function iq(t) {
  let {
    ...e
  } = t;
  return new Yo({
    className: "fill",
    border: {
      width: 1,
      color: "#ff0000"
    },
    ...e,
    selectionType: i3
  });
}
function gE(t) {
  let {
    headerClassName: e,
    ...n
  } = t;
  return new Yo({
    className: e,
    ...n,
    selectionType: BS
  });
}
function oq(t) {
  let {
    rowClassName: e,
    ...n
  } = t;
  return new Yo({
    className: e,
    ...n,
    selectionType: o3
  });
}
let Ix;
function sq(t, e) {
  aq(t, e), e.add(t);
}
function aq(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ir(t, e, n) {
  return e = lq(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function lq(t) {
  var e = uq(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function uq(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function so(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
var Oi = /* @__PURE__ */ new WeakSet();
Ix = Symbol.iterator;
class cq {
  constructor(e) {
    sq(this, Oi), ir(this, "options", void 0), ir(this, "layerLevel", 0), ir(this, "focus", void 0), ir(this, "fill", void 0), ir(this, "layeredAreas", /* @__PURE__ */ new Map()), ir(this, "areas", /* @__PURE__ */ new Map()), ir(this, "rowHeaders", /* @__PURE__ */ new Map()), ir(this, "columnHeaders", /* @__PURE__ */ new Map()), ir(this, "activeRowHeaders", /* @__PURE__ */ new Map()), ir(this, "activeColumnHeaders", /* @__PURE__ */ new Map()), ir(this, "activeCornerHeaders", /* @__PURE__ */ new Map()), ir(this, "rowHighlights", /* @__PURE__ */ new Map()), ir(this, "columnHighlights", /* @__PURE__ */ new Map()), ir(this, "customSelections", []), this.options = e, this.focus = nq(e), this.fill = iq(e);
  }
  /**
   * Check if highlight cell rendering is disabled for specified highlight type.
   *
   * @param {string} highlightType Highlight type. Possible values are: `cell`, `area`, `fill` or `header`.
   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
   * @returns {boolean}
   */
  isEnabledFor(e, n) {
    let r = e;
    e === YS && (r = "current");
    let i = this.options.disabledCellSelection(n.row, n.col);
    return typeof i == "string" && (i = [i]), i === !1 || Array.isArray(i) && !i.includes(r);
  }
  /**
   * Set a new layer level to make access to the desire `area` and `header` highlights.
   *
   * @param {number} [level=0] Layer level to use.
   * @returns {Highlight}
   */
  useLayerLevel() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    return this.layerLevel = e, this;
  }
  /**
   * Get Walkontable Selection instance created for controlling highlight of the currently
   * focused cell (or header).
   *
   * @returns {Selection}
   */
  getFocus() {
    return this.focus;
  }
  /**
   * Get Walkontable Selection instance created for controlling highlight of the autofill functionality.
   *
   * @returns {Selection}
   */
  getFill() {
    return this.fill;
  }
  /**
   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
   * `area` highlights.
   *
   * @returns {Selection}
   */
  createLayeredArea() {
    return so(this, Oi, ao).call(this, this.layeredAreas, JX);
  }
  /**
   * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.
   *
   * @returns {Selection[]}
   */
  getLayeredAreas() {
    return [...this.layeredAreas.values()];
  }
  /**
   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
   * `highlight` highlights.
   *
   * @returns {Selection}
   */
  createArea() {
    return so(this, Oi, ao).call(this, this.areas, eq);
  }
  /**
   * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.
   *
   * @returns {Selection[]}
   */
  getAreas() {
    return [...this.areas.values()];
  }
  /**
   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
   * header highlight for rows.
   *
   * @returns {Selection}
   */
  createRowHeader() {
    return so(this, Oi, ao).call(this, this.rowHeaders, gE);
  }
  /**
   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.
   *
   * @returns {Selection[]}
   */
  getRowHeaders() {
    return [...this.rowHeaders.values()];
  }
  /**
   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
   * header highlight for columns.
   *
   * @returns {Selection}
   */
  createColumnHeader() {
    return so(this, Oi, ao).call(this, this.columnHeaders, gE);
  }
  /**
   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.
   *
   * @returns {Selection[]}
   */
  getColumnHeaders() {
    return [...this.columnHeaders.values()];
  }
  /**
   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
   * highlight for active row headers.
   *
   * @returns {Selection}
   */
  createActiveRowHeader() {
    return so(this, Oi, ao).call(this, this.activeRowHeaders, pp);
  }
  /**
   * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.
   *
   * @returns {Selection[]}
   */
  getActiveRowHeaders() {
    return [...this.activeRowHeaders.values()];
  }
  /**
   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
   * highlight for active column headers.
   *
   * @returns {Selection}
   */
  createActiveColumnHeader() {
    return so(this, Oi, ao).call(this, this.activeColumnHeaders, pp);
  }
  /**
   * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.
   *
   * @returns {Selection[]}
   */
  getActiveColumnHeaders() {
    return [...this.activeColumnHeaders.values()];
  }
  /**
   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
   * highlight for the headers corner.
   *
   * @returns {Selection}
   */
  createActiveCornerHeader() {
    return so(this, Oi, ao).call(this, this.activeCornerHeaders, pp);
  }
  /**
   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers corner.
   *
   * @returns {Selection[]}
   */
  getActiveCornerHeaders() {
    return [...this.activeCornerHeaders.values()];
  }
  /**
   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
   * highlight cells in a row.
   *
   * @returns {Selection}
   */
  createRowHighlight() {
    return so(this, Oi, ao).call(this, this.rowHighlights, oq);
  }
  /**
   * Get all Walkontable Selection instances which describes the state of the rows highlighting.
   *
   * @returns {Selection[]}
   */
  getRowHighlights() {
    return [...this.rowHighlights.values()];
  }
  /**
   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
   * highlight cells in a column.
   *
   * @returns {Selection}
   */
  createColumnHighlight() {
    return so(this, Oi, ao).call(this, this.columnHighlights, tq);
  }
  /**
   * Get all Walkontable Selection instances which describes the state of the columns highlighting.
   *
   * @returns {Selection[]}
   */
  getColumnHighlights() {
    return [...this.columnHighlights.values()];
  }
  /**
   * Get Walkontable Selection instance created for controlling highlight of the custom selection functionality.
   *
   * @returns {Selection}
   */
  getCustomSelections() {
    return [...this.customSelections.values()];
  }
  /**
   * Add selection to the custom selection instance. The new selection are added to the end of the selection collection.
   *
   * @param {object} selectionInstance The selection instance.
   */
  addCustomSelection(e) {
    this.customSelections.push(rq({
      ...this.options,
      ...e
    }));
  }
  /**
   * Perform cleaning visual highlights for the whole table.
   */
  clear() {
    this.focus.clear(), this.fill.clear(), H(this.areas.values(), (e) => void e.clear()), H(this.layeredAreas.values(), (e) => void e.clear()), H(this.rowHeaders.values(), (e) => void e.clear()), H(this.columnHeaders.values(), (e) => void e.clear()), H(this.activeRowHeaders.values(), (e) => void e.clear()), H(this.activeColumnHeaders.values(), (e) => void e.clear()), H(this.activeCornerHeaders.values(), (e) => void e.clear()), H(this.rowHighlights.values(), (e) => void e.clear()), H(this.columnHighlights.values(), (e) => void e.clear());
  }
  /**
   * This object can be iterate over using `for of` syntax or using internal `arrayEach` helper.
   *
   * @returns {Selection[]}
   */
  [Ix]() {
    return [this.focus, this.fill, ...this.areas.values(), ...this.layeredAreas.values(), ...this.rowHeaders.values(), ...this.columnHeaders.values(), ...this.activeRowHeaders.values(), ...this.activeColumnHeaders.values(), ...this.activeCornerHeaders.values(), ...this.rowHighlights.values(), ...this.columnHighlights.values(), ...this.customSelections][Symbol.iterator]();
  }
}
function ao(t, e) {
  const n = this.layerLevel;
  if (t.has(n))
    return t.get(n);
  const r = e({
    layerLevel: n,
    ...this.options
  });
  return t.set(n, r), r;
}
const hq = cq;
let Px;
function mE(t, e, n) {
  return e = dq(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function dq(t) {
  var e = fq(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function fq(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
Px = Symbol.iterator;
class gq {
  constructor(e) {
    mE(this, "ranges", []), mE(this, "createCellRange", void 0), this.createCellRange = e;
  }
  /**
   * Check if selected range is empty.
   *
   * @returns {boolean}
   */
  isEmpty() {
    return this.size() === 0;
  }
  /**
   * Set coordinates to the class instance. It clears all previously added coordinates and push `coords`
   * to the collection.
   *
   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
   * @returns {SelectionRange}
   */
  set(e) {
    return this.clear(), this.ranges.push(this.createCellRange(e)), this;
  }
  /**
   * Add coordinates to the class instance. The new coordinates are added to the end of the range collection.
   *
   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
   * @returns {SelectionRange}
   */
  add(e) {
    return this.ranges.push(this.createCellRange(e)), this;
  }
  /**
   * Removes from the stack the last added coordinates.
   *
   * @returns {SelectionRange}
   */
  pop() {
    return this.ranges.pop(), this;
  }
  /**
   * Get last added coordinates from ranges, it returns a CellRange instance.
   *
   * @returns {CellRange|undefined}
   */
  current() {
    return this.peekByIndex(this.size() - 1);
  }
  /**
   * Get previously added coordinates from ranges, it returns a CellRange instance.
   *
   * @returns {CellRange|undefined}
   */
  previous() {
    return this.peekByIndex(this.size() - 2);
  }
  /**
   * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if
   * the coords object is within selection range.
   *
   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
   * @returns {boolean}
   */
  includes(e) {
    return this.ranges.some((n) => n.includes(e));
  }
  /**
   * Clear collection.
   *
   * @returns {SelectionRange}
   */
  clear() {
    return this.ranges.length = 0, this;
  }
  /**
   * Get count of added all coordinates added to the selection.
   *
   * @returns {number}
   */
  size() {
    return this.ranges.length;
  }
  /**
   * Peek the coordinates based on the index where that coordinate resides in the collection.
   *
   * @param {number} [index=0] An index where the coordinate will be retrieved from. The index '0' gets the
   * latest range.
   * @returns {CellRange|undefined}
   */
  peekByIndex() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, n;
    return e >= 0 && e < this.size() && (n = this.ranges[e]), n;
  }
  [Px]() {
    return this.ranges[Symbol.iterator]();
  }
}
const mq = gq;
function yu(t, e) {
  xx(t, e), e.add(t);
}
function wp(t, e, n) {
  xx(t, e), e.set(t, n);
}
function xx(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function at(t, e) {
  var n = Hx(t, e, "get");
  return pq(t, n);
}
function pq(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function ar(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function KC(t, e, n) {
  var r = Hx(t, e, "set");
  return wq(t, r, n), n;
}
function Hx(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function wq(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var Gh = /* @__PURE__ */ new WeakMap(), pt = /* @__PURE__ */ new WeakMap(), Os = /* @__PURE__ */ new WeakMap(), Cp = /* @__PURE__ */ new WeakSet(), vp = /* @__PURE__ */ new WeakSet(), XC = /* @__PURE__ */ new WeakSet(), Sp = /* @__PURE__ */ new WeakSet(), ks = /* @__PURE__ */ new WeakSet();
class Dx {
  constructor(e, n) {
    yu(this, ks), yu(this, Sp), yu(this, XC), yu(this, vp), yu(this, Cp), wp(this, Gh, {
      writable: !0,
      value: void 0
    }), wp(this, pt, {
      writable: !0,
      value: void 0
    }), wp(this, Os, {
      writable: !0,
      value: {
        x: 0,
        y: 0
      }
    }), KC(this, Gh, e), KC(this, pt, n);
  }
  /**
   * Selects cell relative to the current cell (if possible).
   *
   * @param {number} rowDelta Rows number to move, value can be passed as negative number.
   * @param {number} colDelta Columns number to move, value can be passed as negative number.
   * @param {boolean} [createMissingRecords=false] If `true` the new rows/columns will be created if necessary. Otherwise, row/column will
   *                        be created according to `minSpareRows/minSpareCols` settings of Handsontable.
   * @returns {CellCoords} Visual coordinates after transformation.
   */
  transformStart(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    ar(this, Cp, pE).call(this, {
      x: at(this, pt).navigableHeaders() ? at(this, pt).countRowHeaders() : 0,
      y: at(this, pt).navigableHeaders() ? at(this, pt).countColHeaders() : 0
    });
    const i = at(this, pt).createCellCoords(e, n);
    let o = at(this, Gh).current().highlight;
    const s = at(this, pt).visualToRenderableCoords(o);
    let a = 0, l = 0;
    if (this.runLocalHooks("beforeTransformStart", i), s.row !== null && s.col !== null) {
      const {
        width: u,
        height: c
      } = ar(this, XC, Nx).call(this), {
        row: d,
        col: g
      } = ar(this, Sp, CE).call(this, o), p = at(this, pt).fixedRowsBottom(), C = at(this, pt).minSpareRows(), E = at(this, pt).minSpareCols(), I = at(this, pt).autoWrapRow(), M = at(this, pt).autoWrapCol(), y = at(this, pt).createCellCoords(d + i.row, g + i.col);
      if (y.row >= c) {
        const G = gi(r && C > 0 && p === 0), q = y.col + 1, re = at(this, pt).createCellCoords(y.row - c, q >= u ? q - u : q);
        this.runLocalHooks("beforeColumnWrap", G, ar(this, ks, Ua).call(this, re), q >= u), G.value ? this.runLocalHooks("insertRowRequire", at(this, pt).countRenderableRows()) : M && y.assign(re);
      } else if (y.row < 0) {
        const G = gi(M), q = y.col - 1, re = at(this, pt).createCellCoords(c + y.row, q < 0 ? u + q : q);
        this.runLocalHooks("beforeColumnWrap", G, ar(this, ks, Ua).call(this, re), q < 0), M && y.assign(re);
      }
      if (y.col >= u) {
        const G = gi(r && E > 0), q = y.row + 1, re = at(this, pt).createCellCoords(q >= c ? q - c : q, y.col - u);
        this.runLocalHooks("beforeRowWrap", G, ar(this, ks, Ua).call(this, re), q >= c), G.value ? this.runLocalHooks("insertColRequire", at(this, pt).countRenderableColumns()) : I && y.assign(re);
      } else if (y.col < 0) {
        const G = gi(I), q = y.row - 1, re = at(this, pt).createCellCoords(q < 0 ? c + q : q, u + y.col);
        this.runLocalHooks("beforeRowWrap", G, ar(this, ks, Ua).call(this, re), q < 0), I && y.assign(re);
      }
      const {
        rowDir: $,
        colDir: X
      } = ar(this, vp, wE).call(this, y);
      a = $, l = X, o = ar(this, ks, Ua).call(this, y);
    }
    return this.runLocalHooks("afterTransformStart", o, a, l), o;
  }
  /**
   * Sets selection end cell relative to the current selection end cell (if possible).
   *
   * @param {number} rowDelta Rows number to move, value can be passed as negative number.
   * @param {number} colDelta Columns number to move, value can be passed as negative number.
   * @returns {CellCoords} Visual coordinates after transformation.
   */
  transformEnd(e, n) {
    ar(this, Cp, pE).call(this, {
      x: at(this, pt).navigableHeaders() ? at(this, pt).countRowHeaders() : 0,
      y: at(this, pt).navigableHeaders() ? at(this, pt).countColHeaders() : 0
    });
    const r = at(this, pt).createCellCoords(e, n), i = at(this, Gh).current(), o = at(this, pt).visualToRenderableCoords(i.highlight), s = i.to.clone();
    let a = 0, l = 0;
    if (this.runLocalHooks("beforeTransformEnd", r), o.row !== null && o.col !== null) {
      const {
        row: u,
        col: c
      } = ar(this, Sp, CE).call(this, i.to), d = at(this, pt).createCellCoords(u + r.row, c + r.col), {
        rowDir: g,
        colDir: p
      } = ar(this, vp, wE).call(this, d);
      a = g, l = p;
      const C = ar(this, ks, Ua).call(this, d);
      r.row === 0 && r.col !== 0 ? s.col = C.col : r.row !== 0 && r.col === 0 ? s.row = C.row : (s.row = C.row, s.col = C.col);
    }
    return this.runLocalHooks("afterTransformEnd", s, a, l), s;
  }
}
function pE(t) {
  let {
    x: e,
    y: n
  } = t;
  KC(this, Os, {
    x: e,
    y: n
  });
}
function wE(t) {
  const {
    width: e,
    height: n
  } = ar(this, XC, Nx).call(this);
  let r = 0, i = 0;
  return t.row < 0 ? (r = -1, t.row = 0) : t.row > 0 && t.row >= n && (r = 1, t.row = n - 1), t.col < 0 ? (i = -1, t.col = 0) : t.col > 0 && t.col >= e && (i = 1, t.col = e - 1), {
    rowDir: r,
    colDir: i
  };
}
function Nx() {
  return {
    width: at(this, Os).x + at(this, pt).countRenderableColumns(),
    height: at(this, Os).y + at(this, pt).countRenderableRows()
  };
}
function CE(t) {
  const {
    row: e,
    col: n
  } = at(this, pt).visualToRenderableCoords(t);
  return at(this, pt).createCellCoords(at(this, Os).y + e, at(this, Os).x + n);
}
function Ua(t) {
  const e = t.clone();
  return e.col = t.col - at(this, Os).x, e.row = t.row - at(this, Os).y, at(this, pt).renderableToVisualCoords(e);
}
_t(Dx, pr);
const Cq = Dx, qg = 0, Zg = 1, Lx = 2, Ob = 3, vq = [Ob, Lx], Sq = [["number"], ["number", "string"], ["number", "undefined"], ["number", "string", "undefined"]], yp = Symbol("root"), vE = Symbol("child");
function Bl(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : yp;
  if (e !== yp && e !== vE)
    throw new Error("The second argument is used internally only and cannot be overwritten.");
  const n = Array.isArray(t), r = e === yp;
  let i = qg;
  if (n) {
    const o = t[0];
    t.length === 0 ? i = Zg : r && o instanceof DS ? i = Ob : r && Array.isArray(o) ? i = Bl(o, vE) : t.length >= 2 && t.length <= 4 && !t.some((a, l) => !Sq[l].includes(typeof a)) && (i = Lx);
  }
  return i;
}
function Lc(t) {
  let {
    createCellCoords: e,
    createCellRange: n,
    keepDirection: r = !1,
    propToCol: i
  } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (!vq.includes(t))
    throw new Error("Unsupported selection ranges schema type was provided.");
  return function(o) {
    const s = t === Ob;
    let a = s ? o.from.row : o[0], l = s ? o.from.col : o[1], u = s ? o.to.row : o[2], c = s ? o.to.col : o[3];
    if (typeof i == "function" && (typeof l == "string" && (l = i(l)), typeof c == "string" && (c = i(c))), It(u) && (u = a), It(c) && (c = l), !r) {
      const p = a, C = l, E = u, I = c;
      a = Math.min(p, E), l = Math.min(C, I), u = Math.max(p, E), c = Math.max(C, I);
    }
    const d = e(a, l), g = e(u, c);
    return n(d, d, g);
  };
}
function yq(t) {
  const e = Bl(t.getSelected());
  if (e === qg || e === Zg)
    return [];
  const n = Lc(e, {
    createCellCoords: t._createCellCoords.bind(t),
    createCellRange: t._createCellRange.bind(t)
  }), r = /* @__PURE__ */ new Set();
  H(t.getSelected(), (s) => {
    const {
      from: a,
      to: l
    } = n(s), u = Math.max(a.col, 0), c = l.col - u + 1;
    H(Array.from(new Array(c), (d, g) => u + g), (d) => {
      r.has(d) || r.add(d);
    });
  });
  const i = Array.from(r).sort((s, a) => s - a);
  return nn(i, (s, a, l, u) => (l !== 0 && a === u[l - 1] + 1 ? s[s.length - 1][1] += 1 : s.push([a, 1]), s), []);
}
function bq(t) {
  const e = Bl(t.getSelected());
  if (e === qg || e === Zg)
    return [];
  const n = Lc(e, {
    createCellCoords: t._createCellCoords.bind(t),
    createCellRange: t._createCellRange.bind(t)
  }), r = /* @__PURE__ */ new Set();
  H(t.getSelected(), (s) => {
    const {
      from: a,
      to: l
    } = n(s), u = Math.max(a.row, 0), c = l.row - u + 1;
    H(Array.from(new Array(c), (d, g) => u + g), (d) => {
      r.has(d) || r.add(d);
    });
  });
  const i = Array.from(r).sort((s, a) => s - a);
  return nn(i, (s, a, l, u) => (l !== 0 && a === u[l - 1] + 1 ? s[s.length - 1][1] += 1 : s.push([a, 1]), s), []);
}
function Rq(t, e, n) {
  Eq(t, e), e.set(t, n);
}
function Eq(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Xo(t, e, n) {
  return e = Tq(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Tq(t) {
  var e = _q(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function _q(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function SE(t, e, n) {
  var r = $x(t, e, "set");
  return Mq(t, r, n), n;
}
function Mq(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function yE(t, e) {
  var n = $x(t, e, "get");
  return Oq(t, n);
}
function $x(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Oq(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
var bu = /* @__PURE__ */ new WeakMap();
class kx {
  constructor(e, n) {
    var r = this;
    Xo(this, "settings", void 0), Xo(this, "tableProps", void 0), Xo(this, "inProgress", !1), Xo(this, "selectedRange", new mq((i, o, s) => this.tableProps.createCellRange(i, o, s))), Xo(this, "highlight", void 0), Xo(this, "transformation", void 0), Xo(this, "selectedByRowHeader", /* @__PURE__ */ new Set()), Xo(this, "selectedByColumnHeader", /* @__PURE__ */ new Set()), Rq(this, bu, {
      writable: !0,
      value: !1
    }), this.settings = e, this.tableProps = n, this.highlight = new hq({
      headerClassName: e.currentHeaderClassName,
      activeHeaderClassName: e.activeHeaderClassName,
      rowClassName: e.currentRowClassName,
      columnClassName: e.currentColClassName,
      cellAttributes: [hS()],
      rowIndexMapper: this.tableProps.rowIndexMapper,
      columnIndexMapper: this.tableProps.columnIndexMapper,
      disabledCellSelection: (i, o) => this.tableProps.isDisabledCellSelection(i, o),
      cellCornerVisible: function() {
        return r.isCellCornerVisible(...arguments);
      },
      areaCornerVisible: function() {
        return r.isAreaCornerVisible(...arguments);
      },
      visualToRenderableCoords: (i) => this.tableProps.visualToRenderableCoords(i),
      renderableToVisualCoords: (i) => this.tableProps.renderableToVisualCoords(i),
      createCellCoords: (i, o) => this.tableProps.createCellCoords(i, o),
      createCellRange: (i, o, s) => this.tableProps.createCellRange(i, o, s)
    }), this.transformation = new Cq(this.selectedRange, {
      rowIndexMapper: this.tableProps.rowIndexMapper,
      columnIndexMapper: this.tableProps.columnIndexMapper,
      countRenderableRows: () => this.tableProps.countRenderableRows(),
      countRenderableColumns: () => this.tableProps.countRenderableColumns(),
      countRowHeaders: () => this.tableProps.countRowHeaders(),
      countColHeaders: () => this.tableProps.countColHeaders(),
      visualToRenderableCoords: (i) => this.tableProps.visualToRenderableCoords(i),
      renderableToVisualCoords: (i) => this.tableProps.renderableToVisualCoords(i),
      createCellCoords: (i, o) => this.tableProps.createCellCoords(i, o),
      navigableHeaders: () => e.navigableHeaders,
      fixedRowsBottom: () => e.fixedRowsBottom,
      minSpareRows: () => e.minSpareRows,
      minSpareCols: () => e.minSpareCols,
      autoWrapRow: () => e.autoWrapRow,
      autoWrapCol: () => e.autoWrapCol
    }), this.transformation.addLocalHook("beforeTransformStart", function() {
      for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++)
        o[s] = arguments[s];
      return r.runLocalHooks("beforeModifyTransformStart", ...o);
    }), this.transformation.addLocalHook("afterTransformStart", function() {
      for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++)
        o[s] = arguments[s];
      return r.runLocalHooks("afterModifyTransformStart", ...o);
    }), this.transformation.addLocalHook("beforeTransformEnd", function() {
      for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++)
        o[s] = arguments[s];
      return r.runLocalHooks("beforeModifyTransformEnd", ...o);
    }), this.transformation.addLocalHook("afterTransformEnd", function() {
      for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++)
        o[s] = arguments[s];
      return r.runLocalHooks("afterModifyTransformEnd", ...o);
    }), this.transformation.addLocalHook("insertRowRequire", function() {
      for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++)
        o[s] = arguments[s];
      return r.runLocalHooks("insertRowRequire", ...o);
    }), this.transformation.addLocalHook("insertColRequire", function() {
      for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++)
        o[s] = arguments[s];
      return r.runLocalHooks("insertColRequire", ...o);
    }), this.transformation.addLocalHook("beforeRowWrap", function() {
      for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++)
        o[s] = arguments[s];
      return r.runLocalHooks("beforeRowWrap", ...o);
    }), this.transformation.addLocalHook("beforeColumnWrap", function() {
      for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++)
        o[s] = arguments[s];
      return r.runLocalHooks("beforeColumnWrap", ...o);
    });
  }
  /**
   * Get data layer for current selection.
   *
   * @returns {SelectionRange}
   */
  getSelectedRange() {
    return this.selectedRange;
  }
  /**
   * Indicate that selection process began. It sets internally `.inProgress` property to `true`.
   */
  begin() {
    this.inProgress = !0;
  }
  /**
   * Indicate that selection process finished. It sets internally `.inProgress` property to `false`.
   */
  finish() {
    this.runLocalHooks("afterSelectionFinished", Array.from(this.selectedRange)), this.inProgress = !1;
  }
  /**
   * Check if the process of selecting the cell/cells is in progress.
   *
   * @returns {boolean}
   */
  isInProgress() {
    return this.inProgress;
  }
  /**
   * Starts selection range on given coordinate object.
   *
   * @param {CellCoords} coords Visual coords.
   * @param {boolean} [multipleSelection] If `true`, selection will be worked in 'multiple' mode. This option works
   *                                      only when 'selectionMode' is set as 'multiple'. If the argument is not defined
   *                                      the default trigger will be used.
   * @param {boolean} [fragment=false] If `true`, the selection will be treated as a partial selection where the
   *                                   `setRangeEnd` method won't be called on every `setRangeStart` call.
   * @param {CellCoords} [highlightCoords] If set, allows changing the coordinates of the highlight/focus cell.
   */
  setRangeStart(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : e;
    const o = this.settings.selectionMode === "multiple", s = It(n) ? this.tableProps.getShortcutManager().isCtrlPressed() : n, a = e.clone();
    this.runLocalHooks(`beforeSetRangeStart${r ? "Only" : ""}`, a), (!o || o && !s && It(n)) && this.selectedRange.clear(), this.selectedRange.add(a).current().setHighlight(i.clone()), this.getLayerLevel() === 0 && (this.selectedByRowHeader.clear(), this.selectedByColumnHeader.clear()), r || this.setRangeEnd(e);
  }
  /**
   * Starts selection range on given coordinate object.
   *
   * @param {CellCoords} coords Visual coords.
   * @param {boolean} [multipleSelection] If `true`, selection will be worked in 'multiple' mode. This option works
   *                                      only when 'selectionMode' is set as 'multiple'. If the argument is not defined
   *                                      the default trigger will be used.
   * @param {CellCoords} [highlightCoords] If set, allows changing the coordinates of the highlight/focus cell.
   */
  setRangeStartOnly(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : e;
    this.setRangeStart(e, n, !0, r);
  }
  /**
   * Ends selection range on given coordinate object.
   *
   * @param {CellCoords} coords Visual coords.
   */
  setRangeEnd(e) {
    if (this.selectedRange.isEmpty())
      return;
    const n = e.clone(), r = this.tableProps.countRows(), i = this.tableProps.countCols(), o = this.selectedRange.current().clone().setTo(e).isSingleHeader();
    if ((r > 0 || i > 0) && (r === 0 && n.col < 0 && !o || i === 0 && n.row < 0 && !o))
      return;
    this.runLocalHooks("beforeSetRangeEnd", n), this.begin();
    const s = this.selectedRange.current();
    this.settings.navigableHeaders || s.highlight.normalize(), this.settings.selectionMode === "single" ? (s.setFrom(s.highlight), s.setTo(s.highlight)) : s.setTo(n), r > 0 && i > 0 && (!this.settings.navigableHeaders || this.settings.navigableHeaders && !s.isSingleHeader()) && s.to.normalize(), this.runLocalHooks("beforeHighlightSet");
    const a = this.highlight.getFocus();
    a.clear(), this.highlight.isEnabledFor(YS, s.highlight) && a.add(this.selectedRange.current().highlight).commit().syncWith(s);
    const l = this.getLayerLevel();
    l < this.highlight.layerLevel && (H(this.highlight.getAreas(), (y) => void y.clear()), H(this.highlight.getLayeredAreas(), (y) => void y.clear()), H(this.highlight.getRowHeaders(), (y) => void y.clear()), H(this.highlight.getColumnHeaders(), (y) => void y.clear()), H(this.highlight.getActiveRowHeaders(), (y) => void y.clear()), H(this.highlight.getActiveColumnHeaders(), (y) => void y.clear()), H(this.highlight.getActiveCornerHeaders(), (y) => void y.clear()), H(this.highlight.getRowHighlights(), (y) => void y.clear()), H(this.highlight.getColumnHighlights(), (y) => void y.clear())), this.highlight.useLayerLevel(l);
    const u = this.highlight.createArea(), c = this.highlight.createLayeredArea(), d = this.highlight.createRowHeader(), g = this.highlight.createColumnHeader(), p = this.highlight.createActiveRowHeader(), C = this.highlight.createActiveColumnHeader(), E = this.highlight.createActiveCornerHeader(), I = this.highlight.createRowHighlight(), M = this.highlight.createColumnHighlight();
    if (u.clear(), c.clear(), d.clear(), g.clear(), p.clear(), C.clear(), E.clear(), I.clear(), M.clear(), this.highlight.isEnabledFor(US, s.highlight) && (this.isMultiple() || l >= 1) && (u.add(s.from).add(s.to).commit(), c.add(s.from).add(s.to).commit(), l === 1)) {
      const y = this.selectedRange.previous();
      this.highlight.useLayerLevel(l - 1), this.highlight.createArea().add(y.from).commit().syncWith(y), this.highlight.createLayeredArea().add(y.from).commit().syncWith(y), this.highlight.useLayerLevel(l);
    }
    if (this.highlight.isEnabledFor(BS, s.highlight)) {
      if (!s.isSingleHeader()) {
        const X = this.tableProps.createCellCoords(Math.max(s.from.row, 0), -1), G = this.tableProps.createCellCoords(s.to.row, -1), q = this.tableProps.createCellCoords(-1, Math.max(s.from.col, 0)), re = this.tableProps.createCellCoords(-1, s.to.col);
        this.settings.selectionMode === "single" ? (d.add(X).commit(), g.add(q).commit(), I.add(X).commit(), M.add(q).commit()) : (d.add(X).add(G).commit(), g.add(q).add(re).commit(), I.add(X).add(G).commit(), M.add(q).add(re).commit());
      }
      const y = !yE(this, bu) && this.isEntireRowSelected() && (i > 0 && i === s.getWidth() || i === 0 && this.isSelectedByRowHeader()), $ = !yE(this, bu) && this.isEntireColumnSelected() && (r > 0 && r === s.getHeight() || r === 0 && this.isSelectedByColumnHeader());
      y && p.add(this.tableProps.createCellCoords(Math.max(s.from.row, 0), Math.min(-this.tableProps.countRowHeaders(), -1))).add(this.tableProps.createCellCoords(Math.max(s.to.row, 0), -1)).commit(), $ && C.add(this.tableProps.createCellCoords(Math.min(-this.tableProps.countColHeaders(), -1), Math.max(s.from.col, 0))).add(this.tableProps.createCellCoords(-1, Math.max(s.to.col, 0))).commit(), y && $ && E.add(this.tableProps.createCellCoords(-this.tableProps.countColHeaders(), -this.tableProps.countRowHeaders())).add(this.tableProps.createCellCoords(-1, -1)).commit();
    }
    this.runLocalHooks("afterSetRangeEnd", e);
  }
  /**
   * Returns information if we have a multiselection. This method check multiselection only on the latest layer of
   * the selection.
   *
   * @returns {boolean}
   */
  isMultiple() {
    const e = gi(!this.selectedRange.current().isSingle());
    return this.runLocalHooks("afterIsMultipleSelection", e), e.value;
  }
  /**
   * Selects cell relative to the current cell (if possible).
   *
   * @param {number} rowDelta Rows number to move, value can be passed as negative number.
   * @param {number} colDelta Columns number to move, value can be passed as negative number.
   * @param {boolean} [createMissingRecords=false] If `true` the new rows/columns will be created if necessary.
   * Otherwise, row/column will be created according to `minSpareRows/minSpareCols` settings of Handsontable.
   */
  transformStart(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    this.setRangeStart(this.transformation.transformStart(e, n, r));
  }
  /**
   * Sets selection end cell relative to the current selection end cell (if possible).
   *
   * @param {number} rowDelta Rows number to move, value can be passed as negative number.
   * @param {number} colDelta Columns number to move, value can be passed as negative number.
   */
  transformEnd(e, n) {
    this.setRangeEnd(this.transformation.transformEnd(e, n));
  }
  /**
   * Returns currently used layer level.
   *
   * @returns {number} Returns layer level starting from 0. If no selection was added to the table -1 is returned.
   */
  getLayerLevel() {
    return this.selectedRange.size() - 1;
  }
  /**
   * Returns `true` if currently there is a selection on the screen, `false` otherwise.
   *
   * @returns {boolean}
   */
  isSelected() {
    return !this.selectedRange.isEmpty();
  }
  /**
   * Returns `true` if the selection was applied by clicking to the row header. If the `layerLevel`
   * argument is passed then only that layer will be checked. Otherwise, it checks if any row header
   * was clicked on any selection layer level.
   *
   * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
   * @returns {boolean}
   */
  isSelectedByRowHeader() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
    return !this.isSelectedByCorner(e) && (e === -1 ? this.selectedByRowHeader.size > 0 : this.selectedByRowHeader.has(e));
  }
  /**
   * Returns `true` if the selection consists of entire rows (including their headers). If the `layerLevel`
   * argument is passed then only that layer will be checked. Otherwise, it checks the selection for all layers.
   *
   * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
   * @returns {boolean}
   */
  isEntireRowSelected() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
    const n = (i) => {
      const {
        col: o
      } = i.getOuterTopStartCorner(), s = this.tableProps.countRowHeaders(), a = this.tableProps.countCols();
      return (s > 0 && o < 0 || s === 0) && i.getWidth() === a;
    };
    if (e === -1)
      return Array.from(this.selectedRange).some((i) => n(i));
    const r = this.selectedRange.peekByIndex(e);
    return r ? n(r) : !1;
  }
  /**
   * Returns `true` if the selection was applied by clicking to the column header. If the `layerLevel`
   * argument is passed then only that layer will be checked. Otherwise, it checks if any column header
   * was clicked on any selection layer level.
   *
   * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
   * @returns {boolean}
   */
  isSelectedByColumnHeader() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
    return !this.isSelectedByCorner() && (e === -1 ? this.selectedByColumnHeader.size > 0 : this.selectedByColumnHeader.has(e));
  }
  /**
   * Returns `true` if the selection consists of entire columns (including their headers). If the `layerLevel`
   * argument is passed then only that layer will be checked. Otherwise, it checks the selection for all layers.
   *
   * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
   * @returns {boolean}
   */
  isEntireColumnSelected() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
    const n = (i) => {
      const {
        row: o
      } = i.getOuterTopStartCorner(), s = this.tableProps.countColHeaders(), a = this.tableProps.countRows();
      return (s > 0 && o < 0 || s === 0) && i.getHeight() === a;
    };
    if (e === -1)
      return Array.from(this.selectedRange).some((i) => n(i));
    const r = this.selectedRange.peekByIndex(e);
    return r ? n(r) : !1;
  }
  /**
   * Returns `true` if the selection was applied by clicking on the row or column header on any layer level.
   *
   * @returns {boolean}
   */
  isSelectedByAnyHeader() {
    return this.isSelectedByRowHeader(-1) || this.isSelectedByColumnHeader(-1) || this.isSelectedByCorner();
  }
  /**
   * Returns `true` if the selection was applied by clicking on the left-top corner overlay.
   *
   * @returns {boolean}
   */
  isSelectedByCorner() {
    return this.selectedByColumnHeader.has(this.getLayerLevel()) && this.selectedByRowHeader.has(this.getLayerLevel());
  }
  /**
   * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if
   * the coords object is within selection range.
   *
   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
   * @returns {boolean}
   */
  inInSelection(e) {
    return this.selectedRange.includes(e);
  }
  /**
   * Returns `true` if the cell corner should be visible.
   *
   * @private
   * @returns {boolean} `true` if the corner element has to be visible, `false` otherwise.
   */
  isCellCornerVisible() {
    return this.settings.fillHandle && !this.tableProps.isEditorOpened() && !this.isMultiple();
  }
  /**
   * Returns `true` if the cell coordinates are visible (renderable).
   *
   * @private
   * @param {CellCoords} coords The cell coordinates to check.
   * @returns {boolean}
   */
  isCellVisible(e) {
    const n = this.tableProps.visualToRenderableCoords(e);
    return n.row !== null && n.col !== null;
  }
  /**
   * Returns `true` if the area corner should be visible.
   *
   * @param {number} layerLevel The layer level.
   * @returns {boolean} `true` if the corner element has to be visible, `false` otherwise.
   */
  isAreaCornerVisible(e) {
    return Number.isInteger(e) && e !== this.getLayerLevel() ? !1 : this.settings.fillHandle && !this.tableProps.isEditorOpened() && this.isMultiple();
  }
  /**
   * Clear the selection by resetting the collected ranges and highlights.
   */
  clear() {
    this.selectedRange.clear(), this.highlight.clear();
  }
  /**
   * Deselects all selected cells.
   */
  deselect() {
    this.isSelected() && (this.inProgress = !1, this.clear(), this.runLocalHooks("afterDeselect"));
  }
  /**
   * Selects all cells and headers.
   *
   * @param {boolean} [includeRowHeaders=false] `true` If the selection should include the row headers,
   * `false` otherwise.
   * @param {boolean} [includeColumnHeaders=false] `true` If the selection should include the column
   * headers, `false` otherwise.
   * @param {object} [options] Additional object with options.
   * @param {{row: number, col: number} | boolean} [options.focusPosition] The argument allows changing the cell/header
   * focus position. The value takes an object with a `row` and `col` properties from -N to N, where
   * negative values point to the headers and positive values point to the cell range. If `false`, the focus
   * position won't be changed.
   * @param {boolean} [options.disableHeadersHighlight] If `true`, disables highlighting the headers even when
   * the logical coordinates points on them.
   */
  selectAll() {
    var e;
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
      focusPosition: !1,
      disableHeadersHighlight: !1
    };
    const o = this.tableProps.countRows(), s = this.tableProps.countCols(), a = this.tableProps.countRowHeaders(), l = this.tableProps.countColHeaders(), u = r ? -l : 0, c = n ? -a : 0;
    if (u === 0 && c === 0 && (o === 0 || s === 0))
      return;
    let d = (e = this.getSelectedRange().current()) === null || e === void 0 ? void 0 : e.highlight;
    const {
      focusPosition: g,
      disableHeadersHighlight: p
    } = i;
    SE(this, bu, p), g && Number.isInteger(g == null ? void 0 : g.row) && Number.isInteger(g == null ? void 0 : g.col) && (d = this.tableProps.createCellCoords(mr(g.row, u, o - 1), mr(g.col, c, s - 1)));
    const C = this.tableProps.createCellCoords(u, c), E = this.tableProps.createCellCoords(o - 1, s - 1);
    this.clear(), this.setRangeStartOnly(C, void 0, d), c < 0 && this.selectedByRowHeader.add(this.getLayerLevel()), u < 0 && this.selectedByColumnHeader.add(this.getLayerLevel()), this.setRangeEnd(E), this.finish(), SE(this, bu, !1);
  }
  /**
   * Make multiple, non-contiguous selection specified by `row` and `column` values or a range of cells
   * finishing at `endRow`, `endColumn`. The method supports two input formats, first as an array of arrays such
   * as `[[rowStart, columnStart, rowEnd, columnEnd]]` and second format as an array of CellRange objects.
   * If the passed ranges have another format the exception will be thrown.
   *
   * @param {Array[]|CellRange[]} selectionRanges The coordinates which define what the cells should be selected.
   * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.
   */
  selectCells(e) {
    var n = this;
    const r = Bl(e);
    if (r === Zg)
      return !1;
    if (r === qg)
      throw new Error(bt`Unsupported format of the selection ranges was passed. To select cells pass\x20
        the coordinates as an array of arrays ([[rowStart, columnStart/columnPropStart, rowEnd,\x20
        columnEnd/columnPropEnd]]) or as an array of CellRange objects.`);
    const i = Lc(r, {
      createCellCoords: function() {
        return n.tableProps.createCellCoords(...arguments);
      },
      createCellRange: function() {
        return n.tableProps.createCellRange(...arguments);
      },
      propToCol: (l) => this.tableProps.propToCol(l),
      keepDirection: !0
    }), o = this.settings.navigableHeaders, s = {
      countRows: this.tableProps.countRows(),
      countCols: this.tableProps.countCols(),
      countRowHeaders: o ? this.tableProps.countRowHeaders() : 0,
      countColHeaders: o ? this.tableProps.countColHeaders() : 0
    }, a = !e.some((l) => {
      const u = i(l), c = u.isValid(s);
      return !(c && !u.containsHeaders() || c && u.containsHeaders() && u.isSingleHeader());
    });
    return a && (this.clear(), H(e, (l) => {
      const {
        from: u,
        to: c
      } = i(l);
      this.setRangeStartOnly(u.clone(), !1), this.setRangeEnd(c.clone()), this.finish();
    })), a;
  }
  /**
   * Select column specified by `startColumn` visual index or column property or a range of columns finishing at
   * `endColumn`.
   *
   * @param {number|string} startColumn Visual column index or column property from which the selection starts.
   * @param {number|string} [endColumn] Visual column index or column property from to the selection finishes.
   * @param {number} [focusPosition=0] The argument allows changing the cell/header focus position.
   *                                   The value can take visual row index from -N to N, where negative values
   *                                   point to the headers and positive values point to the cell range.
   * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.
   */
  selectColumns(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    const i = typeof e == "string" ? this.tableProps.propToCol(e) : e, o = typeof n == "string" ? this.tableProps.propToCol(n) : n, s = this.tableProps.countRows(), a = this.tableProps.countCols(), l = this.tableProps.countColHeaders(), u = l === 0 ? 0 : -l, c = this.tableProps.createCellCoords(u, i), d = this.tableProps.createCellCoords(s - 1, o), g = this.tableProps.createCellRange(c, c, d).isValid({
      countRows: s,
      countCols: a,
      countRowHeaders: 0,
      countColHeaders: l
    });
    if (g) {
      const p = l === 0 ? 0 : mr(r, u, -1), C = s - 1, E = this.tableProps.createCellCoords(p, i), I = this.tableProps.createCellCoords(C, o), M = this.tableProps.createCellCoords(mr(r, u, s - 1), i);
      this.runLocalHooks("beforeSelectColumns", E, I, M), E.row = p, I.row = C, this.setRangeStartOnly(E, void 0, M), this.selectedByColumnHeader.add(this.getLayerLevel()), this.setRangeEnd(I), this.runLocalHooks("afterSelectColumns", E, I, M), this.finish();
    }
    return g;
  }
  /**
   * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.
   *
   * @param {number} startRow Visual row index from which the selection starts.
   * @param {number} [endRow] Visual row index from to the selection finishes.
   * @param {number} [focusPosition=0] The argument allows changing the cell/header focus position.
   *                                   The value can take visual column index from -N to N, where negative values
   *                                   point to the headers and positive values point to the cell range.
   * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.
   */
  selectRows(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    const i = this.tableProps.countRows(), o = this.tableProps.countCols(), s = this.tableProps.countRowHeaders(), a = s === 0 ? 0 : -s, l = this.tableProps.createCellCoords(e, a), u = this.tableProps.createCellCoords(n, o - 1), c = this.tableProps.createCellRange(l, l, u).isValid({
      countRows: i,
      countCols: o,
      countRowHeaders: s,
      countColHeaders: 0
    });
    if (c) {
      const d = s === 0 ? 0 : mr(r, a, -1), g = o - 1, p = this.tableProps.createCellCoords(e, d), C = this.tableProps.createCellCoords(n, g), E = this.tableProps.createCellCoords(e, mr(r, a, o - 1));
      this.runLocalHooks("beforeSelectRows", p, C, E), p.col = d, C.col = g, this.setRangeStartOnly(p, void 0, E), this.selectedByRowHeader.add(this.getLayerLevel()), this.setRangeEnd(C), this.runLocalHooks("afterSelectRows", p, C, E), this.finish();
    }
    return c;
  }
  /**
   * Rewrite the rendered state of the selection as visual selection may have a new representation in the DOM.
   */
  refresh() {
    if (this.highlight.getCustomSelections().forEach((i) => {
      i.commit();
    }), !this.isSelected())
      return;
    const n = this.highlight.getFocus(), r = this.getLayerLevel();
    n.commit().syncWith(this.selectedRange.current());
    for (let i = 0; i < this.selectedRange.size(); i += 1) {
      this.highlight.useLayerLevel(i);
      const o = this.highlight.createArea(), s = this.highlight.createLayeredArea(), a = this.highlight.createRowHeader(), l = this.highlight.createColumnHeader(), u = this.highlight.createActiveRowHeader(), c = this.highlight.createActiveColumnHeader(), d = this.highlight.createActiveCornerHeader(), g = this.highlight.createRowHighlight(), p = this.highlight.createColumnHighlight();
      o.commit(), s.commit(), a.commit(), l.commit(), u.commit(), c.commit(), d.commit(), g.commit(), p.commit();
    }
    this.highlight.useLayerLevel(r);
  }
}
_t(kx, pr);
const Aq = kx, bE = /^(\r\n|\n\r|\r|\n)/, Iq = /^[^\t\r\n]+/, RE = /^\t/;
function Pq(t) {
  const e = [[""]];
  if (t.length === 0)
    return e;
  let n = 0, r = 0, i;
  for (; t.length > 0 && i !== t.length; )
    if (i = t.length, t.match(RE))
      t = t.replace(RE, ""), n += 1, e[r][n] = "";
    else if (t.match(bE))
      t = t.replace(bE, ""), n = 0, r += 1, e[r] = [""];
    else {
      let o = "";
      if (t.startsWith('"')) {
        let s = 0, a = !0;
        for (; a; ) {
          const l = t.slice(0, 1);
          l === '"' && (s += 1), o += l, t = t.slice(1), (t.length === 0 || t.match(/^[\t\r\n]/) && s % 2 === 0) && (a = !1);
        }
        o = o.replace(/^"/, "").replace(/"$/, "").replace(/["]*/g, (l) => new Array(Math.floor(l.length / 2)).fill('"').join(""));
      } else {
        const s = t.match(Iq);
        o = s ? s[0] : "", t = t.slice(o.length);
      }
      e[r][n] = o;
    }
  return e;
}
function cc(t) {
  let e, n, r, i, o = "", s;
  for (e = 0, n = t.length; e < n; e += 1) {
    for (i = t[e].length, r = 0; r < i; r += 1)
      r > 0 && (o += "	"), s = t[e][r], typeof s == "string" ? s.indexOf(`
`) > -1 ? o += `"${s.replace(/"/g, '""')}"` : o += s : s == null ? o += "" : o += s;
    e !== n - 1 && (o += `
`);
  }
  return o;
}
function Fs(t, e, n) {
  return e = xq(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function xq(t) {
  var e = Hq(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Hq(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class Pl {
  /**
   * @type {number}
   */
  static get DESTINATION_RENDERER() {
    return 1;
  }
  /**
   * @type {number}
   */
  static get DESTINATION_CLIPBOARD_GENERATOR() {
    return 2;
  }
  /**
   * Instance of {@link Handsontable}.
   *
   * @private
   * @type {Handsontable}
   */
  /**
   * @param {object} hotInstance Instance of Handsontable.
   * @param {Array} data Array of arrays or array of objects containing data.
   * @param {MetaManager} metaManager The meta manager instance.
   */
  constructor(e, n, r) {
    Fs(this, "hot", void 0), Fs(this, "metaManager", void 0), Fs(this, "tableMeta", void 0), Fs(this, "dataSource", void 0), Fs(this, "duckSchema", void 0), Fs(this, "colToPropCache", void 0), Fs(this, "propToColCache", void 0), this.hot = e, this.metaManager = r, this.tableMeta = r.getTableMeta(), this.dataSource = n, this.duckSchema = this.createDuckSchema(), this.createMap();
  }
  /**
   * Generates cache for property to and from column addressation.
   */
  createMap() {
    const e = this.getSchema();
    if (typeof e > "u")
      throw new Error("trying to create `columns` definition but you didn't provide `schema` nor `data`");
    const n = this.tableMeta.columns;
    let r;
    if (this.colToPropCache = [], this.propToColCache = /* @__PURE__ */ new Map(), n) {
      let i = 0, o = 0, s = !1;
      if (typeof n == "function") {
        const a = Wg(e);
        i = a > 0 ? a : this.countFirstRowKeys(), s = !0;
      } else {
        const a = this.tableMeta.maxCols;
        i = Math.min(a, n.length);
      }
      for (r = 0; r < i; r++) {
        const a = s ? n(r) : n[r];
        if (Xe(a)) {
          if (typeof a.data < "u") {
            const l = s ? o : r;
            this.colToPropCache[l] = a.data, this.propToColCache.set(a.data, l);
          }
          o += 1;
        }
      }
    } else
      this.recursiveDuckColumns(e);
  }
  /**
   * Get the amount of physical columns in the first data row.
   *
   * @returns {number} Amount of physical columns in the first data row.
   */
  countFirstRowKeys() {
    return QS(this.dataSource);
  }
  /**
   * Generates columns' translation cache.
   *
   * @param {object} schema An object to generate schema from.
   * @param {number} lastCol The column index.
   * @param {number} parent The property cache for recursive calls.
   * @returns {number}
   */
  recursiveDuckColumns(e, n, r) {
    let i = n, o = r, s;
    return typeof i > "u" && (i = 0, o = ""), typeof e == "object" && !Array.isArray(e) && Ze(e, (a, l) => {
      a === null ? (s = o + l, this.colToPropCache.push(s), this.propToColCache.set(s, i), i += 1) : i = this.recursiveDuckColumns(a, i, `${l}.`);
    }), i;
  }
  /**
   * Returns property name that corresponds with the given column index.
   *
   * @param {string|number} column Visual column index or another passed argument.
   * @returns {string|number} Column property, physical column index or passed argument.
   */
  colToProp(e) {
    if (Number.isInteger(e) === !1)
      return e;
    const n = this.hot.toPhysicalColumn(e);
    return n === null ? e : this.colToPropCache && Re(this.colToPropCache[n]) ? this.colToPropCache[n] : n;
  }
  /**
   * Translates property into visual column index.
   *
   * @param {string|number} prop Column property which may be also a physical column index.
   * @returns {string|number} Visual column index or passed argument.
   */
  propToCol(e) {
    const n = this.propToColCache.get(e);
    if (Re(n))
      return this.hot.toVisualColumn(n);
    const r = this.hot.toVisualColumn(e);
    return r === null ? e : r;
  }
  /**
   * Returns data's schema.
   *
   * @returns {object}
   */
  getSchema() {
    const e = this.tableMeta.dataSchema;
    return e ? typeof e == "function" ? e() : e : this.duckSchema;
  }
  /**
   * Creates the duck schema based on the current dataset.
   *
   * @returns {Array|object}
   */
  createDuckSchema() {
    return this.dataSource && this.dataSource[0] ? Vl(this.dataSource[0]) : {};
  }
  /**
   * Refresh the data schema.
   */
  refreshDuckSchema() {
    this.duckSchema = this.createDuckSchema();
  }
  /**
   * Creates row at the bottom of the data array.
   *
   * @param {number} [index] Physical index of the row before which the new row will be inserted.
   * @param {number} [amount=1] An amount of rows to add.
   * @param {object} [options] Additional options for created rows.
   * @param {string} [options.source] Source of method call.
   * @param {'above'|'below'} [options.mode] Sets where the row is inserted: above or below the passed index.
   * @fires Hooks#afterCreateRow
   * @returns {number} Returns number of created rows.
   */
  createRow(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, {
      source: r,
      mode: i = "above"
    } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const o = this.hot.countSourceRows();
    let s = o, a = 0, l = e;
    if ((typeof l != "number" || l >= o) && (l = o), l < this.hot.countRows() && (s = this.hot.toPhysicalRow(l)), this.hot.runHooks("beforeCreateRow", l, n, r) === !1 || s === null)
      return {
        delta: 0
      };
    const c = this.tableMeta.maxRows, d = this.getSchema().length, g = [];
    for (; a < n && o + a < c; ) {
      let C = null;
      this.hot.dataType === "array" ? this.tableMeta.dataSchema ? C = Wn(this.getSchema()) : (C = [], xe(d - 1, () => C.push(null))) : this.hot.dataType === "function" ? C = this.tableMeta.dataSchema(l + a) : (C = {}, th(C, this.getSchema())), g.push(C), a += 1;
    }
    this.hot.rowIndexMapper.insertIndexes(l, a), i === "below" && (s = Math.min(s + 1, o)), this.spliceData(s, 0, g);
    const p = this.hot.toVisualRow(s);
    return this.hot.countSourceRows() === g.length && this.hot.columnIndexMapper.initToLength(this.hot.getInitialColumnCount()), a > 0 && (e == null ? this.metaManager.createRow(null, a) : r !== "auto" && this.metaManager.createRow(s, n)), this.hot.runHooks("afterCreateRow", p, a, r), this.hot.forceFullRender = !0, {
      delta: a,
      startPhysicalIndex: s
    };
  }
  /**
   * Creates column at the right of the data array.
   *
   * @param {number} [index] Visual index of the column before which the new column will be inserted.
   * @param {number} [amount=1] An amount of columns to add.
   * @param {object} [options] Additional options for created columns.
   * @param {string} [options.source] Source of method call.
   * @param {'start'|'end'} [options.mode] Sets where the column is inserted: at the start (left in [LTR](@/api/options.md#layoutdirection), right in [RTL](@/api/options.md#layoutdirection)) or at the end (right in LTR, left in LTR)
   * the passed index.
   * @fires Hooks#afterCreateCol
   * @returns {number} Returns number of created columns.
   */
  createCol(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, {
      source: r,
      mode: i = "start"
    } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (!this.hot.isColumnModificationAllowed())
      throw new Error("Cannot create new column. When data source in an object, you can only have as much columns as defined in first data row, data schema or in the 'columns' setting.If you want to be able to add new columns, you have to use array datasource.");
    const o = this.dataSource, s = this.tableMeta.maxCols, a = this.hot.countSourceCols();
    let l = e;
    if ((typeof l != "number" || l >= a) && (l = a), this.hot.runHooks("beforeCreateCol", l, n, r) === !1)
      return {
        delta: 0
      };
    let c = a;
    l < this.hot.countCols() && (c = this.hot.toPhysicalColumn(l));
    const d = this.hot.countSourceRows();
    let g = this.hot.countCols(), p = 0, C = c;
    i === "end" && (C = Math.min(C + 1, a));
    const E = C;
    for (; p < n && g < s; ) {
      if (typeof l != "number" || l >= g)
        if (d > 0)
          for (let M = 0; M < d; M += 1)
            typeof o[M] > "u" && (o[M] = []), o[M].push(null);
        else
          o.push([null]);
      else
        for (let M = 0; M < d; M++)
          o[M].splice(C, 0, null);
      p += 1, C += 1, g += 1;
    }
    this.hot.columnIndexMapper.insertIndexes(l, p), p > 0 && (e == null ? this.metaManager.createColumn(null, p) : r !== "auto" && this.metaManager.createColumn(E, n));
    const I = this.hot.toVisualColumn(E);
    return this.hot.runHooks("afterCreateCol", I, p, r), this.hot.forceFullRender = !0, this.refreshDuckSchema(), {
      delta: p,
      startPhysicalIndex: E
    };
  }
  /**
   * Removes row from the data array.
   *
   * @fires Hooks#beforeRemoveRow
   * @fires Hooks#afterRemoveRow
   * @param {number} [index] Visual index of the row to be removed. If not provided, the last row will be removed.
   * @param {number} [amount=1] Amount of the rows to be removed. If not provided, one row will be removed.
   * @param {string} [source] Source of method call.
   * @returns {boolean} Returns `false` when action was cancelled, otherwise `true`.
   */
  removeRow(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, r = arguments.length > 2 ? arguments[2] : void 0, i = Number.isInteger(e) ? e : -n;
    const o = this.visualRowsToPhysical(i, n), s = this.hot.countSourceRows();
    if (i = (s + i) % s, this.hot.runHooks("beforeRemoveRow", i, o.length, o, r) === !1)
      return !1;
    const l = o.length;
    if (this.filterData(i, l, o), i < this.hot.countRows()) {
      this.hot.rowIndexMapper.removeIndexes(o);
      const c = Re(this.tableMeta.columns) || Re(this.tableMeta.dataSchema);
      this.hot.rowIndexMapper.getNotTrimmedIndexesLength() === 0 && c === !1 && this.hot.columnIndexMapper.setIndexesSequence([]);
    }
    return o.slice(0).sort((c, d) => d - c).forEach((c) => {
      this.metaManager.removeRow(c, 1);
    }), this.hot.runHooks("afterRemoveRow", i, l, o, r), this.hot.forceFullRender = !0, !0;
  }
  /**
   * Removes column from the data array.
   *
   * @fires Hooks#beforeRemoveCol
   * @fires Hooks#afterRemoveCol
   * @param {number} [index] Visual index of the column to be removed. If not provided, the last column will be removed.
   * @param {number} [amount=1] Amount of the columns to be removed. If not provided, one column will be removed.
   * @param {string} [source] Source of method call.
   * @returns {boolean} Returns `false` when action was cancelled, otherwise `true`.
   */
  removeCol(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, r = arguments.length > 2 ? arguments[2] : void 0;
    if (this.hot.dataType === "object" || this.tableMeta.columns)
      throw new Error("cannot remove column with object data source or columns option specified");
    let i = typeof e != "number" ? -n : e;
    i = (this.hot.countCols() + i) % this.hot.countCols();
    const o = this.visualColumnsToPhysical(i, n), s = o.slice(0).sort((d, g) => g - d);
    if (this.hot.runHooks("beforeRemoveCol", i, n, o, r) === !1)
      return !1;
    let l = !0;
    const u = s.length, c = this.dataSource;
    for (let d = 0; d < u; d++)
      l && o[0] !== o[d] - d && (l = !1);
    if (l)
      for (let d = 0, g = this.hot.countSourceRows(); d < g; d++)
        c[d].splice(o[0], n), d === 0 && this.metaManager.removeColumn(o[0], n);
    else
      for (let d = 0, g = this.hot.countSourceRows(); d < g; d++)
        for (let p = 0; p < u; p++)
          c[d].splice(s[p], 1), d === 0 && this.metaManager.removeColumn(s[p], 1);
    return i < this.hot.countCols() && (this.hot.columnIndexMapper.removeIndexes(o), this.hot.columnIndexMapper.getNotTrimmedIndexesLength() === 0 && this.hot.rowIndexMapper.setIndexesSequence([])), this.hot.runHooks("afterRemoveCol", i, n, o, r), this.hot.forceFullRender = !0, this.refreshDuckSchema(), !0;
  }
  /**
   * Add/Removes data from the column.
   *
   * @param {number} col Physical index of column in which do you want to do splice.
   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.
   * @param {Array} [elements] The new columns to add.
   * @returns {Array} Returns removed portion of columns.
   */
  spliceCol(e, n, r) {
    const i = this.hot.getDataAtCol(e), o = i.slice(n, n + r), s = i.slice(n + r);
    for (var a = arguments.length, l = new Array(a > 3 ? a - 3 : 0), u = 3; u < a; u++)
      l[u - 3] = arguments[u];
    EC(l, s);
    let c = 0;
    for (; c < r; )
      l.push(null), c += 1;
    return FI(l), this.hot.populateFromArray(n, e, l, null, null, "spliceCol"), o;
  }
  /**
   * Add/Removes data from the row.
   *
   * @param {number} row Physical index of row in which do you want to do splice.
   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.
   * @param {Array} [elements] The new rows to add.
   * @returns {Array} Returns removed portion of rows.
   */
  spliceRow(e, n, r) {
    const i = this.hot.getSourceDataAtRow(e), o = i.slice(n, n + r), s = i.slice(n + r);
    for (var a = arguments.length, l = new Array(a > 3 ? a - 3 : 0), u = 3; u < a; u++)
      l[u - 3] = arguments[u];
    EC(l, s);
    let c = 0;
    for (; c < r; )
      l.push(null), c += 1;
    return this.hot.populateFromArray(e, n, [l], null, null, "spliceRow"), o;
  }
  /**
   * Add/remove row(s) to/from the data source.
   *
   * @param {number} index Physical index of the element to add/remove.
   * @param {number} deleteCount Number of rows to remove.
   * @param {Array<object>} elements Row elements to be added.
   */
  spliceData(e, n, r) {
    if (this.hot.runHooks("beforeDataSplice", e, n, r) !== !1) {
      const o = [...this.dataSource.slice(0, e), ...r, ...this.dataSource.slice(e)];
      this.dataSource.length = 0, o.forEach((s) => this.dataSource.push(s));
    }
  }
  /**
   * Filter unwanted data elements from the data source.
   *
   * @param {number} index Visual index of the element to remove.
   * @param {number} amount Number of rows to add/remove.
   * @param {number} physicalRows Physical row indexes.
   */
  filterData(e, n, r) {
    let i = this.hot.runHooks("filterData", e, n, r);
    Array.isArray(i) === !1 && (i = this.dataSource.filter((o, s) => r.indexOf(s) === -1)), this.dataSource.length = 0, Array.prototype.push.apply(this.dataSource, i);
  }
  /**
   * Returns single value from the data array.
   *
   * @param {number} row Visual row index.
   * @param {number} prop The column property.
   * @returns {*}
   */
  get(e, n) {
    const r = this.hot.toPhysicalRow(e);
    let i = this.dataSource[r];
    const o = this.hot.runHooks("modifyRowData", r);
    i = isNaN(o) ? o : i;
    let s = null;
    if (i && i.hasOwnProperty && Vt(i, n))
      s = i[n];
    else if (typeof n == "string" && n.indexOf(".") > -1) {
      const a = n.split(".");
      let l = i;
      if (!l)
        return null;
      for (let u = 0, c = a.length; u < c; u++)
        if (l = l[a[u]], typeof l > "u")
          return null;
      s = l;
    } else
      typeof n == "function" && (s = n(this.dataSource.slice(r, r + 1)[0]));
    if (this.hot.hasHook("modifyData")) {
      const a = gi(s);
      this.hot.runHooks("modifyData", r, this.propToCol(n), a, "get"), a.isTouched() && (s = a.value);
    }
    return s;
  }
  /**
   * Returns single value from the data array (intended for clipboard copy to an external application).
   *
   * @param {number} row Physical row index.
   * @param {number} prop The column property.
   * @returns {string}
   */
  getCopyable(e, n) {
    return this.hot.getCellMeta(e, this.propToCol(n)).copyable ? this.get(e, n) : "";
  }
  /**
   * Saves single value to the data array.
   *
   * @param {number} row Visual row index.
   * @param {number} prop The column property.
   * @param {string} value The value to set.
   */
  set(e, n, r) {
    const i = this.hot.toPhysicalRow(e);
    let o = r, s = this.dataSource[i];
    const a = this.hot.runHooks("modifyRowData", i);
    if (s = isNaN(a) ? a : s, this.hot.hasHook("modifyData")) {
      const l = gi(o);
      this.hot.runHooks("modifyData", i, this.propToCol(n), l, "set"), l.isTouched() && (o = l.value);
    }
    if (s && s.hasOwnProperty && Vt(s, n))
      s[n] = o;
    else if (typeof n == "string" && n.indexOf(".") > -1) {
      const l = n.split(".");
      let u = s, c = 0, d;
      for (c = 0, d = l.length - 1; c < d; c++)
        typeof u[l[c]] > "u" && (u[l[c]] = {}), u = u[l[c]];
      u[l[c]] = o;
    } else
      typeof n == "function" ? n(this.dataSource.slice(i, i + 1)[0], o) : s[n] = o;
  }
  /**
   * This ridiculous piece of code maps rows Id that are present in table data to those displayed for user.
   * The trick is, the physical row id (stored in settings.data) is not necessary the same
   * as the visual (displayed) row id (e.g. When sorting is applied).
   *
   * @param {number} index Visual row index.
   * @param {number} amount An amount of rows to translate.
   * @returns {number}
   */
  visualRowsToPhysical(e, n) {
    const r = this.hot.countSourceRows(), i = [];
    let o = (r + e) % r, s = n, a;
    for (; o < r && s; )
      a = this.hot.toPhysicalRow(o), i.push(a), s -= 1, o += 1;
    return i;
  }
  /**
   *
   * @param {number} index Visual column index.
   * @param {number} amount An amount of rows to translate.
   * @returns {Array}
   */
  visualColumnsToPhysical(e, n) {
    const r = this.hot.countCols(), i = [];
    let o = (r + e) % r, s = n;
    for (; o < r && s; ) {
      const a = this.hot.toPhysicalColumn(o);
      i.push(a), s -= 1, o += 1;
    }
    return i;
  }
  /**
   * Clears the data array.
   */
  clear() {
    for (let e = 0; e < this.hot.countSourceRows(); e++)
      for (let n = 0; n < this.hot.countCols(); n++)
        this.set(e, this.colToProp(n), "");
  }
  /**
   * Get data length.
   *
   * @returns {number}
   */
  getLength() {
    const e = this.tableMeta.maxRows;
    let n;
    e < 0 || e === 0 ? n = 0 : n = e || 1 / 0;
    const r = this.hot.rowIndexMapper.getNotTrimmedIndexesLength();
    return Math.min(r, n);
  }
  /**
   * Returns the data array.
   *
   * @returns {Array}
   */
  getAll() {
    const e = {
      row: 0,
      col: 0
    }, n = {
      row: Math.max(this.hot.countRows() - 1, 0),
      col: Math.max(this.hot.countCols() - 1, 0)
    };
    return e.row - n.row === 0 && !this.hot.countSourceRows() ? [] : this.getRange(e, n, Pl.DESTINATION_RENDERER);
  }
  /**
   * Count the number of columns cached in the `colToProp` cache.
   *
   * @returns {number} Amount of cached columns.
   */
  countCachedColumns() {
    return this.colToPropCache.length;
  }
  /**
   * Returns data range as array.
   *
   * @param {object} [start] Start selection position. Visual indexes.
   * @param {object} [end] End selection position. Visual indexes.
   * @param {number} destination Destination of datamap.get.
   * @returns {Array}
   */
  getRange(e, n, r) {
    const i = [];
    let o, s, a;
    const l = this.tableMeta.maxRows, u = this.tableMeta.maxCols;
    if (l === 0 || u === 0)
      return [];
    const c = r === Pl.DESTINATION_CLIPBOARD_GENERATOR ? this.getCopyable : this.get, d = Math.min(Math.max(l - 1, 0), Math.max(e.row, n.row)), g = Math.min(Math.max(u - 1, 0), Math.max(e.col, n.col));
    for (o = Math.min(e.row, n.row); o <= d; o++) {
      a = [];
      const p = o >= 0 ? this.hot.toPhysicalRow(o) : o;
      for (s = Math.min(e.col, n.col); s <= g && p !== null; s++)
        a.push(c.call(this, o, this.colToProp(s)));
      p !== null && i.push(a);
    }
    return i;
  }
  /**
   * Return data as text (tab separated columns).
   *
   * @param {object} [start] Start selection position. Visual indexes.
   * @param {object} [end] End selection position. Visual indexes.
   * @returns {string}
   */
  getText(e, n) {
    return cc(this.getRange(e, n, Pl.DESTINATION_RENDERER));
  }
  /**
   * Return data as copyable text (tab separated columns intended for clipboard copy to an external application).
   *
   * @param {object} [start] Start selection position. Visual indexes.
   * @param {object} [end] End selection position. Visual indexes.
   * @returns {string}
   */
  getCopyableText(e, n) {
    return cc(this.getRange(e, n, Pl.DESTINATION_CLIPBOARD_GENERATOR));
  }
  /**
   * Destroy instance.
   */
  destroy() {
    this.hot = null, this.metaManager = null, this.dataSource = null, this.duckSchema = null, this.colToPropCache.length = 0, this.propToColCache.clear(), this.propToColCache = void 0;
  }
}
const Dq = Pl, {
  register: Nq,
  getItem: Lq,
  hasItem: Fx,
  getNames: $q,
  getValues: Jae
} = yi("cellTypes");
function Ab(t) {
  if (!Fx(t))
    throw Error(`You declared cell type "${t}" as a string that is not mapped to a known object.
                 Cell type must be an object or a string mapped to an object registered by
                 "Handsontable.cellTypes.registerCellType" method`);
  return Lq(t);
}
function $r(t, e) {
  typeof t != "string" && (e = t, t = e.CELL_TYPE);
  const {
    editor: n,
    renderer: r,
    validator: i
  } = e;
  n && hr(t, n), r && ki(t, r), i && Il(t, i), Nq(t, e);
}
function kq(t, e) {
  var n;
  return t === "CELL_TYPE" ? !1 : ((n = e._automaticallyAssignedMetaProps) === null || n === void 0 ? void 0 : n.has(t)) || !Vt(e, t);
}
function Qg(t, e) {
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : t;
  const r = typeof e.type == "string" ? Ab(e.type) : e.type;
  if (t._automaticallyAssignedMetaProps && Ze(e, (o, s) => void t._automaticallyAssignedMetaProps.delete(s)), !Xe(r))
    return;
  n === t && !t._automaticallyAssignedMetaProps && (t._automaticallyAssignedMetaProps = /* @__PURE__ */ new Set());
  const i = {};
  Ze(r, (o, s) => {
    if (kq(s, n)) {
      var a;
      i[s] = o, (a = t._automaticallyAssignedMetaProps) === null || a === void 0 || a.add(s);
    }
  }), ln(t, i);
}
function Fq(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  function n() {
  }
  Bo(n, t);
  for (let r = 0; r < e.length; r++)
    n.prototype[e[r]] = void 0;
  return n;
}
function tf(t) {
  return Number.isInteger(t) && t >= 0;
}
function nf(t, e) {
  if (!t())
    throw new Error(`Assertion failed: ${e}`);
}
function zh(t) {
  return t == null;
}
const Wx = () => ({
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Information on which of the meta properties were added automatically.
   * For example: setting the `renderer` property directly won't extend the `_automaticallyAssignedMetaProps`
   * entry, but setting a `type` will modify it to `Set(3) {'renderer', 'editor', 'validator', ...}`.
   *
   * @private
   * @type {Set}
   * @default undefined
   */
  _automaticallyAssignedMetaProps: void 0,
  /**
   * The `activeHeaderClassName` option lets you add a CSS class name
   * to every currently-active, currently-selected header (when a whole column or row is selected).
   *
   * Read more:
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @since 0.38.2
   * @default 'ht__active_highlight'
   * @category Core
   *
   * @example
   * ```js
   * // add an `ht__active_highlight` CSS class name
   * // to every currently-active, currently-selected header
   * activeHeaderClassName: 'ht__active_highlight',
   * ```
   */
  activeHeaderClassName: "ht__active_highlight",
  /**
   * The `allowEmpty` option determines whether Handsontable accepts the following values:
   * - `null`
   * - `undefined`
   * - `''`
   *
   * You can set the `allowEmpty` option to one of the following:
   *
   * | Setting          | Description                                                                                                                          |
   * | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------ |
   * | `true` (default) | - Accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` or `''` values as `valid`              |
   * | `false`          | - Don't accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` or `''` values with as `invalid` |
   *
   * ::: tip
   * To use the [`allowEmpty`](#allowempty) option, you need to set the [`validator`](#validator) option (or the [`type`](#type) option).
   * :::
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // allow empty values in each cell of the entire grid
   * allowEmpty: true,
   *
   * // or
   * columns: [
   *   {
   *     type: 'date',
   *     dateFormat: 'DD/MM/YYYY',
   *     // allow empty values in each cell of the 'date' column
   *     allowEmpty: true
   *   }
   * ],
   * ```
   */
  allowEmpty: !0,
  /**
   * The `allowHtml` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)
   * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells' [`source`](#source) data
   * is treated as HTML.
   *
   * You can set the `allowHtml` option to one of the following:
   *
   * | Setting           | Description                                         |
   * | ----------------- | --------------------------------------------------- |
   * | `false` (default) | The [`source`](#source) data is not treated as HTML |
   * | `true`            | The [`source`](#source) data is treated as HTML     |
   *
   * __Warning:__ Setting the `allowHtml` option to `true` can cause serious XSS vulnerabilities.
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)
   * - [`source`](#source)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *   // set the `type` of each cell in this column to `autocomplete`
   *   type: 'autocomplete',
   *   // set options available in every `autocomplete` cell of this column
   *   source: ['<strong>foo</strong>', '<strong>bar</strong>']
   *   // use HTML in the `source` list
   *   allowHtml: true,
   *   },
   * ],
   * ```
   */
  allowHtml: !1,
  /**
   * If set to `true`, the `allowInsertColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):
   * - **Insert column left**
   * - **Insert column right**
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // hide the 'Insert column left' and 'Insert column right' menu items from the context menu
   * allowInsertColumn: false,
   * ```
   */
  allowInsertColumn: !0,
  /**
   * If set to `true`, the `allowInsertRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):
   * - **Insert row above**
   * - **Insert row below**
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // hide the 'Insert row above' and 'Insert row below' menu items from the context menu
   * allowInsertRow: false,
   * ```
   */
  allowInsertRow: !0,
  /**
   * The `allowInvalid` option determines whether Handsontable accepts values
   * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).
   *
   * You can set the `allowInvalid` option to one of the following:
   *
   * | Setting          | Description                                                                                                                                                                        |
   * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true` (default) | - Accept `invalid` values<br>- Allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Save `invalid` values into the data source                   |
   * | `false`          | - Don't accept `invalid` values<br>- Don't allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Don't save `invalid` values into the data source |
   *
   * Setting the `allowInvalid` option to `false` can be useful when used with the [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode).
   *
   * Read more:
   * - [Cell validator](@/guides/cell-functions/cell-validator.md)
   * - [Cell editor](@/guides/cell-functions/cell-editor.md)
   * - [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // don't accept `invalid` values
   * // don't allow the user to close the cell editor
   * // don't save `invalid` values into the data source
   * allowInvalid: false,
   * ```
   */
  allowInvalid: !0,
  /**
   * If set to `true`, the `allowRemoveColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):
   * - **Remove column**
   *
   * Read more:
   * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // hide the 'Remove column' menu item from the context menu
   * allowRemoveColumn: false,
   * ```
   */
  allowRemoveColumn: !0,
  /**
   * If set to `true`, the `allowRemoveRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):
   * - **Remove row**
   *
   * Read more:
   * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // hide the 'Remove row' menu item from the context menu
   * allowRemoveRow: false,
   * ```
   */
  allowRemoveRow: !0,
  /**
   * If set to `true`, the accessibility-related ARIA tags will be added to the table. If set to `false`, they
   * will be omitted.
   * Defaults to `true`.
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   * @since 14.0.0
   */
  ariaTags: !0,
  /**
   * The `autoColumnSize` option configures the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.
   *
   * You can set the `autoColumnSize` option to one of the following:
   *
   * | Setting   | Description                                                                                  |
   * | --------- | -------------------------------------------------------------------------------------------- |
   * | `false`   | Disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin                               |
   * | `true`    | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin with the default configuration |
   * | An object | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin and modify the plugin options  |
   *
   * If you set the `autoColumnSize` option to an object, you can set the following [`AutoColumnSize`](@/api/autoColumnSize.md) plugin options:
   *
   * | Property                | Possible values                 | Description                                                                                                    |
   * | ----------------------- | ------------------------------- | -------------------------------------------------------------------------------------------------------------- |
   * | `syncLimit`             | A number \| A percentage string | The number/percentage of columns to keep in sync<br>(default: `50`)                                            |
   * | `useHeaders`            | `true` \| `false`               | When calculating column widths:<br>`true`: use column headers<br>`false`: don't use column headers          |
   * | `samplingRatio`         | A number                        | The number of samples of the same length to be used in column width calculations                               |
   * | `allowSampleDuplicates` | `true` \| `false`               | When calculating column widths:<br>`true`: Allow duplicate samples<br>`false`: Don't allow duplicate samples |
   *
   * By default, the `autoColumnSize` option is set to `undefined`,
   * but the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin acts as enabled.
   * To disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin completely,
   * set the `autoColumnSize` option to `false`.
   *
   * Using the [`colWidths`](#colWidths) option forcibly disables the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.
   *
   * Read more:
   * - [Plugins: `AutoColumnSize`](@/api/autoColumnSize.md)
   *
   * @memberof Options#
   * @type {object|boolean}
   * @default undefined
   * @category AutoColumnSize
   *
   * @example
   * ```js
   * autoColumnSize: {
   *   // keep 40% of columns in sync (the rest of columns: async)
   *   syncLimit: '40%',
   *   // when calculating column widths, use column headers
   *   useHeaders: true,
   *   // when calculating column widths, use 10 samples of the same length
   *   samplingRatio: 10,
   *   // when calculating column widths, allow duplicate samples
   *   allowSampleDuplicates: true
   * },
   * ```
   */
  autoColumnSize: void 0,
  /**
   * The `autoRowSize` option configures the [`AutoRowSize`](@/api/autoRowSize.md) plugin.
   *
   * You can set the `autoRowSize` option to one of the following:
   *
   * | Setting   | Description                                                                            |
   * | --------- | -------------------------------------------------------------------------------------- |
   * | `false`   | Disable the [`AutoRowSize`](@/api/autoRowSize.md) plugin                               |
   * | `true`    | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin with the default configuration |
   * | An object | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin and modify the plugin options  |
   *
   * To give Handsontable's [scrollbar](https://handsontable.com/docs/8.0.0/demo-scrolling.html)
   * a proper size, set the `autoRowSize` option to `true`.
   *
   * If you set the `autoRowSize` option to an object, you can set the following [`AutoRowSize`](@/api/autoRowSize.md) plugin options:
   *
   * | Property    | Possible values                 | Description                                                       |
   * | ----------- | ------------------------------- | ----------------------------------------------------------------- |
   * | `syncLimit` | A number \| A percentage string | The number/percentage of rows to keep in sync<br>(default: `500`) |
   *
   * Using the [`rowHeights`](#rowHeights) option forcibly disables the [`AutoRowSize`](@/api/autoRowSize.md) plugin.
   *
   * Read more:
   * - [Plugins: `AutoRowSize`](@/api/autoRowSize.md)
   *
   * @memberof Options#
   * @type {object|boolean}
   * @default undefined
   * @category AutoRowSize
   *
   * @example
   * ```js
   * autoRowSize: {
   *   // keep 40% of rows in sync (the rest of rows: async)
   *   syncLimit: '40%'
   * },
   * ```
   */
  autoRowSize: void 0,
  /**
   * With [`autoWrapCol`](#autowrapcol) enabled:
   * - When you select a bottom-most cell, pressing <kbd>**↓**</kbd> takes you to the top-most cell of the next column.
   * - When you select a top-most cell, pressing <kbd>**↑**</kbd> takes you to the bottom-most cell of the previous column.
   *
   * You can set the [`autoWrapCol`](#autowrapcol) option to one of the following:
   *
   * | Setting           | Description                                                                                                                                                                                                                                  |
   * | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true`            | When you select a bottom-most cell, pressing <kbd>**↓**</kbd> takes you to the top-most cell of the next column.<br><br>When you select a top-most cell, pressing <kbd>**↑**</kbd> takes you to the bottom-most cell of the previous column. |
   * | `false` (default) | When you select a bottom-most cell, pressing <kbd>**↓**</kbd> doesn't do anything.<br><br>When you select a top-most cell, pressing <kbd>**↑**</kbd> doesn't do anything.                                                                    |
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // when you select a bottom-most cell, pressing ⬇ doesn't do anything
   * // when you select a top-most cell, pressing ⬆ doesn't do anything
   * autoWrapCol: false, // default setting
   *
   * // when you select a bottom-most cell, pressing ⬇ takes you to the top-most cell of the next column
   * // when you select a top-most cell, pressing ⬆ takes you to the bottom-most cell of the previous column
   * autoWrapCol: true,
   * ```
   */
  autoWrapCol: !1,
  /**
   * With [`autoWrapRow`](#autoWrapRow) enabled:
   * - When you select the first cell of a row, pressing <kbd>**←**</kbd>* takes you to the last cell of the row above.
   * - When you select the last cell of a row, pressing <kbd>**→**</kbd>* takes you to the first cell of the row below.
   *
   * You can set the [`autoWrapRow`](#autoWrapRow) option to one of the following:
   *
   * | Setting           | Description                                                                                                                                                                                                                              |
   * | ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true`            | When you select the first cell of a row, pressing <kbd>**←**</kbd>* takes you to the last cell of the row above.<br><br>When you select the last cell of a row, pressing <kbd>**→**</kbd>* takes you to the first cell of the row below. |
   * | `false` (default) | When you select the first cell of a row, pressing <kbd>**←**</kbd>* doesn't do anything.<br><br>When you select the last cell of a row, pressing <kbd>**→**</kbd>* doesn't do anything.                                                  |
   *
   * \* The exact key depends on your [`layoutDirection`](#layoutdirection) configuration.
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // when you select the first cell of a row, pressing ⬅ doesn't do anything
   * // when you select the last cell of a row, pressing ➡️ doesn't do anything
   * autoWrapRow: false, // default setting
   *
   * // when you select the first cell of a row, pressing ⬅ takes you to the last cell of the row above
   * // when you select the last cell of a row, pressing ➡️ takes you to the first cell of the row below
   * autoWrapRow: true,
   * ```
   */
  autoWrapRow: !1,
  /**
   * @description
   * The `bindRowsWithHeaders` option configures the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin.
   *
   * You can set the `bindRowsWithHeaders` option to one of the following:
   *
   * | Setting | Description                                                                  |
   * | ------- | ---------------------------------------------------------------------------- |
   * | `false` | Disable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin |
   * | `true`  | Enable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin  |
   *
   * Read more:
   * - [Plugins: `BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md)
   *
   * @memberof Options#
   * @type {boolean|string}
   * @default undefined
   * @category BindRowsWithHeaders
   *
   * @example
   * ```js
   * // enable the `BindRowsWithHeaders` plugin
   * bindRowsWithHeaders: true
   * ```
   */
  bindRowsWithHeaders: void 0,
  /**
   * The `cell` option lets you apply [configuration options](@/guides/getting-started/configuration-options.md) to individual cells.
   *
   * The `cell` option overwrites the [top-level grid options](@/guides/getting-started/configuration-options.md#set-grid-options),
   * and the [`columns`](#columns) options.
   *
   * Read more:
   * - [Configuration options: Setting cell options](@/guides/getting-started/configuration-options.md#set-cell-options)
   * - [`columns`](#columns)
   *
   * @memberof Options#
   * @type {Array[]}
   * @default []
   * @category Core
   *
   * @example
   * ```js
   * // set the `cell` option to an array of objects
   * cell: [
   *   // make the cell with coordinates (0, 0) read-only
   *   {
   *     row: 0,
   *     col: 0,
   *     readOnly: true
   *   }
   * ],
   * ```
   */
  cell: [],
  /**
   * @description
   * The `cells` option lets you apply any other [configuration options](@/guides/getting-started/configuration-options.md) to
   * individual grid elements (columns, rows, cells), based on any logic you implement.
   *
   * The `cells` option overwrites all other options (including options set by [`columns`](#columns) and [`cell`](#cell)).
   * It takes the following parameters:
   *
   * | Parameter | Required | Type             | Description                                                                                                                                                                                                                                                                                                                             |
   * | --------- | -------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `row`     | Yes      | Number           | A physical row index                                                                                                                                                                                                                                                                                                                    |
   * | `column`  | Yes      | Number           | A physical column index                                                                                                                                                                                                                                                                                                                 |
   * | `prop`    | No       | String \| Number | If [`data`](#data) is set to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), `prop` is the same number as `column`.<br><br>If [`data`](#data) is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), `prop` is a property name for the column's data object. |
   *
   * Read more:
   * - [Configuration options: Implementing custom logic](@/guides/getting-started/configuration-options.md#implement-custom-logic)
   * - [Configuration options: Setting row options](@/guides/getting-started/configuration-options.md#set-row-options)
   * - [`columns`](#columns)
   * - [`cell`](#cell)
   *
   * @memberof Options#
   * @type {Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set the `cells` option to your custom function
   * cells(row, column, prop) {
   *   const cellProperties = { readOnly: false };
   *   const visualRowIndex = this.instance.toVisualRow(row);
   *   const visualColIndex = this.instance.toVisualColumn(column);
   *
   *   if (visualRowIndex === 0 && visualColIndex === 0) {
   *     cellProperties.readOnly = true;
   *   }
   *
   *   return cellProperties;
   * },
   * ```
   */
  cells: void 0,
  /**
   * The `checkedTemplate` option lets you configure what value
   * a checked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.
   *
   * You can set the `checkedTemplate` option to one of the following:
   *
   * | Setting          | Description                                                                                                                                                                              |
   * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `true`                  |
   * | A string         | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |
   *
   * Read more:
   * - [Checkbox cell type: Checkbox template](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)
   * - [`getDataAtCell()`](@/api/core.md#getDataAtCell)
   * - [`uncheckedTemplate`](#uncheckedTemplate)
   *
   * @memberof Options#
   * @type {boolean|string|number}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // set the `type` of each cell in this column to `checkbox`
   *     // when checked, the cell's value is `true`
   *     // when unchecked, the cell's value is `false`
   *     type: 'checkbox',
   *   },
   *   {
   *     // set the `type` of each cell in this column to `checkbox`
   *     type: 'checkbox',
   *     // when checked, the cell's value is `'Yes'`
   *     checkedTemplate: 'Yes',
   *     // when unchecked, the cell's value is `'No'`
   *     uncheckedTemplate: 'No'
   *  }
   * ],
   * ```
   */
  checkedTemplate: void 0,
  /**
   * The `className` option lets you add CSS class names to every currently-selected element.
   *
   * You can set the `className` option to one of the following:
   *
   * | Setting             | Description                                                      |
   * | ------------------- | ---------------------------------------------------------------- |
   * | A string            | Add a single CSS class name to every currently-selected element  |
   * | An array of strings | Add multiple CSS class names to every currently-selected element |
   *
   * ::: tip
   * Don't change the `className` metadata of the [column summary](@/guides/columns/column-summary.md) row.
   * To style the summary row, use the class name assigned automatically by the [`ColumnSummary`](@/api/columnSummary.md) plugin: `columnSummaryResult`.
   * :::
   *
   * To apply different CSS class names on different levels, use Handsontable's [cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration).
   *
   * Read more:
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`TableClassName`](#TableClassName)
   *
   * @memberof Options#
   * @type {string|string[]}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // add a `your-class-name` CSS class name
   * // to every currently-selected element
   * className: 'your-class-name',
   *
   * // add `first-class-name` and `second-class-name` CSS class names
   * // to every currently-selected element
   * className: ['first-class-name', 'second-class-name'],
   * ```
   */
  className: void 0,
  /**
   * The `colHeaders` option configures your grid's column headers.
   *
   * You can set the `colHeaders` option to one of the following:
   *
   * | Setting  | Description                                                          |
   * | -------- | -------------------------------------------------------------------- |
   * | `true`   | Enable the default column headers ('A', 'B', 'C', ...)               |
   * | `false`  | Disable column headers                                               |
   * | An array | Define your own column headers (e.g. `['One', 'Two', 'Three', ...]`) |
   * | A function | Define your own column headers, using a function                     |
   *
   * Read more:
   * - [Column header](@/guides/columns/column-header.md)
   *
   * @memberof Options#
   * @type {boolean|string[]|Function}
   * @default null
   * @category Core
   *
   * @example
   * ```js
   * // enable the default column headers
   * colHeaders: true,
   *
   * // set your own column headers
   * colHeaders: ['One', 'Two', 'Three'],
   *
   * // set your own column headers, using a function
   * colHeaders: function(visualColumnIndex) {
   *   return `${visualColumnIndex} + : AB`;
   * },
   * ```
   */
  colHeaders: null,
  /**
   * @description
   * The `collapsibleColumns` option configures the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin.
   *
   * You can set the `collapsibleColumns` option to one of the following:
   *
   * | Setting              | Description                                                                                       |
   * | -------------------- | ------------------------------------------------------------------------------------------------- |
   * | `false`              | Disable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                            |
   * | `true`               | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                             |
   * | An array of objects  | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin for selected column headers |
   *
   * Read more:
   * - [Plugins: `CollapsibleColumns`](@/api/collapsibleColumns.md)
   *
   * @memberof Options#
   * @type {boolean|object[]}
   * @default undefined
   * @category CollapsibleColumns
   *
   * @example
   * ```js
   * // enable column collapsing for all headers
   * collapsibleColumns: true,
   *
   * // enable column collapsing for selected headers
   * collapsibleColumns: [
   *   {row: -4, col: 1, collapsible: true},
   *   {row: -3, col: 5, collapsible: true}
   * ],
   * ```
   */
  collapsibleColumns: void 0,
  /**
   * @description
   * The `columnHeaderHeight` option configures the height of column headers.
   *
   * You can set the `columnHeaderHeight` option to one of the following:
   *
   * | Setting  | Description                                         |
   * | -------- | --------------------------------------------------- |
   * | A number | Set the same height for every column header         |
   * | An array | Set different heights for individual column headers |
   *
   * @memberof Options#
   * @type {number|number[]}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set the same height for every column header
   * columnHeaderHeight: 25,
   *
   * // set different heights for individual column headers
   * columnHeaderHeight: [25, 30, 55],
   * ```
   */
  columnHeaderHeight: void 0,
  /**
   * @description
   * The `columns` option lets you apply any other [configuration options](@/guides/getting-started/configuration-options.md) to individual columns (or ranges of columns).
   *
   * You can set the `columns` option to one of the following:
   * - An array of objects (each object represents one column)
   * - A function that returns an array of objects
   *
   * The `columns` option overwrites the [top-level grid options](@/guides/getting-started/configuration-options.md#set-grid-options).
   *
   * When you use `columns`, the [`startCols`](#startCols), [`minCols`](#minCols), and [`maxCols`](#maxCols) options are ignored.
   *
   * Read more:
   * - [Configuration options: Setting column options](@/guides/getting-started/configuration-options.md#set-column-options)
   * - [`startCols`](#startCols)
   * - [`minCols`](#minCols)
   * - [`maxCols`](#maxCols)
   * - [`data`](#data)
   *
   * @memberof Options#
   * @type {object[]|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set the `columns` option to an array of objects
   * // each object represents one column
   * columns: [
   *   {
   *     // column options for the first (by physical index) column
   *     type: 'numeric',
   *     numericFormat: {
   *       pattern: '0,0.00 $'
   *     }
   *   },
   *   {
   *     // column options for the second (by physical index) column
   *     type: 'text',
   *     readOnly: true
   *   }
   * ],
   *
   * // or set the `columns` option to a function, based on physical indexes
   * columns(index) {
   *   return {
   *     type: index > 0 ? 'numeric' : 'text',
   *     readOnly: index < 1
   *   }
   * }
   * ```
   */
  columns: void 0,
  /**
   * @description
   * The `columnSorting` option configures the [`ColumnSorting`](@/api/columnSorting.md) plugin.
   *
   * You can set the `columnSorting` option to one of the following:
   *
   * | Setting    | Description                                                                                                                            |
   * | ---------- | -------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true`     | Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin with the default configuration                                             |
   * | `false`    | Disable the [`ColumnSorting`](@/api/columnSorting.md) plugin                                                                           |
   * | An object  | - Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin<br>- Modify the [`ColumnSorting`](@/api/columnSorting.md) plugin options |
   *
   * If you set the `columnSorting` option to an object,
   * you can set the following [`ColumnSorting`](@/api/columnSorting.md) plugin options:
   *
   * | Option                   | Possible settings                                                                                                                                |
   * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `indicator`              | `true`: Display the arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header  |
   * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |
   * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |
   * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/rows-sorting.md#add-a-custom-comparator)                                                                |
   *
   * If you set the `columnSorting` option to an object,
   * you can also sort individual columns at Handsontable's initialization.
   * In the `columnSorting` object, add an object named `initialConfig`,
   * with the following properties:
   *
   * | Option      | Possible settings   | Description                                                      |
   * | ----------- | ------------------- | ---------------------------------------------------------------- |
   * | `column`    | A number            | The index of the column that you want to sort at initialization  |
   * | `sortOrder` | `'asc'` \| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |
   *
   * Read more:
   * - [Rows sorting](@/guides/rows/rows-sorting.md)
   * - [Rows sorting: Custom compare functions](@/guides/rows/rows-sorting.md#add-a-custom-comparator)
   * - [`multiColumnSorting`](#multiColumnSorting)
   *
   * @memberof Options#
   * @type {boolean|object}
   * @default undefined
   * @category ColumnSorting
   *
   * @example
   * ```js
   * // enable the `ColumnSorting` plugin
   * columnSorting: true
   *
   * // enable the `ColumnSorting` plugin with custom configuration
   * columnSorting: {
   *   // sort empty cells as well
   *   sortEmptyCells: true,
   *   // display the arrow icon in the column header
   *   indicator: true,
   *   // disable clicking on the column header to sort the column
   *   headerAction: false,
   *   // add a custom compare function
   *   compareFunctionFactory(sortOrder, columnMeta) {
   *     return function(value, nextValue) {
   *       // some value comparisons which will return -1, 0 or 1...
   *     }
   *   }
   * }
   *
   * // enable the `ColumnSorting` plugin
   * columnSorting: {
   *   // at initialization, sort column 1 in ascending order
   *   initialConfig: {
   *     column: 1,
   *     sortOrder: 'asc'
   *   },
   *   // at initialization, sort column 2 in descending order
   *   initialConfig: {
   *     column: 2,
   *     sortOrder: 'desc'
   *   }
   * }
   * ```
   */
  columnSorting: void 0,
  /**
   * @description
   * The `columnSummary` option configures the [`ColumnSummary`](@/api/columnSummary.md) plugin.
   *
   * You can set the `columnSummary` option to an array of objects.
   * Each object configures a single column summary, using the following properties:
   *
   * | Property                 | Possible values                                                         | Description                                                                                                                  |
   * | ------------------------ | ----------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |
   * | `sourceColumn`           | A number                                                                | [Column to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)                     |
   * | `ranges`                 | An array                                                                | [Ranges of rows to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)             |
   * | `type`                   | `'sum'` \| `'min'` \| `'max'` \| `'count'` \| `'average'` \| `'custom'` | [Summary function](@/guides/columns/column-summary.md#step-3-calculate-your-summary)                                         |
   * | `destinationRow`         | A number                                                                | [Destination cell's row coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates)    |
   * | `destinationColumn`      | A number                                                                | [Destination cell's column coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |
   * | `forceNumeric`           | `true`  \| `false`                                                      | [Treat non-numerics as numerics](@/guides/columns/column-summary.md#force-numeric-values)                                  |
   * | `reversedRowCoords`      | `true`  \| `false`                                                      | [Reverse row coordinates](@/guides/columns/column-summary.md#step-5-make-room-for-the-destination-cell)                      |
   * | `suppressDataTypeErrors` | `true`  \| `false`                                                      | [Suppress data type errors](@/guides/columns/column-summary.md#throw-data-type-errors)                                    |
   * | `readOnly`               | `true`  \| `false`                                                      | Make summary cell read-only                                                                                                  |
   * | `roundFloat`             | `true`  \| `false`                                                      | [Round summary result](@/guides/columns/column-summary.md#round-a-column-summary-result)                                  |
   * | `customFunction`         | A function                                                              | [Custom summary function](@/guides/columns/column-summary.md#implement-a-custom-summary-function)                         |
   *
   * Read more:
   * - [Column summary](@/guides/columns/column-summary.md)
   * - [Plugins: `ColumnSummary`](@/api/columnSummary.md)
   *
   * @memberof Options#
   * @type {object[]|Function}
   * @default undefined
   * @category ColumnSummary
   *
   * @example
   * ```js
   * columnSummary: [
   *   {
   *     sourceColumn: 0,
   *     ranges: [
   *       [0, 2], [4], [6, 8]
   *     ],
   *     type: 'custom',
   *     destinationRow: 4,
   *     destinationColumn: 1,
   *     forceNumeric: true,
   *     reversedRowCoords: true,
   *     suppressDataTypeErrors: false,
   *     readOnly: true,
   *     roundFloat: false,
   *     customFunction(endpoint) {
   *        return 100;
   *     }
   *   }
   * ],
   * ```
   */
  columnSummary: void 0,
  /**
   * The `colWidths` option sets columns' widths, in pixels.
   *
   * The default column width is 50px. To change it, set the `colWidths` option to one of the following:
   *
   * | Setting     | Description                                                                                          | Example                                                           |
   * | ----------- | ---------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- |
   * | A number    | Set the same width for every column                                                                  | `colWidths: 100`                                                  |
   * | A string    | Set the same width for every column                                                                  | `colWidths: '100px'`                                              |
   * | An array    | Set widths separately for each column                                                                | `colWidths: [100, 120, undefined]`                                |
   * | A function  | Set column widths dynamically,<br>on each render                                                     | `colWidths(visualColumnIndex) { return visualColumnIndex * 10; }` |
   * | `undefined` | Used by the [modifyColWidth](@/api/hooks.md#modifyColWidth) hook,<br>to detect column width changes. | `colWidths: undefined`                                            |
   *
   * Setting `colWidths` even for a single column disables the {@link AutoColumnSize} plugin
   * for all columns. For this reason, if you use `colWidths`, we recommend you set a width for each one
   * of your columns. Otherwise, every column with an undefined width defaults back to 50px,
   * which may cut longer columns names.
   *
   * Read more:
   * - [Column width](@/guides/columns/column-width.md)
   * - [Hooks: `modifyColWidth`](@/api/hooks.md#modifyColWidth)
   * - [`autoColumnSize`](#autoColumnSize)
   *
   * @memberof Options#
   * @type {number|number[]|string|string[]|Array<undefined>|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set every column's width to 100px
   * colWidths: 100,
   *
   * // set every column's width to 100px
   * colWidths: '100px',
   *
   * // set the first (by visual index) column's width to 100
   * // set the second (by visual index) column's width to 120
   * // set the third (by visual index) column's width to `undefined`, so that it defaults to 50px
   * // set any other column's width to the default 50px (note that longer cell values and column names can get cut)
   * colWidths: [100, 120, undefined],
   *
   * // set each column's width individually, using a function
   * colWidths(visualColumnIndex) {
   *   return visualColumnIndex * 10;
   * },
   * ```
   */
  colWidths: void 0,
  /**
   * The `commentedCellClassName` option lets you add a CSS class name to cells
   * that have comments.
   *
   * Read more:
   * - [Comments](@/guides/cell-features/comments.md)
   * - [`comments`](#comments)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default 'htCommentCell'
   * @category Core
   *
   * @example
   * ```js
   * // add a `has-comment` CSS class name
   * // to each cell that has a comment
   * commentedCellClassName: 'has-comment',
   * ```
   */
  commentedCellClassName: "htCommentCell",
  /**
   * @description
   * The `comments` option configures the [`Comments`](@/api/comments.md) plugin.
   *
   * You can set the `comments` option to one of the following:
   *
   * | Setting   | Description                                                                                                                                                                           |
   * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true`    | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)                                 |
   * | `false`   | Disable the [`Comments`](@/api/comments.md) plugin                                                                                                                                    |
   * | An object | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)<br>- Configure comment settings |
   *
   * If you set the `comments` option to an object, you can configure the following comment options:
   *
   * | Option         | Possible settings           | Description                                         |
   * | -------------- | --------------------------- | --------------------------------------------------- |
   * | `displayDelay` | A number (default: `250`)   | Display comments after a delay (in milliseconds)    |
   * | `readOnly`     | `true` \| `false` (default) | `true`: Make comments read-only                     |
   * | `style`        | An object                   | Set comment boxes' `width` and `height` (in pixels) |
   *
   * Read more:
   * - [Comments](@/guides/cell-features/comments.md)
   * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
   * - [`width`](#width)
   * - [`height`](#height)
   * - [`readOnly`](#readOnly)
   * - [`commentedCellClassName`](#commentedCellClassName)
   *
   * @memberof Options#
   * @type {boolean|object[]}
   * @default false
   * @category Comments
   *
   * @example
   * ```js
   * // enable the `Comments` plugin
   * comments: true,
   *
   * // enable the `Comments` plugin
   * // and configure its settings
   * comments: {
   *   // display all comments with a 1-second delay
   *   displayDelay: 1000,
   *   // make all comments read-only
   *   readOnly: true,
   *   // set the default size of all comment boxes
   *   style: {
   *     width: 300,
   *     height: 100
   *   }
   * }
   * ```
   */
  comments: !1,
  /**
   * @description
   * The `contextMenu` option configures the [`ContextMenu`](@/api/contextMenu.md) plugin.
   *
   * You can set the `contextMenu` option to one of the following:
   *
   * | Setting   | Description                                                                                                                                                                                             |
   * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `false`   | Disable the [`ContextMenu`](@/api/contextMenu.md) plugin                                                                                                                                                |
   * | `true`    | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)                 |
   * | An array  | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)              |
   * | An object | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Apply a [custom context menu configuration](@/guides/accessories-and-menus/context-menu.md#context-menu-with-a-fully-custom-configuration) |
   *
   * Read more:
   * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
   * - [Context menu: Context menu with default options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)
   * - [Context menu: Context menu with specific options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)
   * - [Context menu: Context menu with fully custom configuration options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-a-fully-custom-configuration)
   * - [Plugins: `ContextMenu`](@/api/contextMenu.md)
   *
   * @memberof Options#
   * @type {boolean|string[]|object}
   * @default undefined
   * @category ContextMenu
   *
   * @example
   * ```js
   * // enable the `ContextMenu` plugin
   * // use the default context menu options
   * contextMenu: true,
   *
   * // enable the `ContextMenu` plugin
   * // and modify individual context menu options
   * contextMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],
   *
   * // enable the `ContextMenu` plugin
   * // and apply a custom context menu configuration
   * contextMenu: {
   *   items: {
   *     'option1': {
   *       name: 'Option 1'
   *     },
   *     'option2': {
   *       name: 'Option 2',
   *       submenu: {
   *         items: [
   *           {
   *             key: 'option2:suboption1',
   *             name: 'Suboption 1',
   *             callback: function(key, options) {
   *               ...
   *             }
   *           },
   *           ...
   *         ]
   *       }
   *     }
   *   }
   * },
   * ```
   */
  contextMenu: void 0,
  /**
   * @description
   * The `copyable` option determines whether a cell's value can be copied to the clipboard or not.
   *
   * You can set the `copyable` option to one of the following:
   *
   * | Setting                                                                                                        | Description                                                                                                            |
   * | -------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |
   * | `true` (default)                                                                                               | - On pressing <kbd>**Ctrl**</kbd>/<kbd>**Cmd**</kbd>+<kbd>**C**</kbd>, add the cell's value to the clipboard         |
   * | `false`<br>(default for the [`password`](@/guides/cell-types/password-cell-type.md) [cell type](#type))        | - On pressing <kbd>**Ctrl**</kbd>/<kbd>**Cmd**</kbd>+<kbd>**C**</kbd>, add an empty string (`""`) to the clipboard   |
   *
   * Read more:
   * - [Clipboard](@/guides/cell-features/clipboard.md)
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   * - [Password cell type](@/guides/cell-types/password-cell-type.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // enable copying for each cell of the entire grid
   * copyable: true,
   *
   * // enable copying for individual columns
   * columns: [
   *   {
   *     // enable copying for each cell of this column
   *     copyable: true
   *   },
   *   {
   *     // disable copying for each cell of this column
   *     copyable: false
   *   }
   * ]
   *
   * // enable copying for specific cells
   * cells: [
   *   {
   *     cell: 0,
   *     row: 0,
   *     // disable copying for cell (0, 0)
   *     copyable: false,
   *   }
   * ],
   * ```
   */
  copyable: !0,
  /**
   * The `copyPaste` option configures the [`CopyPaste`](@/api/copyPaste.md) plugin.
   *
   * You can set the `copyPaste` option to one of the following:
   *
   * | Setting           | Description                                                                                                            |
   * | ----------------- | ---------------------------------------------------------------------------------------------------------------------- |
   * | `true` (default)  | Enable the [`CopyPaste`](@/api/copyPaste.md) plugin with the default configuration                                     |
   * | `false`           | Disable the [`CopyPaste`](@/api/copyPaste.md) plugin                                                                   |
   * | An object         | - Enable the [`CopyPaste`](@/api/copyPaste.md) plugin<br>- Modify the [`CopyPaste`](@/api/copyPaste.md) plugin options |
   *
   * ##### copyPaste: Additional options
   *
   * If you set the `copyPaste` option to an object, you can set the following `CopyPaste` plugin options:
   *
   * | Option                   | Possible settings                                  | Description                                                                                                                                                                                         |
   * | ------------------------ | -------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `columnsLimit`           | A number (default: `Infinity`)                     | The maximum number of columns that can be copied                                                                                                                                                    |
   * | `rowsLimit`              | A number (default: `Infinity`)                     | The maximum number of columns that can be copied                                                                                                                                                    |
   * | `pasteMode`              | `'overwrite'` \| `'shift_down'` \| `'shift_right'` | When pasting:<br>`'overwrite'`: overwrite the currently-selected cells<br>`'shift_down'`: move the currently-selected cells down<br>`'shift_right'`: move the currently-selected cells to the right |
   * | `copyColumnHeaders`      | Boolean (default: `false`)                         | `true`: add a context menu option for copying cells along with their nearest column headers                                                                                                         |
   * | `copyColumnGroupHeaders` | Boolean (default: `false`)                         | `true`: add a context menu option for copying cells along with all their related columns headers                                                                                                    |
   * | `copyColumnHeadersOnly`  | Boolean (default: `false`)                         | `true`: add a context menu option for copying column headers nearest to the selected cells (without copying cells)                                                                    |
   * | `uiContainer`            | An HTML element                                    | The UI container for the secondary focusable element                                                                                                                                                |
   *
   * Read more:
   * - [Plugins: `CopyPaste`](@/api/copyPaste.md)
   * - [Guides: Clipboard](@/guides/cell-features/clipboard.md)
   *
   * @memberof Options#
   * @type {object|boolean}
   * @default true
   * @category CopyPaste
   *
   * @example
   * ```js
   * // enable the plugin with the default configuration
   * copyPaste: true // set by default
   *
   * // disable the plugin
   * copyPaste: false,
   *
   * // enable the plugin with a custom configuration
   * copyPaste: {
   *   // set a maximum number of columns that can be copied
   *   columnsLimit: 25,
   *
   *   // set a maximum number of rows that can be copied
   *   rowsLimit: 50,
   *
   *   // set the paste behavior
   *   pasteMode: 'shift_down',
   *
   *   // add the option to copy cells along with their nearest column headers
   *   copyColumnHeaders: true,
   *
   *   // add the option to copy cells along with all their related columns headers
   *   copyColumnGroupHeaders: true,
   *
   *   // add the option to copy just column headers (without copying cells)
   *   copyColumnHeadersOnly: true,
   *
   *   // set a UI container
   *   uiContainer: document.body,
   * },
   * ```
   */
  copyPaste: !0,
  /**
   * The `correctFormat` option configures whether incorrectly-formatted times and dates are amended or not.
   *
   * When the user enters dates and times, Handsontable can automatically adjust their format
   * to match the [`dateFormat`](#dateFormat) and [`timeFormat`](@/guides/cell-types/time-cell-type.md) settings.
   *
   * You can set the `correctFormat` option to one of the following:
   *
   * | Setting           | Description                                                                                                                                               |
   * | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `false` (default) | Don't correct the format of the entered date or time (treat the entered date or time as invalid)                                                          |
   * | `true`            | Correct the format of the entered date or time to match the [`dateFormat`](#dateFormat) or [`timeFormat`](@/guides/cell-types/time-cell-type.md) settings |
   *
   * Read more:
   * - [Date cell type](@/guides/cell-types/date-cell-type.md)
   * - [Time cell type](@/guides/cell-types/time-cell-type.md)
   * - [`dateFormat`](#dateFormat)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *   // set the `type` of each cell in this column to `date`
   *   type: 'date',
   *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`
   *   dateFormat: 'YYYY-MM-DD',
   *   // enforce the `YYYY-MM-DD` date format
   *   correctFormat: true
   *   },
   *
   *   {
   *   // set the `type` of each cell in this column to `time`
   *   type: 'time',
   *   // for every `time` cell of this column, set the time format to `h:mm:ss a`
   *   timeFormat: 'h:mm:ss a',
   *   // enforce the `h:mm:ss a` time format
   *   correctFormat: true
   *   },
   * ],
   * ```
   */
  correctFormat: !1,
  /**
   * The `currentColClassName` option lets you add a CSS class name
   * to each cell of the currently-visible, currently-selected columns.
   *
   * Read more:
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // add a `your-class-name` CSS class name
   * // to each cell of the currently-visible, currently-selected columns
   * currentColClassName: 'your-class-name',
   * ```
   */
  currentColClassName: void 0,
  /**
   * The `currentHeaderClassName` option lets you add a CSS class name
   * to every currently-visible, currently-selected header.
   *
   * Read more:
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default 'ht__highlight'
   * @category Core
   *
   * @example
   * ```js
   * // add an `ht__highlight` CSS class name
   * // to every currently-visible, currently-selected header
   * currentHeaderClassName: 'ht__highlight',
   * ```
   */
  currentHeaderClassName: "ht__highlight",
  /**
   * The `currentRowClassName` option lets you add a CSS class name
   * to each cell of the currently-visible, currently-selected rows.
   *
   * Read more:
   * - [`currentColClassName`](#currentColClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // add a `your-class-name` CSS class name
   * // to each cell of the currently-visible, currently-selected rows
   * currentRowClassName: 'your-class-name',
   * ```
   */
  currentRowClassName: void 0,
  /**
   * @description
   * The `customBorders` option configures the [`CustomBorders`](@/api/customBorders.md) plugin.
   *
   * To enable the [`CustomBorders`](@/api/customBorders.md) plugin
   * (and add its menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)),
   * set the `customBorders` option to `true`.
   *
   * To enable the [`CustomBorders`](@/api/customBorders.md) plugin
   * and add a predefined border around a particular cell,
   * set the `customBorders` option to an array of objects.
   * Each object represents a border configuration for one cell, and has the following properties:
   *
   * | Property | Sub-properties     | Types                              | Description                                                       |
   * | -------- | ------------------ | ---------------------------------- | ----------------------------------------------------------------- |
   * | `row`    | -                  | `row`: Number                      | The cell's row coordinate.                                        |
   * | `col`    | -                  | `col`: Number                      | The cell's column coordinate.                                     |
   * | `start`  | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `start` sets the width (`width`) and color (`color`) of the left-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `start` sets the width (`width`) and color (`color`) of the right-hand border. |
   * | `end`    | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `end` sets the width (`width`) and color (`color`) of the right-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `end` sets the width (`width`) and color (`color`) of the left-hand border. |
   * | `top`    | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the width (`width`) and color (`color`) of the top border. |
   * | `bottom` | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the width (`width`) and color (`color`) of the bottom border. |
   *
   * To enable the [`CustomBorders`](@/api/customBorders.md) plugin
   * and add a predefined border around a range of cells,
   * set the `customBorders` option to an array of objects.
   * Each object represents a border configuration for a single range of cells, and has the following properties:
   *
   * | Property | Sub-properties                               | Types                                                            | Description                                                                                  |
   * | -------- | -------------------------------------------- | ---------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |
   * | `range`  | `from` {`row`, `col`}<br>`to` {`row`, `col`} | `from`: Object<br>`to`: Object<br>`row`: Number<br>`col`: Number | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default):<br>- `from` selects the range's top-left corner.<br>- `to` selects the range's bottom-right corner.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: <br>- `from` selects the range's top-right corner.<br>- `to` selects the range's bottom-left corner. |
   * | `start`  | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `start` sets the width (`width`) and color (`color`) of the left-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `start` sets the width (`width`) and color (`color`) of the right-hand border. |
   * | `end`    | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `end` sets the width (`width`) and color (`color`) of the right-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `end` sets the width (`width`) and color (`color`) of the left-hand border. |
   * | `top`    | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the width (`width`) and color (`color`) of the top border. |
   * | `bottom` | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the width (`width`) and color (`color`) of the bottom border. |
   *
   * Read more:
   * - [Formatting cells: Custom cell borders](@/guides/cell-features/formatting-cells.md#custom-cell-borders)
   * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
   * - [Plugins: `CustomBorders`](@/api/customBorders.md)
   * - [Layout direction](@/guides/internationalization/layout-direction.md)
   * - [`layoutDirection`](#layoutDirection)
   *
   * @memberof Options#
   * @type {boolean|object[]}
   * @default false
   * @category CustomBorders
   *
   * @example
   * ```js
   * // enable the `CustomBorders` plugin
   * customBorders: true,
   *
   * // enable the `CustomBorders` plugin
   * // and add a predefined border for a particular cell
   * customBorders: [
   *   // add an object with a border configuration for one cell
   *   {
   *     // set the cell's row coordinate
   *     row: 2,
   *     // set the cell's column coordinate
   *     col: 2,
   *     // set the left/right border's width and color
   *     start: {
   *       width: 2,
   *       color: 'red'
   *     },
   *     // set the right/left border's width and color
   *     end: {
   *       width: 1,
   *       color: 'green'
   *     },
   *     // set the top border's width and color
   *     top: '',
   *     // set the bottom border's width and color
   *     bottom: ''
   *   }
   * ],
   *
   * // enable the `CustomBorders` plugin
   * // and add a predefined border for a range of cells
   * customBorders: [
   *   // add an object with a border configuration for one range of cells
   *   {
   *     // select a range of cells
   *     range: {
   *       // set the range's top-left corner
   *       from: {
   *         row: 1,
   *         col: 1
   *       },
   *       // set the range's bottom-right corner
   *       to: {
   *         row: 3,
   *         col: 4
   *       }
   *     },
   *     // set the left/right border's width and color
   *     start: {
   *       width: 2,
   *       color: 'red'
   *     },
   *     // set the right/left border's width and color
   *     end: {},
   *     // set the top border's width and color
   *     top: {},
   *     // set the bottom border's width and color
   *     bottom: {}
   *   }
   * ],
   * ```
   */
  customBorders: !1,
  /**
   * @description
   * The `data` option sets the initial [data](@/guides/getting-started/binding-to-data.md) of your Handsontable instance.
   *
   * Handsontable's data is bound to your source data by reference (i.e. when you edit Handsontable's data, your source data alters as well).
   *
   * You can set the `data` option:
   * - Either to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).
   * - Or to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects).
   *
   * If you don't set the `data` option (or set it to `null`), Handsontable renders as an empty 5x5 grid by default.
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [`dataSchema`](#dataSchema)
   * - [`startRows`](#startRows)
   * - [`startCols`](#startCols)
   *
   * @memberof Options#
   * @type {Array[]|object[]}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // as an array of arrays
   * data: [
   *   ['A', 'B', 'C'],
   *   ['D', 'E', 'F'],
   *   ['G', 'H', 'J']
   * ]
   *
   * // as an array of objects
   * data: [
   *   {id: 1, name: 'Ted Right'},
   *   {id: 2, name: 'Frank Honest'},
   *   {id: 3, name: 'Joan Well'},
   *   {id: 4, name: 'Gail Polite'},
   *   {id: 5, name: 'Michael Fair'},
   * ]
   * ```
   */
  data: void 0,
  /**
   * @description
   * When the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects)
   * (or is empty), the `dataSchema` option defines the structure of new rows.
   *
   * Using the `dataSchema` option, you can start out with an empty grid.
   *
   * You can set the `dataSchema` option to one of the following:
   * - An object
   * - A function
   *
   * Read more:
   * - [Binding to data: Array of objects with custom data schema](@/guides/getting-started/binding-to-data.md#array-of-objects-with-custom-data-schema)
   * - [Binding to data: Function data source and schema](@/guides/getting-started/binding-to-data.md#function-data-source-and-schema)
   * - [`data`](#data)
   *
   * @memberof Options#
   * @type {object|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // with `dataSchema`, you can start with an empty grid
   * data: null,
   * dataSchema: {id: null, name: {first: null, last: null}, address: null},
   * colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],
   * columns: [
   *   {data: 'id'},
   *   {data: 'name.first'},
   *   {data: 'name.last'},
   *   {data: 'address'}
   * ],
   * startRows: 5,
   * minSpareRows: 1
   * ```
   */
  dataSchema: void 0,
  /**
   * The `dateFormat` option configures the date format accepted by [`date`](@/guides/cell-types/date-cell-type.md) cells.
   *
   * You can set the `dateFormat` option to a string with a proper date format. The default value is: `'DD/MM/YYYY'`.
   *
   * To automatically correct dates whose format doesn't match the `dateFormat` setting, use the [`correctFormat`](#correctFormat) option.
   *
   * Read more:
   * - [Date cell type](@/guides/cell-types/date-cell-type.md)
   * - [`correctFormat`](#correctFormat)
   * - [`defaultDate`](#defaultDate)
   *
   * @memberof Options#
   * @type {string}
   * @default 'DD/MM/YYYY'
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *   // set the `type` of each cell in this column to `date`
   *   type: 'date',
   *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`
   *   dateFormat: 'YYYY-MM-DD',
   *   },
   * ],
   * ```
   */
  dateFormat: "DD/MM/YYYY",
  /**
   * The `datePickerConfig` option configures the `date` [cell editor](@/guides/cell-functions/cell-editor.md)'s date picker, which uses an external dependency: [Pikaday](https://github.com/Pikaday/Pikaday/tree/1.8.2).
   *
   * You can set the `datePickerConfig` option to an object with any of the available [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration),
   * except for the following, which are always overwritten by the `date` [cell editor](@/guides/cell-functions/cell-editor.md):
   * - `bound`
   * - `container`
   * - `field`
   * - `trigger`
   *
   * If the `datePickerConfig` option is not defined, the `date` [cell editor](@/guides/cell-functions/cell-editor.md) overwrites the following [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration) as well:
   *
   * | Pikaday option       | Handsontable's setting |
   * | -------------------- | ---------------------- |
   * | `format`             | `'DD/MM/YYYY'`         |
   * | `reposition`         | `false`                |
   *
   * Read more:
   * - [`editor`](#editor)
   * - [`dateFormat`](#dateFormat)
   * - [Cell editor](@/guides/cell-functions/cell-editor.md)
   * - [All Pikaday options &#8594;](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration)
   *
   * @memberof Options#
   * @type {object}
   * @default undefined
   * @category Core
   */
  datePickerConfig: void 0,
  /**
   * The `defaultDate` option configures the date displayed
   * in empty [`date`](@/guides/cell-types/date-cell-type.md) cells.
   *
   * You can set the `defaultDate` option to a string.
   *
   * Read more:
   * - [Date cell type](@/guides/cell-types/date-cell-type.md)
   * - [`dateFormat`](#dateFormat)
   *
   * @memberof Options#
   * @type {string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // set the `type` of each cell in this column to `date`
   *     type: 'date',
   *     // in every empty `date` cell of this column, display `2015-02-02`
   *     defaultDate: '2015-02-02'
   *   }
   * ],
   * ```
   */
  defaultDate: void 0,
  /**
   * @description
   * The `disableVisualSelection` option configures how
   * [selection](@/guides/cell-features/selection.md) is shown.
   *
   * You can set the `disableVisualSelection` option to one of the following:
   *
   * | Setting           | Description                                                                                         |
   * | ----------------- | --------------------------------------------------------------------------------------------------- |
   * | `false` (default) | - Show single-cell selection<br>- Show range selection<br>- Show header selection                   |
   * | `true`            | - Don't show single-cell selection<br>- Don't show range selection<br>- Don't show header selection |
   * | `'current'`       | - Don't show single-cell selection<br>- Show range selection<br>- Show header selection             |
   * | `'area'`          | - Show single-cell selection<br>- Don't show range selection<br>- Show header selection             |
   * | `'header'`        | - Show single-cell selection<br>- Show range selection<br>- Don't show header selection             |
   * | An array          | A combination of `'current'`, `'area'`, and/or `'header'`                                           |
   *
   * Read more:
   * - [Selection](@/guides/cell-features/selection.md)
   *
   * @memberof Options#
   * @type {boolean|string|string[]}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // don't show single-cell selection
   * // don't show range selection
   * // don't show header selection
   * disableVisualSelection: true,
   *
   * // don't show single-cell selection
   * // show range selection
   * // show header selection
   * disableVisualSelection: 'current',
   *
   * // don't show single-cell selection
   * // don't show range selection
   * // show header selection
   * disableVisualSelection: ['current', 'area'],
   * ```
   */
  disableVisualSelection: !1,
  /**
   * @description
   * The `dragToScroll` option configures the [`DragToScroll`](@/api/dragToScroll.md) plugin.
   *
   * You can set the `dragToScroll` option to one of the following:
   *
   * | Setting          | Description                                                                 |
   * | ---------------- | --------------------------------------------------------------------------- |
   * | `true` (default) | When selection reaches the edge of the grid's viewport, scroll the viewport |
   * | `false`          | Don't scroll the viewport                                                   |
   *
   * Read more:
   * - [Plugins: `DragToScroll`](@/api/dragToScroll.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category DragToScroll
   *
   * @example
   * ```js
   * // when selection reaches the edge of the grid's viewport, scroll the viewport
   * dragToScroll: true,
   * ```
   */
  dragToScroll: !0,
  /**
   * The `dropdownMenu` option configures the [`DropdownMenu`](@/api/dropdownMenu.md) plugin.
   *
   * You can set the `dropdownMenu` option to one of the following:
   *
   * | Setting   | Description                                                                                                                                                                                  |
   * | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `false`   | Disable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin                                                                                                                                   |
   * | `true`    | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)    |
   * | An array  | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options) |
   * | An object | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Apply a custom dropdown menu configuration                                                                                  |
   *
   * Read more:
   * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
   * - [Plugins: `DropdownMenu`](@/api/dropdownMenu.md)
   *
   * @memberof Options#
   * @type {boolean|object|string[]}
   * @default undefined
   * @category DropdownMenu
   *
   * @example
   * ```js
   * // enable the `DropdownMenu` plugin
   * // use the default context menu options
   * dropdownMenu: true,
   *
   * // enable the `DropdownMenu` plugin
   * // and modify individual context menu options
   * dropdownMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],
   *
   * // enable the `DropdownMenu` plugin
   * // and apply a custom dropdown menu configuration
   * dropdownMenu: {
   *   items: {
   *     'option1': {
   *       name: 'Option 1'
   *     },
   *     'option2': {
   *       name: 'Option 2',
   *       submenu: {
   *         items: [
   *           {
   *             key: 'option2:suboption1',
   *             name: 'Suboption 1',
   *             callback(key, options) {
   *               ...
   *             }
   *           },
   *           ...
   *         ]
   *       }
   *     }
   *   }
   * },
   * ```
   */
  dropdownMenu: void 0,
  /**
   * The `editor` option sets a [cell editor](@/guides/cell-functions/cell-editor.md) for a cell.
   *
   * You can set the `editor` option to one of the following [cell editor aliases](@/guides/cell-functions/cell-editor.md):
   *
   * | Alias               | Cell editor function                                                       |
   * | ------------------- | -------------------------------------------------------------------------- |
   * | A custom alias      | Your [custom cell editor](@/guides/cell-functions/cell-editor.md) function |
   * | `'autocomplete'`    | `AutocompleteEditor`                                                       |
   * | `'base'`            | `BaseEditor`                                                               |
   * | `'checkbox'`        | `CheckboxEditor`                                                           |
   * | `'date'`            | `DateEditor`                                                               |
   * | `'dropdown'`        | `DropdownEditor`                                                           |
   * | `'handsontable'`    | `HandsontableEditor`                                                       |
   * | `'numeric'`         | `NumericEditor`                                                            |
   * | `'password'`        | `PasswordEditor`                                                           |
   * | `'select'`          | `SelectEditor`                                                             |
   * | `'text'`            | `TextEditor`                                                               |
   * | `'time'`            | `TimeEditor`                                                               |
   *
   * To disable editing cells through cell editors,
   * set the `editor` option to `false`.
   * You'll still be able to change cells' content through Handsontable's API
   * or through plugins (e.g. [`CopyPaste`](@/api/copyPaste.md)), though.
   *
   * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)
   * options all at once, use the [`type`](#type) option.
   *
   * Read more:
   * - [Cell editor](@/guides/cell-functions/cell-editor.md)
   * - [Cell type](@/guides/cell-types/cell-type.md)
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   * - [`type`](#type)
   *
   * @memberof Options#
   * @type {string|Function|boolean}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // use the `numeric` editor for each cell of the entire grid
   * editor: 'numeric',
   *
   * // apply the `editor` option to individual columns
   * columns: [
   *   {
   *     // use the `autocomplete` editor for each cell of this column
   *     editor: 'autocomplete'
   *   },
   *   {
   *     // disable editing cells through cell editors for each cell of this column
   *     editor: false
   *   }
   * ]
   * ```
   */
  editor: void 0,
  /**
   * The `enterBeginsEditing` option configures the action of the <kbd>**Enter**</kbd> key.
   *
   * You can set the `enterBeginsEditing` option to one of the following:
   *
   * | Setting          | Description                                                                                                                                                                                               |
   * | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true` (default) | - On pressing <kbd>**Enter**</kbd> once, enter the editing mode of the active cell<br>- On pressing <kbd>**Enter**</kbd> twice, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting |
   * | `false`          | - On pressing <kbd>**Enter**</kbd> once, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting                                                                                    |
   *
   * Read more:
   * - [`enterMoves`](#enterMoves)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // press Enter once to start editing
   * // press Enter twice to move to another cell
   * enterBeginsEditing: true,
   *
   * // press Enter once to move to another cell
   * enterBeginsEditing: false,
   * ```
   */
  enterBeginsEditing: !0,
  /**
   * The `enterMoves` option configures the action of the <kbd>**Enter**</kbd> key.
   *
   * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `true`,
   * the `enterMoves` setting applies to the **second** pressing of the <kbd>**Enter**</kbd> key.
   *
   * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `false`,
   * the `enterMoves` setting applies to the **first** pressing of the <kbd>**Enter**</kbd> key.
   *
   * You can set the `enterMoves` option to an object with the following properties
   * (or to a function that returns such an object):
   *
   * | Property | Type   | Description                                                                                                                                              |
   * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `col`    | Number | - On pressing <kbd>**Enter**</kbd>, move selection `col` columns right<br>- On pressing <kbd>**Shift**</kbd>+<kbd>**Enter**</kbd>, move selection `col` columns left |
   * | `row`    | Number | - On pressing <kbd>**Enter**</kbd>, move selection `row` rows down<br>- On pressing <kbd>**Shift**</kbd>+<kbd>**Enter**</kbd>, move selection `row` rows up          |
   *
   * Read more:
   * - [`enterBeginsEditing`](#enterBeginsEditing)
   *
   * @memberof Options#
   * @type {object|Function}
   * @default {col: 0, row: 1}
   * @category Core
   *
   * @example
   * ```js
   * // on pressing Enter, move selection 1 column right and 1 row down
   * // on pressing Shift+Enter, move selection 1 column left and 1 row up
   * enterMoves: {col: 1, row: 1},
   *
   * // the same setting, as a function
   * // `event` is a DOM Event object received on pressing Enter
   * // you can use it to check whether the user pressed Enter or Shift+Enter
   * enterMoves(event) {
   *   return {col: 1, row: 1};
   * },
   * ```
   */
  enterMoves: {
    col: 0,
    row: 1
  },
  /**
   * The `fillHandle` option configures the [Autofill](@/api/autofill.md) plugin.
   *
   * You can set the `fillHandle` option to one the following:
   *
   * | Setting        | Description                                                                |
   * | -------------- | -------------------------------------------------------------------------- |
   * | `true`         | - Enable autofill in all directions<br>- Add the fill handle               |
   * | `false`        | Disable autofill                                                           |
   * | `'vertical'`   | - Enable vertical autofill<br>- Add the fill handle                        |
   * | `'horizontal'` | - Enable horizontal autofill<br>- Add the fill handle                      |
   * | An object      | - Enable autofill<br>- Add the fill handle<br>- Configure autofill options |
   *
   * If you set the `fillHandle` option to an object, you can configure the following autofill options:
   *
   * | Option          | Possible settings              | Description                                                                                               |
   * | --------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------- |
   * | `autoInsertRow` | `true` (default) \| `false`    | `true`: When you reach the grid's bottom, add new rows<br>`false`: When you reach the grid's bottom, stop |
   * | `direction`     | `'vertical'` \| `'horizontal'` | `'vertical'`: Enable vertical autofill<br>`'horizontal'`: Enable horizontal autofill                      |
   *
   * Read more:
   * - [AutoFill values](@/guides/cell-features/autofill-values.md)
   *
   * @memberof Options#
   * @type {boolean|string|object}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // enable autofill in all directions
   * // with `autoInsertRow` enabled
   * fillHandle: true,
   *
   * // enable vertical autofill
   * // with `autoInsertRow` enabled
   * fillHandle: 'vertical',
   *
   * // enable horizontal autofill
   * // with `autoInsertRow` enabled
   * fillHandle: 'horizontal',
   *
   * // enable autofill in all directions
   * // with `autoInsertRow` disabled
   * fillHandle: {
   *   autoInsertRow: false,
   * },
   *
   * // enable vertical autofill
   * // with `autoInsertRow` disabled
   * fillHandle: {
   *   autoInsertRow: false,
   *   direction: 'vertical'
   * },
   * ```
   */
  fillHandle: {
    autoInsertRow: !1
  },
  /**
   * The `filter` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'
   * lists are updated by the end user's input.
   *
   * You can set the `filter` option to one of the following:
   *
   * | Setting          | Description                                                                                                           |
   * | ---------------- | --------------------------------------------------------------------------------------------------------------------- |
   * | `true` (default) | When the end user types into the input area, only options matching the input are displayed                            |
   * | `false`          | When the end user types into the input area, all options are displayed<br>(options matching the input are put in bold |
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [`source`](#source)
   * - [`filteringCaseSensitive`](#filteringCaseSensitive)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * columns: [{
   *   // set the `type` of each cell in this column to `autocomplete`
   *   type: 'autocomplete',
   *   // set options available in every `autocomplete` cell of this column
   *   source: ['A', 'B', 'C'],
   *   // when the end user types in `A`, display only the A option
   *   // when the end user types in `B`, display only the B option
   *   // when the end user types in `C`, display only the C option
   *   filter: true
   * }],
   * ```
   */
  filter: !0,
  /**
   * The `filteringCaseSensitive` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'
   * input is case-sensitive.
   *
   * You can set the `filteringCaseSensitive` option to one of the following:
   *
   * | Setting           | Description                                                                                        |
   * | ----------------- | -------------------------------------------------------------------------------------------------- |
   * | `false` (default) | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is not case-sensitive |
   * | `true`            | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is case-sensitive     |
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [`source`](#source)
   * - [`filter`](#filter)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     type: 'autocomplete',
   *     source: [ ... ],
   *     // match case while searching autocomplete options
   *     filteringCaseSensitive: true
   *   }
   * ],
   * ```
   */
  filteringCaseSensitive: !1,
  /**
   * The `filters` option configures the [`Filters`](@/api/filters.md) plugin.
   *
   * You can set the `filters` option to one of the following:
   *
   * | Setting | Description                                      |
   * | ------- | ------------------------------------------------ |
   * | `false` | Disable the [`Filters`](@/api/filters.md) plugin |
   * | `true`  | Enable the [`Filters`](@/api/filters.md) plugin  |
   *
   * Read more:
   * - [Column filter](@/guides/columns/column-filter.md)
   * - [Plugins: `Filters`](@/api/filters.md)
   * - [`dropdownMenu`](#dropdownMenu)
   *
   * @memberof Options#
   * @type {boolean}
   * @default undefined
   * @category Filters
   *
   * @example
   * ```js
   * // enable the `Filters` plugin
   * filters: true,
   * ```
   */
  filters: void 0,
  /**
   * `fixedColumnsLeft` is a legacy option.
   *
   * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default), `fixedColumnsLeft` acts like the [`fixedColumnsStart`](#fixedColumnsStart) option.
   *
   * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is RTL, using `fixedColumnsLeft` throws an error.
   *
   * Use [`fixedColumnsStart`](#fixedColumnsStart), which works in any layout direction.
   *
   * Read more:
   * - [`fixedColumnsStart`](#fixedcolumnsstart)
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // freeze the first 3 columns from the left
   * fixedColumnsLeft: 3,
   * ```
   */
  fixedColumnsLeft: 0,
  /**
   * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default), the `fixedColumnsStart` option sets the number of [frozen columns](@/guides/columns/column-freezing.md) at the left-hand edge of the grid.
   *
   * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is RTL, the `fixedColumnsStart` option sets the number of [frozen columns](@/guides/columns/column-freezing.md) at the right-hand edge of the grid.
   *
   * Read more:
   * - [Column freezing](@/guides/columns/column-freezing.md)
   * - [Layout direction](@/guides/internationalization/layout-direction.md)
   * - [`fixedColumnsLeft`](#fixedcolumnsleft)
   * - [`layoutDirection`](#layoutDirection)
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // when `layoutDirection` is set to `inherit` (default)
   * // freeze the first 3 columns from the left or from the right
   * // depending on your HTML document's `dir` attribute
   * layoutDirection: 'inherit',
   * fixedColumnsStart: 3,
   *
   * // when `layoutDirection` is set to `rtl`
   * // freeze the first 3 columns from the right
   * // regardless of your HTML document's `dir` attribute
   * layoutDirection: 'rtl',
   * fixedColumnsStart: 3,
   *
   * // when `layoutDirection` is set to `ltr`
   * // freeze the first 3 columns from the left
   * // regardless of your HTML document's `dir` attribute
   * layoutDirection: 'ltr',
   * fixedColumnsStart: 3,
   * ```
   */
  fixedColumnsStart: 0,
  /**
   * The `fixedRowsBottom` option sets the number of [frozen rows](@/guides/rows/row-freezing.md)
   * at the bottom of the grid.
   *
   * Read more:
   * - [Row freezing](@/guides/rows/row-freezing.md)
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // freeze the bottom 3 rows
   * fixedRowsBottom: 3,
   * ```
   */
  fixedRowsBottom: 0,
  /**
   * The `fixedRowsTop` option sets the number of [frozen rows](@/guides/rows/row-freezing.md) at the top of the grid.
   *
   * Read more:
   * - [Row freezing](@/guides/rows/row-freezing.md)
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // freeze the top 3 rows
   * fixedRowsTop: 3,
   * ```
   */
  fixedRowsTop: 0,
  /**
   * The `formulas` option configures the [`Formulas`](@/api/formulas.md) plugin.
   *
   * The [`Formulas`](@/api/formulas.md) plugin uses the [HyperFormula](https://handsontable.github.io/hyperformula/) calculation engine.
   * To install [HyperFormula](https://handsontable.github.io/hyperformula/), read the following:
   * - [Formula calculation: Initialization methods](@/guides/formulas/formula-calculation.md#initialization-methods)
   *
   * You can set the `formulas` option to an object with the following properties:
   *
   * | Property    | Possible values                                                                                                                                                                                                        |
   * | ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `engine`    | `HyperFormula` \|<br>A [HyperFormula](https://handsontable.github.io/hyperformula/) instance \|<br>A [HyperFormula configuration](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html) object |
   * | `sheetId`   | A number                                                                                                                                                                                                               |
   * | `sheetName` | A string                                                                                                                                                                                                               |
   *
   * Read more:
   * - [Plugins: `Formulas`](@/api/formulas.md)
   * - [Formula calculation](@/guides/formulas/formula-calculation.md)
   * - [HyperFormula documentation: Client-side installation](https://handsontable.github.io/hyperformula/guide/client-side-installation)
   * - [HyperFormula documentation: Configuration options](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html)
   *
   * @memberof Options#
   * @type {object}
   * @default undefined
   * @category Formulas
   *
   * @example
   * ```js
   * // either add the `HyperFormula` class
   * formulas: {
   *   // set `engine` to `HyperFormula`
   *   engine: HyperFormula,
   *   sheetId: 1,
   *   sheetName: 'Sheet 1'
   * }
   *
   * // or, add a HyperFormula instance
   * // initialized with the `'internal-use-in-handsontable'` license key
   * const hyperformulaInstance = HyperFormula.buildEmpty({
   *   licenseKey: 'internal-use-in-handsontable',
   * });
   *
   * formulas: {
   *   // set `engine` to a HyperFormula instance
   *   engine: hyperFormulaInstance,
   *   sheetId: 1,
   *   sheetName: 'Sheet 1'
   * }
   *
   * // or, add a HyperFormula configuration object
   * formulas: {
   *   // set `engine` to a HyperFormula configuration object
   *   engine: {
   *     hyperformula: HyperFormula // or `engine: hyperFormulaInstance`
   *     leapYear1900: false,       // this option comes from HyperFormula
   *     // add more HyperFormula configuration options
   *   },
   *   sheetId: 1,
   *   sheetName: 'Sheet 1'
   * }
   *
   * // use the same HyperFormula instance in multiple Handsontable instances
   *
   * // a Handsontable instance `hot1`
   * formulas: {
   *   engine: HyperFormula,
   *   sheetId: 1,
   *   sheetName: 'Sheet 1'
   * }
   *
   * // a Handsontable instance `hot2`
   * formulas: {
   *   engine: hot1.getPlugin('formulas').engine,
   *   sheetId: 1,
   *   sheetName: 'Sheet 1'
   * }
   * ```
   */
  formulas: void 0,
  /**
   * The `fragmentSelection` option configures text selection settings.
   *
   * You can set the `fragmentSelection` option to one of the following:
   *
   * | Setting           | Decription                                        |
   * | ----------------- | ------------------------------------------------- |
   * | `false` (default) | Disable text selection                            |
   * | `true`            | Enable text selection in multiple cells at a time |
   * | `'cell'`          | Enable text selection in one cell at a time       |
   *
   * @memberof Options#
   * @type {boolean|string}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // enable text selection in multiple cells at a time
   * fragmentSelection: true,
   *
   * // enable text selection in one cell a time
   * fragmentSelection: 'cell',
   * ```
   */
  fragmentSelection: !1,
  /**
   * The `height` option configures the height of your grid.
   *
   * You can set `height` option to one of the following:
   *
   * | Setting                                                                    | Example                    |
   * | -------------------------------------------------------------------------- | -------------------------- |
   * | A number of pixels                                                         | `height: 500`              |
   * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `height: '75vw'`           |
   * | A function that returns a valid number or string                           | `height() { return 500; }` |
   *
   * Read more:
   * - [Grid size](@/guides/getting-started/grid-size.md)
   *
   * @memberof Options#
   * @type {number|string|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set the grid's height to 500px
   * height: 500,
   *
   * // set the grid's height to 75vh
   * height: '75vh',
   *
   * // set the grid's height to 500px, using a function
   * height() {
   *   return 500;
   * },
   * ```
   */
  height: void 0,
  /**
   * The `hiddenColumns` option configures the [`HiddenColumns`](@/api/hiddenColumns.md) plugin.
   *
   * You can set the `hiddenColumns` option to one of the following:
   *
   * | Setting   | Description                                                                                  |
   * | --------- | -------------------------------------------------------------------------------------------- |
   * | `false`   | Disable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin                                 |
   * | `true`    | Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin with the default plugin options  |
   * | An object | - Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin<br>- Modify the plugin options |
   *
   * If you set the `hiddenColumns` to an object, you can set the following [`HiddenColumns`](@/api/hiddenColumns.md) plugin options:
   *
   * | Property           | Possible values     | Description                                                                                                                                             |
   * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `columns`          | An array of indexes | An array of indexes of columns that are hidden at initialization                                                                                        |
   * | `copyPasteEnabled` | `true` \| `false`   | `true`: when copying or pasting data, take hidden columns into account<br>`false`: when copying or pasting data, don't take hidden columns into account |
   * | `indicators`       | `true` \| `false`   | `true`: display UI markers to indicate the presence of hidden columns<br>`false`: display UI markers                                                    |
   *
   * Read more:
   * - [Plugins: `HiddenColumns`](@/api/hiddenColumns.md)
   * - [Column hiding](@/guides/columns/column-hiding.md)
   *
   * @memberof Options#
   * @type {boolean|object}
   * @default undefined
   * @category HiddenColumns
   *
   * @example
   * ```js
   * // enable the `HiddenColumns` plugin
   * hiddenColumns: true,
   *
   * // enable `HiddenColumns` plugin, and modify the plugin options
   * hiddenColumns: {
   *   // set columns that are hidden by default
   *   columns: [5, 10, 15],
   *   // when copying or pasting data, take hidden columns into account
   *   copyPasteEnabled: true,
   *   // show where hidden columns are
   *   indicators: true
   * }
   * ```
   */
  hiddenColumns: void 0,
  /**
   * The `hiddenRows` option configures the [`HiddenRows`](@/api/hiddenRows.md) plugin.
   *
   * You can set the `hiddenRows` option to one of the following:
   *
   * | Setting   | Description                                                                            |
   * | --------- | -------------------------------------------------------------------------------------- |
   * | `false`   | Disable the [`HiddenRows`](@/api/hiddenRows.md) plugin                                 |
   * | `true`    | Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin with the default plugin options  |
   * | An object | - Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin<br>- Modify the plugin options |
   *
   * If you set the `hiddenRows` to an object, you can set the following [`HiddenRows`](@/api/hiddenRows.md) plugin options:
   *
   * | Property           | Possible values     | Description                                                                                                                                       |
   * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `rows   `          | An array of indexes | An array of indexes of rows that are hidden at initialization                                                                                     |
   * | `copyPasteEnabled` | `true` \| `false`   | `true`: when copying or pasting data, take hidden rows into account<br>`false`: when copying or pasting data, don't take hidden rows into account |
   * | `indicators`       | `true` \| `false`   | `true`: display UI markers to indicate the presence of hidden rows<br>`false`: display UI markers                                                 |
   *
   * Read more:
   * - [Plugins: `HiddenRows`](@/api/hiddenRows.md)
   * - [Row hiding](@/guides/rows/row-hiding.md)
   *
   * @memberof Options#
   * @type {boolean|object}
   * @default undefined
   * @category HiddenRows
   *
   * @example
   * ```js
   * // enable the `HiddenRows` plugin
   * hiddenRows: true,
   *
   * // enable `HiddenRows` plugin, and modify the plugin options
   * hiddenRows: {
   *   // set rows that are hidden by default
   *   rows: [5, 10, 15],
   *   // when copying or pasting data, take hidden rows into account
   *   copyPasteEnabled: true,
   *   // show where hidden rows are
   *   indicators: true
   * }
   * ```
   */
  hiddenRows: void 0,
  /**
   * The `invalidCellClassName` option lets you add a CSS class name to cells
   * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).
   *
   * Read more:
   * - [Cell validator](@/guides/cell-functions/cell-validator.md)
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default 'htInvalid'
   * @category Core
   *
   * @example
   * ```js
   * // add a `highlight-error` CSS class name
   * // to every `invalid` cell`
   * invalidCellClassName: 'highlight-error',
   * ```
   */
  invalidCellClassName: "htInvalid",
  /**
   * The `imeFastEdit` option allows using the "fast edit" feature for the IME users. It's disabled by default
   * because of its incompatibility with some of the accessibility features.
   *
   * Enabling this option can make a negative impact on how some screen readers handle reading the table cells.
   *
   * @since 14.0.0
   * @memberof Options#
   * @type {boolean}
   * @category Core
   */
  imeFastEdit: !1,
  /**
   * The `isEmptyCol` option lets you define your own custom method
   * for checking if a column at a given visual index is empty.
   *
   * The `isEmptyCol` setting overwrites the built-in [`isEmptyCol`](@/api/core.md#isEmptyCol) method.
   *
   * @memberof Options#
   * @type {Function}
   * @param {number} col Visual column index.
   * @returns {boolean}
   * @category Core
   *
   * @example
   * ```js
   * // overwrite the built-in `isEmptyCol` method
   * isEmptyCol(visualColumnIndex) {
   *    // your custom method
   *    ...
   * },
   * ```
   */
  isEmptyCol(t) {
    let e, n, r;
    for (e = 0, n = this.countRows(); e < n; e++)
      if (r = this.getDataAtCell(e, t), gn(r) === !1)
        return !1;
    return !0;
  },
  /**
   * The `isEmptyRow` option lets you define your own custom method
   * for checking if a row at a given visual index is empty.
   *
   * The `isEmptyRow` setting overwrites the built-in [`isEmptyRow`](@/api/core.md#isEmptyRow) method.
   *
   * @memberof Options#
   * @type {Function}
   * @param {number} row Visual row index.
   * @returns {boolean}
   * @category Core
   *
   * @example
   * ```js
   * // overwrite the built-in `isEmptyRow` method
   * isEmptyRow(visualRowIndex) {
   *    // your custom method
   *    ...
   * },
   * ```
   */
  isEmptyRow(t) {
    let e, n, r, i;
    for (e = 0, n = this.countCols(); e < n; e++)
      if (r = this.getDataAtCell(t, e), gn(r) === !1)
        return typeof r == "object" ? (i = this.getCellMeta(t, e), Fg(this.getSchema()[i.prop], r)) : !1;
    return !0;
  },
  /**
   * @description
   * The `label` option configures [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cells` labels.
   *
   * You can set the `label` option to an object with the following properties:
   *
   * | Property    | Possible values                   | Description                                                                                                                                                                                                             |
   * | ----------- | --------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `position`  | `'after'` (default) \| `'before'` | `'after'`: place the label to the right of the checkbox<br>`'before'`: place the label to the left of the checkbox                                                                                                      |
   * | `value`     | A string \| A function            | The label's text                                                                                                                                                                                                        |
   * | `separated` | `false` (default) \| `true`       | `false`: don't separate the label from the checkbox<br>`true`: separate the label from the checkbox                                                                                                                     |
   * | `property`  | A string                          | - A [`data`](#data) object property name that's used as the label's text <br>- Works only when the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects) |
   *
   * Read more:
   * - [Checkbox cell type: Checkbox labels](@/guides/cell-types/checkbox-cell-type.md#checkbox-labels)
   *
   * @memberof Options#
   * @type {object}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [{
   *   type: 'checkbox',
   *   // add 'My label:' after the checkbox
   *   label: { position: 'after', value: 'My label: ', separated: true }
   * }],
   * ```
   */
  label: void 0,
  /**
   * The `language` option configures Handsontable's [language](@/guides/internationalization/language.md) settings.
   *
   * You can set the `language` option to one of the following:
   *
   * | Setting             | Description                 |
   * | ------------------- | --------------------------- |
   * | `'en-US'` (default) | English - United States     |
   * | `'ar-AR'`           | Arabic - Global.<br><br>To properly render this language, set the [layout direction](@/guides/internationalization/layout-direction.md) to RTL. |
   * | `'cs-CZ'`           | Czech - Czech Republic      |
   * | `'de-CH'`           | German - Switzerland        |
   * | `'de-DE'`           | German - Germany            |
   * | `'es-MX'`           | Spanish - Mexico            |
   * | `'fr-FR'`           | French - France             |
   * | `'it-IT'`           | Italian - Italy             |
   * | `'ja-JP'`           | Japanese - Japan            |
   * | `'ko-KR'`           | Korean - Korea              |
   * | `'lv-LV'`           | Latvian - Latvia            |
   * | `'nb-NO'`           | Norwegian (Bokmål) - Norway |
   * | `'nl-NL'`           | Dutch - Netherlands         |
   * | `'pl-PL'`           | Polish - Poland             |
   * | `'pt-BR'`           | Portuguese - Brazil         |
   * | `'ru-RU'`           | Russian - Russia            |
   * | `'sr-SP'`           | Serbian (Latin) - Serbia    |
   * | `'zh-CN'`           | Chinese - China             |
   * | `'zh-TW'`           | Chinese - Taiwan            |
   *
   * Read more:
   * - [Language](@/guides/internationalization/language.md)
   * - [`locale`](#locale)
   * - [`layoutDirection`](#layoutdirection)
   *
   * @memberof Options#
   * @type {string}
   * @default 'en-US'
   * @category Core
   *
   * @example
   * ```js
   * // set Handsontable's language to Polish
   * language: 'pl-PL',
   * ```
   */
  language: "en-US",
  /**
   * The `layoutDirection` option configures whether Handsontable renders from the left to the right, or from the right to the left.
   *
   * You can set the layout direction only at Handsontable's [initialization](@/guides/getting-started/installation.md#initialize-handsontable). Any change of the `layoutDirection` option after the initialization (e.g. using the [`updateSettings()`](@/api/core.md#updatesettings) method) is ignored.
   *
   * You can set the `layoutDirection` option only [for the entire grid](@/guides/getting-started/configuration-options.md#set-grid-options).
   * You can't set it for individual columns, rows, or cells.
   *
   * You can set the `layoutDirection` option to one of the following strings:
   *
   * | Setting             | Description                                                                                                                                                                                  |
   * | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `inherit` (default) | Set Handsontable's layout direction automatically,<br>based on the value of your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute  |
   * | `rtl`               | Render Handsontable from the right to the left,<br>even when your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute is set to `ltr` |
   * | `ltr`               | Render Handsontable from the left to the right,<br>even when your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute is set to `rtl` |
   *
   * Read more:
   * - [Layout direction](@/guides/internationalization/layout-direction.md)
   * - [Language](@/guides/internationalization/language.md)
   * - [`language`](#language)
   * - [`locale`](#locale)
   * - [`fixedColumnsStart`](#fixedcolumnsstart)
   * - [`customBorders`](#customBorders)
   *
   * @memberof Options#
   * @type {string}
   * @default 'inherit'
   * @category Core
   *
   * @example
   * ```js
   * // inherit Handsontable's layout direction
   * // from the value of your HTML document's `dir` attribute
   * layoutDirection: 'inherit',
   *
   * // render Handsontable from the right to the left
   * // regardless of your HTML document's `dir`
   * layoutDirection: 'rtl',
   *
   * // render Handsontable from the left to the right
   * // regardless of your HTML document's `dir`
   * layoutDirection: 'ltr',
   * ```
   */
  layoutDirection: "inherit",
  /**
   * The `licenseKey` option sets your Handsontable license key.
   *
   * You can set the `licenseKey` option to one of the following:
   *
   * | Setting                                                                                                 | Description                                                                                       |
   * | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |
   * | A string with your [commercial license key](@/guides/getting-started/license-key.md#commercial-license) | For [commercial use](@/guides/technical-specification/software-license.md#commercial-use)         |
   * | `'non-commercial-and-evaluation'`                                                                       | For [non-commercial use](@/guides/technical-specification/software-license.md#non-commercial-use) |
   *
   * Read more:
   * - [License key](@/guides/getting-started/license-key.md)
   *
   * @memberof Options#
   * @type {string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // for commercial use
   * licenseKey: 'xxxxx-xxxxx-xxxxx-xxxxx-xxxxx', // your commercial license key
   *
   * // for non-commercial use
   * licenseKey: 'non-commercial-and-evaluation',
   * ```
   */
  licenseKey: void 0,
  /**
   * The `locale` option configures Handsontable's [locale](@/guides/internationalization/locale.md) settings.
   *
   * You can set the `locale` option to any valid and canonicalized Unicode BCP 47 locale tag,
   * both for the [entire grid](@/guides/internationalization/locale.md#set-the-grid-s-locale),
   * and for [individual columns](@/guides/internationalization/locale.md#set-a-column-s-locale).
   *
   * Read more:
   * - [Locale](@/guides/internationalization/locale.md)
   * - [`language`](#language)
   * - [`layoutDirection`](#layoutdirection)
   *
   * @memberof Options#
   * @type {string}
   * @default 'en-US'
   * @category Core
   *
   * @example
   * ```js
   * // set the entire grid's locale to Polish
   * locale: 'pl-PL',
   *
   * // set individual columns' locales
   * columns: [
   *   {
   *     // set the first column's locale to Polish
   *     locale: 'pl-PL',
   *   },
   *   {
   *     // set the second column's locale to German
   *     locale: 'de-DE',
   *   },
   * ],
   * ```
   */
  locale: "en-US",
  /**
   * The `manualColumnFreeze` option configures the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin.
   *
   * You can set the `manualColumnFreeze` option to one of the following:
   *
   * | Setting  | Description                                                            |
   * | -------- | ---------------------------------------------------------------------- |
   * | `true`   | Enable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin  |
   * | `false`  | Disable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin |
   *
   * Read more:
   * - [Column freezing](@/guides/columns/column-freezing.md#user-triggered-freeze)
   *
   * @memberof Options#
   * @type {boolean}
   * @default undefined
   * @category ManualColumnFreeze
   *
   * @example
   * ```js
   * // enable the `ManualColumnFreeze` plugin
   * manualColumnFreeze: true,
   * ```
   */
  manualColumnFreeze: void 0,
  /**
   * The `manualColumnMove` option configures the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin.
   *
   * You can set the `manualColumnMove` option to one of the following:
   *
   * | Setting  | Description                                                                                                        |
   * | -------- | ------------------------------------------------------------------------------------------------------------------ |
   * | `true`   | Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                  |
   * | `false`  | Disable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                 |
   * | An array | - Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin<br>- Move individual columns at initialization |
   *
   * Read more:
   * - [Column moving](@/guides/columns/column-moving.md)
   *
   * @memberof Options#
   * @type {boolean|number[]}
   * @default undefined
   * @category ManualColumnMove
   *
   * @example
   * ```js
   * // enable the `ManualColumnMove` plugin
   * manualColumnMove: true,
   *
   * // enable the `ManualColumnMove` plugin
   * // at initialization, move column 0 to 1
   * // at initialization, move column 1 to 4
   * // at initialization, move column 2 to 6
   * manualColumnMove: [1, 4, 6],
   * ```
   */
  manualColumnMove: void 0,
  /**
   * @description
   * The `manualColumnResize` option configures the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin.
   *
   * You can set the `manualColumnResize` option to one of the following:
   *
   * | Setting  | Description                                                                                                           |
   * | -------- | --------------------------------------------------------------------------------------------------------------------- |
   * | `true`   | Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                 |
   * | `false`  | Disable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                |
   * | An array | - Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin<br>- Set initial widths of individual columns |
   *
   * Read more:
   * - [Column width: Column stretching](@/guides/columns/column-width.md#column-stretching)
   *
   * @memberof Options#
   * @type {boolean|number[]}
   * @default undefined
   * @category ManualColumnResize
   *
   * @example
   * ```js
   * // enable the `manualColumnResize` plugin
   * manualColumnResize: true,
   *
   * // enable the `manualColumnResize` plugin
   * // set the initial width of column 0 to 40 pixels
   * // set the initial width of column 1 to 50 pixels
   * // set the initial width of column 2 to 60 pixels
   * manualColumnResize: [40, 50, 60],
   * ```
   */
  manualColumnResize: void 0,
  /**
   * @description
   * The `manualRowMove` option configures the [`ManualRowMove`](@/api/manualRowMove.md) plugin.
   *
   * You can set the `manualRowMove` option to one of the following:
   *
   * | Setting  | Description                                                                                               |
   * | -------- | --------------------------------------------------------------------------------------------------------- |
   * | `true`   | Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                               |
   * | `false`  | Disable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                              |
   * | An array | - Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin<br>- Move individual rows at initialization |
   *
   * Read more:
   * - [Row moving](@/guides/rows/row-moving.md)
   *
   * @memberof Options#
   * @type {boolean|number[]}
   * @default undefined
   * @category ManualRowMove
   *
   * @example
   * ```js
   * // enable the `ManualRowMove` plugin
   * manualRowMove: true,
   *
   * // enable the `ManualRowMove` plugin
   * // at initialization, move row 0 to 1
   * // at initialization, move row 1 to 4
   * // at initialization, move row 2 to 6
   * manualColumnMove: [1, 4, 6],
   * ```
   */
  manualRowMove: void 0,
  /**
   * @description
   * The `manualRowResize` option configures the [`ManualRowResize`](@/api/manualRowResize.md) plugin.
   *
   * You can set the `manualRowResize` option to one of the following:
   *
   * | Setting  | Description                                                                                                   |
   * | -------- | ------------------------------------------------------------------------------------------------------------- |
   * | `true`   | Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                               |
   * | `false`  | Disable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                              |
   * | An array | - Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin<br>- Set initial heights of individual rows |
   *
   * Read more:
   * - [Row height: Adjust the row height manually](@/guides/rows/row-height.md#adjust-the-row-height-manually)
   *
   * @memberof Options#
   * @type {boolean|number[]}
   * @default undefined
   * @category ManualRowResize
   *
   * @example
   * ```js
   * // enable the `ManualRowResize` plugin
   * manualRowResize: true,
   *
   * // enable the `ManualRowResize` plugin
   * // set the initial height of row 0 to 40 pixels
   * // set the initial height of row 1 to 50 pixels
   * // set the initial height of row 2 to 60 pixels
   * manualRowResize: [40, 50, 60],
   * ```
   */
  manualRowResize: void 0,
  /**
   * The `maxCols` option sets a maximum number of columns.
   *
   * The `maxCols` option is used:
   * - At initialization: if the `maxCols` value is lower than the initial number of columns,
   * Handsontable trims columns from the right.
   * - At runtime: for example, when inserting columns.
   *
   * @memberof Options#
   * @type {number}
   * @default Infinity
   * @category Core
   *
   * @example
   * ```js
   * // set the maximum number of columns to 300
   * maxCols: 300,
   * ```
   */
  maxCols: 1 / 0,
  /**
   * The `maxRows` option sets a maximum number of rows.
   *
   * The `maxRows` option is used:
   * - At initialization: if the `maxRows` value is lower than the initial number of rows,
   * Handsontable trims rows from the bottom.
   * - At runtime: for example, when inserting rows.
   *
   * @memberof Options#
   * @type {number}
   * @default Infinity
   * @category Core
   *
   * @example
   * ```js
   * // set the maximum number of rows to 300
   * maxRows: 300,
   * ```
   */
  maxRows: 1 / 0,
  /**
   * @description
   * The `mergeCells` option configures the [`MergeCells`](@/api/mergeCells.md) plugin.
   *
   * You can set the `mergeCells` option to one of the following:
   *
   * | Setting             | Description                                                                                         |
   * | ------------------- | --------------------------------------------------------------------------------------------------- |
   * | `true`              | Enable the [`MergeCells`](@/api/mergeCells.md) plugin                                               |
   * | `false`             | Disable the [`MergeCells`](@/api/mergeCells.md) plugin                                              |
   * | An array of objects | - Enable the [`MergeCells`](@/api/mergeCells.md) plugin<br>- Merge specific cells at initialization |
   *
   * To merge specific cells at Handsontable's initialization,
   * set the `mergeCells` option to an array of objects, with the following properties:
   *
   * | Property  | Description                                                |
   * | --------- | ---------------------------------------------------------- |
   * | `row`     | The row index of the merged section's beginning            |
   * | `col`     | The column index of the merged section's beginning         |
   * | `rowspan` | The width (as a number of rows) of the merged section      |
   * | `colspan` | The height (as a number of columns ) of the merged section |
   *
   * Read more:
   * - [Merge cells](@/guides/cell-features/merge-cells.md)
   *
   * @memberof Options#
   * @type {boolean|object[]}
   * @default false
   * @category MergeCells
   *
   * @example
   * ```js
   * // enable the `MergeCells` plugin
   * mergeCells: true,
   *
   * // enable the `MergeCells` plugin
   * // and merge specific cells at initialization
   * mergeCells: [
   *   // merge cells from cell (1,1) to cell (3,3)
   *   {row: 1, col: 1, rowspan: 3, colspan: 3},
   *   // merge cells from cell (3,4) to cell (2,2)
   *   {row: 3, col: 4, rowspan: 2, colspan: 2},
   *   // merge cells from cell (5,6) to cell (3,3)
   *   {row: 5, col: 6, rowspan: 3, colspan: 3}
   * ],
   * ```
   */
  mergeCells: !1,
  /**
   * The `minCols` option sets a minimum number of columns.
   *
   * The `minCols` option is used:
   * - At initialization: if the `minCols` value is higher than the initial number of columns,
   * Handsontable adds empty columns to the right.
   * - At runtime: for example, when removing columns.
   *
   * The `minCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).
   * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),
   * you can only have as many columns as defined in:
   * - The first data row
   * - The [`dataSchema`](#dataSchema) option
   * - The [`columns`](#columns) option
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // set the minimum number of columns to 10
   * minCols: 10,
   * ```
   */
  minCols: 0,
  /**
   * The `minRows` option sets a minimum number of rows.
   *
   * The `minRows` option is used:
   * - At initialization: if the `minRows` value is higher than the initial number of rows,
   * Handsontable adds empty rows at the bottom.
   * - At runtime: for example, when removing rows.
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // set the minimum number of rows to 10
   * minRows: 10,
   * ```
   */
  minRows: 0,
  /**
   * The `minSpareCols` option sets a minimum number of empty columns
   * at the grid's right-hand end.
   *
   * If there already are other empty columns at the grid's right-hand end,
   * they are counted into the `minSpareCols` value.
   *
   * The total number of columns can't exceed the [`maxCols`](#maxCols) value.
   *
   * The `minSpareCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).
   * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),
   * you can only have as many columns as defined in:
   * - The first data row
   * - The [`dataSchema`](#dataSchema) option
   * - The [`columns`](#columns) option
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // at Handsontable's initialization, add at least 3 empty columns on the right
   * minSpareCols: 3,
   * ```
   */
  minSpareCols: 0,
  /**
   * The `minSpareRows` option sets a minimum number of empty rows
   * at the bottom of the grid.
   *
   * If there already are other empty rows at the bottom,
   * they are counted into the `minSpareRows` value.
   *
   * The total number of rows can't exceed the [`maxRows`](#maxRows) value.
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // at Handsontable's initialization, add at least 3 empty rows at the bottom
   * minSpareRows: 3,
   * ```
   */
  minSpareRows: 0,
  /**
   * @description
   * The `multiColumnSorting` option configures the [`MultiColumnSorting`](@/api/columnSorting.md) plugin.
   *
   * You can set the `multiColumnSorting` option to one of the following:
   *
   * | Setting    | Description                                                                                                                                                |
   * | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true`     | Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin with the default configuration                                                       |
   * | `false`    | Disable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin                                                                                     |
   * | An object  | - Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin<br>- Modify the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options |
   *
   * If you set the `multiColumnSorting` option to an object,
   * you can set the following [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options:
   *
   * | Option                   | Possible settings                                                                                                                                |
   * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `indicator`              | `true`: Display the arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header |
   * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |
   * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |
   * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/rows-sorting.md#add-a-custom-comparator)                                                               |
   *
   * If you set the `multiColumnSorting` option to an object,
   * you can also sort individual columns at Handsontable's initialization.
   * In the `multiColumnSorting` object, add an object named `initialConfig`,
   * with the following properties:
   *
   * | Option      | Possible settings   | Description                                                      |
   * | ----------- | ------------------- | ---------------------------------------------------------------- |
   * | `column`    | A number            | The index of the column that you want to sort at initialization  |
   * | `sortOrder` | `'asc'` \| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |
   *
   * Read more:
   * - [Rows sorting](@/guides/rows/rows-sorting.md)
   * - [`columnSorting`](#columnSorting)
   *
   * @memberof Options#
   * @type {boolean|object}
   * @default undefined
   * @category MultiColumnSorting
   *
   * @example
   * ```js
   * // enable the `MultiColumnSorting` plugin
   * multiColumnSorting: true
   *
   * // enable the `MultiColumnSorting` plugin with custom configuration
   * multiColumnSorting: {
   *   // sort empty cells as well
   *   sortEmptyCells: true,
   *   // display the arrow icon in the column header
   *   indicator: true,
   *   // disable clicking on the column header to sort the column
   *   headerAction: false,
   *   // add a custom compare function
   *   compareFunctionFactory(sortOrder, columnMeta) {
   *     return function(value, nextValue) {
   *       // some value comparisons which will return -1, 0 or 1...
   *     }
   *   }
   * }
   *
   * // enable the `MultiColumnSorting` plugin
   * multiColumnSorting: {
   *   // at initialization, sort column 1 in ascending order
   *   initialConfig: {
   *     column: 1,
   *     sortOrder: 'asc'
   *   },
   *   // at initialization, sort column 2 in descending order
   *   initialConfig: {
   *     column: 2,
   *     sortOrder: 'desc'
   *   }
   * }
   * ```
   */
  multiColumnSorting: void 0,
  /**
   * When set to `true`, the `navigableHeaders` option lets you navigate [row headers](@/guides/rows/row-header.md) and [column headers](@/guides/columns/column-header.md), using the arrow keys or the <kbd>**Tab**</kbd> key (if the [`tabNavigation`](#tabNavigation) option is set to `true`).
   *
   * @since 14.0.0
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // you can navigate row and column headers with the keyboard
   * navigableHeaders: true,
   *
   * // default behavior: you can't navigate row and column headers with the keyboard
   * navigableHeaders: false,
   * ```
   */
  navigableHeaders: !1,
  /**
   * When set to `false`, the `tabNavigation` option changes the behavior of the
   * <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keyboard shortcuts. The Handsontable
   * no more captures that shortcuts to make the grid navigation available (`tabNavigation: true`)
   * but returns control to the browser so the native page navigation is possible.
   *
   * @since 14.0.0
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // you can't navigate row and column headers using <kbd>Tab</kbd> or <kbd>Shift</kbd>+<kbd>Tab</kbd> keyboard shortcuts
   * tabNavigation: false,
   *
   * // default behavior: you can navigate row and column headers using <kbd>Tab</kbd> or <kbd>Shift</kbd>+<kbd>Tab</kbd> keyboard shortcuts
   * tabNavigation: true,
   * ```
   */
  tabNavigation: !0,
  /**
   * @description
   * The `nestedHeaders` option configures the [`NestedHeaders`](@/api/nestedHeaders.md) plugin.
   *
   * You can set the `nestedHeaders` option to one of the following:
   *
   * | Setting           | Description                                                                                                                           |
   * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------- |
   * | `false` (default) | Disable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin                                                                          |
   * | `true`            | - Enable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin<br>- Don't configure any nested headers                                 |
   * | Array of arrays   | - Enable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin<br>- Configure headers that are nested on Handsontable's initialization |
   *
   * If you set the `nestedHeaders` option to an array of arrays, each array configures one set of nested headers.
   *
   * Each array element configures one header, and can be one of the following:
   *
   * | Array element | Description                                                                                  |
   * | ------------- | -------------------------------------------------------------------------------------------- |
   * | A string      | The header's label                                                                           |
   * | An object     | Properties:<br>`label` (string): the header's label<br>`colspan` (integer): the column width |
   *
   * Read more:
   * - [Plugins: `NestedHeaders`](@/api/nestedHeaders.md)
   * - [Column groups: Nested headers](@/guides/columns/column-groups.md#nested-headers)
   *
   * @memberof Options#
   * @type {boolean|Array[]}
   * @default undefined
   * @category NestedHeaders
   *
   * @example
   * ```js
   * nestedHeaders: [
   *   ['A', {label: 'B', colspan: 8}, 'C'],
   *   ['D', {label: 'E', colspan: 4}, {label: 'F', colspan: 4}, 'G'],
   *   ['H', 'I', 'J', 'K', 'L', 'M', 'N', 'R', 'S', 'T']
   * ],
   * ```
   */
  nestedHeaders: void 0,
  /**
   * @description
   * The `nestedRows` option configures the [`NestedRows`](@/api/nestedRows.md) plugin.
   *
   * You can set the `nestedRows` option to one of the following:
   *
   * | Setting           | Description                                            |
   * | ----------------- | ------------------------------------------------------ |
   * | `false` (default) | Disable the [`NestedRows`](@/api/nestedRows.md) plugin |
   * | `true`            | Enable the [`NestedRows`](@/api/nestedRows.md) plugin  |
   *
   * Read more:
   * - [Plugins: `NestedRows`](@/api/nestedRows.md)
   *
   * @example
   * ```js
   * // enable the `NestedRows` plugin
   * nestedRows: true,
   * ```
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category NestedRows
   */
  nestedRows: void 0,
  /**
   * The `noWordWrapClassName` option lets you add a CSS class name
   * to each cell that has the [`wordWrap`](#wordWrap) option set to `false`.
   *
   * Read more:
   * - [`wordWrap`](#wordWrap)
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default 'htNoWrap'
   * @category Core
   *
   * @example
   * ```js
   * // add an `is-noWrapCell` CSS class name
   * // to each cell that doesn't wrap content
   * noWordWrapClassName: 'is-noWrapCell',
   * ```
   */
  noWordWrapClassName: "htNoWrap",
  /**
   * The `numericFormat` option configures the number format and the currency format
   * of [`numeric`](@/guides/cell-types/numeric-cell-type.md) cells` displayed output
   * in the numeric cell renderer.
   *
   * You can set the `numericFormat` option to an object with the following properties:
   *
   * | Property    | Possible values                                                               | Description     |
   * | ----------- | ----------------------------------------------------------------------------- | --------------- |
   * | `pattern`   | All [`numbro.js` number formats](https://numbrojs.com/format.html#numbers)    | Number format   |
   * | `culture`   | All [`numbro.js` currency formats](https://numbrojs.com/format.html#currency) | Currency format |
   *
   * The `numericFormat` option as no effect on the numeric cell editor.
   *
   * In the source data, numeric data is stored as JavaScript numbers.
   *
   * Read more:
   * - [Numeric cell type](@/guides/cell-types/numeric-cell-type.md)
   * - [Third-party licenses](@/guides/technical-specification/third-party-licenses.md)
   *
   * @memberof Options#
   * @since 0.35.0
   * @type {object}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // set the `type` of each cell in this column to `numeric`
   *     type: 'numeric',
   *     // set the `numericFormat` option for every `numeric` cell of this column
   *     numericFormat: {
   *       // set the number format
   *       pattern: '0,00',
   *       // set the currency format
   *       culture: 'en-US'
   *     }
   *   }
   * ],
   * ```
   */
  numericFormat: void 0,
  /**
   * If the `observeDOMVisibility` option is set to `true`,
   * Handsontable rerenders every time it detects that the grid was made visible in the DOM.
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // don't rerender the grid on visibility changes
   * observeDOMVisibility: false,
   * ```
   */
  observeDOMVisibility: !0,
  /**
   * The `outsideClickDeselects` option determines what happens to the current [selection](@/guides/cell-features/selection.md)
   * when you click outside of the grid.
   *
   * You can set the `outsideClickDeselects` option to one of the following:
   *
   * | Setting          | Description                                                                                              |
   * | ---------------- | -------------------------------------------------------------------------------------------------------- |
   * | `true` (default) | On a mouse click outside of the grid, clear the current [selection](@/guides/cell-features/selection.md) |
   * | `false`          | On a mouse click outside of the grid, keep the current [selection](@/guides/cell-features/selection.md)  |
   * | A function       | A function that takes the click event target and returns a boolean                                       |
   *
   * @memberof Options#
   * @type {boolean|Function}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // on a mouse click outside of the grid, clear the current selection
   * outsideClickDeselects: true,
   *
   * // on a mouse click outside of the grid, keep the current selection
   * outsideClickDeselects: false,
   *
   * // take the click event target and return `false`
   * outsideClickDeselects(event) {
   *   return false;
   * }
   *
   * // take the click event target and return `true`
   * outsideClickDeselects(event) {
   *   return false;
   * }
   * ```
   */
  outsideClickDeselects: !0,
  /**
   * @description
   * The `persistentState` option configures the [`PersistentState`](@/api/persistentState.md) plugin.
   *
   * You can set the `persistentState` to one of the following:
   *
   * | Setting           | Description                                                      |
   * | ----------------- | ---------------------------------------------------------------- |
   * | `false` (default) | Disable the [`PersistentState`](@/api/persistentState.md) plugin |
   * | `true`            | Enable the [`PersistentState`](@/api/persistentState.md) plugin  |
   *
   * Read more:
   * - [Saving data: Saving data locally](@/guides/getting-started/saving-data.md#save-data-locally)
   * - [Plugins: `PersistentState`](@/api/persistentState.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category PersistentState
   *
   * @example
   * ```js
   * // enable the `PersistentState` plugin
   * persistentState: true,
   * ```
   */
  persistentState: void 0,
  /**
   * The `placeholder` option lets you display placeholder text in every empty cell.
   *
   * You can set the `placeholder` option to one of the following:
   *
   * | Setting            | Example        | Description                                                           |
   * | ------------------ | -------------- | --------------------------------------------------------------------- |
   * | A non-empty string | `'Empty cell'` | Display `Empty cell` text in empty cells                              |
   * | A non-string value | `000`          | Display `000` text in empty cells (non-string values get stringified) |
   *
   * Read more:
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   *
   * @memberof Options#
   * @type {string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // display 'Empty cell' text
   * // in every empty cell of the entire grid
   * placeholder: 'Empty cell',
   *
   * // or
   * columns: [
   *   {
   *     data: 'date',
   *     dateFormat: 'DD/MM/YYYY',
   *     // display 'Empty date cell' text
   *     // in every empty cell of the `date` column
   *     placeholder: 'Empty date cell'
   *   }
   * ],
   * ```
   */
  placeholder: void 0,
  /**
   * The `placeholderCellClassName` option lets you add a CSS class name to cells
   * that contain [`placeholder`](#placeholder) text.
   *
   * Read more:
   * - [Cell validator](@/guides/cell-functions/cell-validator.md)
   * - [`placeholder`](#placeholder)
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default 'htPlaceholder'
   * @category Core
   *
   * @example
   * ```js
   * // add a `has-placeholder` CSS class name
   * // to each cell that contains `placeholder` text
   * placeholderCellClassName: 'has-placeholder',
   * ```
   */
  placeholderCellClassName: "htPlaceholder",
  /**
   * The `preventOverflow` option configures preventing Handsontable
   * from overflowing outside of its parent element.
   *
   * You can set the `preventOverflow` option to one of the following:
   *
   * | Setting           | Description                      |
   * | ----------------- | -------------------------------- |
   * | `false` (default) | Don't prevent overflowing        |
   * | `'horizontal'`      | Prevent horizontal overflowing |
   * | `'vertical'`        | Prevent vertical overflowing   |
   *
   * @memberof Options#
   * @type {string|boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // prevent horizontal overflowing
   * preventOverflow: 'horizontal',
   * ```
   */
  preventOverflow: !1,
  /**
   * The `preventWheel` option configures preventing the `wheel` event's default action
   * on overlays.
   *
   * You can set the `preventWheel` option to one of the following:
   *
   * | Setting           | Description                                      |
   * | ----------------- | ------------------------------------------------ |
   * | `false` (default) | Don't prevent the `wheel` event's default action |
   * | `true`            | Prevent the `wheel` event's default action       |
   *
   * @memberof Options#
   * @private
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // don't prevent the `wheel` event's default action
   * preventWheel: false,
   * ```
   */
  preventWheel: !1,
  /**
   * @description
   * The `readOnly` option determines whether a cell, column or comment is editable or not.
   *
   * You can set the `readOnly` option to one of the following:
   *
   * | Setting           | Decription                                                                                                                |
   * | ----------------- | ------------------------------------------------------------------------------------------------------------------------- |
   * | `false` (default) | Set as editable                                                                                                           |
   * | `true`            | - Set as read-only<br>- Add the [`readOnlyCellClassName`](#readOnlyCellClassName) CSS class name (by default: `htDimmed`) |
   *
   * `readOnly` cells can't be changed by the [`populateFromArray()`](@/api/core.md#populatefromarray) method.
   *
   * Read more:
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // set as read-only
   * readOnly: true,
   * ```
   */
  readOnly: !1,
  /**
   * The `readOnlyCellClassName` option lets you add a CSS class name to [read-only](#readOnly) cells.
   *
   * Read more:
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`TableClassName`](#TableClassName)
   *
   * @memberof Options#
   * @type {string}
   * @default 'htDimmed'
   * @category Core
   *
   * @example
   * ```js
   * // add a `is-readOnly` CSS class name
   * // to every read-only cell
   * readOnlyCellClassName: 'is-readOnly',
   * ```
   */
  readOnlyCellClassName: "htDimmed",
  /**
   * The `renderAllRows` option configures Handsontable's [row virtualization](@/guides/rows/row-virtualization.md).
   *
   * You can set the `renderAllRows` option to one of the following:
   *
   * | Setting           | Description                                                                                        |
   * | ----------------- | -------------------------------------------------------------------------------------------------- |
   * | `false` (default) | Enable [row virtualization](@/guides/rows/row-virtualization.md)                                   |
   * | `true`            | Disable [row virtualization](@/guides/rows/row-virtualization.md)<br>(render all rows of the grid) |
   *
   * Read more:
   * - [Row virtualization](@/guides/rows/row-virtualization.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // disable row virtualization
   * renderAllRows: true,
   * ```
   */
  renderAllRows: void 0,
  /**
   * @description
   * The `renderer` option sets a [cell renderer](@/guides/cell-functions/cell-renderer.md) for a cell.
   *
   * You can set the `renderer` option to one of the following:
   * - A custom renderer function
   * - One of the following [cell renderer aliases](@/guides/cell-functions/cell-renderer.md):
   *
   * | Alias               | Cell renderer function                                                         |
   * | ------------------- | ------------------------------------------------------------------------------ |
   * | A custom alias      | Your [custom cell renderer](@/guides/cell-functions/cell-renderer.md) function |
   * | `'autocomplete'`    | `AutocompleteRenderer`                                                         |
   * | `'base'`            | `BaseRenderer`                                                                 |
   * | `'checkbox'`        | `CheckboxRenderer`                                                             |
   * | `'date'`            | `DateRenderer`                                                                 |
   * | `'dropdown'`        | `DropdownRenderer`                                                             |
   * | `'html'`            | `HtmlRenderer`                                                                 |
   * | `'numeric'`         | `NumericRenderer`                                                              |
   * | `'password'`        | `PasswordRenderer`                                                             |
   * | `'text'`            | `TextRenderer`                                                                 |
   * | `'time'`            | `TimeRenderer`                                                                 |
   *
   * To set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)
   * options all at once, use the [`type`](#type) option.
   *
   * Read more:
   * - [Cell renderer](@/guides/cell-functions/cell-renderer.md)
   * - [Cell type](@/guides/cell-types/cell-type.md)
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   * - [`type`](#type)
   *
   * @memberof Options#
   * @type {string|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // use the `numeric` renderer for each cell of the entire grid
   * renderer: `'numeric'`,
   *
   * // add a custom renderer function
   * renderer(hotInstance, td, row, column, prop, value, cellProperties) {
   *   // your custom renderer's logic
   *   ...
   * }
   *
   * // apply the `renderer` option to individual columns
   * columns: [
   *   {
   *     // use the `autocomplete` renderer for each cell of this column
   *     renderer: 'autocomplete'
   *   },
   *   {
   *     // use the `myCustomRenderer` renderer for each cell of this column
   *     renderer: 'myCustomRenderer'
   *   }
   * ]
   * ```
   */
  renderer: void 0,
  /**
   * The `rowHeaders` option configures your grid's row headers.
   *
   * You can set the `rowHeaders` option to one of the following:
   *
   * | Setting    | Description                                                       |
   * | ---------- | ----------------------------------------------------------------- |
   * | `true`     | Enable the default row headers ('1', '2', '3', ...)               |
   * | `false`    | Disable row headers                                               |
   * | An array   | Define your own row headers (e.g. `['One', 'Two', 'Three', ...]`) |
   * | A function | Define your own row headers, using a function                     |
   *
   * Read more:
   * - [Row header](@/guides/rows/row-header.md)
   *
   * @memberof Options#
   * @type {boolean|string[]|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // enable the default row headers
   * rowHeaders: true,
   *
   * // set your own row headers
   * rowHeaders: ['One', 'Two', 'Three'],
   *
   * // set your own row headers, using a function
   * rowHeaders: function(visualRowIndex) {
   *   return `${visualRowIndex}: AB`;
   * },
   * ```
   */
  rowHeaders: void 0,
  /**
   * @description
   * The `rowHeaderWidth` option configures the width of row headers.
   *
   * You can set the `rowHeaderWidth` option to one of the following:
   *
   * | Setting  | Description                                     |
   * | -------- | ----------------------------------------------- |
   * | A number | Set the same width for every row header         |
   * | An array | Set different widths for individual row headers |
   *
   * @memberof Options#
   * @type {number|number[]}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set the same width for every row header
   * rowHeaderWidth: 25,
   *
   * // set different widths for individual row headers
   * rowHeaderWidth: [25, 30, 55],
   * ```
   */
  rowHeaderWidth: void 0,
  /**
   * The `rowHeights` option sets rows' heights, in pixels.
   *
   * In the rendering process, the default row height is 23 px (22 px + 1 px of the row's bottom border).
   * You can change it to equal or greater than 23px, by setting the `rowHeights` option to one of the following:
   *
   * | Setting     | Description                                                                                         | Example                                                      |
   * | ----------- | --------------------------------------------------------------------------------------------------- | ------------------------------------------------------------ |
   * | A number    | Set the same height for every row                                                                   | `rowHeights: 100`                                            |
   * | A string    | Set the same height for every row                                                                   | `rowHeights: '100px'`                                        |
   * | An array    | Set heights separately for each row                                                                 | `rowHeights: [100, 120, undefined]`                          |
   * | A function  | Set row heights dynamically,<br>on each render                                                      | `rowHeights(visualRowIndex) { return visualRowIndex * 10; }` |
   * | `undefined` | Used by the [modifyRowHeight](@/api/hooks.md#modifyRowHeight) hook,<br>to detect row height changes | `rowHeights: undefined`                                      |
   *
   * The `rowHeights` option also sets the minimum row height that can be set
   * via the {@link ManualRowResize} and {@link AutoRowSize} plugins (if they are enabled).
   *
   * Read more:
   * - [Row height](@/guides/rows/row-height.md)
   *
   * @memberof Options#
   * @type {number|number[]|string|string[]|Array<undefined>|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set every row's height to 100px
   * rowHeights: 100,
   *
   * // set every row's height to 100px
   * rowHeights: '100px',
   *
   * // set the first (by visual index) row's height to 100
   * // set the second (by visual index) row's height to 120
   * // set the third (by visual index) row's height to `undefined`
   * // set any other row's height to the default 23px
   * rowHeights: [100, 120, undefined],
   *
   * // set each row's height individually, using a function
   * rowHeights(visualRowIndex) {
   *   return visualRowIndex * 10;
   * },
   * ```
   */
  rowHeights: void 0,
  /**
   * @description
   * The `search` option configures the [`Search`](@/api/search.md) plugin.
   *
   * You can set the `search` option to one of the following:
   *
   * | Setting           | Description                                                                          |
   * | ----------------- | ------------------------------------------------------------------------------------ |
   * | `false` (default) | Disable the [`Search`](@/api/search.md) plugin                                       |
   * | `true`            | Enable the [`Search`](@/api/search.md) plugin with the default configuration         |
   * | An object         | - Enable the [`Search`](@/api/search.md) plugin<br>- Apply your custom configuration |
   *
   * If you set the `search` option to an object, you can configure the following search options:
   *
   * | Option              | Possible settings | Description                                                                                          |
   * | ------------------- | ----------------- | ---------------------------------------------------------------------------------------------------- |
   * | `searchResultClass` | A string          | Add a custom CSS class name to search results                                                        |
   * | `queryMethod`       | A function        | Add a [custom query method](@/guides/navigation/searching-values.md#custom-query-method)  |
   * | `callback`          | A function        | Add a [custom callback function](@/guides/navigation/searching-values.md#custom-callback) |
   *
   * Read more:
   * - [Searching values](@/guides/navigation/searching-values.md)
   * - [Searching values: Custom query method](@/guides/navigation/searching-values.md#custom-query-method)
   * - [Searching values: Custom callback](@/guides/navigation/searching-values.md#custom-callback)
   *
   * @memberof Options#
   * @type {boolean|object}
   * @default false
   * @category Search
   *
   * @example
   * ```js
   * // enable the `Search` plugin with the default configuration
   * search: true,
   *
   * // enable the `Search` plugin with a custom configuration
   * search: {
   *   // add a `customClass` CSS class name to search results
   *   searchResultClass: 'customClass',
   *   // add a custom query method
   *   queryMethod(queryStr, value) {
   *     ...
   *   },
   *   // add a custom callback function
   *   callback(instance, row, column, value, result) {
   *     ...
   *   }
   * }
   * ```
   */
  search: !1,
  /**
   * @description
   * The `selectionMode` option configures how [selection](@/guides/cell-features/selection.md) works.
   *
   * You can set the `selectionMode` option to one of the following:
   *
   * | Setting      | Description                                                  |
   * | ------------ | ------------------------------------------------------------ |
   * | `'single'`   | Allow the user to select only one cell at a time.            |
   * | `'range'`    | Allow the user to select one range of cells at a time.       |
   * | `'multiple'` | Allow the user to select multiple ranges of cells at a time. |
   *
   * Read more:
   * - [Selection: Selecting ranges](@/guides/cell-features/selection.md#select-ranges)
   *
   * @memberof Options#
   * @type {string}
   * @default 'multiple'
   * @category Core
   *
   * @example
   * ```js
   * // you can only select one cell at at a time
   * selectionMode: 'single',
   *
   * // you can select one range of cells at a time
   * selectionMode: 'range',
   *
   * // you can select multiple ranges of cells at a time
   * selectionMode: 'multiple',
   * ```
   */
  selectionMode: "multiple",
  /**
   * The `selectOptions` option configures options that the end user can choose from in [`select`](@/guides/cell-types/select-cell-type.md) cells.
   *
   * You can set the `selectOptions` option to one of the following:
   *
   * | Setting                         | Description                                                                   |
   * | ------------------------------- | ----------------------------------------------------------------------------- |
   * | An array of strings             | Each string is one option's value and label                                   |
   * | An object with key-string pairs | - Each key is one option's value<br>- The key's string is that option's label |
   * | A function                      | A function that returns an object with key-string pairs                       |
   *
   * Read more:
   * - [Select cell type](@/guides/cell-types/select-cell-type.md)
   *
   * @memberof Options#
   * @type {string[]|object|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // set the `type` of each cell in this column to `select`
   *     type: 'select',
   *     // set the first option's value and label to `A`
   *     // set the second option's value and label to `B`
   *     // set the third option's value and label to `C`
   *     selectOptions: ['A', 'B', 'C'],
   *   },
   *   {
   *     // set the `type` of each cell in this column to `select`
   *     type: 'select',
   *     selectOptions: {
   *       // set the first option's value to `value1` and label to `Label 1`
   *       value1: 'Label 1',
   *       // set the second option's value to `value2` and label to `Label 2`
   *       value2: 'Label 2',
   *       // set the third option's value to `value3` and label to `Label 3`
   *       value3: 'Label 3',
   *     },
   *   },
   *   {
   *     // set the `type` of each cell in this column to `select`
   *     type: 'select',
   *     // set `selectOption` to a function that returns available options as an object
   *     selectOptions(visualRow, visualColumn, prop) {
   *       return {
   *         value1: 'Label 1',
   *         value2: 'Label 2',
   *         value3: 'Label 3',
   *       };
   *   },
   * ],
   * ```
   */
  selectOptions: void 0,
  /**
   * @description
   * The `skipColumnOnPaste` option determines whether you can paste data into a given column.
   *
   * You can only apply the `skipColumnOnPaste` option to an entire column, using the [`columns`](#columns) option.
   *
   * You can set the `skipColumnOnPaste` option to one of the following:
   *
   * | Setting           | Description                                                                                           |
   * | ----------------- | ----------------------------------------------------------------------------------------------------- |
   * | `false` (default) | Enable pasting data into this column                                                                  |
   * | `true`            | - Disable pasting data into this column<br>- On pasting, paste data into the next column to the right |
   *
   * Read more:
   * - [Configuration options: Setting column options](@/guides/getting-started/configuration-options.md#set-column-options)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // disable pasting data into this column
   *     skipColumnOnPaste: true
   *   }
   * ],
   * ```
   */
  skipColumnOnPaste: !1,
  /**
   * @description
   *
   * The `skipRowOnPaste` option determines whether you can paste data into a given row.
   *
   * You can only apply the `skipRowOnPaste` option to an entire row, using the [`cells`](#cells) option.
   *
   * You can set the `skipRowOnPaste` option to one of the following:
   *
   * | Setting           | Description                                                                         |
   * | ----------------- | ----------------------------------------------------------------------------------- |
   * | `false` (default) | Enable pasting data into this row                                                   |
   * | `true`            | - Disable pasting data into this row<br>- On pasting, paste data into the row below |
   *
   * Read more:
   * - [Configuration options: Setting row options](@/guides/getting-started/configuration-options.md#set-row-options)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * cells(row, column) {
   *  const cellProperties = {};
   *
   *  // disable pasting data into row 1
   *  if (row === 1) {
   *    cellProperties.skipRowOnPaste = true;
   *  }
   *
   *  return cellProperties;
   * }
   * ```
   */
  skipRowOnPaste: !1,
  /**
   * The `sortByRelevance` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'
   * lists are sorted in the same order as provided in the [`source`](#source) option.
   *
   * You can set the `sortByRelevance` option to one of the following:
   *
   * | Setting          | Description                                                                  |
   * | ---------------- | ---------------------------------------------------------------------------- |
   * | `true` (default) | Sort options in the same order as provided in the [`source`](#source) option |
   * | `false`          | Sort options alphabetically                                                  |
   *
   * Read more:
   * - [`source`](#source)
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * columns: [{
   *   // set the `type` of each cell in this column to `autocomplete`
   *   type: 'autocomplete',
   *   // set options available in every `autocomplete` cell of this column
   *   source: ['D', 'C', 'B', 'A'],
   *   // sort the `autocomplete` option in this order: D, C, B, A
   *   sortByRelevance: true
   * }],
   * ```
   */
  sortByRelevance: !0,
  /**
   * The `source` option sets options available in [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)
   * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells.
   *
   * You can set the `source` option to one of the following:
   *
   * - An array
   * - A function
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)
   * - [`strict`](#strict)
   * - [`allowHtml`](#allowHtml)
   * - [`filter`](#filter)
   * - [`sortByRelevance`](#sortByRelevance)
   *
   * @memberof Options#
   * @type {Array|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set `source` to an array
   * columns: [{
   *   // set the `type` of each cell in this column to `autocomplete`
   *   type: 'autocomplete',
   *   // set options available in every `autocomplete` cell of this column
   *   source: ['A', 'B', 'C', 'D']
   * }],
   *
   * // set `source` to a function
   * columns: [{
   *   // set the `type` of each cell in this column to `autocomplete`
   *   type: 'autocomplete',
   *   // for every `autocomplete` cell in this column, fetch data from an external source
   *   source(query, callback) {
   *     fetch('https://example.com/query?q=' + query, function(response) {
   *       callback(response.items);
   *     })
   *   }
   * }],
   * ```
   */
  source: void 0,
  /**
   * @description
   * If the [`data`](#data) option is not set, the `startCols` option sets the initial number of empty columns.
   *
   * The `startCols` option works only in Handsontable's constructor.
   *
   * @memberof Options#
   * @type {number}
   * @default 5
   * @category Core
   *
   * @example
   * ```js
   * // start with 15 empty columns
   * startCols: 15,
   * ```
   */
  startCols: 5,
  /**
   * @description
   * If the [`data`](#data) option is not set, the `startRows` option sets the initial number of empty rows.
   *
   * The `startRows` option works only in Handsontable's constructor.
   *
   * @memberof Options#
   * @type {number}
   * @default 5
   * @category Core
   *
   * @example
   * ```js
   * // start with 15 empty rows
   * startRows: 15,
   * ```
   */
  startRows: 5,
  /**
   * @description
   * The `stretchH` option determines what happens when the declared grid width
   * is different from the calculated sum of all column widths.
   *
   * You can set the `stretchH` option to one of the following:
   *
   * | Setting            | Description                                                       |
   * | ------------------ | ----------------------------------------------------------------- |
   * | `'none'` (default) | Don't fit the grid to the container (disable column stretching)   |
   * | `'last'`           | Fit the grid to the container, by stretching only the last column |
   * | `'all'`            | Fit the grid to the container, by stretching all columns evenly   |
   *
   * Read more:
   * - [Column width: Column stretching](@/guides/columns/column-width.md#column-stretching)
   *
   * @memberof Options#
   * @type {string}
   * @default 'none'
   * @category Core
   *
   * @example
   * ```js
   * // fit the grid to the container
   * // by stretching all columns evenly
   * stretchH: 'all',
   * ```
   */
  stretchH: "none",
  /**
   * The `strict` option configures the behavior of [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells.
   *
   * You can set the `strict` option to one of the following:
   *
   * | Setting | Mode                                                                                          | Description                                                                                |
   * | ------- | --------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ |
   * | `true`  | [Strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode)         | The end user:<br>- Can only choose one of suggested values<br>- Can't enter a custom value |
   * | `false` | [Flexible mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-flexible-mode)     | The end user:<br>- Can choose one of suggested values<br>- Can enter a custom value        |
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [`source`](#source)
   *
   * @memberof Options#
   * @type {boolean}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *   // set the `type` of each cell in this column to `autocomplete`
   *   type: 'autocomplete',
   *   // set options available in every `autocomplete` cell of this column
   *   source: ['A', 'B', 'C'],
   *   // values entered must match `A`, `B`, or `C`
   *   strict: true
   *   },
   * ],
   * ```
   */
  strict: void 0,
  /**
   * The `tableClassName` option lets you add CSS class names
   * to every Handsontable instance inside the `container` element.
   *
   * You can set the `tableClassName` option to one of the following:
   *
   * | Setting             | Description                                                                                |
   * | ------------------- | ------------------------------------------------------------------------------------------ |
   * | A string            | Add a single CSS class name to every Handsontable instance inside the `container` element  |
   * | An array of strings | Add multiple CSS class names to every Handsontable instance inside the `container` element |
   *
   * Read more:
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string|string[]}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // add a `your-class-name` CSS class name
   * // to every Handsontable instance inside the `container` element
   * tableClassName: 'your-class-name',
   *
   * // add `first-class-name` and `second-class-name` CSS class names
   * // to every Handsontable instance inside the `container` element
   * tableClassName: ['first-class-name', 'second-class-name'],
   * ```
   */
  tableClassName: void 0,
  /**
   * The `tabMoves` option configures the action of the <kbd>**Tab**</kbd> key.
   *
   * You can set the `tabMoves` option to an object with the following properties
   * (or to a function that returns such an object):
   *
   * | Property | Type   | Description                                                                                                                                              |
   * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `row`    | Number | - On pressing <kbd>**Tab**</kbd>, move selection `row` rows down<br>- On pressing <kbd>**Shift**</kbd>+<kbd>**Tab**</kbd>, move selection `row` rows up              |
   * | `col`    | Number | - On pressing <kbd>**Tab**</kbd>, move selection `col` columns right<br>- On pressing <kbd>**Shift**</kbd>+<kbd>**Tab**</kbd>, move selection `col` columns left     |
   *
   * @memberof Options#
   * @type {object|Function}
   * @default {row: 0, col: 1}
   * @category Core
   *
   * @example
   * ```js
   * // on pressing Tab, move selection 2 rows down and 2 columns right
   * // on pressing Shift+Tab, move selection 2 rows up and 2 columns left
   * tabMoves: {row: 2, col: 2},
   *
   * // the same setting, as a function
   * // `event` is a DOM Event object received on pressing Tab
   * // you can use it to check whether the user pressed Tab or Shift+Tab
   * tabMoves(event) {
   *   return {row: 2, col: 2};
   * },
   * ```
   */
  tabMoves: {
    row: 0,
    col: 1
  },
  /**
   * @description
   * The `title` option configures [column header](@/guides/columns/column-header.md) names.
   *
   * You can set the `title` option to a string.
   *
   * Read more:
   * - [Column header](@/guides/columns/column-header.md)
   * - [`columns`](#columns)
   *
   * @memberof Options#
   * @type {string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // set the first column header name to `First name`
   *     title: 'First name',
   *     type: 'text',
   *   },
   *   {
   *     // set the second column header name to `Last name`
   *     title: 'Last name',
   *     type: 'text',
   *   }
   * ],
   * ```
   */
  title: void 0,
  /**
   * The `trimDropdown` option configures the width of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)
   * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.
   *
   * You can set the `trimDropdown` option to one of the following:
   *
   * | Setting          | Description                                                                     |
   * | ---------------- | ------------------------------------------------------------------------------- |
   * | `true` (default) | Make the dropdown/autocomplete list's width the same as the edited cell's width |
   * | `false`          | Scale the dropdown/autocomplete list's width to the list's content              |
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     type: 'autocomplete',
   *     // for each cell of this column
   *     // make the `autocomplete` list's width the same as the edited cell's width
   *     trimDropdown: true,
   *   },
   *   {
   *     type: 'dropdown',
   *     // for each cell of this column
   *     // scale the `dropdown` list's width to the list's content
   *     trimDropdown: false,
   *   }
   * ],
   * ```
   */
  trimDropdown: !0,
  /**
   * @description
   * The `trimRows` option configures the [`TrimRows`](@/api/trimRows.md) plugin.
   *
   * You can set the `trimRows` option to one of the following:
   *
   * | Setting                          | Description                                                                                   |
   * | -------------------------------- | --------------------------------------------------------------------------------------------- |
   * | `false`                          | Disable the [`TrimRows`](@/api/trimRows.md) plugin                                            |
   * | `true`                           | Enable the [`TrimRows`](@/api/trimRows.md) plugin                                             |
   * | An array of physical row indexes | - Enable the [`TrimRows`](@/api/trimRows.md) plugin<br>- Trim selected rows at initialization |
   *
   * Read more:
   * - [Plugins: `TrimRows`](@/api/trimRows.md)
   * - [Row trimming](@/guides/rows/row-trimming.md)
   *
   * @memberof Options#
   * @type {boolean|number[]}
   * @default undefined
   * @category TrimRows
   *
   * @example
   * ```js
   * // enable the `TrimRows` plugin
   * trimRows: true,
   *
   * // enable the `TrimRows` plugin
   * // at Handsontable's initialization, trim rows 5, 10, and 15
   * trimRows: [5, 10, 15],
   * ```
   */
  trimRows: void 0,
  /**
   * The `trimWhitespace` option configures automatic whitespace removal. This option
   * affects the cell renderer and the cell editor.
   *
   * You can set the `trimWhitespace` option to one of the following:
   *
   * | Setting          | Description                                                     |
   * | ---------------- | --------------------------------------------------------------- |
   * | `true` (default) | Remove whitespace at the beginning and at the end of each cell |
   * | `false`          | Don't remove whitespace                                         |
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // don't remove whitespace
   *     // from any cell of this column
   *     trimWhitespace: false
   *   }
   * ]
   * ```
   */
  trimWhitespace: !0,
  /**
   * @description
   * The `type` option lets you set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)
   * options all at once, by selecting a [cell type](@/guides/cell-types/cell-type.md).
   *
   * You can set the `type` option to one of the following:
   *
   * | Cell type                                                         | Renderer, editor & validator                                                                                                                                                                                                                       |
   * | ----------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | A [custom cell type](@/guides/cell-types/cell-type.md)            | Renderer: your [custom cell renderer](@/guides/cell-functions/cell-renderer.md)<br>Editor: your [custom cell editor](@/guides/cell-functions/cell-editor.md)<br>Validator: your [custom cell validator](@/guides/cell-functions/cell-validator.md) |
   * | [`'autocomplete'`](@/guides/cell-types/autocomplete-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `AutocompleteEditor`<br>Validator: `AutocompleteValidator`                                                                         |
   * | [`'checkbox'`](@/guides/cell-types/checkbox-cell-type.md)         | Renderer: `CheckboxRenderer`<br>Editor: `CheckboxEditor`<br>Validator: -                                                                                                                               |
   * | [`'date'`](@/guides/cell-types/date-cell-type.md)                 | Renderer: `DateRenderer`<br>Editor: `DateEditor`<br>Validator: `DateValidator`                                                                                                 |
   * | [`'dropdown'`](@/guides/cell-types/dropdown-cell-type.md)         | Renderer: `DropdownRenderer`<br>Editor: `DropdownEditor`<br>Validator: `DropdownValidator`                                                                                     |
   * | [`'handsontable'`](@/guides/cell-types/handsontable-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `HandsontableEditor`<br>Validator: -                                                                                                                       |
   * | [`'numeric'`](@/guides/cell-types/numeric-cell-type.md)           | Renderer: `NumericRenderer`<br>Editor: `NumericEditor`<br>Validator: `NumericValidator`                                                                                        |
   * | [`'password'`](@/guides/cell-types/password-cell-type.md)         | Renderer: `PasswordRenderer`<br>Editor: `PasswordEditor`<br>Validator: -                                                                                                                               |
   * | `'text'`                                                          | Renderer: `TextRenderer`<br>Editor: `TextEditor`<br>Validator: -                                                                                                                                       |
   * | [`'time`'](@/guides/cell-types/time-cell-type.md)                 | Renderer: `TimeRenderer`<br>Editor: `TimeEditor`<br>Validator: `TimeValidator`                                                                                                 |
   *
   * Read more:
   * - [Cell type](@/guides/cell-types/cell-type.md)
   * - [Cell renderer](@/guides/cell-functions/cell-renderer.md)
   * - [Cell editor](@/guides/cell-functions/cell-editor.md)
   * - [Cell validator](@/guides/cell-functions/cell-validator.md)
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   * - [`renderer`](#renderer)
   * - [`editor`](#editor)
   * - [`validator`](#validator)
   *
   * @memberof Options#
   * @type {string}
   * @default 'text'
   * @category Core
   *
   * @example
   * ```js
   * // set the `numeric` cell type for each cell of the entire grid
   * type: `'numeric'`,
   *
   * // apply the `type` option to individual columns
   * columns: [
   *   {
   *     // set the `autocomplete` cell type for each cell of this column
   *     type: 'autocomplete'
   *   },
   *   {
   *     // set the `myCustomCellType` cell type for each cell of this column
   *     type: 'myCustomCellType'
   *   }
   * ]
   * ```
   */
  type: "text",
  /**
   * The `uncheckedTemplate` option lets you configure what value
   * an unchecked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.
   *
   * You can set the `uncheckedTemplate` option to one of the following:
   *
   * | Setting           | Description                                                                                                                                                                                |
   * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `false` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `false`                 |
   * | A string          | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |
   *
   * Read more:
   * - [Checkbox cell type: Checkbox template](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)
   * - [`getDataAtCell()`](@/api/core.md#getDataAtCell)
   * - [`checkedTemplate`](#checkedTemplate)
   *
   * @memberof Options#
   * @type {boolean|string|number}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // set the `type` of each cell in this column to `checkbox`
   *     // when unchecked, the cell's value is `false`
   *     // when checked, the cell's value is `true`
   *     type: 'checkbox',
   *   },
   *   {
   *     // set the `type` of each cell in this column to `checkbox`
   *     // when unchecked, the cell's value is `'No'`
   *     // when checked, the cell's value is `'Yes'`
   *     type: 'checkbox',
   *     uncheckedTemplate: 'No'
   *     checkedTemplate: 'Yes',
   *  }
   * ],
   * ```
   */
  uncheckedTemplate: void 0,
  /**
   * The `undo` option configures the [`UndoRedo`](@/api/undoRedo.md) plugin.
   *
   * You can set the `undo` option to one of the following:
   *
   * | Setting | Description                                        |
   * | ------- | -------------------------------------------------- |
   * | `true`  | Enable the [`UndoRedo`](@/api/undoRedo.md) plugin  |
   * | `false` | Disable the [`UndoRedo`](@/api/undoRedo.md) plugin |
   *
   * By default, the `undo` option is set to `undefined`,
   * but the [`UndoRedo`](@/api/undoRedo.md) plugin acts as enabled.
   * To disable the [`UndoRedo`](@/api/undoRedo.md) plugin completely,
   * set the `undo` option to `false`.
   *
   * Read more:
   * - [Undo and redo](@/guides/accessories-and-menus/undo-redo.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default undefined
   * @category UndoRedo
   *
   * @example
   * ```js
   * // enable the `UndoRedo` plugin
   * undo: true,
   * ```
   */
  undo: void 0,
  /**
   * @description
   * The `validator` option sets a [cell validator](@/guides/cell-functions/cell-validator.md) for a cell.
   *
   * You can set the `validator` option to one of the following:
   *
   * | Setting              | Description                                                                      |
   * | -------------------- | -------------------------------------------------------------------------------- |
   * | A string             | A [cell validator alias](@/guides/cell-functions/cell-validator.md)              |
   * | A function           | Your [custom cell validator function](@/guides/cell-functions/cell-validator.md) |
   * | A regular expression | A regular expression used for cell validation                                    |
   *
   * By setting the `validator` option to a string,
   * you can use one of the following [cell validator aliases](@/guides/cell-functions/cell-validator.md):
   *
   * | Alias               | Cell validator function                                                 |
   * | ------------------- | ----------------------------------------------------------------------- |
   * | A custom alias      | Your [custom cell validator](@/guides/cell-functions/cell-validator.md) |
   * | `'autocomplete'`    | `AutocompleteValidator`                                                 |
   * | `'date'`            | `DateValidator`                                                         |
   * | `'dropdown'`        | `DropdownValidator`                                                     |
   * | `'numeric'`         | `NumericValidator`                                                      |
   * | `'time'`            | `TimeValidator`                                                         |
   *
   * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)
   * options all at once, use the [`type`](#type) option.
   *
   * Read more:
   * - [Cell validator](@/guides/cell-functions/cell-validator.md)
   * - [Cell type](@/guides/cell-types/cell-type.md)
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   * - [`type`](#type)
   *
   * @memberof Options#
   * @type {Function|RegExp|string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *    {
   *      // use a built-in `numeric` cell validator
   *      validator: 'numeric'
   *    },
   *    {
   *      // validate against a regular expression
   *      validator: /^[0-9]$/
   *    },
   *    {
   *      // add a custom cell validator function
   *      validator(value, callback) {
   *          ...
   *      }
   *    },
   * ],
   * ```
   */
  validator: void 0,
  /**
   * @description
   * The `viewportColumnRenderingOffset` option configures the number of columns
   * to be rendered outside of the grid's viewport.
   *
   * You can set the `viewportColumnRenderingOffset` option to one of the following:
   *
   * | Setting            | Description                                             |
   * | ------------------ | ------------------------------------------------------- |
   * | `auto` (default)   | Use the offset calculated automatically by Handsontable |
   * | A number           | Set the offset manually                                 |
   *
   * Read more:
   * - [Performance: Define the number of pre-rendered rows and columns](@/guides/optimization/performance.md#define-the-number-of-pre-rendered-rows-and-columns)
   *
   * @memberof Options#
   * @type {number|string}
   * @default 'auto'
   * @category Core
   *
   * @example
   * ```js
   * // render 70 columns outside of the grid's viewport
   * viewportColumnRenderingOffset: 70,
   * ```
   */
  viewportColumnRenderingOffset: "auto",
  /**
   * @description
   * The `viewportRowRenderingOffset` option configures the number of rows
   * to be rendered outside of the grid's viewport.
   *
   * You can set the `viewportRowRenderingOffset` option to one of the following:
   *
   * | Setting            | Description                                             |
   * | ------------------ | ------------------------------------------------------- |
   * | `auto` (default)   | Use the offset calculated automatically by Handsontable |
   * | A number           | Set the offset manually                                 |
   *
   * Read more:
   * - [Performance: Define the number of pre-rendered rows and columns](@/guides/optimization/performance.md#define-the-number-of-pre-rendered-rows-and-columns)
   * - [Column virtualization](@/guides/columns/column-virtualization.md)
   *
   * @memberof Options#
   * @type {number|string}
   * @default 'auto'
   * @category Core
   *
   * @example
   * ```js
   * // render 70 rows outside of the grid's viewport
   * viewportRowRenderingOffset: 70,
   * ```
   */
  viewportRowRenderingOffset: "auto",
  /**
   * The `visibleRows` option sets the height of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)
   * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.
   *
   * When the number of list options exceeds the `visibleRows` number, a scrollbar appears.
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)
   *
   * @memberof Options#
   * @type {number}
   * @default 10
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     type: 'autocomplete',
   *     // set the `autocomplete` list's height to 15 options
   *     // for each cell of this column
   *     visibleRows: 15,
   *   },
   *   {
   *     type: 'dropdown',
   *     // set the `dropdown` list's height to 5 options
   *     // for each cell of this column
   *     visibleRows: 5,
   *   }
   * ],
   * ```
   */
  visibleRows: 10,
  /**
   * The `width` option configures the width of your grid.
   *
   * You can set the `width` option to one of the following:
   *
   * | Setting                                                                    | Example                   |
   * | -------------------------------------------------------------------------- | ------------------------- |
   * | A number of pixels                                                         | `width: 500`              |
   * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `width: '75vw'`           |
   * | A function that returns a valid number or string                           | `width() { return 500; }` |
   *
   * Read more:
   * - [Grid size](@/guides/getting-started/grid-size.md)
   *
   * @memberof Options#
   * @type {number|string|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set the grid's width to 500px
   * width: 500,
   *
   * // set the grid's width to 75vw
   * width: '75vw',
   *
   * // set the grid's width to 500px, using a function
   * width() {
   *   return 500;
   * },
   * ```
   */
  width: void 0,
  /**
   * The `wordWrap` option configures whether content that exceeds a column's width is wrapped or not.
   *
   * You can set the `wordWrap` option to one of the following:
   *
   * | Setting          | Description                                             |
   * | ---------------- | ------------------------------------------------------- |
   * | `true` (default) | If content exceeds the column's width, wrap the content |
   * | `false`          | Don't wrap content                                      |
   *
   * To style cells that don't wrap content, use the [`noWordWrapClassName`](#noWordWrapClassName) option.
   *
   * Read more:
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // set column width for every column of the entire grid
   * colWidths: 100,
   *
   * columns: [
   *   {
   *     // don't wrap content in this column
   *     wordWrap: false,
   *   },
   *   {
   *     // if content exceeds this column's width, wrap the content
   *     wordWrap: true,
   *   }
   * ],
   * ```
   */
  wordWrap: !0
  /* eslint-enable jsdoc/require-description-complete-sentence */
});
function EE(t, e, n) {
  return e = Wq(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Wq(t) {
  var e = Vq(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Vq(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Bq() {
  return class {
  };
}
class Uq {
  constructor(e) {
    EE(this, "metaCtor", Bq()), EE(this, "meta", void 0), this.meta = this.metaCtor.prototype, ln(this.meta, Wx()), this.meta.instance = e;
  }
  /**
   * Gets constructor of the global meta object. Necessary for inheritance for creating the next meta layers.
   *
   * @returns {Function}
   */
  getMetaConstructor() {
    return this.metaCtor;
  }
  /**
   * Gets settings object for this layer.
   *
   * @returns {object}
   */
  getMeta() {
    return this.meta;
  }
  /**
   * Updates global settings object by merging settings with the current state.
   *
   * @param {object} settings An object to merge with.
   */
  updateMeta(e) {
    var n;
    ln(this.meta, e), Qg(this.meta, {
      ...e,
      type: (n = e.type) !== null && n !== void 0 ? n : this.meta.type
    }, e);
  }
}
function Yq(t, e, n) {
  return e = Gq(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Gq(t) {
  var e = zq(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function zq(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class jq {
  constructor(e) {
    Yq(this, "meta", void 0);
    const n = e.getMetaConstructor();
    this.meta = new n();
  }
  /**
   * Gets settings object for this layer.
   *
   * @returns {TableMeta}
   */
  getMeta() {
    return this.meta;
  }
  /**
   * Updates table settings object by merging settings with the current state.
   *
   * @param {object} settings An object to merge with.
   */
  updateMeta(e) {
    ln(this.meta, e), Qg(this.meta, e, e);
  }
}
let Vx;
function jh(t, e, n) {
  return e = Kq(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Kq(t) {
  var e = Xq(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Xq(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
Vx = Symbol.iterator;
class Bf {
  constructor(e) {
    jh(this, "valueFactory", void 0), jh(this, "data", []), jh(this, "index", []), jh(this, "holes", /* @__PURE__ */ new Set()), this.valueFactory = e;
  }
  /**
   * Gets or if data not exist creates and returns new data.
   *
   * @param {number} key The item key as zero-based index.
   * @returns {*}
   */
  obtain(e) {
    nf(() => tf(e), "Expecting an unsigned number.");
    const n = this._getStorageIndexByKey(e);
    let r;
    if (n >= 0)
      r = this.data[n], r === void 0 && (r = this.valueFactory(e), this.data[n] = r);
    else if (r = this.valueFactory(e), this.holes.size > 0) {
      const i = this.holes.values().next().value;
      this.holes.delete(i), this.data[i] = r, this.index[e] = i;
    } else
      this.data.push(r), this.index[e] = this.data.length - 1;
    return r;
  }
  /**
   * Inserts an empty data to the map. This method creates an empty space for obtaining
   * new data.
   *
   * @param {number} key The key as volatile zero-based index at which to begin inserting space for new data.
   * @param {number} [amount=1] Ammount of data to insert.
   */
  insert(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    nf(() => tf(e) || zh(e), "Expecting an unsigned number or null/undefined argument.");
    const r = [], i = this.data.length;
    for (let s = 0; s < n; s++)
      r.push(i + s), this.data.push(void 0);
    const o = zh(e) ? this.index.length : e;
    this.index = [...this.index.slice(0, o), ...r, ...this.index.slice(o)];
  }
  /**
   * Removes (soft remove) data from "index" and according to the amount of data.
   *
   * @param {number} key The key as volatile zero-based index at which to begin removing the data.
   * @param {number} [amount=1] Ammount data to remove.
   */
  remove(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    nf(() => tf(e) || zh(e), "Expecting an unsigned number or null/undefined argument.");
    const r = this.index.splice(zh(e) ? this.index.length - n : e, n);
    for (let i = 0; i < r.length; i++) {
      const o = r[i];
      typeof o == "number" && this.holes.add(o);
    }
  }
  /**
   * Returns the size of the data which this map holds.
   *
   * @returns {number}
   */
  size() {
    return this.data.length - this.holes.size;
  }
  /**
   * Returns a new Iterator object that contains the values for each item in the LazyMap object.
   *
   * @returns {Iterator}
   */
  values() {
    return Tr(this.data, (e, n) => !this.holes.has(n))[Symbol.iterator]();
  }
  /**
   * Returns a new Iterator object that contains an array of `[index, value]` for each item in the LazyMap object.
   *
   * @returns {Iterator}
   */
  entries() {
    const e = [];
    for (let r = 0; r < this.data.length; r++) {
      const i = this._getKeyByStorageIndex(r);
      i !== -1 && e.push([i, this.data[r]]);
    }
    let n = 0;
    return {
      next: () => {
        if (n < e.length) {
          const r = e[n];
          return n += 1, {
            value: r,
            done: !1
          };
        }
        return {
          done: !0
        };
      }
    };
  }
  /**
   * Clears the map.
   */
  clear() {
    this.data = [], this.index = [], this.holes.clear();
  }
  /**
   * Gets storage index calculated from the key associated with the specified value.
   *
   * @param {number} key Volatile zero-based index.
   * @returns {number} Returns index 0-N or -1 if no storage index found.
   */
  _getStorageIndexByKey(e) {
    return this.index.length > e ? this.index[e] : -1;
  }
  /**
   * Gets the key associated with the specified value calculated from storage index.
   *
   * @param {number} dataIndex Zero-based storage index.
   * @returns {number} Returns index 0-N or -1 if no key found.
   */
  _getKeyByStorageIndex(e) {
    return this.index.indexOf(e);
  }
  /**
   * Makes this object iterable.
   *
   * @returns {Iterator}
   */
  [Vx]() {
    return this.entries();
  }
}
function TE(t, e, n) {
  return e = qq(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function qq(t) {
  var e = Zq(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Zq(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const Qq = ["data", "width"];
class Jq {
  constructor(e) {
    TE(this, "globalMeta", void 0), TE(this, "metas", new Bf(() => this._createMeta())), this.globalMeta = e, this.metas = new Bf(() => this._createMeta());
  }
  /**
   * Updates column meta object by merging settings with the current state.
   *
   * @param {number} physicalColumn The physical column index which points what column meta object is updated.
   * @param {object} settings An object to merge with.
   */
  updateMeta(e, n) {
    const r = this.getMeta(e);
    ln(r, n), Qg(r, n);
  }
  /**
   * Creates one or more columns at specific position.
   *
   * @param {number} physicalColumn The physical column index which points from what position the column is added.
   * @param {number} amount An amount of columns to add.
   */
  createColumn(e, n) {
    this.metas.insert(e, n);
  }
  /**
   * Removes one or more columns from the collection.
   *
   * @param {number} physicalColumn The physical column index which points from what position the column is removed.
   * @param {number} amount An amount columns to remove.
   */
  removeColumn(e, n) {
    this.metas.remove(e, n);
  }
  /**
   * Gets settings object for this layer.
   *
   * @param {number} physicalColumn The physical column index.
   * @returns {object}
   */
  getMeta(e) {
    return this.metas.obtain(e);
  }
  /**
   * Gets constructor of the column meta object. Necessary for inheritance - creating the next meta layers.
   *
   * @param {number} physicalColumn The physical column index.
   * @returns {Function}
   */
  getMetaConstructor(e) {
    return this.metas.obtain(e).constructor;
  }
  /**
   * Clears all saved column meta objects.
   */
  clearCache() {
    this.metas.clear();
  }
  /**
   * Creates and returns new column meta object with properties inherited from the global meta layer.
   *
   * @private
   * @returns {object}
   */
  _createMeta() {
    return Fq(this.globalMeta.getMetaConstructor(), Qq).prototype;
  }
}
function _E(t, e, n) {
  return e = e4(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function e4(t) {
  var e = t4(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function t4(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class n4 {
  constructor(e) {
    _E(this, "columnMeta", void 0), _E(this, "metas", new Bf(() => this._createRow())), this.columnMeta = e;
  }
  /**
   * Updates cell meta object by merging settings with the current state.
   *
   * @param {number} physicalRow The physical row index which points what cell meta object is updated.
   * @param {number} physicalColumn The physical column index which points what cell meta object is updated.
   * @param {object} settings An object to merge with.
   */
  updateMeta(e, n, r) {
    const i = this.getMeta(e, n);
    ln(i, r), Qg(i, r);
  }
  /**
   * Creates one or more rows at specific position.
   *
   * @param {number} physicalRow The physical row index which points from what position the row is added.
   * @param {number} amount An amount of rows to add.
   */
  createRow(e, n) {
    this.metas.insert(e, n);
  }
  /**
   * Creates one or more columns at specific position.
   *
   * @param {number} physicalColumn The physical column index which points from what position the column is added.
   * @param {number} amount An amount of columns to add.
   */
  createColumn(e, n) {
    for (let r = 0; r < this.metas.size(); r++)
      this.metas.obtain(r).insert(e, n);
  }
  /**
   * Removes one or more rows from the collection.
   *
   * @param {number} physicalRow The physical row index which points from what position the row is removed.
   * @param {number} amount An amount of rows to remove.
   */
  removeRow(e, n) {
    this.metas.remove(e, n);
  }
  /**
   * Removes one or more columns from the collection.
   *
   * @param {number} physicalColumn The physical column index which points from what position the column is removed.
   * @param {number} amount An amount of columns to remove.
   */
  removeColumn(e, n) {
    for (let r = 0; r < this.metas.size(); r++)
      this.metas.obtain(r).remove(e, n);
  }
  /**
   * Gets settings object for this layer.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {string} [key] If the key exists its value will be returned, otherwise the whole cell meta object.
   * @returns {object}
   */
  getMeta(e, n, r) {
    const i = this.metas.obtain(e).obtain(n);
    return r === void 0 ? i : i[r];
  }
  /**
   * Sets settings object for this layer defined by "key" property.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {string} key The property name to set.
   * @param {*} value Value to save.
   */
  setMeta(e, n, r, i) {
    var o;
    const s = this.metas.obtain(e).obtain(n);
    (o = s._automaticallyAssignedMetaProps) === null || o === void 0 || o.delete(r), s[r] = i;
  }
  /**
   * Removes a property defined by the "key" argument from the cell meta object.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {string} key The property name to remove.
   */
  removeMeta(e, n, r) {
    const i = this.metas.obtain(e).obtain(n);
    delete i[r];
  }
  /**
   * Returns all cell meta objects that were created during the Handsontable operation. As cell meta
   * objects are created lazy, the length of the returned collection depends on how and when the
   * table has asked for access to that meta objects.
   *
   * @returns {object[]}
   */
  getMetas() {
    const e = [], n = Array.from(this.metas.values());
    for (let r = 0; r < n.length; r++)
      e.push(...n[r].values());
    return e;
  }
  /**
   * Returns all cell meta objects that were created during the Handsontable operation but for
   * specific row index.
   *
   * @param {number} physicalRow The physical row index.
   * @returns {object[]}
   */
  getMetasAtRow(e) {
    nf(() => tf(e), "Expecting an unsigned number.");
    const n = new Map(this.metas);
    return n.has(e) ? Array.from(n.get(e).values()) : [];
  }
  /**
   * Clears all saved cell meta objects.
   */
  clearCache() {
    this.metas.clear();
  }
  /**
   * Creates and returns new structure for cell meta objects stored in columnar axis.
   *
   * @private
   * @returns {object}
   */
  _createRow() {
    return new Bf((e) => this._createMeta(e));
  }
  /**
   * Creates and returns new cell meta object with properties inherited from the column meta layer.
   *
   * @private
   * @param {number} physicalColumn The physical column index.
   * @returns {object}
   */
  _createMeta(e) {
    const n = this.columnMeta.getMetaConstructor(e);
    return new n();
  }
}
class Bx {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    this.hot = e, this.globalMeta = new Uq(e), this.tableMeta = new jq(this.globalMeta), this.columnMeta = new Jq(this.globalMeta), this.cellMeta = new n4(this.columnMeta), r.forEach((i) => new i(this)), this.globalMeta.updateMeta(n);
  }
  /**
   * Gets the global meta object that is a root of all default settings, which are recognizable by Handsontable.
   * Other layers inherites all properties from this. Adding, removing, or changing property in that
   * object has a direct reflection to all layers.
   *
   * @returns {object}
   */
  getGlobalMeta() {
    return this.globalMeta.getMeta();
  }
  /**
   * Updates global settings object by merging settings with the current state.
   *
   * @param {object} settings An object to merge with.
   */
  updateGlobalMeta(e) {
    this.globalMeta.updateMeta(e);
  }
  /**
   * Gets settings object that was passed in the Handsontable constructor. That layer contains all
   * default settings inherited from the GlobalMeta layer merged with settings passed by the developer.
   * Adding, removing, or changing property in that object has no direct reflection on any other layers.
   *
   * @returns {TableMeta}
   */
  getTableMeta() {
    return this.tableMeta.getMeta();
  }
  /**
   * Updates table settings object by merging settings with the current state.
   *
   * @param {object} settings An object to merge with.
   */
  updateTableMeta(e) {
    this.tableMeta.updateMeta(e);
  }
  /**
   * Gets column meta object that is a root of all settings defined in the column property of the Handsontable
   * settings. Each column in the Handsontable is associated with a unique meta object which identified by
   * the physical column index. Adding, removing, or changing property in that object has a direct reflection
   * only for the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower
   * layers (prototype lookup).
   *
   * @param {number} physicalColumn The physical column index.
   * @returns {object}
   */
  getColumnMeta(e) {
    return this.columnMeta.getMeta(e);
  }
  /**
   * Updates column meta object by merging settings with the current state.
   *
   * @param {number} physicalColumn The physical column index which points what column meta object is updated.
   * @param {object} settings An object to merge with.
   */
  updateColumnMeta(e, n) {
    this.columnMeta.updateMeta(e, n);
  }
  /**
   * Gets the cell meta object that is a root of all settings defined for the specific cell rendered by
   * the Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't
   * exist in that layer, it is looked up through a prototype to the highest layer. Starting
   * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,
   * removing, or changing property in that object has no direct reflection on any other layers.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {object} options Additional options that are used to extend the cell meta object.
   * @param {number} options.visualRow The visual row index of the currently requested cell meta object.
   * @param {number} options.visualColumn The visual column index of the currently requested cell meta object.
   * @returns {object}
   */
  getCellMeta(e, n, r) {
    let {
      visualRow: i,
      visualColumn: o
    } = r;
    const s = this.cellMeta.getMeta(e, n);
    return s.visualRow = i, s.visualCol = o, s.row = e, s.col = n, this.runLocalHooks("afterGetCellMeta", s), s;
  }
  /**
   * Gets a value (defined by the `key` property) from the cell meta object.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {string} key Defines the value that will be returned from the cell meta object.
   * @returns {*}
   */
  getCellMetaKeyValue(e, n, r) {
    if (typeof r != "string")
      throw new Error("The passed cell meta object key is not a string");
    return this.cellMeta.getMeta(e, n, r);
  }
  /**
   * Sets settings object for cell meta object defined by "key" property.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {string} key The property name to set.
   * @param {*} value Value to save.
   */
  setCellMeta(e, n, r, i) {
    this.cellMeta.setMeta(e, n, r, i);
  }
  /**
   * Updates cell meta object by merging settings with the current state.
   *
   * @param {number} physicalRow The physical row index which points what cell meta object is updated.
   * @param {number} physicalColumn The physical column index which points what cell meta object is updated.
   * @param {object} settings An object to merge with.
   */
  updateCellMeta(e, n, r) {
    this.cellMeta.updateMeta(e, n, r);
  }
  /**
   * Removes a property defined by the "key" argument from the cell meta object.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {string} key The property name to remove.
   */
  removeCellMeta(e, n, r) {
    this.cellMeta.removeMeta(e, n, r);
  }
  /**
   * Returns all cell meta objects that were created during the Handsontable operation. As cell meta
   * objects are created lazy, the length of the returned collection depends on how and when the
   * table has asked for access to that meta objects.
   *
   * @returns {object[]}
   */
  getCellsMeta() {
    return this.cellMeta.getMetas();
  }
  /**
   * Returns all cell meta objects that were created during the Handsontable operation but for
   * specyfic row index.
   *
   * @param {number} physicalRow The physical row index.
   * @returns {object[]}
   */
  getCellsMetaAtRow(e) {
    return this.cellMeta.getMetasAtRow(e);
  }
  /**
   * Creates one or more rows at specific position.
   *
   * @param {number} physicalRow The physical row index which points from what position the row is added.
   * @param {number} [amount=1] An amount of rows to add.
   */
  createRow(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    this.cellMeta.createRow(e, n);
  }
  /**
   * Removes one or more rows from the collection.
   *
   * @param {number} physicalRow The physical row index which points from what position the row is removed.
   * @param {number} [amount=1] An amount rows to remove.
   */
  removeRow(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    this.cellMeta.removeRow(e, n);
  }
  /**
   * Creates one or more columns at specific position.
   *
   * @param {number} physicalColumn The physical column index which points from what position the column is added.
   * @param {number} [amount=1] An amount of columns to add.
   */
  createColumn(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    this.cellMeta.createColumn(e, n), this.columnMeta.createColumn(e, n);
  }
  /**
   * Removes one or more columns from the collection.
   *
   * @param {number} physicalColumn The physical column index which points from what position the column is removed.
   * @param {number} [amount=1] An amount of columns to remove.
   */
  removeColumn(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    this.cellMeta.removeColumn(e, n), this.columnMeta.removeColumn(e, n);
  }
  /**
   * Clears all saved cell meta objects. It keeps column meta, table meta, and global meta intact.
   */
  clearCellsCache() {
    this.cellMeta.clearCache();
  }
  /**
   * Clears all saved cell and columns meta objects.
   */
  clearCache() {
    this.cellMeta.clearCache(), this.columnMeta.clearCache();
  }
}
_t(Bx, pr);
function ME(t, e, n, r) {
  const {
    hotInstance: i,
    dataMap: o,
    dataSource: s,
    internalSource: a,
    source: l,
    metaManager: u,
    firstRun: c
  } = r, d = Fn(a), g = i.getSettings();
  Array.isArray(g.dataSchema) ? i.dataType = "array" : At(g.dataSchema) ? i.dataType = "function" : i.dataType = "object", o && o.destroy(), t = i.runHooks(`before${d}`, t, c, l);
  const p = new Dq(i, t, u);
  if (e(p), typeof t == "object" && t !== null)
    t.push && t.splice || (t = [t]);
  else if (t === null) {
    const C = p.getSchema();
    t = [];
    let E, I = 0, M = 0;
    for (I = 0, M = g.startRows; I < M; I++)
      if ((i.dataType === "object" || i.dataType === "function") && g.dataSchema)
        E = Wn(C), t.push(E);
      else if (i.dataType === "array")
        E = Wn(C[0]), t.push(E);
      else {
        E = [];
        for (let y = 0, $ = g.startCols; y < $; y++)
          E.push(null);
        t.push(E);
      }
  } else
    throw new Error(`${a} only accepts array of objects or array of arrays (${typeof t} given)`);
  Array.isArray(t[0]) && (i.dataType = "array"), g.data = t, p.dataSource = t, s.data = t, s.dataType = i.dataType, s.colToProp = p.colToProp.bind(p), s.propToCol = p.propToCol.bind(p), s.countCachedColumns = p.countCachedColumns.bind(p), n(p), i.runHooks(`after${d}`, t, c, l), c || (i.runHooks("afterChange", null, a), i.render()), i.getSettings().ariaTags && Ne(i.rootElement, [
    jI(-1),
    // If run after initialization, add the number of row headers.
    Dg(i.countCols() + (i.view ? i.countRowHeaders() : 0))
  ]);
}
function OE(t, e, n) {
  return e = r4(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function r4(t) {
  var e = i4(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function i4(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class o4 {
  constructor(e) {
    OE(this, "metaManager", void 0), OE(this, "metaSyncMemo", /* @__PURE__ */ new Map()), this.metaManager = e, e.addLocalHook("afterGetCellMeta", (n) => this.extendCellMeta(n)), _e.getSingleton().add("beforeRender", (n) => {
      n && this.metaSyncMemo.clear();
    }, this.metaManager.hot);
  }
  /**
   * Extends the cell meta object by user-specific properties.
   *
   * The cell meta object can be extended dynamically,
   * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),
   * or by Handsontable's `cells` option.
   *
   * To boost performance, the extending process is triggered only once per one slow Handsontable render cycle.
   *
   * @param {object} cellMeta The cell meta object.
   */
  extendCellMeta(e) {
    var n;
    const {
      row: r,
      col: i
    } = e;
    if ((n = this.metaSyncMemo.get(r)) !== null && n !== void 0 && n.has(i))
      return;
    const {
      visualRow: o,
      visualCol: s
    } = e, a = this.metaManager.hot, l = a.colToProp(s);
    e.prop = l, a.runHooks("beforeGetCellMeta", o, s, e);
    const u = Vt(e, "type") ? e.type : null;
    let c = At(e.cells) ? e.cells(r, i, l) : null;
    if (u)
      if (c) {
        var d;
        c.type = (d = c.type) !== null && d !== void 0 ? d : u;
      } else
        c = {
          type: u
        };
    c && this.metaManager.updateCellMeta(r, i, c), a.runHooks("afterGetCellMeta", o, s, e), this.metaSyncMemo.has(r) || this.metaSyncMemo.set(r, /* @__PURE__ */ new Set()), this.metaSyncMemo.get(r).add(i);
  }
}
function bp(t, e, n) {
  return e = s4(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function s4(t) {
  var e = a4(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function a4(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class l4 {
  constructor(e) {
    bp(this, "metaManager", void 0), bp(this, "usageTracker", /* @__PURE__ */ new Set()), bp(this, "propDescriptors", /* @__PURE__ */ new Map([["ariaTags", {
      onChange(n, r, i) {
        if (!i)
          throw new Error(`The \`${n}\` option can not be updated after the Handsontable instance was initialized.`);
      }
    }], ["fixedColumnsLeft", {
      target: "fixedColumnsStart",
      onChange(n) {
        if (this.metaManager.hot.isRtl() && n === "fixedColumnsLeft")
          throw new Error("The `fixedColumnsLeft` is not supported for RTL. Please use option `fixedColumnsStart`.");
        if (this.usageTracker.has("fixedColumnsLeft") && this.usageTracker.has("fixedColumnsStart"))
          throw new Error("The `fixedColumnsLeft` and `fixedColumnsStart` should not be used together. Please use only the option `fixedColumnsStart`.");
      }
    }], ["layoutDirection", {
      onChange(n, r, i) {
        if (!i)
          throw new Error(`The \`${n}\` option can not be updated after the Handsontable is initialized.`);
      }
    }]])), this.metaManager = e, this.extendMetaProps();
  }
  /**
   * Extends the meta options based on the object descriptors from the `propDescriptors` list.
   */
  extendMetaProps() {
    this.propDescriptors.forEach((e, n) => {
      const {
        target: r,
        onChange: i = () => {
        }
      } = e, o = typeof r == "string", s = o ? r : n, a = `_${s}`;
      this.metaManager.globalMeta.meta[a] = this.metaManager.globalMeta.meta[s], this.installPropWatcher(n, a, i), o && this.installPropWatcher(r, a, i);
    });
  }
  /**
   * Installs the property watcher to the `propName` option and forwards getter and setter to
   * the new one.
   *
   * @param {string} propName The property to watch.
   * @param {string} origProp The property from/to the value is forwarded.
   * @param {Function} onChange The callback.
   */
  installPropWatcher(e, n, r) {
    const i = this;
    Object.defineProperty(this.metaManager.globalMeta.meta, e, {
      get() {
        return this[n];
      },
      set(o) {
        const s = !i.usageTracker.has(e);
        i.usageTracker.add(e), r.call(i, e, o, s), this[n] = o;
      },
      enumerable: !0,
      configurable: !0
    });
  }
}
const Ux = "gridDefault", Ib = "editorManager.handlingEditor", u4 = {
  name: "editorCloseAndSave",
  callback(t, e, n) {
    const r = t._getEditorManager();
    r.closeEditorAndSaveChanges(e.ctrlKey || e.metaKey), r.moveSelectionAfterEnter(n.includes("shift"));
  }
}, c4 = {
  name: "editorCloseWithoutSaving",
  callback(t) {
    const e = t._getEditorManager();
    e.closeEditorAndRestoreOriginalValue(t.getShortcutManager().isCtrlPressed()), e.activeEditor.focus();
  }
}, h4 = {
  name: "editorFastOpen",
  callback(t, e) {
    const {
      highlight: n
    } = t.getSelectedRangeLast();
    n.isHeader() || t._getEditorManager().openEditor(null, e, !0);
  }
}, d4 = {
  name: "editorOpen",
  callback(t, e, n) {
    const r = t._getEditorManager(), {
      highlight: i
    } = t.getSelectedRangeLast();
    i.isHeader() || (t.getSettings().enterBeginsEditing ? r.cellProperties.readOnly ? r.moveSelectionAfterEnter() : r.openEditor(null, e, !0) : r.moveSelectionAfterEnter(n.includes("shift")), Kr(e));
  }
};
function f4() {
  return [u4, c4, h4, d4];
}
const g4 = {
  name: "extendCellsSelectionDown",
  callback(t) {
    const {
      highlight: e
    } = t.getSelectedRangeLast();
    (e.isCell() || e.isHeader() && t.selection.isSelectedByRowHeader()) && t.selection.transformEnd(1, 0);
  }
}, m4 = {
  name: "extendCellsSelectionDownByViewportHeight",
  callback(t) {
    const {
      to: e
    } = t.getSelectedRangeLast(), n = Math.min(e.row + t.countVisibleRows(), t.countRows() - 1), r = t.rowIndexMapper.getNearestNotHiddenIndex(n, -1);
    if (r !== null) {
      const i = t._createCellCoords(r, e.col), o = e.row - t.view.getFirstFullyVisibleRow(), s = Math.min(i.row - o, t.countRows() - 1);
      t.selection.setRangeEnd(i), t.scrollViewportTo({
        row: s,
        verticalSnap: "top",
        horizontalSnap: "start"
      });
    }
  }
}, p4 = {
  name: "extendCellsSelectionLeft",
  callback(t) {
    const {
      highlight: e
    } = t.getSelectedRangeLast();
    (e.isCell() || e.isHeader() && t.selection.isSelectedByColumnHeader()) && t.selection.transformEnd(0, -1 * t.getDirectionFactor());
  }
}, w4 = {
  name: "extendCellsSelectionRight",
  callback(t) {
    const {
      highlight: e
    } = t.getSelectedRangeLast();
    (e.isCell() || e.isHeader() && t.selection.isSelectedByColumnHeader()) && t.selection.transformEnd(0, t.getDirectionFactor());
  }
}, C4 = {
  name: "extendCellsSelectionToColumns",
  callback(t) {
    const {
      highlight: e,
      from: n,
      to: r
    } = t.getSelectedRangeLast();
    t.selection.isSelectedByRowHeader() ? t.selection.selectAll(!0, !0) : t.selectColumns(n.col, r.col, e.row);
  }
}, v4 = {
  name: "extendCellsSelectionToMostBottom",
  callback(t) {
    const {
      selection: e,
      rowIndexMapper: n
    } = t, {
      highlight: r,
      from: i,
      to: o
    } = t.getSelectedRangeLast(), s = r.isHeader() && t.selection.isSelectedByRowHeader();
    if (r.isCell() || s) {
      const a = n.getNearestNotHiddenIndex(t.countRows() - 1, -1);
      e.setRangeStart(i.clone()), s && e.selectedByRowHeader.add(e.getLayerLevel()), e.setRangeEnd(t._createCellCoords(a, o.col));
    }
  }
}, S4 = {
  name: "extendCellsSelectionToMostInlineEnd",
  callback(t) {
    const {
      selection: e,
      columnIndexMapper: n
    } = t, {
      highlight: r
    } = t.getSelectedRangeLast();
    r.isCell() && e.setRangeEnd(t._createCellCoords(e.selectedRange.current().from.row, n.getNearestNotHiddenIndex(t.countCols() - 1, -1)));
  }
}, y4 = {
  name: "extendCellsSelectionToMostInlineStart",
  callback(t) {
    const {
      selection: e,
      columnIndexMapper: n
    } = t, {
      highlight: r
    } = t.getSelectedRangeLast();
    r.isCell() && e.setRangeEnd(t._createCellCoords(e.selectedRange.current().from.row, n.getNearestNotHiddenIndex(0, 1)));
  }
}, b4 = {
  name: "extendCellsSelectionToMostLeft",
  callback(t) {
    const {
      selection: e,
      columnIndexMapper: n
    } = t, {
      highlight: r,
      from: i,
      to: o
    } = t.getSelectedRangeLast(), s = r.isHeader() && t.selection.isSelectedByColumnHeader();
    if (r.isCell() || s) {
      const a = n.getNearestNotHiddenIndex(...t.isRtl() ? [t.countCols() - 1, -1] : [0, 1]);
      e.setRangeStart(i.clone()), s && e.selectedByColumnHeader.add(e.getLayerLevel()), e.setRangeEnd(t._createCellCoords(o.row, a));
    }
  }
}, R4 = {
  name: "extendCellsSelectionToMostRight",
  callback(t) {
    const {
      selection: e,
      columnIndexMapper: n
    } = t, {
      highlight: r,
      from: i,
      to: o
    } = t.getSelectedRangeLast(), s = r.isHeader() && t.selection.isSelectedByColumnHeader();
    if (r.isCell() || s) {
      const a = n.getNearestNotHiddenIndex(...t.isRtl() ? [0, 1] : [t.countCols() - 1, -1]);
      e.setRangeStart(i.clone()), s && e.selectedByColumnHeader.add(e.getLayerLevel()), e.setRangeEnd(t._createCellCoords(o.row, a));
    }
  }
}, E4 = {
  name: "extendCellsSelectionToMostTop",
  callback(t) {
    const {
      selection: e,
      rowIndexMapper: n
    } = t, {
      highlight: r,
      from: i,
      to: o
    } = t.getSelectedRangeLast(), s = r.isHeader() && t.selection.isSelectedByRowHeader();
    if (r.isCell() || s) {
      const a = n.getNearestNotHiddenIndex(0, 1);
      e.setRangeStart(i.clone()), s && e.selectedByRowHeader.add(e.getLayerLevel()), e.setRangeEnd(t._createCellCoords(a, o.col));
    }
  }
}, T4 = {
  name: "extendCellsSelectionToRows",
  callback(t) {
    const {
      highlight: e,
      from: n,
      to: r
    } = t.getSelectedRangeLast();
    t.selection.isSelectedByColumnHeader() ? t.selection.selectAll(!0, !0) : t.selectRows(n.row, r.row, e.col);
  }
}, _4 = {
  name: "extendCellsSelectionUp",
  callback(t) {
    const {
      highlight: e
    } = t.getSelectedRangeLast();
    (e.isCell() || e.isHeader() && t.selection.isSelectedByRowHeader()) && t.selection.transformEnd(-1, 0);
  }
}, M4 = {
  name: "extendCellsSelectionUpByViewportHeight",
  callback(t) {
    const {
      to: e
    } = t.getSelectedRangeLast(), n = Math.max(e.row - t.countVisibleRows(), 0), r = t.rowIndexMapper.getNearestNotHiddenIndex(n, 1);
    if (r !== null) {
      const i = t._createCellCoords(r, e.col), o = e.row - t.view.getFirstFullyVisibleRow(), s = Math.max(i.row - o, 0);
      t.selection.setRangeEnd(i), t.scrollViewportTo({
        row: s,
        verticalSnap: "top",
        horizontalSnap: "start"
      });
    }
  }
};
function O4() {
  return [g4, m4, p4, w4, C4, v4, S4, y4, b4, R4, E4, T4, _4, M4];
}
const A4 = {
  name: "moveCellSelectionDown",
  callback(t) {
    let {
      selection: e
    } = t;
    e.transformStart(1, 0);
  }
}, I4 = {
  name: "moveCellSelectionDownByViewportHeight",
  callback(t) {
    const {
      navigableHeaders: e
    } = t.getSettings(), n = e ? t.countColHeaders() : 0, {
      row: r
    } = t.getSelectedRangeLast().highlight;
    let i = t.countVisibleRows() + n;
    r === t.countRows() - 1 ? i = 1 : r + i > t.countRows() && (i = t.countRows() - r - 1), t.selection.transformStart(i, 0), t.getSelectedRangeLast().highlight.row < 0 && t.scrollViewportTo({
      row: 0
    });
  }
}, P4 = {
  name: "moveCellSelectionInlineEnd",
  callback(t, e) {
    const n = t.getSettings(), r = typeof n.tabMoves == "function" ? n.tabMoves(e) : n.tabMoves;
    t.selection.transformStart(-r.row, -r.col);
  }
}, x4 = {
  name: "moveCellSelectionInlineStart",
  callback(t, e) {
    const n = t.getSettings(), r = typeof n.tabMoves == "function" ? n.tabMoves(e) : n.tabMoves;
    t.selection.transformStart(r.row, r.col);
  }
}, H4 = {
  name: "moveCellSelectionLeft",
  callback(t) {
    t.selection.transformStart(0, -1 * t.getDirectionFactor());
  }
}, D4 = {
  name: "moveCellSelectionRight",
  callback(t) {
    t.selection.transformStart(0, t.getDirectionFactor());
  }
}, N4 = {
  name: "moveCellSelectionToMostBottom",
  callback(t) {
    const {
      col: e
    } = t.getSelectedRangeLast().highlight;
    let n = t.rowIndexMapper.getNearestNotHiddenIndex(t.countRows() - 1, -1);
    n === null && (n = -1), t.selection.setRangeStart(t._createCellCoords(n, e));
  }
}, L4 = {
  name: "moveCellSelectionToMostBottomInlineEnd",
  callback(t) {
    const {
      selection: e,
      rowIndexMapper: n,
      columnIndexMapper: r
    } = t, i = parseInt(t.getSettings().fixedRowsBottom, 10), o = n.getNearestNotHiddenIndex(t.countRows() - i - 1, -1), s = r.getNearestNotHiddenIndex(t.countCols() - 1, -1);
    e.setRangeStart(t._createCellCoords(o, s));
  }
}, $4 = {
  name: "moveCellSelectionToMostInlineEnd",
  callback(t) {
    const {
      selection: e,
      columnIndexMapper: n
    } = t;
    e.setRangeStart(t._createCellCoords(t.getSelectedRangeLast().highlight.row, n.getNearestNotHiddenIndex(t.countCols() - 1, -1)));
  }
}, k4 = {
  name: "moveCellSelectionToMostInlineStart",
  callback(t) {
    const {
      selection: e,
      columnIndexMapper: n
    } = t, r = parseInt(t.getSettings().fixedColumnsStart, 10), i = t.getSelectedRangeLast().highlight.row, o = n.getNearestNotHiddenIndex(r, 1);
    e.setRangeStart(t._createCellCoords(i, o));
  }
}, F4 = {
  name: "moveCellSelectionToMostLeft",
  callback(t) {
    const {
      selection: e,
      columnIndexMapper: n
    } = t, r = t.getSelectedRangeLast().highlight.row;
    let i = n.getNearestNotHiddenIndex(...t.isRtl() ? [t.countCols() - 1, -1] : [0, 1]);
    i === null && (i = t.isRtl() ? -1 : -t.countRowHeaders()), e.setRangeStart(t._createCellCoords(r, i));
  }
}, W4 = {
  name: "moveCellSelectionToMostRight",
  callback(t) {
    const {
      selection: e,
      columnIndexMapper: n
    } = t, {
      row: r
    } = t.getSelectedRangeLast().highlight;
    let i = n.getNearestNotHiddenIndex(...t.isRtl() ? [0, 1] : [t.countCols() - 1, -1]);
    i === null && (i = t.isRtl() ? -t.countRowHeaders() : -1), e.setRangeStart(t._createCellCoords(r, i));
  }
}, V4 = {
  name: "moveCellSelectionToMostTop",
  callback(t) {
    const {
      col: e
    } = t.getSelectedRangeLast().highlight;
    let n = t.rowIndexMapper.getNearestNotHiddenIndex(0, 1);
    n === null && (n = -t.countColHeaders()), t.selection.setRangeStart(t._createCellCoords(n, e));
  }
}, B4 = {
  name: "moveCellSelectionToMostTopInlineStart",
  callback(t) {
    const {
      selection: e,
      rowIndexMapper: n,
      columnIndexMapper: r
    } = t, i = parseInt(t.getSettings().fixedRowsTop, 10), o = parseInt(t.getSettings().fixedColumnsStart, 10), s = n.getNearestNotHiddenIndex(i, 1), a = r.getNearestNotHiddenIndex(o, 1);
    e.setRangeStart(t._createCellCoords(s, a));
  }
}, U4 = {
  name: "moveCellSelectionUp",
  callback(t) {
    let {
      selection: e
    } = t;
    e.transformStart(-1, 0);
  }
}, Y4 = {
  name: "moveCellSelectionUpByViewportHight",
  callback(t) {
    const {
      navigableHeaders: e
    } = t.getSettings(), n = e ? t.countColHeaders() : 0, {
      row: r
    } = t.getSelectedRangeLast().highlight;
    let i = -(t.countVisibleRows() + n);
    r === -n ? i = -1 : r + i < n && (i = -(r + n)), t.selection.transformStart(i, 0), t.getSelectedRangeLast().highlight.row < 0 && t.scrollViewportTo({
      row: 0
    });
  }
};
function G4() {
  return [A4, I4, P4, x4, H4, D4, N4, L4, $4, k4, F4, W4, V4, B4, U4, Y4];
}
const z4 = {
  name: "emptySelectedCells",
  callback(t) {
    t.emptySelectedCells(), t._getEditorManager().prepareEditor();
  }
}, j4 = {
  name: "scrollToFocusedCell",
  callback(t) {
    const {
      highlight: e
    } = t.getSelectedRangeLast(), n = t.view.getFirstFullyVisibleRow() - 1, r = t.view.getFirstFullyVisibleColumn() - 1, i = t.view.getLastFullyVisibleRow() + 1, o = t.view.getLastFullyVisibleColumn() + 1, s = t._createCellCoords(n, r), a = t._createCellCoords(i, o);
    if (!t._createCellRange(s, s, a).includes(e) && (e.row >= 0 || e.col >= 0)) {
      const u = {};
      if (e.col >= 0) {
        const c = Math.floor(t.countVisibleCols() / 2);
        u.col = Math.max(e.col - c, 0);
      }
      if (e.row >= 0) {
        const c = Math.floor(t.countVisibleRows() / 2);
        u.row = Math.max(e.row - c, 0);
      }
      t.scrollViewportTo({
        ...u,
        verticalSnap: "top",
        horizontalSnap: "start"
      });
    }
  }
}, K4 = {
  name: "selectAllCells",
  callback(t) {
    t.selection.selectAll(!0, !0, {
      disableHeadersHighlight: !0
    });
  }
}, X4 = {
  name: "selectAllCellsAndHeaders",
  callback(t) {
    t.selection.selectAll(!0, !0, {
      disableHeadersHighlight: !1
    });
  }
}, q4 = {
  name: "populateSelectedCellsData",
  callback(t) {
    const e = t.getSelectedRange(), {
      row: n,
      col: r
    } = e[e.length - 1].highlight.normalize(), i = t.getDataAtCell(n, r), o = /* @__PURE__ */ new Map();
    for (let s = 0; s < e.length; s++)
      e[s].forAll((a, l) => {
        if (a >= 0 && l >= 0 && (a !== n || l !== r)) {
          const {
            readOnly: u
          } = t.getCellMeta(a, l);
          u || o.set(`${a}x${l}`, [a, l, i]);
        }
      });
    t.setDataAtCell(Array.from(o.values()));
  }
}, Z4 = [...f4(), ...O4(), ...G4(), z4, j4, K4, X4, q4];
function Yx(t) {
  const e = {};
  return Z4.forEach((n) => {
    let {
      name: r,
      callback: i
    } = n;
    e[r] = function() {
      for (var o = arguments.length, s = new Array(o), a = 0; a < o; a++)
        s[a] = arguments[a];
      return i(t, ...s);
    };
  }), e;
}
function Q4(t) {
  const e = t.getShortcutManager().addContext("editor"), n = Yx(t), r = {
    group: Ib
  };
  e.addShortcuts([{
    keys: [["Enter"], ["Enter", "Shift"]],
    callback: (i, o) => n.editorCloseAndSave(i, o)
  }, {
    keys: [["Enter", "Control/Meta"], ["Enter", "Control/Meta", "Shift"]],
    captureCtrl: !0,
    callback: (i, o) => n.editorCloseAndSave(i, o)
  }, {
    keys: [["Escape"], ["Escape", "Control/Meta"]],
    callback: () => n.editorCloseWithoutSaving()
  }], r);
}
function J4(t) {
  const e = t.getShortcutManager().addContext("grid"), n = Yx(t), r = {
    runOnlyIf: () => {
      const {
        navigableHeaders: i
      } = t.getSettings();
      return Re(t.getSelected()) && (i || !i && t.countRenderedRows() > 0 && t.countRenderedCols() > 0);
    },
    group: Ux
  };
  e.addShortcuts([{
    keys: [["F2"]],
    callback: (i) => n.editorFastOpen(i)
  }, {
    keys: [["Enter"], ["Enter", "Shift"]],
    callback: (i, o) => n.editorOpen(i, o)
  }, {
    keys: [["Backspace"], ["Delete"]],
    callback: () => n.emptySelectedCells()
  }], {
    group: Ib,
    runOnlyIf: () => Re(t.getSelected())
  }), e.addShortcuts([{
    keys: [["Control/Meta", "A"]],
    callback: () => n.selectAllCells()
  }, {
    keys: [["Control/Meta", "Shift", "Space"]],
    callback: () => n.selectAllCellsAndHeaders()
  }, {
    keys: [["Control/Meta", "Enter"]],
    callback: () => n.populateSelectedCellsData(),
    runOnlyIf: () => !t.getSelectedRangeLast().highlight.isHeader() && t.getSelectedRangeLast().getCellsCount() > 1
  }, {
    keys: [["Control", "Space"]],
    captureCtrl: !0,
    callback: () => n.extendCellsSelectionToColumns()
  }, {
    keys: [["Shift", "Space"]],
    stopPropagation: !0,
    callback: () => n.extendCellsSelectionToRows()
  }, {
    keys: [["ArrowUp"]],
    callback: () => n.moveCellSelectionUp()
  }, {
    keys: [["ArrowUp", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => n.moveCellSelectionToMostTop()
  }, {
    keys: [["ArrowUp", "Shift"]],
    callback: () => n.extendCellsSelectionUp()
  }, {
    keys: [["ArrowUp", "Shift", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => n.extendCellsSelectionToMostTop(),
    runOnlyIf: () => !(t.selection.isSelectedByCorner() || t.selection.isSelectedByColumnHeader())
  }, {
    keys: [["ArrowDown"]],
    callback: () => n.moveCellSelectionDown()
  }, {
    keys: [["ArrowDown", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => n.moveCellSelectionToMostBottom()
  }, {
    keys: [["ArrowDown", "Shift"]],
    callback: () => n.extendCellsSelectionDown()
  }, {
    keys: [["ArrowDown", "Shift", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => n.extendCellsSelectionToMostBottom(),
    runOnlyIf: () => !(t.selection.isSelectedByCorner() || t.selection.isSelectedByColumnHeader())
  }, {
    keys: [["ArrowLeft"]],
    callback: () => n.moveCellSelectionLeft()
  }, {
    keys: [["ArrowLeft", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => n.moveCellSelectionToMostLeft()
  }, {
    keys: [["ArrowLeft", "Shift"]],
    callback: () => n.extendCellsSelectionLeft()
  }, {
    keys: [["ArrowLeft", "Shift", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => n.extendCellsSelectionToMostLeft(),
    runOnlyIf: () => !(t.selection.isSelectedByCorner() || t.selection.isSelectedByRowHeader())
  }, {
    keys: [["ArrowRight"]],
    callback: () => n.moveCellSelectionRight()
  }, {
    keys: [["ArrowRight", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => n.moveCellSelectionToMostRight()
  }, {
    keys: [["ArrowRight", "Shift"]],
    callback: () => n.extendCellsSelectionRight()
  }, {
    keys: [["ArrowRight", "Shift", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => n.extendCellsSelectionToMostRight(),
    runOnlyIf: () => !(t.selection.isSelectedByCorner() || t.selection.isSelectedByRowHeader())
  }, {
    keys: [["Home"]],
    captureCtrl: !0,
    callback: () => n.moveCellSelectionToMostInlineStart(),
    runOnlyIf: () => t.view.isMainTableNotFullyCoveredByOverlays()
  }, {
    keys: [["Home", "Shift"]],
    callback: () => n.extendCellsSelectionToMostInlineStart()
  }, {
    keys: [["Home", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => n.moveCellSelectionToMostTopInlineStart(),
    runOnlyIf: () => t.view.isMainTableNotFullyCoveredByOverlays()
  }, {
    keys: [["End"]],
    captureCtrl: !0,
    callback: () => n.moveCellSelectionToMostInlineEnd(),
    runOnlyIf: () => t.view.isMainTableNotFullyCoveredByOverlays()
  }, {
    keys: [["End", "Shift"]],
    callback: () => n.extendCellsSelectionToMostInlineEnd()
  }, {
    keys: [["End", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => n.moveCellSelectionToMostBottomInlineEnd(),
    runOnlyIf: () => t.view.isMainTableNotFullyCoveredByOverlays()
  }, {
    keys: [["PageUp"]],
    callback: () => n.moveCellSelectionUpByViewportHight()
  }, {
    keys: [["PageUp", "Shift"]],
    callback: () => n.extendCellsSelectionUpByViewportHeight()
  }, {
    keys: [["PageDown"]],
    callback: () => n.moveCellSelectionDownByViewportHeight()
  }, {
    keys: [["PageDown", "Shift"]],
    callback: () => n.extendCellsSelectionDownByViewportHeight()
  }, {
    keys: [["Tab"]],
    // The property value is controlled by focusCatcher module (https://github.com/handsontable/handsontable/blob/master/handsontable/src/core/focusCatcher/index.js)
    preventDefault: !1,
    callback: () => n.moveCellSelectionInlineStart()
  }, {
    keys: [["Shift", "Tab"]],
    // The property value is controlled by focusCatcher module (https://github.com/handsontable/handsontable/blob/master/handsontable/src/core/focusCatcher/index.js)
    preventDefault: !1,
    callback: () => n.moveCellSelectionInlineEnd()
  }, {
    keys: [["Control/Meta", "Backspace"]],
    callback: () => n.scrollToFocusedCell()
  }], r);
}
function e6(t) {
  [Q4, J4].forEach((e) => e(t));
}
function t6(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const n = t.rootElement, r = AE(t), i = AE(t);
  return r.addEventListener("focus", () => e == null ? void 0 : e.onFocusFromTop()), i.addEventListener("focus", () => e == null ? void 0 : e.onFocusFromBottom()), n.firstChild.before(r), n.lastChild.after(i), {
    /**
     * Activates the detector by resetting the tabIndex of the input elements.
     */
    activate() {
      t._registerTimeout(() => {
        r.tabIndex = 0, i.tabIndex = 0;
      }, 10);
    },
    /**
     * Deactivates the detector by setting tabIndex to -1.
     */
    deactivate() {
      t._registerTimeout(() => {
        r.tabIndex = -1, i.tabIndex = -1;
      }, 10);
    }
  };
}
function AE(t) {
  const n = t.rootDocument.createElement("input");
  return n.type = "text", n.classList.add("htFocusCatcher"), t.getSettings().ariaTags && Ne(n, [Gi(), Vo()]), n;
}
function n6(t) {
  let e;
  const {
    activate: n,
    deactivate: r
  } = t6(t, {
    onFocusFromTop() {
      var u;
      const c = (u = e) !== null && u !== void 0 ? u : IE(t);
      c && (t.runHooks("modifyFocusOnTabNavigation", "from_above", c), t.selectCell(c.row, c.col)), t.listen();
    },
    onFocusFromBottom() {
      var u;
      const c = (u = e) !== null && u !== void 0 ? u : PE(t);
      c && (t.runHooks("modifyFocusOnTabNavigation", "from_below", c), t.selectCell(c.row, c.col)), t.listen();
    }
  }), i = {
    wrapped: !1,
    flipped: !1
  };
  let o = !0, s = !1;
  t.addHook("afterListen", () => r()), t.addHook("afterUnlisten", () => n()), t.addHook("afterSelection", (u, c, d, g, p) => {
    if (s && i.wrapped && i.flipped && (p.value = !0), o) {
      var C;
      e = (C = t.getSelectedRangeLast()) === null || C === void 0 ? void 0 : C.highlight;
    }
  }), t.addHook("beforeRowWrap", (u, c, d) => {
    i.wrapped = !0, i.flipped = d;
  });
  function a() {
    i.wrapped = !1, i.flipped = !1, t.deselectCell(), t.unlisten();
  }
  const l = {
    keys: [["Tab"], ["Shift", "Tab"]],
    preventDefault: !1,
    stopPropagation: !1,
    relativeToGroup: Ux,
    group: "focusCatcher"
  };
  t.getShortcutManager().getContext("grid").addShortcuts([{
    ...l,
    callback: () => {
      s = !0, t.getSelectedRangeLast() && !t.getSettings().tabNavigation && (o = !1);
    },
    position: "before"
  }, {
    ...l,
    callback: (u) => {
      const {
        tabNavigation: c,
        autoWrapRow: d
      } = t.getSettings();
      if (s = !1, o = !0, !c || !t.selection.isSelected() || d && i.wrapped && i.flipped || !d && i.wrapped)
        return d && i.wrapped && i.flipped && (e = u.shiftKey ? IE(t) : PE(t)), a(), !1;
      u.preventDefault();
    },
    position: "after"
  }]);
}
function IE(t) {
  const {
    rowIndexMapper: e,
    columnIndexMapper: n
  } = t, {
    navigableHeaders: r
  } = t.getSettings();
  let i = r && t.countColHeaders() > 0 ? -t.countColHeaders() : 0, o = r && t.countRowHeaders() > 0 ? -t.countRowHeaders() : 0;
  return i === 0 && (i = e.getVisualFromRenderableIndex(i)), o === 0 && (o = n.getVisualFromRenderableIndex(o)), i === null || o === null ? null : t._createCellCoords(i, o);
}
function PE(t) {
  var e, n;
  const {
    rowIndexMapper: r,
    columnIndexMapper: i
  } = t, {
    navigableHeaders: o
  } = t.getSettings();
  let s = r.getRenderableIndexesLength() - 1, a = i.getRenderableIndexesLength() - 1;
  if (s < 0) {
    if (!o || t.countColHeaders() === 0)
      return null;
    s = -1;
  }
  if (a < 0) {
    if (!o || t.countColHeaders() === 0)
      return null;
    a = -1;
  }
  return t._createCellCoords((e = r.getVisualFromRenderableIndex(s)) !== null && e !== void 0 ? e : s, (n = i.getVisualFromRenderableIndex(a)) !== null && n !== void 0 ? n : a);
}
const xE = /* @__PURE__ */ new Map([
  [" ", "space"],
  // custom mapping
  ["spacebar", "space"],
  ["scroll", "scrolllock"],
  ["del", "delete"],
  ["esc", "escape"],
  ["medianexttrack", "mediatracknext"],
  ["mediaprevioustrack", "mediatrackprevious"],
  ["volumeup", "audiovolumeup"],
  ["volumedown", "audiovolumedown"],
  ["volumemute", "audiovolumemute"],
  ["multiply", "*"],
  ["add", "+"],
  ["divide", "/"],
  ["subtract", "-"],
  ["left", "arrowleft"],
  ["right", "arrowright"],
  ["up", "arrowup"],
  ["down", "arrowdown"]
]), Kh = (t) => t.map((e) => {
  const n = e.toLowerCase();
  return xE.has(n) ? xE.get(n) : n;
}).sort().join("+"), r6 = (t) => t.split("+"), HE = new RegExp("^(?:Key|Digit)([A-Z0-9])$"), i6 = /* @__PURE__ */ new Set(["Backquote", "Minus", "Equal", "BracketLeft", "BracketRight", "Backslash", "Semicolon", "Quote", "Comma", "Period", "Slash"]), Rp = (t) => {
  let {
    key: e,
    code: n
  } = t, r = e;
  return HE.test(n) ? r = n.replace(HE, "$1") : i6.has(n) && (r = n), r.toLowerCase();
}, Gx = Symbol("shortcut-context");
function zx(t) {
  return Xe(t) && t.__kindOf === Gx;
}
const o6 = (t) => {
  const e = Ug({
    errorIdExists: (l) => `The "${l}" shortcut is already registered in the "${t}" context.`
  }), n = function() {
    let {
      keys: l,
      callback: u,
      group: c,
      runOnlyIf: d = () => !0,
      captureCtrl: g = !1,
      preventDefault: p = !0,
      stopPropagation: C = !1,
      relativeToGroup: E,
      position: I,
      forwardToContext: M
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (It(c))
      throw new Error("You need to define the shortcut's group.");
    if (At(u) === !1)
      throw new Error("The shortcut's callback needs to be a function.");
    if (Array.isArray(l) === !1)
      throw new Error(bt`Pass the shortcut\'s keys as an array of arrays,\x20
      using the KeyboardEvent.key properties:\x20
      https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.`);
    const y = {
      callback: u,
      group: c,
      runOnlyIf: d,
      captureCtrl: g,
      preventDefault: p,
      stopPropagation: C
    };
    Re(E) && ([y.relativeToGroup, y.position] = [E, I]), zx(M) && (y.forwardToContext = M), l.forEach(($) => {
      const X = Kh($);
      if (e.hasItem(X)) {
        const q = e.getItem(X);
        let re = q.findIndex((v) => v.group === E);
        re !== -1 ? I === "before" ? re -= 1 : re += 1 : re = q.length, q.splice(re, 0, y);
      } else
        e.addItem(X, [y]);
    });
  }, r = function(l) {
    let u = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    l.forEach((c) => {
      Ze(u, (d, g) => {
        Object.prototype.hasOwnProperty.call(c, g) === !1 && (c[g] = u[g]);
      }), n(c);
    });
  }, i = (l) => {
    const u = Kh(l);
    e.removeItem(u);
  };
  return {
    __kindOf: Gx,
    addShortcut: n,
    addShortcuts: r,
    getShortcuts: (l) => {
      const u = Kh(l), c = e.getItem(u);
      return Re(c) ? c.slice() : [];
    },
    hasShortcut: (l) => {
      const u = Kh(l);
      return e.hasItem(u);
    },
    removeShortcutsByKeys: i,
    removeShortcutsByGroup: (l) => {
      e.getItems().forEach((c) => {
        let [d, g] = c;
        const p = g.filter((C) => C.group !== l);
        p.length === 0 ? i(r6(d)) : (g.length = 0, g.push(...p));
      });
    }
  };
};
function s6() {
  const t = /* @__PURE__ */ new Set();
  return {
    /**
     * Press a key.
     *
     * @param {string} key Names of the shortcut's keys,
     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),
     * in lowercase or uppercase, unified across browsers
     */
    press(e) {
      t.add(e);
    },
    /**
     * Release a pressed key.
     *
     * @param {string} key Names of the shortcut's keys,
     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),
     * in lowercase or uppercase, unified across browsers
     */
    release(e) {
      t.delete(e);
    },
    /**
     * Release all pressed keys.
     */
    releaseAll() {
      t.clear();
    },
    /**
     * Check if a key is pressed.
     *
     * @param {string} key Names of the shortcut's keys,
     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),
     * in lowercase or uppercase, unified across browsers
     * @returns {boolean}
     */
    isPressed(e) {
      return t.has(e);
    }
  };
}
const a6 = ["meta", "alt", "shift", "control"], Ru = s6();
let Xh = 0;
function l6(t, e, n, r, i) {
  const o = (p) => a6.includes(p), s = function(p) {
    let C = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const E = [];
    return p.altKey && E.push("alt"), C && (p.ctrlKey || p.metaKey) ? E.push("control/meta") : (p.ctrlKey && E.push("control"), p.metaKey && E.push("meta")), p.shiftKey && E.push("shift"), E;
  }, a = (p) => {
    if (e(p) === !1)
      return;
    const C = n(p);
    if (p.keyCode === 229 || C === !1 || us(p))
      return;
    const E = Rp(p);
    let I = [];
    o(E) || (I = s(p));
    const M = [E].concat(I);
    !i(p, M) && (Hc() && I.includes("meta") || !Hc() && I.includes("control")) && i(p, [E].concat(s(p, !0))), r(p);
  }, l = (p) => {
    const C = Rp(p);
    o(C) && Ru.press(C);
  }, u = (p) => {
    const C = Rp(p);
    o(C) && Ru.release(C);
  }, c = () => {
    Ru.releaseAll();
  };
  return {
    mount: () => {
      let p = t;
      for (Xh += 1; p; )
        Xh === 1 && (p.document.documentElement.addEventListener("keydown", l), p.document.documentElement.addEventListener("keyup", u)), p.document.documentElement.addEventListener("keydown", a), p.document.documentElement.addEventListener("blur", c), p = Ic(p);
    },
    unmount: () => {
      let p = t;
      for (Xh -= 1; p; )
        Xh === 0 && (p.document.documentElement.removeEventListener("keydown", l), p.document.documentElement.removeEventListener("keyup", u)), p.document.documentElement.removeEventListener("keydown", a), p.document.documentElement.removeEventListener("blur", c), p = Ic(p);
    },
    isPressed: (p) => Ru.isPressed(p),
    releasePressedKeys: () => Ru.releaseAll()
  };
}
const u6 = (t) => {
  let {
    ownerWindow: e,
    handleEvent: n,
    beforeKeyDown: r,
    afterKeyDown: i
  } = t;
  const o = Ug({
    errorIdExists: (C) => `The "${C}" context name is already registered.`
  });
  let s = "grid";
  const a = (C) => {
    const E = o6(C);
    return o.addItem(C, E), E;
  }, l = () => s, u = (C) => o.getItem(C), c = (C) => {
    if (!o.hasItem(C))
      throw new Error(bt`You've tried to activate the "${C}" shortcut context\x20
        that does not exist. Before activation, register the context using the "addContext" method.`);
    s = C;
  };
  let d = !1;
  const g = function(C, E) {
    let I = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : l();
    const M = zx(I) ? I : u(I);
    let y = !1;
    if (!M.hasShortcut(E))
      return y;
    const $ = M.getShortcuts(E);
    for (let X = 0; X < $.length; X++) {
      const {
        callback: G,
        runOnlyIf: q,
        preventDefault: re,
        stopPropagation: v,
        captureCtrl: S,
        forwardToContext: b
      } = $[X];
      if (q(C) === !0) {
        if (d = S, y = G(C, E) === !1, d = !1, re && C.preventDefault(), v && (Kr(C), C.stopPropagation()), y)
          break;
        b && g(C, E, b);
      }
    }
    return y;
  }, p = l6(e, n, r, i, g);
  return p.mount(), {
    addContext: a,
    getActiveContextName: l,
    getContext: u,
    setActiveContextName: c,
    /**
     * Returns whether `control` or `meta` keys are pressed.
     *
     * @memberof ShortcutManager#
     * @type {Function}
     * @returns {boolean}
     */
    isCtrlPressed: () => !d && (p.isPressed("control") || p.isPressed("meta")),
    /**
     * Release every previously pressed key.
     *
     * @type {Function}
     * @memberof ShortcutManager#
     */
    releasePressedKeys: () => p.releasePressedKeys(),
    /**
     * Destroy a context manager instance.
     *
     * @type {Function}
     * @memberof ShortcutManager#
     */
    destroy: () => p.unmount()
  };
};
let Ep = null;
const Tp = /* @__PURE__ */ new Map();
function jx(t, e) {
  var n, r = this;
  let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, o = !1, s = this;
  const a = new _r(s);
  let l, u, c, d, g, p = !0;
  G3(i) && Y3(this), this.rootElement = t, this.rootDocument = t.ownerDocument, this.rootWindow = this.rootDocument.defaultView, this.isDestroyed = !1, this.renderSuspendedCounter = 0, this.executionSuspendedCounter = 0;
  const C = (n = e == null ? void 0 : e.layoutDirection) !== null && n !== void 0 ? n : "inherit", E = ["rtl", "ltr"].includes(C) ? C : this.rootWindow.getComputedStyle(this.rootElement).direction;
  this.rootElement.setAttribute("dir", E), this.isRtl = function() {
    return E === "rtl";
  }, this.isLtr = function() {
    return !s.isRtl();
  }, this.getDirectionFactor = function() {
    return s.isLtr() ? 1 : -1;
  }, e.language = KX(e.language);
  const I = new Bx(s, e, [o4, l4]), M = I.getTableMeta(), y = I.getGlobalMeta(), $ = Ug();
  this.container = this.rootDocument.createElement("div"), this.renderCall = !1, t.insertBefore(this.container, t.firstChild), ef(this) && UI(e.licenseKey, t), this.guid = `ht_${sS()}`, Tp.set(this.guid, this), this.columnIndexMapper = new zC(), this.rowIndexMapper = new zC(), this.columnIndexMapper.addLocalHook("indexesSequenceChange", (h) => {
    s.runHooks("afterColumnSequenceChange", h);
  }), this.rowIndexMapper.addLocalHook("indexesSequenceChange", (h) => {
    s.runHooks("afterRowSequenceChange", h);
  }), u = new aX(s), (!this.rootElement.id || this.rootElement.id.substring(0, 3) === "ht_") && (this.rootElement.id = this.guid);
  const X = (h) => {
    const {
      row: f,
      col: m
    } = h;
    return s._createCellCoords(
      // We just store indexes for rows and columns without headers.
      f >= 0 ? s.rowIndexMapper.getRenderableFromVisualIndex(f) : f,
      m >= 0 ? s.columnIndexMapper.getRenderableFromVisualIndex(m) : m
    );
  }, G = (h) => {
    const {
      row: f,
      col: m
    } = h;
    return s._createCellCoords(
      // We just store indexes for rows and columns without headers.
      f >= 0 ? s.rowIndexMapper.getVisualFromRenderableIndex(f) : f,
      m >= 0 ? s.columnIndexMapper.getVisualFromRenderableIndex(m) : m
      // eslint-disable-line max-len
    );
  };
  let q = new Aq(M, {
    rowIndexMapper: s.rowIndexMapper,
    columnIndexMapper: s.columnIndexMapper,
    countCols: () => s.countCols(),
    countRows: () => s.countRows(),
    propToCol: (h) => l.propToCol(h),
    isEditorOpened: () => s.getActiveEditor() ? s.getActiveEditor().isOpened() : !1,
    countRenderableColumns: () => this.view.countRenderableColumns(),
    countRenderableRows: () => this.view.countRenderableRows(),
    countRowHeaders: () => this.countRowHeaders(),
    countColHeaders: () => this.countColHeaders(),
    getShortcutManager: () => s.getShortcutManager(),
    createCellCoords: (h, f) => s._createCellCoords(h, f),
    createCellRange: (h, f, m) => s._createCellRange(h, f, m),
    visualToRenderableCoords: X,
    renderableToVisualCoords: G,
    isDisabledCellSelection: (h, f) => h < 0 || f < 0 ? s.getSettings().disableVisualSelection : s.getCellMeta(h, f).disableVisualSelection
  });
  this.selection = q;
  const re = (h) => {
    let {
      hiddenIndexesChanged: f
    } = h;
    f && this.selection.refresh();
  };
  this.columnIndexMapper.addLocalHook("cacheUpdated", re), this.rowIndexMapper.addLocalHook("cacheUpdated", re), this.selection.addLocalHook("afterSetRangeEnd", (h) => {
    const f = gi(!1), m = this.selection.getSelectedRange(), {
      from: T,
      to: O
    } = m.current(), _ = m.size() - 1;
    this.runHooks("afterSelection", T.row, T.col, O.row, O.col, f, _), this.runHooks("afterSelectionByProp", T.row, s.colToProp(T.col), O.row, s.colToProp(O.col), f, _);
    let Y = !0;
    o && (Y = !1), f.isTouched() && (Y = !f.value);
    const U = this.selection.selectedRange.current(), ie = this.selection.isSelectedByAnyHeader(), se = this.selection.isSelectedByRowHeader(), oe = this.selection.isSelectedByColumnHeader();
    if (Y !== !1)
      if (ie)
        se ? this.scrollViewportTo({
          row: h.row
        }) : oe && this.scrollViewportTo({
          col: h.col
        });
      else if (U && !this.selection.isMultiple()) {
        const {
          row: de,
          col: Ce
        } = U.from;
        de < 0 && Ce >= 0 ? this.scrollViewportTo({
          col: Ce
        }) : Ce < 0 && de >= 0 ? this.scrollViewportTo({
          row: de
        }) : this.scrollViewportTo({
          row: de,
          col: Ce
        });
      } else
        this.scrollViewportTo(h.toObject());
    se && oe ? ce(this.rootElement, ["ht__selection--rows", "ht__selection--columns"]) : se ? (Ye(this.rootElement, "ht__selection--columns"), ce(this.rootElement, "ht__selection--rows")) : oe ? (Ye(this.rootElement, "ht__selection--rows"), ce(this.rootElement, "ht__selection--columns")) : Ye(this.rootElement, ["ht__selection--rows", "ht__selection--columns"]), this._refreshBorders(null);
  }), this.selection.addLocalHook("afterSelectionFinished", (h) => {
    const f = h.length - 1, {
      from: m,
      to: T
    } = h[f];
    this.runHooks("afterSelectionEnd", m.row, m.col, T.row, T.col, f), this.runHooks("afterSelectionEndByProp", m.row, s.colToProp(m.col), T.row, s.colToProp(T.col), f);
  }), this.selection.addLocalHook("afterIsMultipleSelection", (h) => {
    const f = this.runHooks("afterIsMultipleSelection", h.value);
    h.value && (h.value = f);
  }), this.selection.addLocalHook("afterDeselect", () => {
    d.destroyEditor(), this._refreshBorders(), Ye(this.rootElement, ["ht__selection--rows", "ht__selection--columns"]), this.runHooks("afterDeselect");
  }), this.selection.addLocalHook("beforeHighlightSet", () => this.runHooks("beforeSelectionHighlightSet")).addLocalHook("beforeSetRangeStart", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("beforeSetRangeStart", ...f);
  }).addLocalHook("beforeSetRangeStartOnly", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("beforeSetRangeStartOnly", ...f);
  }).addLocalHook("beforeSetRangeEnd", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("beforeSetRangeEnd", ...f);
  }).addLocalHook("beforeSelectColumns", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("beforeSelectColumns", ...f);
  }).addLocalHook("afterSelectColumns", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("afterSelectColumns", ...f);
  }).addLocalHook("beforeSelectRows", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("beforeSelectRows", ...f);
  }).addLocalHook("afterSelectRows", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("afterSelectRows", ...f);
  }).addLocalHook("beforeModifyTransformStart", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("modifyTransformStart", ...f);
  }).addLocalHook("afterModifyTransformStart", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("afterModifyTransformStart", ...f);
  }).addLocalHook("beforeModifyTransformEnd", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("modifyTransformEnd", ...f);
  }).addLocalHook("afterModifyTransformEnd", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("afterModifyTransformEnd", ...f);
  }).addLocalHook("beforeRowWrap", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("beforeRowWrap", ...f);
  }).addLocalHook("beforeColumnWrap", function() {
    for (var h = arguments.length, f = new Array(h), m = 0; m < h; m++)
      f[m] = arguments[m];
    return r.runHooks("beforeColumnWrap", ...f);
  }).addLocalHook("insertRowRequire", (h) => this.alter("insert_row_above", h, 1, "auto")).addLocalHook("insertColRequire", (h) => this.alter("insert_col_start", h, 1, "auto")), c = {
    /**
     * Inserts or removes rows and columns.
     *
     * @private
     * @param {string} action Possible values: "insert_row_above", "insert_row_below", "insert_col_start", "insert_col_end",
     *                        "remove_row", "remove_col".
     * @param {number|Array} index Row or column visual index which from the alter action will be triggered.
     *                             Alter actions such as "remove_row" and "remove_col" support array indexes in the
     *                             format `[[index, amount], [index, amount]...]` this can be used to remove
     *                             non-consecutive columns or rows in one call.
     * @param {number} [amount=1] Amount of rows or columns to remove.
     * @param {string} [source] Optional. Source of hook runner.
     * @param {boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.
     */
    alter(h, f) {
      var m, T;
      let O = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, _ = arguments.length > 3 ? arguments[3] : void 0, Y = arguments.length > 4 ? arguments[4] : void 0;
      const U = (ie) => {
        if (ie.length === 0)
          return [];
        const se = [...ie];
        return se.sort((de, Ce) => {
          let [we] = de, [pe] = Ce;
          return we === pe ? 0 : we > pe ? 1 : -1;
        }), nn(se, (de, Ce) => {
          let [we, pe] = Ce;
          const ee = de[de.length - 1], [ye, $e] = ee, Ae = ye + $e;
          if (we <= Ae) {
            const Fe = Math.max(pe - (Ae - we), 0);
            ee[1] += Fe;
          } else
            de.push([we, pe]);
          return de;
        }, [se[0]]);
      };
      switch (h) {
        case "insert_row_below":
        case "insert_row_above":
          const ie = s.countSourceRows();
          if (M.maxRows === ie)
            return;
          const se = h === "insert_row_below" ? "below" : "above";
          f = (m = f) !== null && m !== void 0 ? m : se === "below" ? ie : 0;
          const {
            delta: oe,
            startPhysicalIndex: de
          } = l.createRow(f, O, {
            source: _,
            mode: se
          });
          if (oe) {
            const $e = q.selectedRange.current(), Ae = $e == null ? void 0 : $e.from, Fe = Ae == null ? void 0 : Ae.row, Ie = s.toVisualRow(de);
            if (q.isSelectedByCorner())
              q.selectAll(!0, !0, {
                disableHeadersHighlight: !0
              });
            else if (Re(Fe) && Fe >= Ie) {
              const {
                row: R,
                col: A
              } = $e.to;
              let N = Ae.col;
              q.isSelectedByRowHeader() && (N = -1), q.getSelectedRange().pop(), q.setRangeStartOnly(s._createCellCoords(Fe + oe, N), !0), q.setRangeEnd(s._createCellCoords(R + oe, A));
            } else
              s._refreshBorders();
          }
          break;
        case "insert_col_start":
        case "insert_col_end":
          const Ce = h === "insert_col_end" ? "end" : "start";
          f = (T = f) !== null && T !== void 0 ? T : Ce === "end" ? s.countSourceCols() : 0;
          const {
            delta: we,
            startPhysicalIndex: pe
          } = l.createCol(f, O, {
            source: _,
            mode: Ce
          });
          if (we) {
            if (Array.isArray(M.colHeaders)) {
              const R = [s.toVisualColumn(pe), 0];
              R.length += we, Array.prototype.splice.apply(M.colHeaders, R);
            }
            const $e = q.selectedRange.current(), Ae = $e == null ? void 0 : $e.from, Fe = Ae == null ? void 0 : Ae.col, Ie = s.toVisualColumn(pe);
            if (q.isSelectedByCorner())
              q.selectAll(!0, !0, {
                disableHeadersHighlight: !0
              });
            else if (Re(Fe) && Fe >= Ie) {
              const {
                row: R,
                col: A
              } = $e.to;
              let N = Ae.row;
              q.isSelectedByColumnHeader() && (N = -1), q.getSelectedRange().pop(), q.setRangeStartOnly(s._createCellCoords(N, Fe + we), !0), q.setRangeEnd(s._createCellCoords(R, A + we));
            } else
              s._refreshBorders();
          }
          break;
        case "remove_row":
          const ee = ($e) => {
            let Ae = 0;
            H($e, (Fe) => {
              let [Ie, R] = Fe;
              const A = gn(Ie) ? s.countRows() - 1 : Math.max(Ie - Ae, 0);
              if (Number.isInteger(Ie) && (Ie = Math.max(Ie - Ae, 0)), !l.removeRow(Ie, R, _))
                return;
              const J = s.countRows(), F = M.fixedRowsTop;
              F >= A + 1 && (M.fixedRowsTop -= Math.min(R, F - A));
              const Q = M.fixedRowsBottom;
              Q && A >= J - Q && (M.fixedRowsBottom -= Math.min(R, Q)), Ae += R;
            });
          };
          Array.isArray(f) ? ee(U(f)) : ee([[f, O]]), c.adjustRowsAndCols(), s._refreshBorders();
          break;
        case "remove_col":
          const ye = ($e) => {
            let Ae = 0;
            H($e, (Fe) => {
              let [Ie, R] = Fe;
              const A = gn(Ie) ? s.countCols() - 1 : Math.max(Ie - Ae, 0);
              let N = s.toPhysicalColumn(A);
              if (Number.isInteger(Ie) && (Ie = Math.max(Ie - Ae, 0)), !l.removeCol(Ie, R, _))
                return;
              const F = M.fixedColumnsStart;
              F >= A + 1 && (M.fixedColumnsStart -= Math.min(R, F - A)), Array.isArray(M.colHeaders) && (typeof N > "u" && (N = -1), M.colHeaders.splice(N, R)), Ae += R;
            });
          };
          Array.isArray(f) ? ye(U(f)) : ye([[f, O]]), c.adjustRowsAndCols(), s._refreshBorders();
          break;
        default:
          throw new Error(`There is no such action "${h}"`);
      }
      Y || c.adjustRowsAndCols();
    },
    /**
     * Makes sure there are empty rows at the bottom of the table.
     *
     * @private
     */
    adjustRowsAndCols() {
      const h = M.minRows, f = M.minSpareRows, m = M.minCols, T = M.minSpareCols;
      if (s.countRows() === 0 && s.countCols() === 0 && q.deselect(), h) {
        const O = s.countRows();
        O < h && l.createRow(O, h - O, {
          source: "auto"
        });
      }
      if (f) {
        const O = s.countEmptyRows(!0);
        if (O < f) {
          const _ = f - O, Y = Math.min(_, M.maxRows - s.countSourceRows());
          l.createRow(s.countRows(), Y, {
            source: "auto"
          });
        }
      }
      {
        let O;
        (m || T) && (O = s.countEmptyCols(!0));
        let _ = s.countCols();
        if (m && !M.columns && _ < m) {
          const Y = m - _;
          O += Y, l.createCol(_, Y, {
            source: "auto"
          });
        }
        if (T && !M.columns && s.dataType === "array" && O < T) {
          _ = s.countCols();
          const Y = T - O, U = Math.min(Y, M.maxCols - _);
          l.createCol(_, U, {
            source: "auto"
          });
        }
      }
      if (q.isSelected()) {
        const O = s.countRows(), _ = s.countCols();
        H(q.selectedRange, (Y) => {
          let U = !1, ie = Y.from.row, se = Y.from.col, oe = Y.to.row, de = Y.to.col;
          ie > O - 1 ? (ie = O - 1, U = !0, oe > ie && (oe = ie)) : oe > O - 1 && (oe = O - 1, U = !0, ie > oe && (ie = oe)), se > _ - 1 ? (se = _ - 1, U = !0, de > se && (de = se)) : de > _ - 1 && (de = _ - 1, U = !0, se > de && (se = de)), U && s.selectCell(ie, se, oe, de);
        });
      }
      s.view && s.view.adjustElementsSize();
    },
    /**
     * Populate the data from the provided 2d array from the given cell coordinates.
     *
     * @private
     * @param {object} start Start selection position. Visual indexes.
     * @param {Array} input 2d data array.
     * @param {object} [end] End selection position (only for drag-down mode). Visual indexes.
     * @param {string} [source="populateFromArray"] Source information string.
     * @param {string} [method="overwrite"] Populate method. Possible options: `shift_down`, `shift_right`, `overwrite`.
     * @returns {object|undefined} Ending td in pasted area (only if any cell was changed).
     */
    populateFromArray(h, f, m, T, O) {
      let _, Y, U, ie;
      const se = [], oe = {}, de = [], Ce = h.row, we = h.col;
      if (Y = f.length, Y === 0)
        return !1;
      let pe = 0, ee = 0;
      switch (Xe(m) && (pe = m.col - we + 1, ee = m.row - Ce + 1), O) {
        case "shift_down":
          const ye = sc(f), $e = ye.length, Ae = Math.max($e, pe), Fe = s.getData().slice(Ce), Ie = sc(Fe).slice(we, we + Ae);
          for (U = 0; U < Ae; U += 1)
            if (U < $e) {
              for (_ = 0, Y = ye[U].length; _ < ee - Y; _ += 1)
                ye[U].push(ye[U][_ % Y]);
              U < Ie.length ? de.push(ye[U].concat(Ie[U])) : de.push(ye[U].concat(new Array(Fe.length).fill(null)));
            } else
              de.push(ye[U % $e].concat(Ie[U]));
          s.populateFromArray(Ce, we, sc(de));
          break;
        case "shift_right":
          const R = f.length, A = Math.max(R, ee), N = s.getData().slice(Ce).map((ne) => ne.slice(we));
          for (_ = 0; _ < A; _ += 1)
            if (_ < R) {
              for (U = 0, ie = f[_].length; U < pe - ie; U += 1)
                f[_].push(f[_][U % ie]);
              if (_ < N.length)
                for (let ne = 0; ne < N[_].length; ne += 1)
                  f[_].push(N[_][ne]);
              else
                f[_].push(...new Array(N[0].length).fill(null));
            } else
              f.push(f[_ % Y].slice(0, A).concat(N[_]));
          s.populateFromArray(Ce, we, f);
          break;
        case "overwrite":
        default:
          oe.row = h.row, oe.col = h.col;
          let J = 0, F = 0, Q = !0, K;
          const j = function(fe) {
            let Ee = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            const He = f[fe % f.length];
            return Ee !== null ? He[Ee % He.length] : He;
          }, te = f.length, Z = m ? m.row - h.row + 1 : 0;
          for (m ? Y = Z : Y = Math.max(te, Z), _ = 0; _ < Y && !(m && oe.row > m.row && Z > te || !M.allowInsertRow && oe.row > s.countRows() - 1 || oe.row >= M.maxRows); _++) {
            const ne = _ - J, fe = j(ne).length, Ee = m ? m.col - h.col + 1 : 0;
            if (m ? ie = Ee : ie = Math.max(fe, Ee), oe.col = h.col, K = s.getCellMeta(oe.row, oe.col), (T === "CopyPaste.paste" || T === "Autofill.fill") && K.skipRowOnPaste) {
              J += 1, oe.row += 1, Y += 1;
              continue;
            }
            for (F = 0, U = 0; U < ie && !(m && oe.col > m.col && Ee > fe || !M.allowInsertColumn && oe.col > s.countCols() - 1 || oe.col >= M.maxCols); U++) {
              if (K = s.getCellMeta(oe.row, oe.col), (T === "CopyPaste.paste" || T === "Autofill.fill") && K.skipColumnOnPaste) {
                F += 1, oe.col += 1, ie += 1;
                continue;
              }
              if (K.readOnly && T !== "UndoRedo.undo") {
                oe.col += 1;
                continue;
              }
              const He = U - F;
              let ke = j(ne, He), Ge = s.getDataAtCell(oe.row, oe.col);
              if (ke !== null && typeof ke == "object")
                if (Array.isArray(ke) && Ge === null && (Ge = []), Ge === null || typeof Ge != "object")
                  Q = !1;
                else {
                  const Rt = Vl(Array.isArray(Ge) ? Ge : Ge[0] || Ge), Qe = Vl(Array.isArray(ke) ? ke : ke[0] || ke);
                  Fg(Rt, Qe) || Array.isArray(Rt) && Array.isArray(Qe) ? ke = Wn(ke) : Q = !1;
                }
              else
                Ge !== null && typeof Ge == "object" && (Q = !1);
              Q && se.push([oe.row, oe.col, ke]), Q = !0, oe.col += 1;
            }
            oe.row += 1;
          }
          s.setDataAtCell(se, null, null, T || "populateFromArray");
          break;
      }
    }
  };
  function v(h) {
    const f = bx(h);
    Mb(f) ? (s.runHooks("beforeLanguageChange", f), y.language = f, s.runHooks("afterLanguageChange", f)) : Rx(h);
  }
  function S(h, f) {
    const m = h === "className" ? s.rootElement : s.table;
    if (p)
      ce(m, f);
    else {
      let T = [], O = [];
      y[h] && (T = Array.isArray(y[h]) ? y[h] : _C(y[h])), f && (O = Array.isArray(f) ? f : _C(f));
      const _ = TC(T, O), Y = TC(O, T);
      _.length && Ye(m, _), Y.length && ce(m, Y);
    }
    y[h] = f;
  }
  this.init = function() {
    u.setData(M.data), s.runHooks("beforeInit"), (Mo() || bS()) && ce(s.rootElement, "mobile"), this.updateSettings(M, !0), this.view = new Q3(this), d = az.getInstance(s, M, q), g = new cz(s), ef(this) && n6(s), s.runHooks("init"), this.forceFullRender = !0, this.view.render(), p && s.rootElement.offsetParent === null && oP(s.rootElement, () => {
      s.view._wt.wtOverlays.updateLastSpreaderSize(), s.render(), s.view.adjustElementsSize();
    }), typeof p == "object" && (s.runHooks("afterChange", p[0], p[1]), p = !1), s.runHooks("afterInit");
  };
  function b() {
    let h = !1;
    return {
      validatorsInQueue: 0,
      valid: !0,
      addValidatorToQueue() {
        this.validatorsInQueue += 1, h = !1;
      },
      removeValidatorFormQueue() {
        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1, this.checkIfQueueIsEmpty();
      },
      onQueueEmpty() {
      },
      checkIfQueueIsEmpty() {
        this.validatorsInQueue === 0 && h === !1 && (h = !0, this.onQueueEmpty(this.valid));
      }
    };
  }
  function L(h) {
    const f = h.replace(",", ".");
    return isNaN(parseFloat(f)) === !1 ? parseFloat(f) : h;
  }
  function P(h, f, m) {
    if (!h.length)
      return;
    const T = s.getActiveEditor(), O = new b();
    let _ = !0;
    O.onQueueEmpty = (Y) => {
      T && _ && T.cancelChanges(), m(Y);
    };
    for (let Y = h.length - 1; Y >= 0; Y--) {
      const [U, ie, , se] = h[Y], oe = l.propToCol(ie), de = s.getCellMeta(U, oe);
      de.type === "numeric" && typeof se == "string" && IP(se) && (h[Y][3] = L(se)), s.getCellValidator(de) && (O.addValidatorToQueue(), s.validateCell(h[Y][3], de, function(Ce, we) {
        return function(pe) {
          if (typeof pe != "boolean")
            throw new Error("Validation error: result is not boolean");
          if (pe === !1 && we.allowInvalid === !1) {
            _ = !1, h.splice(Ce, 1), we.valid = !0;
            const ee = s.getCell(we.visualRow, we.visualCol);
            ee !== null && Ye(ee, M.invalidCellClassName);
          }
          O.removeValidatorFormQueue();
        };
      }(Y, de), f));
    }
    O.checkIfQueueIsEmpty();
  }
  function x(h, f) {
    let m = h.length - 1;
    if (m < 0)
      return;
    for (; m >= 0; m--) {
      let O = !1;
      if (h[m] === null) {
        h.splice(m, 1);
        continue;
      }
      if (!((h[m][2] === null || h[m][2] === void 0) && (h[m][3] === null || h[m][3] === void 0))) {
        if (M.allowInsertRow)
          for (; h[m][0] > s.countRows() - 1; ) {
            const {
              delta: _
            } = l.createRow(void 0, void 0, {
              source: f
            });
            if (_ === 0) {
              O = !0;
              break;
            }
          }
        if (s.dataType === "array" && (!M.columns || M.columns.length === 0) && M.allowInsertColumn)
          for (; l.propToCol(h[m][1]) > s.countCols() - 1; ) {
            const {
              delta: _
            } = l.createCol(void 0, void 0, {
              source: f
            });
            if (_ === 0) {
              O = !0;
              break;
            }
          }
        O || l.set(h[m][0], h[m][1], h[m][3]);
      }
    }
    s.forceFullRender = !0, c.adjustRowsAndCols(), s.runHooks("beforeChangeRender", h, f), d.lockEditor(), s._refreshBorders(null), d.unlockEditor(), s.view.adjustElementsSize(), s.runHooks("afterChange", h, f || "edit");
    const T = s.getActiveEditor();
    T && Re(T.refreshValue) && T.refreshValue();
  }
  this._createCellCoords = function(h, f) {
    return s.view._wt.createCellCoords(h, f);
  }, this._createCellRange = function(h, f, m) {
    return s.view._wt.createCellRange(h, f, m);
  }, this.validateCell = function(h, f, m, T) {
    let O = s.getCellValidator(f);
    function _(Y) {
      if (!(arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0) || f.hidden === !0) {
        m(Y);
        return;
      }
      const ie = f.visualCol, se = f.visualRow, oe = s.getCell(se, ie, !0);
      if (oe && oe.nodeName !== "TH") {
        const de = s.rowIndexMapper.getRenderableFromVisualIndex(se), Ce = s.columnIndexMapper.getRenderableFromVisualIndex(ie);
        s.view._wt.getSetting("cellRenderer", de, Ce, oe);
      }
      m(Y);
    }
    BI(O) && (O = function(Y) {
      return function(U, ie) {
        ie(Y.test(U));
      };
    }(O)), At(O) ? (h = s.runHooks("beforeValidate", h, f.visualRow, f.prop, T), s._registerImmediate(() => {
      O.call(f, h, (Y) => {
        s && (Y = s.runHooks("afterValidate", Y, h, f.visualRow, f.prop, T), f.valid = Y, _(Y), s.runHooks("postAfterValidate", Y, h, f.visualRow, f.prop, T));
      });
    })) : s._registerImmediate(() => {
      f.valid = !0, _(f.valid, !1);
    });
  };
  function W(h, f, m) {
    return Array.isArray(h) ? h : [[h, f, m]];
  }
  function D(h, f) {
    const m = s.getActiveEditor(), T = s.runHooks("beforeChange", h, f || "edit"), O = h.filter((_) => _ !== null);
    return T === !1 || O.length === 0 ? (m && m.cancelChanges(), []) : O;
  }
  this.setDataAtCell = function(h, f, m, T) {
    const O = W(h, f, m), _ = [];
    let Y = T, U, ie, se;
    for (U = 0, ie = O.length; U < ie; U++) {
      if (typeof O[U] != "object")
        throw new Error("Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter");
      if (typeof O[U][1] != "number")
        throw new Error("Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`");
      O[U][1] >= this.countCols() ? se = O[U][1] : se = l.colToProp(O[U][1]), _.push([O[U][0], se, u.getAtCell(this.toPhysicalRow(O[U][0]), O[U][1]), O[U][2]]);
    }
    !Y && typeof h == "object" && (Y = f);
    const oe = D(_, T);
    s.runHooks("afterSetDataAtCell", oe, Y), P(oe, Y, () => {
      x(oe, Y);
    });
  }, this.setDataAtRowProp = function(h, f, m, T) {
    const O = W(h, f, m), _ = [];
    let Y = T, U, ie;
    for (U = 0, ie = O.length; U < ie; U++)
      _.push([O[U][0], O[U][1], u.getAtCell(this.toPhysicalRow(O[U][0]), O[U][1]), O[U][2]]);
    !Y && typeof h == "object" && (Y = f);
    const se = D(_, T);
    s.runHooks("afterSetDataAtRowProp", se, Y), P(se, Y, () => {
      x(se, Y);
    });
  }, this.listen = function() {
    s && !s.isListening() && (Tp.forEach((h) => {
      s !== h && h.unlisten();
    }), Ep = s.guid, s.runHooks("afterListen"));
  }, this.unlisten = function() {
    this.isListening() && (Ep = null, s.runHooks("afterUnlisten"));
  }, this.isListening = function() {
    return Ep === s.guid;
  }, this.destroyEditor = function() {
    let h = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    s._refreshBorders(h, f);
  }, this.populateFromArray = function(h, f, m, T, O, _, Y) {
    if (!(typeof m == "object" && typeof m[0] == "object"))
      throw new Error("populateFromArray parameter `input` must be an array of arrays");
    const U = typeof T == "number" ? s._createCellCoords(T, O) : null;
    return c.populateFromArray(s._createCellCoords(h, f), m, U, _, Y);
  }, this.spliceCol = function(h, f, m) {
    for (var T = arguments.length, O = new Array(T > 3 ? T - 3 : 0), _ = 3; _ < T; _++)
      O[_ - 3] = arguments[_];
    return l.spliceCol(h, f, m, ...O);
  }, this.spliceRow = function(h, f, m) {
    for (var T = arguments.length, O = new Array(T > 3 ? T - 3 : 0), _ = 3; _ < T; _++)
      O[_ - 3] = arguments[_];
    return l.spliceRow(h, f, m, ...O);
  }, this.getSelected = function() {
    if (q.isSelected())
      return qe(q.getSelectedRange(), (h) => {
        let {
          from: f,
          to: m
        } = h;
        return [f.row, f.col, m.row, m.col];
      });
  }, this.getSelectedLast = function() {
    const h = this.getSelected();
    let f;
    return h && h.length > 0 && (f = h[h.length - 1]), f;
  }, this.getSelectedRange = function() {
    if (q.isSelected())
      return Array.from(q.getSelectedRange());
  }, this.getSelectedRangeLast = function() {
    const h = this.getSelectedRange();
    let f;
    return h && h.length > 0 && (f = h[h.length - 1]), f;
  }, this.emptySelectedCells = function(h) {
    if (!q.isSelected() || this.countRows() === 0 || this.countCols() === 0)
      return;
    const f = [];
    H(q.getSelectedRange(), (m) => {
      if (m.isSingleHeader())
        return;
      const T = m.getTopStartCorner(), O = m.getBottomEndCorner();
      xe(T.row, O.row, (_) => {
        xe(T.col, O.col, (Y) => {
          this.getCellMeta(_, Y).readOnly || f.push([_, Y, null]);
        });
      });
    }), f.length > 0 && this.setDataAtCell(f, h);
  }, this.isRenderSuspended = function() {
    return this.renderSuspendedCounter > 0;
  }, this.suspendRender = function() {
    this.renderSuspendedCounter += 1;
  }, this.resumeRender = function() {
    const h = this.renderSuspendedCounter - 1;
    this.renderSuspendedCounter = Math.max(h, 0), !this.isRenderSuspended() && h === this.renderSuspendedCounter && (this.renderCall ? this.render() : this._refreshBorders(null));
  }, this.render = function() {
    this.view && (this.renderCall = !0, this.forceFullRender = !0, this.isRenderSuspended() || (d.lockEditor(), this._refreshBorders(null), d.unlockEditor()));
  }, this.batchRender = function(h) {
    this.suspendRender();
    const f = h();
    return this.resumeRender(), f;
  }, this.isExecutionSuspended = function() {
    return this.executionSuspendedCounter > 0;
  }, this.suspendExecution = function() {
    this.executionSuspendedCounter += 1, this.columnIndexMapper.suspendOperations(), this.rowIndexMapper.suspendOperations();
  }, this.resumeExecution = function() {
    let h = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const f = this.executionSuspendedCounter - 1;
    this.executionSuspendedCounter = Math.max(f, 0), (!this.isExecutionSuspended() && f === this.executionSuspendedCounter || h) && (this.columnIndexMapper.resumeOperations(), this.rowIndexMapper.resumeOperations());
  }, this.batchExecution = function(h) {
    let f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    this.suspendExecution();
    const m = h();
    return this.resumeExecution(f), m;
  }, this.batch = function(h) {
    this.suspendRender(), this.suspendExecution();
    const f = h();
    return this.resumeExecution(), this.resumeRender(), f;
  }, this.refreshDimensions = function() {
    if (!s.view)
      return;
    const {
      width: h,
      height: f
    } = s.view.getLastSize(), {
      width: m,
      height: T
    } = s.rootElement.getBoundingClientRect(), O = m !== h || T !== f;
    s.runHooks("beforeRefreshDimensions", {
      width: h,
      height: f
    }, {
      width: m,
      height: T
    }, O) !== !1 && ((O || s.view._wt.wtOverlays.scrollableElement === s.rootWindow) && (s.view.setLastSize(m, T), s.render()), s.runHooks("afterRefreshDimensions", {
      width: h,
      height: f
    }, {
      width: m,
      height: T
    }, O));
  }, this.updateData = function(h, f) {
    ME(h, (m) => {
      l = m;
    }, (m) => {
      l = m, s.columnIndexMapper.fitToLength(this.getInitialColumnCount()), s.rowIndexMapper.fitToLength(this.countSourceRows()), c.adjustRowsAndCols();
    }, {
      hotInstance: s,
      dataMap: l,
      dataSource: u,
      internalSource: "updateData",
      source: f,
      metaManager: I,
      firstRun: p
    });
  }, this.loadData = function(h, f) {
    ME(h, (m) => {
      l = m;
    }, () => {
      I.clearCellsCache(), s.initIndexMappers(), c.adjustRowsAndCols(), p && (p = [null, "loadData"]);
    }, {
      hotInstance: s,
      dataMap: l,
      dataSource: u,
      internalSource: "loadData",
      source: f,
      metaManager: I,
      firstRun: p
    });
  }, this.getInitialColumnCount = function() {
    const h = M.columns;
    let f = 0;
    if (Array.isArray(h))
      f = h.length;
    else if (At(h))
      if (s.dataType === "array") {
        const m = this.countSourceCols();
        for (let T = 0; T < m; T += 1)
          h(T) && (f += 1);
      } else
        (s.dataType === "object" || s.dataType === "function") && (f = l.colToPropCache.length);
    else if (Re(M.dataSchema)) {
      const m = l.getSchema();
      f = Array.isArray(m) ? m.length : Wg(m);
    } else
      f = this.countSourceCols();
    return f;
  }, this.initIndexMappers = function() {
    this.columnIndexMapper.initToLength(this.getInitialColumnCount()), this.rowIndexMapper.initToLength(this.countSourceRows());
  }, this.getData = function(h, f, m, T) {
    return It(h) ? l.getAll() : l.getRange(s._createCellCoords(h, f), s._createCellCoords(m, T), l.DESTINATION_RENDERER);
  }, this.getCopyableText = function(h, f, m, T) {
    return l.getCopyableText(s._createCellCoords(h, f), s._createCellCoords(m, T));
  }, this.getCopyableData = function(h, f) {
    return l.getCopyable(h, l.colToProp(f));
  }, this.getSchema = function() {
    return l.getSchema();
  }, this.updateSettings = function(h) {
    let f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const m = (p ? s.loadData : s.updateData).bind(this);
    let T = !1, O, _;
    if (Re(h.rows))
      throw new Error('The "rows" setting is no longer supported. Do you mean startRows, minRows or maxRows?');
    if (Re(h.cols))
      throw new Error('The "cols" setting is no longer supported. Do you mean startCols, minCols or maxCols?');
    if (Re(h.ganttChart))
      throw new Error('Since 8.0.0 the "ganttChart" setting is no longer supported.');
    for (O in h)
      O === "data" || (O === "language" ? v(h.language) : O === "className" ? S("className", h.className) : O === "tableClassName" && s.table ? (S("tableClassName", h.tableClassName), s.view._wt.wtOverlays.syncOverlayTableClassNames()) : _e.getSingleton().isRegistered(O) || _e.getSingleton().isDeprecated(O) ? (At(h[O]) || Array.isArray(h[O])) && (h[O].initialHook = !0, s.addHook(O, h[O])) : !f && Vt(h, O) && (y[O] = h[O]));
    h.data === void 0 && M.data === void 0 ? m(null, "updateSettings") : h.data !== void 0 ? m(h.data, "updateSettings") : h.columns !== void 0 && (l.createMap(), s.initIndexMappers());
    const Y = s.countCols(), U = M.columns;
    if (U && At(U) && (T = !0), (h.cell !== void 0 || h.cells !== void 0 || h.columns !== void 0) && I.clearCache(), Y > 0)
      for (O = 0, _ = 0; O < Y; O++) {
        if (U) {
          const oe = T ? U(O) : U[_];
          oe && I.updateColumnMeta(_, oe);
        }
        _ += 1;
      }
    Re(h.cell) && Ze(h.cell, (oe) => {
      s.setCellMetaObject(oe.row, oe.col, oe);
    }), s.runHooks("afterCellMetaReset");
    let ie = s.rootElement.style.height;
    ie !== "" && (ie = parseInt(s.rootElement.style.height, 10));
    let se = h.height;
    if (At(se) && (se = se()), f && s.rootElement.getAttribute("style") && s.rootElement.setAttribute("data-initialstyle", s.rootElement.getAttribute("style")), se === null) {
      const oe = s.rootElement.getAttribute("data-initialstyle");
      oe && (oe.indexOf("height") > -1 || oe.indexOf("overflow") > -1) ? s.rootElement.setAttribute("style", oe) : (s.rootElement.style.height = "", s.rootElement.style.overflow = "");
    } else
      se !== void 0 && (s.rootElement.style.height = isNaN(se) ? `${se}` : `${se}px`, s.rootElement.style.overflow = "hidden");
    if (typeof h.width < "u") {
      let oe = h.width;
      At(oe) && (oe = oe()), s.rootElement.style.width = isNaN(oe) ? `${oe}` : `${oe}px`;
    }
    f || (s.view && (s.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked(), s.view._wt.exportSettingsAsClassNames()), s.runHooks("afterUpdateSettings", h)), c.adjustRowsAndCols(), s.view && !p && (s.forceFullRender = !0, d.lockEditor(), s._refreshBorders(null), s.view._wt.wtOverlays.adjustElementsSize(), d.unlockEditor()), !f && s.view && (ie === "" || se === "" || se === void 0) && ie !== se && s.view._wt.wtOverlays.updateMainScrollableElements();
  }, this.getValue = function() {
    const h = s.getSelectedLast();
    if (M.getValue) {
      if (At(M.getValue))
        return M.getValue.call(s);
      if (h)
        return s.getData()[h[0][0]][M.getValue];
    } else if (h)
      return s.getDataAtCell(h[0], h[1]);
  }, this.getSettings = function() {
    return M;
  }, this.clear = function() {
    this.selectAll(), this.emptySelectedCells();
  }, this.alter = function(h, f, m, T, O) {
    c.alter(h, f, m, T, O);
  }, this.getCell = function(h, f) {
    let m = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, T = f, O = h;
    if (f >= 0) {
      if (this.columnIndexMapper.isHidden(this.toPhysicalColumn(f)))
        return null;
      T = this.columnIndexMapper.getRenderableFromVisualIndex(f);
    }
    if (h >= 0) {
      if (this.rowIndexMapper.isHidden(this.toPhysicalRow(h)))
        return null;
      O = this.rowIndexMapper.getRenderableFromVisualIndex(h);
    }
    return O === null || T === null ? null : s.view.getCellAtCoords(s._createCellCoords(O, T), m);
  }, this.getCoords = function(h) {
    const f = this.view._wt.wtTable.getCoords(h);
    if (f === null)
      return null;
    const {
      row: m,
      col: T
    } = f;
    let O = m, _ = T;
    return m >= 0 && (O = this.rowIndexMapper.getVisualFromRenderableIndex(m)), T >= 0 && (_ = this.columnIndexMapper.getVisualFromRenderableIndex(T)), s._createCellCoords(O, _);
  }, this.colToProp = function(h) {
    return l.colToProp(h);
  }, this.propToCol = function(h) {
    return l.propToCol(h);
  }, this.toVisualRow = (h) => this.rowIndexMapper.getVisualFromPhysicalIndex(h), this.toVisualColumn = (h) => this.columnIndexMapper.getVisualFromPhysicalIndex(h), this.toPhysicalRow = (h) => this.rowIndexMapper.getPhysicalFromVisualIndex(h), this.toPhysicalColumn = (h) => this.columnIndexMapper.getPhysicalFromVisualIndex(h), this.getDataAtCell = function(h, f) {
    return l.get(h, l.colToProp(f));
  }, this.getDataAtRowProp = function(h, f) {
    return l.get(h, f);
  }, this.getDataAtCol = function(h) {
    const f = [], m = l.getRange(s._createCellCoords(0, h), s._createCellCoords(M.data.length - 1, h), l.DESTINATION_RENDERER);
    for (let T = 0; T < m.length; T += 1)
      for (let O = 0; O < m[T].length; O += 1)
        f.push(m[T][O]);
    return f;
  }, this.getDataAtProp = function(h) {
    const f = [], m = l.getRange(s._createCellCoords(0, l.propToCol(h)), s._createCellCoords(M.data.length - 1, l.propToCol(h)), l.DESTINATION_RENDERER);
    for (let T = 0; T < m.length; T += 1)
      for (let O = 0; O < m[T].length; O += 1)
        f.push(m[T][O]);
    return f;
  }, this.getSourceData = function(h, f, m, T) {
    let O;
    return h === void 0 ? O = u.getData() : O = u.getByRange(s._createCellCoords(h, f), s._createCellCoords(m, T)), O;
  }, this.getSourceDataArray = function(h, f, m, T) {
    let O;
    return h === void 0 ? O = u.getData(!0) : O = u.getByRange(s._createCellCoords(h, f), s._createCellCoords(m, T), !0), O;
  }, this.getSourceDataAtCol = function(h) {
    return u.getAtColumn(h);
  }, this.setSourceDataAtCell = function(h, f, m, T) {
    const O = W(h, f, m), _ = this.hasHook("afterSetSourceDataAtCell"), Y = [];
    _ && H(O, (ie) => {
      let [se, oe, de] = ie;
      Y.push([
        se,
        oe,
        u.getAtCell(se, oe),
        // The previous value.
        de
      ]);
    }), H(O, (ie) => {
      let [se, oe, de] = ie;
      u.setAtCell(se, oe, de);
    }), _ && this.runHooks("afterSetSourceDataAtCell", Y, T), this.render();
    const U = s.getActiveEditor();
    U && Re(U.refreshValue) && U.refreshValue();
  }, this.getSourceDataAtRow = function(h) {
    return u.getAtRow(h);
  }, this.getSourceDataAtCell = function(h, f) {
    return u.getAtCell(h, f);
  }, this.getDataAtRow = function(h) {
    return l.getRange(s._createCellCoords(h, 0), s._createCellCoords(h, this.countCols() - 1), l.DESTINATION_RENDERER)[0] || [];
  }, this.getDataType = function(h, f, m, T) {
    const O = h === void 0 ? [0, 0, this.countRows(), this.countCols()] : [h, f, m, T], [_, Y] = O;
    let [, , U, ie] = O, se = null, oe = null;
    U === void 0 && (U = _), ie === void 0 && (ie = Y);
    let de = "mixed";
    return xe(Math.max(Math.min(_, U), 0), Math.max(_, U), (Ce) => {
      let we = !0;
      return xe(Math.max(Math.min(Y, ie), 0), Math.max(Y, ie), (pe) => (oe = this.getCellMeta(Ce, pe).type, se ? we = se === oe : se = oe, we)), de = we ? oe : "mixed", we;
    }), de;
  }, this.removeCellMeta = function(h, f, m) {
    const [T, O] = [this.toPhysicalRow(h), this.toPhysicalColumn(f)];
    let _ = I.getCellMetaKeyValue(T, O, m);
    s.runHooks("beforeRemoveCellMeta", h, f, m, _) !== !1 && (I.removeCellMeta(T, O, m), s.runHooks("afterRemoveCellMeta", h, f, m, _)), _ = null;
  }, this.spliceCellsMeta = function(h) {
    let f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    for (var m = arguments.length, T = new Array(m > 2 ? m - 2 : 0), O = 2; O < m; O++)
      T[O - 2] = arguments[O];
    if (T.length > 0 && !Array.isArray(T[0]))
      throw new Error("The 3rd argument (cellMetaRows) has to be passed as an array of cell meta objects array.");
    f > 0 && I.removeRow(this.toPhysicalRow(h), f), T.length > 0 && H(T.reverse(), (_) => {
      I.createRow(this.toPhysicalRow(h)), H(_, (Y, U) => this.setCellMetaObject(h, U, Y));
    }), s.render();
  }, this.setCellMetaObject = function(h, f, m) {
    typeof m == "object" && Ze(m, (T, O) => {
      this.setCellMeta(h, f, O, T);
    });
  }, this.setCellMeta = function(h, f, m, T) {
    if (s.runHooks("beforeSetCellMeta", h, f, m, T) === !1)
      return;
    let _ = h, Y = f;
    h < this.countRows() && (_ = this.toPhysicalRow(h)), f < this.countCols() && (Y = this.toPhysicalColumn(f)), I.setCellMeta(_, Y, m, T), s.runHooks("afterSetCellMeta", h, f, m, T);
  }, this.getCellsMeta = function() {
    return I.getCellsMeta();
  }, this.getCellMeta = function(h, f) {
    let m = this.toPhysicalRow(h), T = this.toPhysicalColumn(f);
    return m === null && (m = h), T === null && (T = f), I.getCellMeta(m, T, {
      visualRow: h,
      visualColumn: f
    });
  }, this.getCellMetaAtRow = function(h) {
    return I.getCellsMetaAtRow(h);
  }, this.isColumnModificationAllowed = function() {
    return !(s.dataType === "object" || M.columns);
  }, this.getCellRenderer = function(h, f) {
    const m = typeof h == "number" ? s.getCellMeta(h, f).renderer : h.renderer;
    return typeof m == "string" ? Lf(m) : It(m) ? Lf("text") : m;
  }, this.getCellEditor = function(h, f) {
    const m = typeof h == "number" ? s.getCellMeta(h, f).editor : h.editor;
    return typeof m == "string" ? Hf(m) : It(m) ? Hf("text") : m;
  }, this.getCellValidator = function(h, f) {
    const m = typeof h == "number" ? s.getCellMeta(h, f).validator : h.validator;
    return typeof m == "string" ? AS(m) : m;
  }, this.validateCells = function(h) {
    this._validateCells(h);
  }, this.validateRows = function(h, f) {
    if (!Array.isArray(h))
      throw new Error("validateRows parameter `rows` must be an array");
    this._validateCells(f, h);
  }, this.validateColumns = function(h, f) {
    if (!Array.isArray(h))
      throw new Error("validateColumns parameter `columns` must be an array");
    this._validateCells(f, void 0, h);
  }, this._validateCells = function(h, f, m) {
    const T = new b();
    h && (T.onQueueEmpty = h);
    let O = s.countRows() - 1;
    for (; O >= 0; ) {
      if (f !== void 0 && f.indexOf(O) === -1) {
        O -= 1;
        continue;
      }
      let _ = s.countCols() - 1;
      for (; _ >= 0; ) {
        if (m !== void 0 && m.indexOf(_) === -1) {
          _ -= 1;
          continue;
        }
        T.addValidatorToQueue(), s.validateCell(s.getDataAtCell(O, _), s.getCellMeta(O, _), (Y) => {
          if (typeof Y != "boolean")
            throw new Error("Validation error: result is not boolean");
          Y === !1 && (T.valid = !1), T.removeValidatorFormQueue();
        }, "validateCells"), _ -= 1;
      }
      O -= 1;
    }
    T.checkIfQueueIsEmpty();
  }, this.getRowHeader = function(h) {
    let f = M.rowHeaders, m = h;
    return m !== void 0 && (m = s.runHooks("modifyRowHeader", m)), m === void 0 ? (f = [], xe(s.countRows() - 1, (T) => {
      f.push(s.getRowHeader(T));
    })) : Array.isArray(f) && f[m] !== void 0 ? f = f[m] : At(f) ? f = f(m) : f && typeof f != "string" && typeof f != "number" && (f = m + 1), f;
  }, this.hasRowHeaders = function() {
    return !!M.rowHeaders;
  }, this.hasColHeaders = function() {
    if (M.colHeaders !== void 0 && M.colHeaders !== null)
      return !!M.colHeaders;
    for (let h = 0, f = s.countCols(); h < f; h++)
      if (s.getColHeader(h))
        return !0;
    return !1;
  }, this.getColHeader = function(h) {
    let f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;
    const m = s.runHooks("modifyColHeader", h);
    if (m === void 0) {
      const U = [], ie = s.countCols();
      for (let se = 0; se < ie; se++)
        U.push(s.getColHeader(se));
      return U;
    }
    let T = M.colHeaders;
    const O = function(U) {
      const ie = [], se = s.countCols();
      let oe = 0;
      for (; oe < se; oe++)
        At(M.columns) && M.columns(oe) && ie.push(oe);
      return ie[U];
    }, _ = s.toPhysicalColumn(m), Y = O(_);
    return M.colHeaders === !1 ? T = null : M.columns && At(M.columns) && M.columns(Y) && M.columns(Y).title ? T = M.columns(Y).title : M.columns && M.columns[_] && M.columns[_].title ? T = M.columns[_].title : Array.isArray(M.colHeaders) && M.colHeaders[_] !== void 0 ? T = M.colHeaders[_] : At(M.colHeaders) ? T = M.colHeaders(_) : M.colHeaders && typeof M.colHeaders != "string" && typeof M.colHeaders != "number" && (T = Gg(m)), T = s.runHooks("modifyColumnHeaderValue", T, h, f), T;
  }, this._getColWidthFromSettings = function(h) {
    let f;
    if (h >= 0 && (f = s.getCellMeta(0, h).width), (f === void 0 || f === M.width) && (f = M.colWidths), f != null) {
      switch (typeof f) {
        case "object":
          f = f[h];
          break;
        case "function":
          f = f(h);
          break;
      }
      typeof f == "string" && (f = parseInt(f, 10));
    }
    return f;
  }, this.getColWidth = function(h) {
    let f = s._getColWidthFromSettings(h);
    return f = s.runHooks("modifyColWidth", f, h), f === void 0 && (f = PS.DEFAULT_WIDTH), f;
  }, this._getRowHeightFromSettings = function(h) {
    let f = M.rowHeights;
    if (f != null) {
      switch (typeof f) {
        case "object":
          f = f[h];
          break;
        case "function":
          f = f(h);
          break;
      }
      typeof f == "string" && (f = parseInt(f, 10));
    }
    return f;
  }, this.getRowHeight = function(h) {
    let f = s._getRowHeightFromSettings(h);
    return f = s.runHooks("modifyRowHeight", f, h), f;
  }, this.countSourceRows = function() {
    return u.countRows();
  }, this.countSourceCols = function() {
    return u.countFirstRowKeys();
  }, this.countRows = function() {
    return l.getLength();
  }, this.countCols = function() {
    const h = M.maxCols, f = this.columnIndexMapper.getNotTrimmedIndexesLength();
    return Math.min(h, f);
  }, this.countRenderedRows = function() {
    return s.view._wt.drawn ? s.view._wt.wtTable.getRenderedRowsCount() : -1;
  }, this.countVisibleRows = function() {
    return s.view._wt.drawn ? s.view._wt.wtTable.getVisibleRowsCount() : -1;
  }, this.countRenderedCols = function() {
    return s.view._wt.drawn ? s.view._wt.wtTable.getRenderedColumnsCount() : -1;
  }, this.countVisibleCols = function() {
    return s.view._wt.drawn ? s.view._wt.wtTable.getVisibleColumnsCount() : -1;
  }, this.countRowHeaders = function() {
    return this.view.getRowHeadersCount();
  }, this.countColHeaders = function() {
    return this.view.getColumnHeadersCount();
  }, this.countEmptyRows = function() {
    let h = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, f = 0;
    return Nf(s.countRows() - 1, (m) => {
      if (s.isEmptyRow(m))
        f += 1;
      else if (h === !0)
        return !1;
    }), f;
  }, this.countEmptyCols = function() {
    let h = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, f = 0;
    return Nf(s.countCols() - 1, (m) => {
      if (s.isEmptyCol(m))
        f += 1;
      else if (h === !0)
        return !1;
    }), f;
  }, this.isEmptyRow = function(h) {
    return M.isEmptyRow.call(s, h);
  }, this.isEmptyCol = function(h) {
    return M.isEmptyCol.call(s, h);
  }, this.selectCell = function(h, f, m, T) {
    let O = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0, _ = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : !0;
    return It(h) || It(f) ? !1 : this.selectCells([[h, f, m, T]], O, _);
  }, this.selectCells = function() {
    let h = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [[]], f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, m = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    f === !1 && (o = !0);
    const T = q.selectCells(h);
    return T && m && s.listen(), o = !1, T;
  }, this.selectColumns = function(h) {
    let f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : h, m = arguments.length > 2 ? arguments[2] : void 0;
    return q.selectColumns(h, f, m);
  }, this.selectRows = function(h) {
    let f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : h, m = arguments.length > 2 ? arguments[2] : void 0;
    return q.selectRows(h, f, m);
  }, this.deselectCell = function() {
    q.deselect();
  }, this.selectAll = function() {
    let h = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0, f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : h, m = arguments.length > 2 ? arguments[2] : void 0;
    o = !0, q.selectAll(h, f, m), o = !1;
  };
  const B = (h, f) => h.getNearestNotHiddenIndex(f, 1, !0);
  this.scrollViewportTo = function(h) {
    var f;
    if (typeof h == "number") {
      var m;
      h = {
        row: arguments[0],
        col: arguments[1],
        verticalSnap: arguments[2] ? "bottom" : "top",
        horizontalSnap: arguments[3] ? "end" : "start",
        considerHiddenIndexes: (m = arguments[4]) !== null && m !== void 0 ? m : !0
      };
    }
    const {
      row: T,
      col: O,
      verticalSnap: _,
      horizontalSnap: Y,
      considerHiddenIndexes: U
    } = (f = h) !== null && f !== void 0 ? f : {};
    let ie, se, oe, de;
    _ !== void 0 && (ie = _ === "top", se = !ie), Y !== void 0 && (oe = Y === "start", de = !oe);
    let Ce = T, we = O;
    if (U === void 0 || U) {
      const ye = Number.isInteger(T) && T >= 0, $e = Number.isInteger(O) && O >= 0, Ae = ye ? B(this.rowIndexMapper, T) : void 0, Fe = $e ? B(this.columnIndexMapper, O) : void 0;
      if (Ae === null || Fe === null)
        return !1;
      Ce = ye ? s.rowIndexMapper.getRenderableFromVisualIndex(Ae) : T, we = $e ? s.columnIndexMapper.getRenderableFromVisualIndex(Fe) : O;
    }
    const pe = Number.isInteger(Ce), ee = Number.isInteger(we);
    return pe && Ce >= 0 && ee && we >= 0 ? s.view.scrollViewport(s._createCellCoords(Ce, we), ie, de, se, oe) : pe && Ce >= 0 && (ee && we < 0 || !ee) ? s.view.scrollViewportVertically(Ce, ie, se) : ee && we >= 0 && (pe && Ce < 0 || !pe) ? s.view.scrollViewportHorizontally(we, de, oe) : !1;
  }, this.scrollToFocusedCell = function() {
    let h = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : () => {
    };
    if (!this.selection.isSelected())
      return;
    this.addHookOnce("afterScroll", h);
    const {
      highlight: f
    } = this.getSelectedRangeLast();
    this.scrollViewportTo(f.toObject()) ? this.view.render() : (this.removeHook("afterScroll", h), this._registerImmediate(() => h()));
  }, this.destroy = function() {
    if (s._clearTimeouts(), s._clearImmediates(), s.view && s.view.destroy(), u && u.destroy(), u = null, this.getShortcutManager().destroy(), I.clearCache(), Tp.delete(this.guid), ef(s)) {
      const h = this.rootDocument.querySelector(".hot-display-license-info");
      h && h.parentNode.removeChild(h);
    }
    vi(s.rootElement), a.destroy(), d && d.destroy(), s.batchExecution(() => {
      s.rowIndexMapper.unregisterAll(), s.columnIndexMapper.unregisterAll(), $.getItems().forEach((h) => {
        let [, f] = h;
        f.destroy();
      }), $.clear(), s.runHooks("afterDestroy");
    }, !0), _e.getSingleton().destroy(s), Ze(s, (h, f, m) => {
      At(h) ? m[f] = z(f) : f !== "guid" && (m[f] = null);
    }), s.isDestroyed = !0, l && l.destroy(), l = null, c = null, q = null, d = null, s = null;
  };
  function z(h) {
    return () => {
      throw new Error(`The "${h}" method cannot be called because this Handsontable instance has been destroyed`);
    };
  }
  this.getActiveEditor = function() {
    return d.getActiveEditor();
  }, this.getPlugin = function(h) {
    const f = Fn(h);
    return f === "UndoRedo" ? this.undoRedo : $.getItem(f);
  }, this.getPluginName = function(h) {
    return h === this.undoRedo ? this.undoRedo.constructor.PLUGIN_KEY : $.getId(h);
  }, this.getInstance = function() {
    return s;
  }, this.addHook = function(h, f) {
    _e.getSingleton().add(h, f, s);
  }, this.hasHook = function(h) {
    return _e.getSingleton().has(h, s) || _e.getSingleton().has(h);
  }, this.addHookOnce = function(h, f) {
    _e.getSingleton().once(h, f, s);
  }, this.removeHook = function(h, f) {
    _e.getSingleton().remove(h, f, s);
  }, this.runHooks = function(h, f, m, T, O, _, Y) {
    return _e.getSingleton().run(s, h, f, m, T, O, _, Y);
  }, this.getTranslatedPhrase = function(h, f) {
    return Ax(M.language, h, f);
  }, this.toHTML = () => DC(this), this.toTableElement = () => {
    const h = this.rootDocument.createElement("div");
    return h.insertAdjacentHTML("afterbegin", DC(this)), h.firstElementChild;
  }, this.timeouts = [], this._registerTimeout = function(h) {
    let f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, m = h;
    typeof m == "function" && (m = setTimeout(m, f)), this.timeouts.push(m);
  }, this._clearTimeouts = function() {
    H(this.timeouts, (h) => {
      clearTimeout(h);
    });
  }, this.immediates = [], this._registerImmediate = function(h) {
    this.immediates.push(setImmediate(h));
  }, this._clearImmediates = function() {
    H(this.immediates, (h) => {
      clearImmediate(h);
    });
  }, this._refreshBorders = function() {
    let h = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    d.destroyEditor(h), s.view.render(), f && q.isSelected() && d.prepareEditor();
  }, this._getEditorManager = function() {
    return d;
  }, this.isRtl = function() {
    return s.rootWindow.getComputedStyle(s.rootElement).direction === "rtl";
  }, this.isLtr = function() {
    return !s.isRtl();
  }, this.getDirectionFactor = function() {
    return s.isLtr() ? 1 : -1;
  };
  const w = u6({
    handleEvent() {
      return s.isListening();
    },
    beforeKeyDown: (h) => this.runHooks("beforeKeyDown", h),
    afterKeyDown: (h) => {
      this.isDestroyed || s.runHooks("afterDocumentKeyDown", h);
    },
    ownerWindow: this.rootWindow
  });
  this.addHook("beforeOnCellMouseDown", (h) => {
    h.ctrlKey === !1 && h.metaKey === !1 && w.releasePressedKeys();
  }), this.getShortcutManager = function() {
    return w;
  }, this.getFocusManager = function() {
    return g;
  }, OS().forEach((h) => {
    const f = nh(h);
    $.addItem(h, new f(this));
  }), e6(s), w.setActiveContextName("grid"), _e.getSingleton().run(s, "construct");
}
const c6 = "hooksRefRegisterer", Kx = {
  /**
   * Internal hooks storage.
   */
  _hooksStorage: /* @__PURE__ */ Object.create(null),
  /**
   * Add hook to the collection.
   *
   * @param {string} key The hook name.
   * @param {Function} callback The hook callback.
   * @returns {object}
   */
  addHook(t, e) {
    return this._hooksStorage[t] || (this._hooksStorage[t] = []), this.hot.addHook(t, e), this._hooksStorage[t].push(e), this;
  },
  /**
   * Remove all hooks listeners by hook name.
   *
   * @param {string} key The hook name.
   */
  removeHooksByKey(t) {
    H(this._hooksStorage[t] || [], (e) => {
      this.hot.removeHook(t, e);
    });
  },
  /**
   * Clear all added hooks.
   */
  clearHooks() {
    Ze(this._hooksStorage, (t, e) => this.removeHooksByKey(e)), this._hooksStorage = {};
  }
};
Ji(Kx, "MIXIN_NAME", c6, {
  writable: !1,
  enumerable: !1
});
const h6 = Kx;
function ti(t, e, n) {
  return e = d6(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function d6(t) {
  var e = f6(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function f6(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const g6 = "base", fn = Object.freeze({
  VIRGIN: "STATE_VIRGIN",
  // before editing
  EDITING: "STATE_EDITING",
  WAITING: "STATE_WAITING",
  // waiting for async validation
  FINISHED: "STATE_FINISHED"
}), qC = "baseEditor";
class Ql {
  static get EDITOR_TYPE() {
    return g6;
  }
  /**
   * A reference to the source instance of the Handsontable.
   *
   * @type {Handsontable}
   */
  /**
   * @param {Handsontable} hotInstance A reference to the source instance of the Handsontable.
   */
  constructor(e) {
    ti(this, "hot", void 0), ti(this, "state", fn.VIRGIN), ti(this, "_opened", !1), ti(this, "_fullEditMode", !1), ti(this, "_closeCallback", null), ti(this, "TD", null), ti(this, "row", null), ti(this, "col", null), ti(this, "prop", null), ti(this, "originalValue", null), ti(this, "cellProperties", null), this.hot = e, this.init();
  }
  /**
   * Fires callback after closing editor.
   *
   * @private
   * @param {boolean} result The editor value.
   */
  _fireCallbacks(e) {
    this._closeCallback && (this._closeCallback(e), this._closeCallback = null);
  }
  /**
   * Initializes an editor's intance.
   */
  init() {
  }
  /**
   * Required method to get current value from editable element.
   */
  getValue() {
    throw Error("Editor getValue() method unimplemented");
  }
  /**
   * Required method to set new value into editable element.
   */
  setValue() {
    throw Error("Editor setValue() method unimplemented");
  }
  /**
   * Required method to open editor.
   */
  open() {
    throw Error("Editor open() method unimplemented");
  }
  /**
   * Required method to close editor.
   */
  close() {
    throw Error("Editor close() method unimplemented");
  }
  /**
   * Prepares editor's meta data.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, n, r, i, o, s) {
    this.TD = i, this.row = e, this.col = n, this.prop = r, this.originalValue = o, this.cellProperties = s, this.state = fn.VIRGIN;
  }
  /**
   * Fallback method to provide extendable editors in ES5.
   *
   * @returns {Function}
   */
  extend() {
    return class extends this.constructor {
    };
  }
  /**
   * Saves value from editor into data storage.
   *
   * @param {*} value The editor value.
   * @param {boolean} ctrlDown If `true`, applies value to each cell in the last selected range.
   */
  saveValue(e, n) {
    let r, i, o, s;
    if (n) {
      const d = this.hot.getSelectedLast();
      r = Math.max(Math.min(d[0], d[2]), 0), i = Math.max(Math.min(d[1], d[3]), 0), o = Math.max(d[0], d[2]), s = Math.max(d[1], d[3]);
    } else
      [r, i, o, s] = [this.row, this.col, null, null];
    const a = this.hot.runHooks("modifyGetCellCoords", r, i);
    Array.isArray(a) && ([r, i] = a);
    const u = this.hot.getShortcutManager().getContext("editor"), c = {
      runOnlyIf: () => Re(this.hot.getSelected()),
      group: qC
    };
    this.isInFullEditMode() && u.addShortcuts([{
      keys: [["ArrowUp"]],
      callback: () => {
        this.hot.selection.transformStart(-1, 0);
      }
    }, {
      keys: [["ArrowDown"]],
      callback: () => {
        this.hot.selection.transformStart(1, 0);
      }
    }, {
      keys: [["ArrowLeft"]],
      callback: () => {
        this.hot.selection.transformStart(0, -1 * this.hot.getDirectionFactor());
      }
    }, {
      keys: [["ArrowRight"]],
      callback: () => {
        this.hot.selection.transformStart(0, this.hot.getDirectionFactor());
      }
    }], c), this.hot.populateFromArray(r, i, e, o, s, "edit");
  }
  /**
   * Begins editing on a highlighted cell and hides fillHandle corner if was present.
   *
   * @param {*} newInitialValue The initial editor value.
   * @param {Event} event The keyboard event object.
   */
  beginEditing(e, n) {
    if (this.state !== fn.VIRGIN)
      return;
    const r = this.hot, i = r.rowIndexMapper.getRenderableFromVisualIndex(this.row), o = r.columnIndexMapper.getRenderableFromVisualIndex(this.col);
    if (r.view.scrollViewport(r._createCellCoords(i, o)), this.state = fn.EDITING, this.isInFullEditMode()) {
      const s = typeof e == "string" ? e : Zt(this.originalValue);
      this.setValue(s);
    }
    this.open(n), this._opened = !0, this.focus(), r.view.render(), r.runHooks("afterBeginEditing", this.row, this.col);
  }
  /**
   * Finishes editing and start saving or restoring process for editing cell or last selected range.
   *
   * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
   * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
   * @param {Function} callback The callback function, fired after editor closing.
   */
  finishEditing(e, n, r) {
    let i;
    if (r) {
      const a = this._closeCallback;
      this._closeCallback = (l) => {
        a && a(l), r(l), this.hot.view.render();
      };
    }
    if (this.isWaiting())
      return;
    const s = this.hot.getShortcutManager().getContext("editor");
    if (s.removeShortcutsByGroup(qC), s.removeShortcutsByGroup(Bg), this.state === fn.VIRGIN) {
      this.hot._registerTimeout(() => {
        this._fireCallbacks(!0);
      });
      return;
    }
    if (this.state === fn.EDITING) {
      if (e) {
        this.cancelChanges(), this.hot.view.render();
        return;
      }
      const a = this.getValue();
      this.cellProperties.trimWhitespace ? i = [[typeof a == "string" ? String.prototype.trim.call(a || "") : a]] : i = [[a]], this.state = fn.WAITING, this.saveValue(i, n), this.hot.getCellValidator(this.cellProperties) ? this.hot.addHookOnce("postAfterValidate", (l) => {
        this.state = fn.FINISHED, this.discardEditor(l);
      }) : (this.state = fn.FINISHED, this.discardEditor(!0));
    }
  }
  /**
   * Finishes editing without singout saving value.
   */
  cancelChanges() {
    this.state = fn.FINISHED, this.discardEditor();
  }
  /**
   * Verifies result of validation or closes editor if user's cancelled changes.
   *
   * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,
   *                                   then an editor won't be closed until validation is passed.
   */
  discardEditor(e) {
    this.state === fn.FINISHED && (e === !1 && this.cellProperties.allowInvalid !== !0 ? (this.hot.selectCell(this.row, this.col), this.focus(), this.state = fn.EDITING, this._fireCallbacks(!1)) : (this.close(), this._opened = !1, this._fullEditMode = !1, this.state = fn.VIRGIN, this._fireCallbacks(!0), this.hot.getShortcutManager().setActiveContextName("grid")));
  }
  /**
   * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated
   * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.
   */
  enableFullEditMode() {
    this._fullEditMode = !0;
  }
  /**
   * Checks if editor is in full edit mode.
   *
   * @returns {boolean}
   */
  isInFullEditMode() {
    return this._fullEditMode;
  }
  /**
   * Returns information whether the editor is open.
   *
   * @returns {boolean}
   */
  isOpened() {
    return this._opened;
  }
  /**
   * Returns information whether the editor is waiting, eg.: for async validation.
   *
   * @returns {boolean}
   */
  isWaiting() {
    return this.state === fn.WAITING;
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Gets the object that provides information about the edited cell size and its position
   * relative to the table viewport.
   *
   * The rectangle has six integer properties:
   *  - `top` The top position relative to the table viewport
   *  - `start` The left (or right in RTL) position relative to the table viewport
   *  - `width` The cell's current width;
   *  - `maxWidth` The maximum cell's width after which the editor goes out of the table viewport
   *  - `height` The cell's current height;
   *  - `maxHeight` The maximum cell's height after which the editor goes out of the table viewport
   *
   * @returns {{top: number, start: number, width: number, maxWidth: number, height: number, maxHeight: number} | undefined}
   */
  getEditedCellRect() {
    var e;
    const n = this.getEditedCell();
    if (!n)
      return;
    const {
      wtOverlays: r,
      wtViewport: i
    } = this.hot.view._wt, o = this.hot.rootWindow, s = an(n), a = yt(n), l = an(this.hot.rootElement), u = yt(this.hot.rootElement), c = r.topOverlay.holder, d = r.inlineStartOverlay.holder, g = c !== o ? c.scrollTop : 0, p = d !== o ? d.scrollLeft : 0, C = o.innerWidth - l.left - u, {
      wtTable: E
    } = (e = r.getParentOverlay(n)) !== null && e !== void 0 ? e : this.hot.view._wt, I = E.name, M = ["master", "inline_start"].includes(I) ? g : 0, y = ["master", "top", "bottom"].includes(I) ? p : 0, $ = s.top === l.top ? 0 : 1;
    let X = s.top - l.top - $ - M, G = 0;
    this.hot.isRtl() ? G = o.innerWidth - s.left - a - C - 1 + y : G = s.left - l.left - 1 - y, ["top", "top_inline_start_corner"].includes(I) && (X += r.topOverlay.getOverlayOffset()), ["inline_start", "top_inline_start_corner"].includes(I) && (G += Math.abs(r.inlineStartOverlay.getOverlayOffset()));
    const q = this.hot.hasColHeaders(), re = this.hot.rowIndexMapper.getRenderableFromVisualIndex(this.row), v = this.hot.columnIndexMapper.getRenderableFromVisualIndex(this.col), b = this.hot.rowIndexMapper.getRenderableIndexesLength() - this.hot.view._wt.getSetting("fixedRowsBottom");
    (q && re <= 0 || re === b) && (X += 1), v <= 0 && (G += 1);
    const L = i.rowsRenderCalculator.startPosition, P = i.columnsRenderCalculator.startPosition, x = Math.abs(r.inlineStartOverlay.getScrollPosition()), W = r.topOverlay.getScrollPosition(), D = wn(this.hot.rootDocument);
    let B = n.offsetTop;
    if (["inline_start", "master"].includes(I) && (B += L - W), ["bottom", "bottom_inline_start_corner"].includes(I)) {
      const {
        wtViewport: se,
        wtTable: oe
      } = r.bottomOverlay.clone;
      B += se.getWorkspaceHeight() - oe.getHeight() - D;
    }
    let z = n.offsetLeft;
    this.hot.isRtl() ? (z >= 0 ? z = E.getWidth() - n.offsetLeft : z = Math.abs(z), z += P - x - a) : ["top", "master", "bottom"].includes(I) && (z += P - x);
    const w = No(this.TD, this.hot.rootWindow), h = this.hot.isRtl() ? "borderRightWidth" : "borderLeftWidth", f = parseInt(w[h], 10) > 0 ? 0 : 1, m = parseInt(w.borderTopWidth, 10) > 0 ? 0 : 1, T = yt(n) + f, O = Bt(n) + m, _ = rP(c) ? D : 0, Y = iP(d) ? D : 0, U = this.hot.view.maximumVisibleElementWidth(z) - _ + f, ie = Math.max(this.hot.view.maximumVisibleElementHeight(B) - Y + m, 23);
    return {
      top: X,
      start: G,
      height: O,
      maxHeight: ie,
      width: T,
      maxWidth: U
    };
  }
  /* eslint-enable jsdoc/require-description-complete-sentence */
  /**
   * Gets className of the edited cell if exist.
   *
   * @returns {string}
   */
  getEditedCellsLayerClass() {
    switch (this.checkEditorSection()) {
      case "inline-start":
        return "ht_clone_left ht_clone_inline_start";
      case "bottom":
        return "ht_clone_bottom";
      case "bottom-inline-start-corner":
        return "ht_clone_bottom_left_corner ht_clone_bottom_inline_start_corner";
      case "top":
        return "ht_clone_top";
      case "top-inline-start-corner":
        return "ht_clone_top_left_corner ht_clone_top_inline_start_corner";
      default:
        return "ht_clone_master";
    }
  }
  /**
   * Gets HTMLTableCellElement of the edited cell if exist.
   *
   * @returns {HTMLTableCellElement|null}
   */
  getEditedCell() {
    return this.hot.getCell(this.row, this.col, !0);
  }
  /**
   * Returns name of the overlay, where editor is placed.
   *
   * @private
   * @returns {string}
   */
  checkEditorSection() {
    const e = this.hot.countRows();
    let n = "";
    return this.row < this.hot.getSettings().fixedRowsTop ? this.col < this.hot.getSettings().fixedColumnsStart ? n = "top-inline-start-corner" : n = "top" : this.hot.getSettings().fixedRowsBottom && this.row >= e - this.hot.getSettings().fixedRowsBottom ? this.col < this.hot.getSettings().fixedColumnsStart ? n = "bottom-inline-start-corner" : n = "bottom" : this.col < this.hot.getSettings().fixedColumnsStart && (n = "inline-start"), n;
  }
}
_t(Ql, h6);
function DE(t, e, n) {
  t.addEventListener(e, n, !1);
}
function NE(t, e, n) {
  t.removeEventListener(e, n, !1);
}
function LE(t) {
  return t.ownerDocument.defaultView.getComputedStyle(t);
}
function m6(t) {
  const e = {
    minHeight: 200,
    maxHeight: 300,
    minWidth: 100,
    maxWidth: 300
  }, n = t.body, r = t.createTextNode(""), i = t.createElement("span");
  let o;
  function s() {
    r.textContent = o.value, i.style.position = "absolute", i.style.fontSize = LE(o).fontSize, i.style.fontFamily = LE(o).fontFamily, i.style.whiteSpace = "pre", n.appendChild(i);
    const c = i.clientWidth + 2;
    n.removeChild(i);
    const d = o.style;
    d.height = `${e.minHeight}px`, e.minWidth > c ? d.width = `${e.minWidth}px` : c > e.maxWidth ? d.width = `${e.maxWidth}px` : d.width = `${c}px`;
    const g = o.scrollHeight ? o.scrollHeight - 1 : 0;
    e.minHeight > g ? d.height = `${e.minHeight}px` : e.maxHeight < g ? (d.height = `${e.maxHeight}px`, d.overflowY = "visible") : d.height = `${g}px`;
  }
  function a() {
    t.defaultView.setTimeout(s, 0);
  }
  function l(c) {
    if (c && c.minHeight)
      if (c.minHeight === "inherit")
        e.minHeight = o.clientHeight;
      else {
        const d = parseInt(c.minHeight, 10);
        isNaN(d) || (e.minHeight = d);
      }
    if (c && c.maxHeight)
      if (c.maxHeight === "inherit")
        e.maxHeight = o.clientHeight;
      else {
        const d = parseInt(c.maxHeight, 10);
        isNaN(d) || (e.maxHeight = d);
      }
    if (c && c.minWidth)
      if (c.minWidth === "inherit")
        e.minWidth = o.clientWidth;
      else {
        const d = parseInt(c.minWidth, 10);
        isNaN(d) || (e.minWidth = d);
      }
    if (c && c.maxWidth)
      if (c.maxWidth === "inherit")
        e.maxWidth = o.clientWidth;
      else {
        const d = parseInt(c.maxWidth, 10);
        isNaN(d) || (e.maxWidth = d);
      }
    i.firstChild || (i.className = "autoResize", i.style.display = "inline-block", i.appendChild(r));
  }
  function u(c, d) {
    let g = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    o = c, l(d), o.nodeName === "TEXTAREA" && (o.style.resize = "none", o.style.overflowY = "", o.style.height = `${e.minHeight}px`, o.style.minWidth = `${e.minWidth}px`, o.style.maxWidth = `${e.maxWidth}px`, o.style.overflowY = "hidden"), g && (DE(o, "input", s), DE(o, "keydown", a)), s();
  }
  return {
    init: u,
    resize: s,
    unObserve() {
      NE(o, "input", s), NE(o, "keydown", a);
    }
  };
}
function $E(t, e) {
  const n = gS(e), r = e.value.split(`
`);
  let i = n, o = 0;
  for (let s = 0; s < r.length; s++) {
    const a = r[s];
    s !== 0 && (o += r[s - 1].length + 1);
    const l = o + a.length;
    if (t === "home" ? i = o : t === "end" && (i = l), n <= l)
      break;
  }
  Qc(e, i);
}
function Ws(t, e, n) {
  return e = p6(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function p6(t) {
  var e = w6(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function w6(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const C6 = "ht_editor_visible", qh = "ht_editor_hidden", kE = "textEditor", v6 = "text";
class Ha extends Ql {
  static get EDITOR_TYPE() {
    return v6;
  }
  /**
   * Instance of {@link EventManager}.
   *
   * @private
   * @type {EventManager}
   */
  /**
   * @param {Core} hotInstance The Handsontable instance.
   */
  constructor(e) {
    super(e), Ws(this, "eventManager", new _r(this)), Ws(this, "autoResize", m6(this.hot.rootDocument)), Ws(this, "TEXTAREA", void 0), Ws(this, "textareaStyle", void 0), Ws(this, "TEXTAREA_PARENT", void 0), Ws(this, "textareaParentStyle", void 0), Ws(this, "layerClass", void 0), this.eventManager = new _r(this), this.createElements(), this.bindEvents(), this.hot.addHookOnce("afterDestroy", () => this.destroy());
  }
  /**
   * Gets current value from editable element.
   *
   * @returns {number}
   */
  getValue() {
    return this.TEXTAREA.value;
  }
  /**
   * Sets new value into editable element.
   *
   * @param {*} newValue The editor value.
   */
  setValue(e) {
    this.TEXTAREA.value = e;
  }
  /**
   * Opens the editor and adjust its size.
   */
  open() {
    this.refreshDimensions(), this.showEditableElement(), this.hot.getShortcutManager().setActiveContextName("editor"), this.registerShortcuts();
  }
  /**
   * Closes the editor.
   */
  close() {
    this.autoResize.unObserve(), qI(this.hot.rootDocument.activeElement, this.hot.rootElement) && this.hot.listen(), this.hideEditableElement(), this.unregisterShortcuts();
  }
  /**
   * Prepares editor's meta data.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, n, r, i, o, s) {
    const a = this.state;
    if (super.prepare(e, n, r, i, o, s), !s.readOnly) {
      this.refreshDimensions(!0);
      const {
        allowInvalid: l
      } = s;
      l && (this.TEXTAREA.value = ""), a !== fn.FINISHED && this.hideEditableElement();
    }
  }
  /**
   * Begins editing on a highlighted cell and hides fillHandle corner if was present.
   *
   * @param {*} newInitialValue The editor initial value.
   * @param {Event} event The keyboard event object.
   */
  beginEditing(e, n) {
    this.state === fn.VIRGIN && (this.TEXTAREA.value = "", super.beginEditing(e, n));
  }
  /**
   * Sets focus state on the select element.
   */
  focus() {
    this.TEXTAREA.select(), Qc(this.TEXTAREA, this.TEXTAREA.value.length);
  }
  /**
   * Creates an editor's elements and adds necessary CSS classnames.
   */
  createElements() {
    const {
      rootDocument: e
    } = this.hot;
    this.TEXTAREA = e.createElement("TEXTAREA"), Ne(this.TEXTAREA, [["data-hot-input", ""], Kl(-1)]), this.hot.getSettings().ariaTags && Ne(this.TEXTAREA, [Vo()]), ce(this.TEXTAREA, "handsontableInput"), this.textareaStyle = this.TEXTAREA.style, this.textareaStyle.width = 0, this.textareaStyle.height = 0, this.textareaStyle.overflowY = "visible", this.TEXTAREA_PARENT = e.createElement("DIV"), ce(this.TEXTAREA_PARENT, "handsontableInputHolder"), Ve(this.TEXTAREA_PARENT, this.layerClass) && Ye(this.TEXTAREA_PARENT, this.layerClass), ce(this.TEXTAREA_PARENT, qh), this.textareaParentStyle = this.TEXTAREA_PARENT.style, this.TEXTAREA_PARENT.appendChild(this.TEXTAREA), this.hot.rootElement.appendChild(this.TEXTAREA_PARENT);
  }
  /**
   * Moves an editable element out of the viewport, but element must be able to hold focus for IME support.
   *
   * @private
   */
  hideEditableElement() {
    CP() && (this.textareaStyle.textIndent = "-99999px"), this.textareaStyle.overflowY = "visible", this.textareaParentStyle.opacity = "0", this.textareaParentStyle.height = "1px", Ye(this.TEXTAREA_PARENT, this.layerClass), ce(this.TEXTAREA_PARENT, qh);
  }
  /**
   * Resets an editable element position.
   *
   * @private
   */
  showEditableElement() {
    this.textareaParentStyle.height = "", this.textareaParentStyle.overflow = "", this.textareaParentStyle.position = "", this.textareaParentStyle[this.hot.isRtl() ? "left" : "right"] = "auto", this.textareaParentStyle.opacity = "1", this.textareaStyle.textIndent = "", this.textareaStyle.overflowY = "hidden";
    const e = this.TEXTAREA_PARENT.childNodes;
    let n = !1;
    xe(e.length - 1, (r) => {
      const i = e[r];
      if (Ve(i, "handsontableEditor"))
        return n = !0, !1;
    }), Ve(this.TEXTAREA_PARENT, qh) && Ye(this.TEXTAREA_PARENT, qh), n ? (this.layerClass = C6, ce(this.TEXTAREA_PARENT, this.layerClass)) : (this.layerClass = this.getEditedCellsLayerClass(), ce(this.TEXTAREA_PARENT, this.layerClass));
  }
  /**
   * Refreshes editor's value using source data.
   *
   * @private
   */
  refreshValue() {
    const e = this.hot.toPhysicalRow(this.row), n = this.hot.getSourceDataAtCell(e, this.col);
    this.originalValue = n, this.setValue(n), this.refreshDimensions();
  }
  /**
   * Refreshes editor's size and position.
   *
   * @private
   * @param {boolean} force Indicates if the refreshing editor dimensions should be triggered.
   */
  refreshDimensions() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    if (this.state !== fn.EDITING && !e)
      return;
    if (this.TD = this.getEditedCell(), !this.TD) {
      e || this.close();
      return;
    }
    const {
      top: n,
      start: r,
      width: i,
      maxWidth: o,
      height: s,
      maxHeight: a
    } = this.getEditedCellRect();
    this.textareaParentStyle.top = `${n}px`, this.textareaParentStyle[this.hot.isRtl() ? "right" : "left"] = `${r}px`, this.showEditableElement();
    const l = No(this.TD, this.hot.rootWindow);
    this.TEXTAREA.style.fontSize = l.fontSize, this.TEXTAREA.style.fontFamily = l.fontFamily, this.TEXTAREA.style.backgroundColor = this.TD.style.backgroundColor;
    const u = No(this.TEXTAREA), c = parseInt(u.paddingLeft, 10) + parseInt(u.paddingRight, 10), d = parseInt(u.paddingTop, 10) + parseInt(u.paddingBottom, 10), g = i - c, p = s - d, C = o - c, E = a - d;
    this.autoResize.init(this.TEXTAREA, {
      minWidth: Math.min(g, C),
      minHeight: Math.min(p, E),
      // TEXTAREA should never be wider than visible part of the viewport (should not cover the scrollbar)
      maxWidth: C,
      maxHeight: E
    }, !0);
  }
  /**
   * Binds events and hooks.
   *
   * @private
   */
  bindEvents() {
    yS() && this.eventManager.addEventListener(this.TEXTAREA, "focusout", () => this.finishEditing(!1)), this.addHook("afterScrollHorizontally", () => this.refreshDimensions()), this.addHook("afterScrollVertically", () => this.refreshDimensions()), this.addHook("afterColumnResize", () => {
      this.refreshDimensions(), this.state === fn.EDITING && this.focus();
    }), this.addHook("afterRowResize", () => {
      this.refreshDimensions(), this.state === fn.EDITING && this.focus();
    });
  }
  /**
   * Ugly hack for autocompleteEditor.
   *
   * @private
   */
  allowKeyEventPropagation() {
  }
  /**
   * Destroys the internal event manager and clears attached hooks.
   *
   * @private
   */
  destroy() {
    this.eventManager.destroy(), this.clearHooks();
  }
  /**
   * Register shortcuts responsible for handling editor.
   *
   * @private
   */
  registerShortcuts() {
    const e = this.hot.getShortcutManager(), n = e.getContext("editor"), r = e.getContext("grid"), i = {
      runOnlyIf: () => Re(this.hot.getSelected()),
      group: kE
    }, o = () => {
      this.hot.rootDocument.execCommand("insertText", !1, `
`);
    };
    n.addShortcuts([{
      keys: [["Tab"], ["Shift", "Tab"], ["PageUp"], ["PageDown"]],
      forwardToContext: r,
      callback: () => {
      }
    }, {
      keys: [["Control", "Enter"]],
      callback: () => (o(), !1),
      runOnlyIf: (s) => !this.hot.selection.isMultiple() && // We trigger a data population for multiple selection.
      // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)
      !s.altKey
    }, {
      keys: [["Meta", "Enter"]],
      callback: () => (o(), !1),
      runOnlyIf: () => !this.hot.selection.isMultiple()
      // We trigger a data population for multiple selection.
    }, {
      keys: [["Alt", "Enter"]],
      callback: () => (o(), !1)
    }, {
      keys: [["Home"]],
      callback: (s, a) => {
        let [l] = a;
        $E(l, this.TEXTAREA);
      }
    }, {
      keys: [["End"]],
      callback: (s, a) => {
        let [l] = a;
        $E(l, this.TEXTAREA);
      }
    }], i);
  }
  /**
   * Unregister shortcuts responsible for handling editor.
   *
   * @private
   */
  unregisterShortcuts() {
    const n = this.hot.getShortcutManager().getContext("editor");
    n.removeShortcutsByGroup(Bg), n.removeShortcutsByGroup(kE), n.removeShortcutsByGroup(qC);
  }
}
const S6 = "base";
function sh(t, e, n, r, i, o, s) {
  const a = s.ariaTags, l = [], u = [], c = [], d = [];
  s.className && ce(e, s.className), s.readOnly ? (l.push(s.readOnlyCellClassName), a && d.push(w0())) : a && c.push(w0()[0]), s.valid === !1 && s.invalidCellClassName ? (l.push(s.invalidCellClassName), a && d.push(C0())) : (u.push(s.invalidCellClassName), a && c.push(C0()[0])), s.wordWrap === !1 && s.noWordWrapClassName && l.push(s.noWordWrapClassName), !o && s.placeholder && l.push(s.placeholderCellClassName), Ye(e, u), ce(e, l), Ia(e, c), Ne(e, d);
}
sh.RENDERER_TYPE = S6;
const y6 = "text";
function Go(t, e, n, r, i, o, s) {
  sh.apply(this, [t, e, n, r, i, o, s]);
  let a = o;
  if (!a && s.placeholder && (a = s.placeholder), a = Zt(a), s.trimWhitespace && (a = a.trim()), s.rendererTemplate) {
    vi(e);
    const l = t.rootDocument.createElement("TEMPLATE");
    l.setAttribute("bind", "{{}}"), l.innerHTML = s.rendererTemplate, HTMLTemplateElement.decorate(l), l.model = t.getSourceDataAtRow(n), e.appendChild(l);
  } else
    Ts(e, a);
}
Go.RENDERER_TYPE = y6;
const b6 = "text", Xx = {
  CELL_TYPE: b6,
  editor: Ha,
  renderer: Go
};
$r(Xx);
Be.editors = {
  BaseEditor: Ql
};
function Be(t, e) {
  const n = new jx(t, e || {}, qS);
  return n.init(), n;
}
Be.Core = function(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return new jx(t, e, qS);
};
Be.DefaultSettings = Wx();
Be.hooks = _e.getSingleton();
Be.CellCoords = kf;
Be.CellRange = DS;
Be.packageName = "handsontable";
Be.buildDate = "30/11/2023 10:10:40";
Be.version = "14.0.0";
Be.languages = {
  dictionaryKeys: VX,
  getLanguageDictionary: Ox,
  getLanguagesDictionaries: zX,
  registerLanguageDictionary: Mx,
  getTranslatedPhrase: Ax
};
const FE = "handsontableEditor", R6 = "handsontable";
class Pb extends Ha {
  static get EDITOR_TYPE() {
    return R6;
  }
  /**
   * Opens the editor and adjust its size.
   */
  open() {
    super.open(), this.htEditor && this.htEditor.destroy(), this.htContainer.style.display === "none" && (this.htContainer.style.display = ""), this.htEditor = new this.hot.constructor(this.htContainer, this.htOptions), this.htEditor.init(), this.htEditor.rootElement.style.display = "", this.cellProperties.strict ? this.htEditor.selectCell(0, 0) : this.htEditor.deselectCell(), Qc(this.TEXTAREA, 0, this.TEXTAREA.value.length), this.refreshDimensions();
  }
  /**
   * Closes the editor.
   */
  close() {
    this.htEditor && (this.htEditor.rootElement.style.display = "none"), this.removeHooksByKey("beforeKeyDown"), super.close();
  }
  /**
   * Prepares editor's meta data and configuration of the internal Handsontable's instance.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, n, r, i, o, s) {
    super.prepare(e, n, r, i, o, s);
    const a = this, l = {
      startRows: 0,
      startCols: 0,
      minRows: 0,
      minCols: 0,
      className: "listbox",
      copyPaste: !1,
      autoColumnSize: !1,
      autoRowSize: !1,
      readOnly: !0,
      fillHandle: !1,
      autoWrapCol: !1,
      autoWrapRow: !1,
      ariaTags: !1,
      afterOnCellMouseDown(u, c) {
        const d = this.getSourceData(c.row, c.col);
        d !== void 0 && a.setValue(d), a.hot.destroyEditor();
      },
      preventWheel: !0,
      layoutDirection: this.hot.isRtl() ? "rtl" : "ltr"
    };
    this.cellProperties.handsontable && ln(l, s.handsontable), this.htOptions = l;
  }
  /**
   * Begins editing on a highlighted cell and hides fillHandle corner if was present.
   *
   * @param {*} newInitialValue The editor initial value.
   * @param {*} event The keyboard event object.
   */
  beginEditing(e, n) {
    const r = this.hot.getSettings().onBeginEditing;
    r && r() === !1 || super.beginEditing(e, n);
  }
  /**
   * Creates an editor's elements and adds necessary CSS classnames.
   */
  createElements() {
    super.createElements();
    const e = this.hot.rootDocument.createElement("DIV");
    e.className = "handsontableEditor", this.TEXTAREA_PARENT.appendChild(e), this.htContainer = e, this.assignHooks();
  }
  /**
   * Finishes editing and start saving or restoring process for editing cell or last selected range.
   *
   * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
   * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
   * @param {Function} callback The callback function, fired after editor closing.
   */
  finishEditing(e, n, r) {
    if (this.htEditor && this.htEditor.isListening() && this.hot.listen(), this.htEditor && this.htEditor.getSelectedLast()) {
      const i = this.htEditor.getValue();
      i !== void 0 && this.setValue(i);
    }
    super.finishEditing(e, n, r);
  }
  /**
   * Assigns afterDestroy callback to prevent memory leaks.
   *
   * @private
   */
  assignHooks() {
    this.hot.addHook("afterDestroy", () => {
      this.htEditor && this.htEditor.destroy();
    });
  }
  /**
   * Register shortcuts responsible for handling editor.
   *
   * @private
   */
  registerShortcuts() {
    const n = this.hot.getShortcutManager().getContext("editor");
    super.registerShortcuts();
    const r = {
      group: FE,
      relativeToGroup: Bg,
      position: "before"
    }, i = (o, s) => {
      const a = this.htEditor;
      if (o !== void 0 && (o < 0 || a.flipped && o > a.countRows() - 1 ? a.deselectCell() : a.selectCell(o, 0), a.getData().length))
        return s.preventDefault(), Kr(s), this.hot.listen(), this.TEXTAREA.focus(), !1;
    };
    n.addShortcuts([{
      keys: [["ArrowUp"]],
      callback: (o) => {
        const s = this.htEditor;
        let a, l;
        return !s.getSelectedLast() && s.flipped ? a = s.countRows() - 1 : s.getSelectedLast() && (s.flipped ? (l = s.getSelectedLast()[0], a = Math.max(0, l - 1)) : (l = s.getSelectedLast()[0], a = l - 1)), i(a, o);
      },
      preventDefault: !1
      // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.
    }, {
      keys: [["ArrowDown"]],
      callback: (o) => {
        const s = this.htEditor;
        let a, l;
        if (!s.getSelectedLast() && !s.flipped)
          a = 0;
        else if (s.getSelectedLast()) {
          if (s.flipped)
            a = s.getSelectedLast()[0] + 1;
          else if (!s.flipped) {
            const u = s.countRows() - 1;
            l = s.getSelectedLast()[0], a = Math.min(u, l + 1);
          }
        }
        return i(a, o);
      },
      preventDefault: !1
      // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.
    }], r);
  }
  /**
   * Unregister shortcuts responsible for handling editor.
   *
   * @private
   */
  unregisterShortcuts() {
    super.unregisterShortcuts(), this.hot.getShortcutManager().getContext("editor").removeShortcutsByGroup(FE);
  }
}
function E6(t, e, n) {
  T6(t, e), e.set(t, n);
}
function T6(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Zh(t, e, n) {
  return e = _6(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function _6(t) {
  var e = M6(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function M6(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function WE(t, e) {
  var n = O6(t, e, "get");
  return A6(t, n);
}
function O6(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function A6(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
const I6 = "autocomplete";
var _p = /* @__PURE__ */ new WeakMap();
class xb extends Pb {
  constructor() {
    super(...arguments), Zh(this, "query", null), Zh(this, "strippedChoices", []), Zh(this, "rawChoices", []), E6(this, _p, {
      writable: !0,
      value: this.hot.guid.slice(0, 9)
    }), Zh(this, "sortByRelevance", function(e, n, r) {
      const i = [], o = [], s = e.length;
      let a = n.length, l, u, c, d;
      if (s === 0) {
        for (c = 0; c < a; c++)
          o.push(c);
        return o;
      }
      for (c = 0; c < a; c++) {
        if (u = OC(Zt(n[c])), r)
          d = u.indexOf(e);
        else {
          const g = this.cellProperties.locale;
          d = u.toLocaleLowerCase(g).indexOf(e.toLocaleLowerCase(g));
        }
        d !== -1 && (l = u.length - d - s, i.push({
          baseIndex: c,
          index: d,
          charsLeft: l,
          value: u
        }));
      }
      for (i.sort((g, p) => {
        if (p.index === -1)
          return -1;
        if (g.index === -1)
          return 1;
        if (g.index < p.index)
          return -1;
        if (p.index < g.index)
          return 1;
        if (g.index === p.index) {
          if (g.charsLeft < p.charsLeft)
            return -1;
          if (g.charsLeft > p.charsLeft)
            return 1;
        }
        return 0;
      }), c = 0, a = i.length; c < a; c++)
        o.push(i[c].baseIndex);
      return o;
    });
  }
  static get EDITOR_TYPE() {
    return I6;
  }
  /**
   * Gets current value from editable element.
   *
   * @returns {string}
   */
  getValue() {
    const e = this.rawChoices.find((n) => this.stripValueIfNeeded(n) === this.TEXTAREA.value);
    return Re(e) ? e : this.TEXTAREA.value;
  }
  /**
   * Creates an editor's elements and adds necessary CSS classnames.
   */
  createElements() {
    super.createElements(), ce(this.htContainer, "autocompleteEditor"), ce(this.htContainer, this.hot.rootWindow.navigator.platform.indexOf("Mac") === -1 ? "" : "htMacScroll"), this.hot.getSettings().ariaTags && Ne(this.TEXTAREA, [jY(), BY(), zI("listbox"), QY()]);
  }
  /**
   * Prepares editor's metadata and configuration of the internal Handsontable's instance.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, n, r, i, o, s) {
    super.prepare(e, n, r, i, o, s), this.hot.getSettings().ariaTags && Ne(this.TEXTAREA, [Ur("false"), JY(`${WE(this, _p)}-listbox-${e}-${n}`)]);
  }
  /**
   * Opens the editor and adjust its size and internal Handsontable's instance.
   */
  open() {
    super.open();
    const e = this.cellProperties.trimDropdown === void 0 ? !0 : this.cellProperties.trimDropdown, n = this.hot.getSettings().ariaTags, r = Array.isArray(this.cellProperties.source) ? this.cellProperties.source : null, i = r == null ? void 0 : r.length, {
      row: o,
      col: s
    } = this;
    this.showEditableElement(), this.focus();
    let a = wn();
    a === 0 && Hc() && (a += 15), this.addHook("beforeKeyDown", (l) => this.onBeforeKeyDown(l)), this.htEditor.updateSettings({
      colWidths: e ? [yt(this.TEXTAREA) - 2] : void 0,
      width: e ? yt(this.TEXTAREA) + a : void 0,
      autoColumnSize: !0,
      renderer: (l, u, c, d, g, p, C) => {
        Go(l, u, c, d, g, p, C);
        const {
          filteringCaseSensitive: E,
          allowHtml: I,
          locale: M
        } = this.cellProperties, y = this.query;
        let $ = Zt(p), X, G;
        $ && !I && (X = E === !0 ? $.indexOf(y) : $.toLocaleLowerCase(M).indexOf(y.toLocaleLowerCase(M)), X !== -1 && (G = $.substr(X, y.length), $ = $.replace(G, `<strong>${G}</strong>`))), n && Ne(u, [
          UY(),
          // Add `setsize` and `posinset` only if the source is an array.
          ...r ? [rG(i)] : [],
          ...r ? [iG(r.indexOf(p) + 1)] : [],
          ["id", `${this.htEditor.rootElement.id}_${c}-${d}`]
        ]), u.innerHTML = $;
      },
      afterSelection: (l, u) => {
        if (n) {
          const c = this.htEditor.getCell(l, u, !0);
          Ne(c, [hS()]), Ne(this.TEXTAREA, ...eG(c.id));
        }
      }
    }), n && (Ne(this.htEditor.view._wt.wtOverlays.wtTable.TABLE, ...Gi()), Ne(this.htEditor.rootElement, [GI(), tG("polite"), nG("text"), ["id", `${WE(this, _p)}-listbox-${o}-${s}`]]), Ne(this.TEXTAREA, ...Ur("true"))), this.hot._registerTimeout(() => {
      this.queryChoices(this.TEXTAREA.value);
    });
  }
  /**
   * Closes the editor.
   */
  close() {
    this.removeHooksByKey("beforeKeyDown"), super.close(), this.hot.getSettings().ariaTags && Ne(this.TEXTAREA, [Ur("false")]);
  }
  /**
   * Verifies result of validation or closes editor if user's cancelled changes.
   *
   * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,
   *                                   then an editor won't be closed until validation is passed.
   */
  discardEditor(e) {
    super.discardEditor(e), this.hot.view.render();
  }
  /**
   * Prepares choices list based on applied argument.
   *
   * @private
   * @param {string} query The query.
   */
  queryChoices(e) {
    const n = this.cellProperties.source;
    this.query = e, typeof n == "function" ? n.call(this.cellProperties, e, (r) => {
      this.rawChoices = r, this.updateChoicesList(this.stripValuesIfNeeded(r));
    }) : Array.isArray(n) ? (this.rawChoices = n, this.updateChoicesList(this.stripValuesIfNeeded(n))) : this.updateChoicesList([]);
  }
  /**
   * Updates list of the possible completions to choose.
   *
   * @private
   * @param {Array} choicesList The choices list to process.
   */
  updateChoicesList(e) {
    const n = gS(this.TEXTAREA), r = nP(this.TEXTAREA), i = this.cellProperties.sortByRelevance, o = this.cellProperties.filter;
    let s = null, a = null, l = e;
    i && (s = this.sortByRelevance(this.stripValueIfNeeded(this.getValue()), l, this.cellProperties.filteringCaseSensitive));
    const u = Array.isArray(s) ? s.length : 0;
    if (o === !1)
      u && (a = s[0]);
    else {
      const c = [];
      for (let d = 0, g = l.length; d < g && !(i && u <= d); d++)
        u ? c.push(l[s[d]]) : c.push(l[d]);
      a = 0, l = c;
    }
    this.strippedChoices = l, this.htEditor.loadData(sc([l])), l.length === 0 ? this.htEditor.rootElement.style.display = "none" : (this.htEditor.rootElement.style.display = "", this.updateDropdownHeight(), this.flipDropdownIfNeeded(), this.cellProperties.strict === !0 && this.highlightBestMatchingChoice(a)), this.hot.listen(), Qc(this.TEXTAREA, n, n === r ? void 0 : r);
  }
  /**
   * Checks where is enough place to open editor.
   *
   * @private
   * @returns {boolean}
   */
  flipDropdownIfNeeded() {
    const e = va(this.hot.view._wt.wtTable.TABLE), n = e === this.hot.rootWindow, r = this.cellProperties.preventOverflow;
    if (n || !n && (r || r === "horizontal"))
      return !1;
    const i = an(this.TEXTAREA), o = Bt(this.TEXTAREA), s = this.getDropdownHeight(), a = e.scrollTop, l = Bt(this.hot.view._wt.wtTable.THEAD), u = an(e), c = i.top - u.top - l + a, d = e.scrollHeight - c - l - o, g = s > d && c > d;
    return g ? this.flipDropdown(s) : this.unflipDropdown(), this.limitDropdownIfNeeded(g ? c : d, s), g;
  }
  /**
   * Checks if the internal table should generate scrollbar or could be rendered without it.
   *
   * @private
   * @param {number} spaceAvailable The free space as height defined in px available for dropdown list.
   * @param {number} dropdownHeight The dropdown height.
   */
  limitDropdownIfNeeded(e, n) {
    if (n > e) {
      let r = 0, i = 0, o = 0, s = null;
      do
        o = this.htEditor.getRowHeight(i) || this.htEditor.view._wt.getSetting("defaultRowHeight"), r += o, i += 1;
      while (r < e);
      s = r - o, this.htEditor.flipped && (this.htEditor.rootElement.style.top = `${parseInt(this.htEditor.rootElement.style.top, 10) + n - s}px`), this.setDropdownHeight(r - o);
    }
  }
  /**
   * Configures editor to open it at the top.
   *
   * @private
   * @param {number} dropdownHeight The dropdown height.
   */
  flipDropdown(e) {
    const n = this.htEditor.rootElement.style;
    n.position = "absolute", n.top = `${-e}px`, this.htEditor.flipped = !0;
  }
  /**
   * Configures editor to open it at the bottom.
   *
   * @private
   */
  unflipDropdown() {
    const e = this.htEditor.rootElement.style;
    e.position = "absolute", e.top = "", this.htEditor.flipped = void 0;
  }
  /**
   * Updates width and height of the internal Handsontable's instance.
   *
   * @private
   */
  updateDropdownHeight() {
    const e = this.htEditor.getColWidth(0) + wn(this.hot.rootDocument) + 2, n = this.cellProperties.trimDropdown;
    this.htEditor.updateSettings({
      height: this.getDropdownHeight(),
      width: n ? void 0 : e
    }), this.htEditor.view._wt.wtTable.alignOverlaysWithTrimmingContainer();
  }
  /**
   * Sets new height of the internal Handsontable's instance.
   *
   * @private
   * @param {number} height The new dropdown height.
   */
  setDropdownHeight(e) {
    this.htEditor.updateSettings({
      height: e
    });
  }
  /**
   * Creates new selection on specified row index, or deselects selected cells.
   *
   * @private
   * @param {number|undefined} index The visual row index.
   */
  highlightBestMatchingChoice(e) {
    typeof e == "number" ? this.htEditor.selectCell(e, 0, void 0, void 0, void 0, !1) : this.htEditor.deselectCell();
  }
  /**
   * Calculates and return the internal Handsontable's height.
   *
   * @private
   * @returns {number}
   */
  getDropdownHeight() {
    const e = this.htEditor.getRowHeight(0) || 23, n = this.cellProperties.visibleRows;
    return this.strippedChoices.length >= n ? n * e : this.strippedChoices.length * e + 8;
  }
  /**
   * Sanitizes value from potential dangerous tags.
   *
   * @private
   * @param {string} value The value to sanitize.
   * @returns {string}
   */
  stripValueIfNeeded(e) {
    return this.stripValuesIfNeeded([e])[0];
  }
  /**
   * Sanitizes an array of the values from potential dangerous tags.
   *
   * @private
   * @param {string[]} values The value to sanitize.
   * @returns {string[]}
   */
  stripValuesIfNeeded(e) {
    const {
      allowHtml: n
    } = this.cellProperties, r = qe(e, (o) => Zt(o));
    return qe(r, (o) => n ? o : OC(o));
  }
  /**
   * Captures use of arrow down and up to control their behaviour.
   *
   * @private
   * @param {number} keyCode The keyboard keycode.
   * @returns {boolean}
   */
  allowKeyEventPropagation(e) {
    const n = this.htEditor.getSelectedRangeLast(), r = {
      row: n ? n.from.row : -1
    };
    let i = !1;
    return e === Pe.ARROW_DOWN && r.row > 0 && r.row < this.htEditor.countRows() - 1 && (i = !0), e === Pe.ARROW_UP && r.row > -1 && (i = !0), i;
  }
  /**
   * OnBeforeKeyDown callback.
   *
   * @private
   * @param {KeyboardEvent} event The keyboard event object.
   */
  onBeforeKeyDown(e) {
    if (vP(e.keyCode) || e.keyCode === Pe.BACKSPACE || e.keyCode === Pe.DELETE || e.keyCode === Pe.INSERT) {
      let n = 10;
      if (e.keyCode === Pe.C && (e.ctrlKey || e.metaKey))
        return;
      this.isOpened() || (n += 10), this.htEditor && this.hot._registerTimeout(() => {
        this.queryChoices(this.TEXTAREA.value);
      }, n);
    }
  }
}
const P6 = "checkbox";
class qx extends Ql {
  static get EDITOR_TYPE() {
    return P6;
  }
  beginEditing(e, n) {
    if (n && n.type === "mouseup") {
      const r = this.TD.querySelector('input[type="checkbox"]');
      Ve(r, "htBadValue") || r.click();
    }
  }
  finishEditing() {
  }
  init() {
  }
  open() {
  }
  close() {
  }
  getValue() {
  }
  setValue() {
  }
  focus() {
  }
}
var Uf = {}, x6 = {
  get exports() {
    return Uf;
  },
  set exports(t) {
    Uf = t;
  }
};
const H6 = /* @__PURE__ */ vN(RY);
/*!
 * Pikaday
 *
 * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/Pikaday/Pikaday
 */
(function(t, e) {
  (function(n, r) {
    var i;
    {
      try {
        i = H6;
      } catch {
      }
      t.exports = r(i);
    }
  })(qu, function(n) {
    var r = typeof n == "function", i = !!window.addEventListener, o = window.document, s = window.setTimeout, a = function(w, h, f, m) {
      i ? w.addEventListener(h, f, !!m) : w.attachEvent("on" + h, f);
    }, l = function(w, h, f, m) {
      i ? w.removeEventListener(h, f, !!m) : w.detachEvent("on" + h, f);
    }, u = function(w) {
      return w.trim ? w.trim() : w.replace(/^\s+|\s+$/g, "");
    }, c = function(w, h) {
      return (" " + w.className + " ").indexOf(" " + h + " ") !== -1;
    }, d = function(w, h) {
      c(w, h) || (w.className = w.className === "" ? h : w.className + " " + h);
    }, g = function(w, h) {
      w.className = u((" " + w.className + " ").replace(" " + h + " ", " "));
    }, p = function(w) {
      return /Array/.test(Object.prototype.toString.call(w));
    }, C = function(w) {
      return /Date/.test(Object.prototype.toString.call(w)) && !isNaN(w.getTime());
    }, E = function(w) {
      var h = w.getDay();
      return h === 0 || h === 6;
    }, I = function(w) {
      return w % 4 === 0 && w % 100 !== 0 || w % 400 === 0;
    }, M = function(w, h) {
      return [31, I(w) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][h];
    }, y = function(w) {
      C(w) && w.setHours(0, 0, 0, 0);
    }, $ = function(w, h) {
      return w.getTime() === h.getTime();
    }, X = function(w, h, f) {
      var m, T;
      for (m in h)
        T = w[m] !== void 0, T && typeof h[m] == "object" && h[m] !== null && h[m].nodeName === void 0 ? C(h[m]) ? f && (w[m] = new Date(h[m].getTime())) : p(h[m]) ? f && (w[m] = h[m].slice(0)) : w[m] = X({}, h[m], f) : (f || !T) && (w[m] = h[m]);
      return w;
    }, G = function(w, h, f) {
      var m;
      o.createEvent ? (m = o.createEvent("HTMLEvents"), m.initEvent(h, !0, !1), m = X(m, f), w.dispatchEvent(m)) : o.createEventObject && (m = o.createEventObject(), m = X(m, f), w.fireEvent("on" + h, m));
    }, q = function(w) {
      return w.month < 0 && (w.year -= Math.ceil(Math.abs(w.month) / 12), w.month += 12), w.month > 11 && (w.year += Math.floor(Math.abs(w.month) / 12), w.month -= 12), w;
    }, re = {
      // bind the picker to a form field
      field: null,
      // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
      bound: void 0,
      // data-attribute on the input field with an aria assistance text (only applied when `bound` is set)
      ariaLabel: "Use the arrow keys to pick a date",
      // position of the datepicker, relative to the field (default to bottom & left)
      // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
      position: "bottom left",
      // automatically fit in the viewport even if it means repositioning from the position option
      reposition: !0,
      // the default output format for `.toString()` and `field` value
      format: "YYYY-MM-DD",
      // the toString function which gets passed a current date object and format
      // and returns a string
      toString: null,
      // used to create date object from current input string
      parse: null,
      // the initial date to view when first opened
      defaultDate: null,
      // make the `defaultDate` the initial selected value
      setDefaultDate: !1,
      // first day of week (0: Sunday, 1: Monday etc)
      firstDay: 0,
      // minimum number of days in the week that gets week number one
      // default ISO 8601, week 01 is the week with the first Thursday (4)
      firstWeekOfYearMinDays: 4,
      // the default flag for moment's strict date parsing
      formatStrict: !1,
      // the minimum/earliest date that can be selected
      minDate: null,
      // the maximum/latest date that can be selected
      maxDate: null,
      // number of years either side, or array of upper/lower range
      yearRange: 10,
      // show week numbers at head of row
      showWeekNumber: !1,
      // Week picker mode
      pickWholeWeek: !1,
      // used internally (don't config outside)
      minYear: 0,
      maxYear: 9999,
      minMonth: void 0,
      maxMonth: void 0,
      startRange: null,
      endRange: null,
      isRTL: !1,
      // Additional text to append to the year in the calendar title
      yearSuffix: "",
      // Render the month after year in the calendar title
      showMonthAfterYear: !1,
      // Render days of the calendar grid that fall in the next or previous month
      showDaysInNextAndPreviousMonths: !1,
      // Allows user to select days that fall in the next or previous month
      enableSelectionDaysInNextAndPreviousMonths: !1,
      // how many months are visible
      numberOfMonths: 1,
      // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
      // only used for the first display or when a selected date is not visible
      mainCalendar: "left",
      // Specify a DOM element to render the calendar in
      container: void 0,
      // Blur field when date is selected
      blurFieldOnSelect: !0,
      // internationalization
      i18n: {
        previousMonth: "Previous Month",
        nextMonth: "Next Month",
        months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        weekdays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        weekdaysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
      },
      // Theme Classname
      theme: null,
      // events array
      events: [],
      // callback function
      onSelect: null,
      onOpen: null,
      onClose: null,
      onDraw: null,
      // Enable keyboard input
      keyboardInput: !0
    }, v = function(w, h, f) {
      for (h += w.firstDay; h >= 7; )
        h -= 7;
      return f ? w.i18n.weekdaysShort[h] : w.i18n.weekdays[h];
    }, S = function(w) {
      var h = [], f = "false";
      if (w.isEmpty)
        if (w.showDaysInNextAndPreviousMonths)
          h.push("is-outside-current-month"), w.enableSelectionDaysInNextAndPreviousMonths || h.push("is-selection-disabled");
        else
          return '<td class="is-empty"></td>';
      return w.isDisabled && h.push("is-disabled"), w.isToday && h.push("is-today"), w.isSelected && (h.push("is-selected"), f = "true"), w.hasEvent && h.push("has-event"), w.isInRange && h.push("is-inrange"), w.isStartRange && h.push("is-startrange"), w.isEndRange && h.push("is-endrange"), '<td data-day="' + w.day + '" class="' + h.join(" ") + '" aria-selected="' + f + '"><button class="pika-button pika-day" type="button" data-pika-year="' + w.year + '" data-pika-month="' + w.month + '" data-pika-day="' + w.day + '">' + w.day + "</button></td>";
    }, b = function(w, h) {
      w.setHours(0, 0, 0, 0);
      var f = w.getDate(), m = w.getDay(), T = h, O = T - 1, _ = 7, Y = function(de) {
        return (de + _ - 1) % _;
      };
      w.setDate(f + O - Y(m));
      var U = new Date(w.getFullYear(), 0, T), ie = 24 * 60 * 60 * 1e3, se = (w.getTime() - U.getTime()) / ie, oe = 1 + Math.round((se - O + Y(U.getDay())) / _);
      return oe;
    }, L = function(w, h, f, m) {
      var T = new Date(f, h, w), O = r ? n(T).isoWeek() : b(T, m);
      return '<td class="pika-week">' + O + "</td>";
    }, P = function(w, h, f, m) {
      return '<tr class="pika-row' + (f ? " pick-whole-week" : "") + (m ? " is-selected" : "") + '">' + (h ? w.reverse() : w).join("") + "</tr>";
    }, x = function(w) {
      return "<tbody>" + w.join("") + "</tbody>";
    }, W = function(w) {
      var h, f = [];
      for (w.showWeekNumber && f.push("<th></th>"), h = 0; h < 7; h++)
        f.push('<th scope="col"><abbr title="' + v(w, h) + '">' + v(w, h, !0) + "</abbr></th>");
      return "<thead><tr>" + (w.isRTL ? f.reverse() : f).join("") + "</tr></thead>";
    }, D = function(w, h, f, m, T, O) {
      var _, Y, U, ie = w._o, se = f === ie.minYear, oe = f === ie.maxYear, de = '<div id="' + O + '" class="pika-title" role="heading" aria-live="assertive">', Ce, we, pe = !0, ee = !0;
      for (U = [], _ = 0; _ < 12; _++)
        U.push('<option value="' + (f === T ? _ - h : 12 + _ - h) + '"' + (_ === m ? ' selected="selected"' : "") + (se && _ < ie.minMonth || oe && _ > ie.maxMonth ? ' disabled="disabled"' : "") + ">" + ie.i18n.months[_] + "</option>");
      for (Ce = '<div class="pika-label">' + ie.i18n.months[m] + '<select class="pika-select pika-select-month" tabindex="-1">' + U.join("") + "</select></div>", p(ie.yearRange) ? (_ = ie.yearRange[0], Y = ie.yearRange[1] + 1) : (_ = f - ie.yearRange, Y = 1 + f + ie.yearRange), U = []; _ < Y && _ <= ie.maxYear; _++)
        _ >= ie.minYear && U.push('<option value="' + _ + '"' + (_ === f ? ' selected="selected"' : "") + ">" + _ + "</option>");
      return we = '<div class="pika-label">' + f + ie.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + U.join("") + "</select></div>", ie.showMonthAfterYear ? de += we + Ce : de += Ce + we, se && (m === 0 || ie.minMonth >= m) && (pe = !1), oe && (m === 11 || ie.maxMonth <= m) && (ee = !1), h === 0 && (de += '<button class="pika-prev' + (pe ? "" : " is-disabled") + '" type="button">' + ie.i18n.previousMonth + "</button>"), h === w._o.numberOfMonths - 1 && (de += '<button class="pika-next' + (ee ? "" : " is-disabled") + '" type="button">' + ie.i18n.nextMonth + "</button>"), de += "</div>";
    }, B = function(w, h, f) {
      return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + f + '">' + W(w) + x(h) + "</table>";
    }, z = function(w) {
      var h = this, f = h.config(w);
      h._onMouseDown = function(T) {
        if (h._v) {
          T = T || window.event;
          var O = T.target || T.srcElement;
          if (O)
            if (c(O, "is-disabled") || (c(O, "pika-button") && !c(O, "is-empty") && !c(O.parentNode, "is-disabled") ? (h.setDate(new Date(O.getAttribute("data-pika-year"), O.getAttribute("data-pika-month"), O.getAttribute("data-pika-day"))), f.bound && s(function() {
              h.hide(), f.blurFieldOnSelect && f.field && f.field.blur();
            }, 100)) : c(O, "pika-prev") ? h.prevMonth() : c(O, "pika-next") && h.nextMonth()), c(O, "pika-select"))
              h._c = !0;
            else if (T.preventDefault)
              T.preventDefault();
            else
              return T.returnValue = !1, !1;
        }
      }, h._onChange = function(T) {
        T = T || window.event;
        var O = T.target || T.srcElement;
        O && (c(O, "pika-select-month") ? h.gotoMonth(O.value) : c(O, "pika-select-year") && h.gotoYear(O.value));
      }, h._onKeyChange = function(T) {
        if (T = T || window.event, h.isVisible())
          switch (T.keyCode) {
            case 13:
            case 27:
              f.field && f.field.blur();
              break;
            case 37:
              h.adjustDate("subtract", 1);
              break;
            case 38:
              h.adjustDate("subtract", 7);
              break;
            case 39:
              h.adjustDate("add", 1);
              break;
            case 40:
              h.adjustDate("add", 7);
              break;
            case 8:
            case 46:
              h.setDate(null);
              break;
          }
      }, h._parseFieldValue = function() {
        if (f.parse)
          return f.parse(f.field.value, f.format);
        if (r) {
          var T = n(f.field.value, f.format, f.formatStrict);
          return T && T.isValid() ? T.toDate() : null;
        } else
          return new Date(Date.parse(f.field.value));
      }, h._onInputChange = function(T) {
        var O;
        T.firedBy !== h && (O = h._parseFieldValue(), C(O) && h.setDate(O), h._v || h.show());
      }, h._onInputFocus = function() {
        h.show();
      }, h._onInputClick = function() {
        h.show();
      }, h._onInputBlur = function() {
        var T = o.activeElement;
        do
          if (c(T, "pika-single"))
            return;
        while (T = T.parentNode);
        h._c || (h._b = s(function() {
          h.hide();
        }, 50)), h._c = !1;
      }, h._onClick = function(T) {
        T = T || window.event;
        var O = T.target || T.srcElement, _ = O;
        if (O) {
          !i && c(O, "pika-select") && (O.onchange || (O.setAttribute("onchange", "return;"), a(O, "change", h._onChange)));
          do
            if (c(_, "pika-single") || _ === f.trigger)
              return;
          while (_ = _.parentNode);
          h._v && O !== f.trigger && _ !== f.trigger && h.hide();
        }
      }, h.el = o.createElement("div"), h.el.className = "pika-single" + (f.isRTL ? " is-rtl" : "") + (f.theme ? " " + f.theme : ""), a(h.el, "mousedown", h._onMouseDown, !0), a(h.el, "touchend", h._onMouseDown, !0), a(h.el, "change", h._onChange), f.keyboardInput && a(o, "keydown", h._onKeyChange), f.field && (f.container ? f.container.appendChild(h.el) : f.bound ? o.body.appendChild(h.el) : f.field.parentNode.insertBefore(h.el, f.field.nextSibling), a(f.field, "change", h._onInputChange), f.defaultDate || (f.defaultDate = h._parseFieldValue(), f.setDefaultDate = !0));
      var m = f.defaultDate;
      C(m) ? f.setDefaultDate ? h.setDate(m, !0) : h.gotoDate(m) : h.gotoDate(new Date()), f.bound ? (this.hide(), h.el.className += " is-bound", a(f.trigger, "click", h._onInputClick), a(f.trigger, "focus", h._onInputFocus), a(f.trigger, "blur", h._onInputBlur)) : this.show();
    };
    return z.prototype = {
      /**
       * configure functionality
       */
      config: function(w) {
        this._o || (this._o = X({}, re, !0));
        var h = X(this._o, w, !0);
        h.isRTL = !!h.isRTL, h.field = h.field && h.field.nodeName ? h.field : null, h.theme = typeof h.theme == "string" && h.theme ? h.theme : null, h.bound = !!(h.bound !== void 0 ? h.field && h.bound : h.field), h.trigger = h.trigger && h.trigger.nodeName ? h.trigger : h.field, h.disableWeekends = !!h.disableWeekends, h.disableDayFn = typeof h.disableDayFn == "function" ? h.disableDayFn : null;
        var f = parseInt(h.numberOfMonths, 10) || 1;
        if (h.numberOfMonths = f > 4 ? 4 : f, C(h.minDate) || (h.minDate = !1), C(h.maxDate) || (h.maxDate = !1), h.minDate && h.maxDate && h.maxDate < h.minDate && (h.maxDate = h.minDate = !1), h.minDate && this.setMinDate(h.minDate), h.maxDate && this.setMaxDate(h.maxDate), p(h.yearRange)) {
          var m = new Date().getFullYear() - 10;
          h.yearRange[0] = parseInt(h.yearRange[0], 10) || m, h.yearRange[1] = parseInt(h.yearRange[1], 10) || m;
        } else
          h.yearRange = Math.abs(parseInt(h.yearRange, 10)) || re.yearRange, h.yearRange > 100 && (h.yearRange = 100);
        return h;
      },
      /**
       * return a formatted string of the current selection (using Moment.js if available)
       */
      toString: function(w) {
        return w = w || this._o.format, C(this._d) ? this._o.toString ? this._o.toString(this._d, w) : r ? n(this._d).format(w) : this._d.toDateString() : "";
      },
      /**
       * return a Moment.js object of the current selection (if available)
       */
      getMoment: function() {
        return r ? n(this._d) : null;
      },
      /**
       * set the current selection from a Moment.js object (if available)
       */
      setMoment: function(w, h) {
        r && n.isMoment(w) && this.setDate(w.toDate(), h);
      },
      /**
       * return a Date object of the current selection
       */
      getDate: function() {
        return C(this._d) ? new Date(this._d.getTime()) : null;
      },
      /**
       * set the current selection
       */
      setDate: function(w, h) {
        if (!w)
          return this._d = null, this._o.field && (this._o.field.value = "", G(this._o.field, "change", { firedBy: this })), this.draw();
        if (typeof w == "string" && (w = new Date(Date.parse(w))), !!C(w)) {
          var f = this._o.minDate, m = this._o.maxDate;
          C(f) && w < f ? w = f : C(m) && w > m && (w = m), this._d = new Date(w.getTime()), y(this._d), this.gotoDate(this._d), this._o.field && (this._o.field.value = this.toString(), G(this._o.field, "change", { firedBy: this })), !h && typeof this._o.onSelect == "function" && this._o.onSelect.call(this, this.getDate());
        }
      },
      /**
       * clear and reset the date
       */
      clear: function() {
        this.setDate(null);
      },
      /**
       * change view to a specific date
       */
      gotoDate: function(w) {
        var h = !0;
        if (C(w)) {
          if (this.calendars) {
            var f = new Date(this.calendars[0].year, this.calendars[0].month, 1), m = new Date(this.calendars[this.calendars.length - 1].year, this.calendars[this.calendars.length - 1].month, 1), T = w.getTime();
            m.setMonth(m.getMonth() + 1), m.setDate(m.getDate() - 1), h = T < f.getTime() || m.getTime() < T;
          }
          h && (this.calendars = [{
            month: w.getMonth(),
            year: w.getFullYear()
          }], this._o.mainCalendar === "right" && (this.calendars[0].month += 1 - this._o.numberOfMonths)), this.adjustCalendars();
        }
      },
      adjustDate: function(w, h) {
        var f = this.getDate() || new Date(), m = parseInt(h) * 24 * 60 * 60 * 1e3, T;
        w === "add" ? T = new Date(f.valueOf() + m) : w === "subtract" && (T = new Date(f.valueOf() - m)), this.setDate(T);
      },
      adjustCalendars: function() {
        this.calendars[0] = q(this.calendars[0]);
        for (var w = 1; w < this._o.numberOfMonths; w++)
          this.calendars[w] = q({
            month: this.calendars[0].month + w,
            year: this.calendars[0].year
          });
        this.draw();
      },
      gotoToday: function() {
        this.gotoDate(new Date());
      },
      /**
       * change view to a specific month (zero-index, e.g. 0: January)
       */
      gotoMonth: function(w) {
        isNaN(w) || (this.calendars[0].month = parseInt(w, 10), this.adjustCalendars());
      },
      nextMonth: function() {
        this.calendars[0].month++, this.adjustCalendars();
      },
      prevMonth: function() {
        this.calendars[0].month--, this.adjustCalendars();
      },
      /**
       * change view to a specific full year (e.g. "2012")
       */
      gotoYear: function(w) {
        isNaN(w) || (this.calendars[0].year = parseInt(w, 10), this.adjustCalendars());
      },
      /**
       * change the minDate
       */
      setMinDate: function(w) {
        w instanceof Date ? (y(w), this._o.minDate = w, this._o.minYear = w.getFullYear(), this._o.minMonth = w.getMonth()) : (this._o.minDate = re.minDate, this._o.minYear = re.minYear, this._o.minMonth = re.minMonth, this._o.startRange = re.startRange), this.draw();
      },
      /**
       * change the maxDate
       */
      setMaxDate: function(w) {
        w instanceof Date ? (y(w), this._o.maxDate = w, this._o.maxYear = w.getFullYear(), this._o.maxMonth = w.getMonth()) : (this._o.maxDate = re.maxDate, this._o.maxYear = re.maxYear, this._o.maxMonth = re.maxMonth, this._o.endRange = re.endRange), this.draw();
      },
      setStartRange: function(w) {
        this._o.startRange = w;
      },
      setEndRange: function(w) {
        this._o.endRange = w;
      },
      /**
       * refresh the HTML
       */
      draw: function(w) {
        if (!(!this._v && !w)) {
          var h = this._o, f = h.minYear, m = h.maxYear, T = h.minMonth, O = h.maxMonth, _ = "", Y;
          this._y <= f && (this._y = f, !isNaN(T) && this._m < T && (this._m = T)), this._y >= m && (this._y = m, !isNaN(O) && this._m > O && (this._m = O));
          for (var U = 0; U < h.numberOfMonths; U++)
            Y = "pika-title-" + Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 2), _ += '<div class="pika-lendar">' + D(this, U, this.calendars[U].year, this.calendars[U].month, this.calendars[0].year, Y) + this.render(this.calendars[U].year, this.calendars[U].month, Y) + "</div>";
          this.el.innerHTML = _, h.bound && h.field.type !== "hidden" && s(function() {
            h.trigger.focus();
          }, 1), typeof this._o.onDraw == "function" && this._o.onDraw(this), h.bound && h.field.setAttribute("aria-label", h.ariaLabel);
        }
      },
      adjustPosition: function() {
        var w, h, f, m, T, O, _, Y, U, ie, se, oe;
        if (!this._o.container) {
          if (this.el.style.position = "absolute", w = this._o.trigger, h = w, f = this.el.offsetWidth, m = this.el.offsetHeight, T = window.innerWidth || o.documentElement.clientWidth, O = window.innerHeight || o.documentElement.clientHeight, _ = window.pageYOffset || o.body.scrollTop || o.documentElement.scrollTop, se = !0, oe = !0, typeof w.getBoundingClientRect == "function")
            ie = w.getBoundingClientRect(), Y = ie.left + window.pageXOffset, U = ie.bottom + window.pageYOffset;
          else
            for (Y = h.offsetLeft, U = h.offsetTop + h.offsetHeight; h = h.offsetParent; )
              Y += h.offsetLeft, U += h.offsetTop;
          (this._o.reposition && Y + f > T || this._o.position.indexOf("right") > -1 && Y - f + w.offsetWidth > 0) && (Y = Y - f + w.offsetWidth, se = !1), (this._o.reposition && U + m > O + _ || this._o.position.indexOf("top") > -1 && U - m - w.offsetHeight > 0) && (U = U - m - w.offsetHeight, oe = !1), this.el.style.left = Y + "px", this.el.style.top = U + "px", d(this.el, se ? "left-aligned" : "right-aligned"), d(this.el, oe ? "bottom-aligned" : "top-aligned"), g(this.el, se ? "right-aligned" : "left-aligned"), g(this.el, oe ? "top-aligned" : "bottom-aligned");
        }
      },
      /**
       * render HTML for a particular month
       */
      render: function(w, h, f) {
        var m = this._o, T = new Date(), O = M(w, h), _ = new Date(w, h, 1).getDay(), Y = [], U = [];
        y(T), m.firstDay > 0 && (_ -= m.firstDay, _ < 0 && (_ += 7));
        for (var ie = h === 0 ? 11 : h - 1, se = h === 11 ? 0 : h + 1, oe = h === 0 ? w - 1 : w, de = h === 11 ? w + 1 : w, Ce = M(oe, ie), we = O + _, pe = we; pe > 7; )
          pe -= 7;
        we += 7 - pe;
        for (var ee = !1, ye = 0, $e = 0; ye < we; ye++) {
          var Ae = new Date(w, h, 1 + (ye - _)), Fe = C(this._d) ? $(Ae, this._d) : !1, Ie = $(Ae, T), R = m.events.indexOf(Ae.toDateString()) !== -1, A = ye < _ || ye >= O + _, N = 1 + (ye - _), J = h, F = w, Q = m.startRange && $(m.startRange, Ae), K = m.endRange && $(m.endRange, Ae), j = m.startRange && m.endRange && m.startRange < Ae && Ae < m.endRange, te = m.minDate && Ae < m.minDate || m.maxDate && Ae > m.maxDate || m.disableWeekends && E(Ae) || m.disableDayFn && m.disableDayFn(Ae);
          A && (ye < _ ? (N = Ce + N, J = ie, F = oe) : (N = N - O, J = se, F = de));
          var Z = {
            day: N,
            month: J,
            year: F,
            hasEvent: R,
            isSelected: Fe,
            isToday: Ie,
            isDisabled: te,
            isEmpty: A,
            isStartRange: Q,
            isEndRange: K,
            isInRange: j,
            showDaysInNextAndPreviousMonths: m.showDaysInNextAndPreviousMonths,
            enableSelectionDaysInNextAndPreviousMonths: m.enableSelectionDaysInNextAndPreviousMonths
          };
          m.pickWholeWeek && Fe && (ee = !0), U.push(S(Z)), ++$e === 7 && (m.showWeekNumber && U.unshift(L(ye - _, h, w, m.firstWeekOfYearMinDays)), Y.push(P(U, m.isRTL, m.pickWholeWeek, ee)), U = [], $e = 0, ee = !1);
        }
        return B(m, Y, f);
      },
      isVisible: function() {
        return this._v;
      },
      show: function() {
        this.isVisible() || (this._v = !0, this.draw(), g(this.el, "is-hidden"), this._o.bound && (a(o, "click", this._onClick), this.adjustPosition()), typeof this._o.onOpen == "function" && this._o.onOpen.call(this));
      },
      hide: function() {
        var w = this._v;
        w !== !1 && (this._o.bound && l(o, "click", this._onClick), this._o.container || (this.el.style.position = "static", this.el.style.left = "auto", this.el.style.top = "auto"), d(this.el, "is-hidden"), this._v = !1, w !== void 0 && typeof this._o.onClose == "function" && this._o.onClose.call(this));
      },
      /**
       * GAME OVER
       */
      destroy: function() {
        var w = this._o;
        this.hide(), l(this.el, "mousedown", this._onMouseDown, !0), l(this.el, "touchend", this._onMouseDown, !0), l(this.el, "change", this._onChange), w.keyboardInput && l(o, "keydown", this._onKeyChange), w.field && (l(w.field, "change", this._onInputChange), w.bound && (l(w.trigger, "click", this._onInputClick), l(w.trigger, "focus", this._onInputFocus), l(w.trigger, "blur", this._onInputBlur))), this.el.parentNode && this.el.parentNode.removeChild(this.el);
      }
    }, z;
  });
})(x6);
function Qh(t, e, n) {
  return e = D6(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function D6(t) {
  var e = N6(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function N6(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const Zx = "date", VE = "dateEditor";
class Qx extends Ha {
  constructor() {
    super(...arguments), Qh(this, "defaultDateFormat", "DD/MM/YYYY"), Qh(this, "isCellEdited", !1), Qh(this, "parentDestroyed", !1), Qh(this, "$datePicker", null);
  }
  static get EDITOR_TYPE() {
    return Zx;
  }
  init() {
    if (typeof le != "function")
      throw new Error("You need to include moment.js to your project.");
    if (typeof Uf != "function")
      throw new Error("You need to include Pikaday to your project.");
    super.init(), this.hot.addHook("afterDestroy", () => {
      this.parentDestroyed = !0, this.destroyElements();
    });
  }
  /**
   * Create data picker instance.
   */
  createElements() {
    super.createElements(), this.datePicker = this.hot.rootDocument.createElement("DIV"), this.datePickerStyle = this.datePicker.style, this.datePickerStyle.position = "absolute", this.datePickerStyle.top = 0, this.datePickerStyle.left = 0, this.datePickerStyle.zIndex = 9999, this.datePicker.setAttribute("dir", this.hot.isRtl() ? "rtl" : "ltr"), ce(this.datePicker, "htDatepickerHolder"), this.hot.rootDocument.body.appendChild(this.datePicker);
    const e = new _r(this);
    e.addEventListener(this.datePicker, "mousedown", (n) => {
      Ve(n.target, "pika-day") && this.hideDatepicker(), n.stopPropagation();
    }), e.addEventListener(this.TEXTAREA, "keydown", (n) => {
      ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"].includes(n.code) && n.preventDefault();
    });
  }
  /**
   * Destroy data picker instance.
   */
  destroyElements() {
    const e = this.datePicker.parentNode;
    this.$datePicker && this.$datePicker.destroy(), e && e.removeChild(this.datePicker);
  }
  /**
   * Prepare editor to appear.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, n, r, i, o, s) {
    super.prepare(e, n, r, i, o, s);
  }
  /**
   * Open editor.
   *
   * @param {Event} [event=null] The event object.
   */
  open() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    const r = this.hot.getShortcutManager().getContext("editor");
    super.open(), this.showDatepicker(e), r.addShortcut({
      keys: [["Enter"]],
      callback: (i) => {
        i.stopPropagation();
      },
      group: VE
    });
  }
  /**
   * Close editor.
   */
  close() {
    var e;
    this._opened = !1, (e = this.$datePicker) !== null && e !== void 0 && e.destroy && this.$datePicker.destroy(), this.hot._registerTimeout(() => {
      this.hot._refreshBorders();
    }), this.hot.getShortcutManager().getContext("editor").removeShortcutsByGroup(VE), super.close();
  }
  /**
   * Finishes editing and start saving or restoring process for editing cell or last selected range.
   *
   * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
   * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
   */
  finishEditing() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    if (e) {
      const r = this.originalValue;
      r !== void 0 && this.setValue(r);
    }
    super.finishEditing(e, n);
  }
  /**
   * Show data picker.
   *
   * @param {Event} event The event object.
   */
  showDatepicker(e) {
    const n = this.TD.getBoundingClientRect(), r = this.cellProperties.dateFormat || this.defaultDateFormat, i = this.hot.view.isMouseDown(), o = e ? RS(e.keyCode) : !1;
    let s;
    this.datePicker.style.display = "block", this.$datePicker = new Uf(this.getDatePickerConfig()), this.$datePicker._onInputFocus = function() {
    }, this.datePickerStyle.top = `${this.hot.rootWindow.pageYOffset + n.top + Bt(this.TD)}px`;
    let a = this.hot.rootWindow.pageXOffset;
    this.hot.isRtl() ? a = n.right - yt(this.datePicker) : a = n.left, this.datePickerStyle.left = `${a}px`, this.originalValue ? (s = this.originalValue, le(s, r, !0).isValid() && this.$datePicker.setMoment(le(s, r), !0), this.getValue() !== this.originalValue && this.setValue(this.originalValue), !o && !i && this.setValue("")) : this.cellProperties.defaultDate ? (s = this.cellProperties.defaultDate, le(s, r, !0).isValid() && this.$datePicker.setMoment(le(s, r), !0), !o && !i && this.setValue("")) : this.$datePicker.gotoToday();
  }
  /**
   * Hide data picker.
   */
  hideDatepicker() {
    this.datePickerStyle.display = "none", this.$datePicker.hide();
  }
  /**
   * Get date picker options.
   *
   * @returns {object}
   */
  getDatePickerConfig() {
    const e = this.TEXTAREA, n = {};
    this.cellProperties && this.cellProperties.datePickerConfig && th(n, this.cellProperties.datePickerConfig);
    const r = n.onSelect, i = n.onClose;
    return n.field = e, n.trigger = e, n.container = this.datePicker, n.bound = !1, n.format = n.format || this.defaultDateFormat, n.reposition = n.reposition || !1, n.isRTL = !1, n.onSelect = (o) => {
      let s = o;
      isNaN(s.getTime()) || (s = le(s).format(this.cellProperties.dateFormat || this.defaultDateFormat)), this.setValue(s), r && r();
    }, n.onClose = () => {
      this.parentDestroyed || this.finishEditing(!1), i && i();
    }, n;
  }
}
const L6 = "dropdown";
class Hb extends xb {
  static get EDITOR_TYPE() {
    return L6;
  }
  /**
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, n, r, i, o, s) {
    super.prepare(e, n, r, i, o, s), this.cellProperties.filter = !1, this.cellProperties.strict = !0;
  }
}
_e.getSingleton().add("beforeValidate", function(t, e, n) {
  const r = this.getCellMeta(e, this.propToCol(n));
  r.editor === Hb && r.strict === void 0 && (r.filter = !1, r.strict = !0);
});
const $6 = "numeric";
class Jx extends Ha {
  static get EDITOR_TYPE() {
    return $6;
  }
}
const k6 = "password";
class eH extends Ha {
  static get EDITOR_TYPE() {
    return k6;
  }
  createElements() {
    super.createElements(), this.TEXTAREA = this.hot.rootDocument.createElement("input"), this.TEXTAREA.setAttribute("type", "password"), this.TEXTAREA.setAttribute("data-hot-input", ""), this.TEXTAREA.className = "handsontableInput", this.textareaStyle = this.TEXTAREA.style, this.textareaStyle.width = 0, this.textareaStyle.height = 0, this.hot.getSettings().ariaTags && Ne(this.TEXTAREA, [Vo()]), vi(this.TEXTAREA_PARENT), this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
  }
}
const Mp = "ht_editor_visible", BE = "selectEditor", F6 = "select";
class tH extends Ql {
  static get EDITOR_TYPE() {
    return F6;
  }
  /**
   * Initializes editor instance, DOM Element and mount hooks.
   */
  init() {
    this.select = this.hot.rootDocument.createElement("SELECT"), ce(this.select, "htSelectEditor"), this.select.style.display = "none", this.hot.rootElement.appendChild(this.select), this.registerHooks();
  }
  /**
   * Returns select's value.
   *
   * @returns {*}
   */
  getValue() {
    return this.select.value;
  }
  /**
   * Sets value in the select element.
   *
   * @param {*} value A new select's value.
   */
  setValue(e) {
    this.select.value = e;
  }
  /**
   * Opens the editor and adjust its size.
   */
  open() {
    this._opened = !0, this.refreshDimensions(), this.select.style.display = "", this.hot.getShortcutManager().setActiveContextName("editor"), this.registerShortcuts();
  }
  /**
   * Closes the editor.
   */
  close() {
    this._opened = !1, this.select.style.display = "none", Ve(this.select, Mp) && Ye(this.select, Mp), this.unregisterShortcuts(), this.clearHooks();
  }
  /**
   * Sets focus state on the select element.
   */
  focus() {
    this.select.focus();
  }
  /**
   * Binds hooks to refresh editor's size after scrolling of the viewport or resizing of columns/rows.
   *
   * @private
   */
  registerHooks() {
    this.addHook("afterScrollHorizontally", () => this.refreshDimensions()), this.addHook("afterScrollVertically", () => this.refreshDimensions()), this.addHook("afterColumnResize", () => this.refreshDimensions()), this.addHook("afterRowResize", () => this.refreshDimensions());
  }
  /**
   * Prepares editor's meta data and a list of available options.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, n, r, i, o, s) {
    super.prepare(e, n, r, i, o, s);
    const a = this.cellProperties.selectOptions;
    let l;
    typeof a == "function" ? l = this.prepareOptions(a(this.row, this.col, this.prop)) : l = this.prepareOptions(a), vi(this.select), Ze(l, (u, c) => {
      const d = this.hot.rootDocument.createElement("OPTION");
      d.value = c, Pa(d, u), this.select.appendChild(d);
    });
  }
  /**
   * Creates consistent list of available options.
   *
   * @private
   * @param {Array|object} optionsToPrepare The list of the values to render in the select eleemnt.
   * @returns {object}
   */
  prepareOptions(e) {
    let n = {};
    if (Array.isArray(e))
      for (let r = 0, i = e.length; r < i; r++)
        n[e[r]] = e[r];
    else
      typeof e == "object" && (n = e);
    return n;
  }
  /**
   * Refreshes editor's value using source data.
   *
   * @private
   */
  refreshValue() {
    const e = this.hot.getSourceDataAtCell(this.row, this.prop);
    this.originalValue = e, this.setValue(e), this.refreshDimensions();
  }
  /**
   * Refreshes editor's size and position.
   *
   * @private
   */
  refreshDimensions() {
    if (this.state !== fn.EDITING)
      return;
    if (this.TD = this.getEditedCell(), !this.TD) {
      this.close();
      return;
    }
    const {
      top: e,
      start: n,
      width: r,
      height: i
    } = this.getEditedCellRect(), o = this.select.style;
    o.height = `${i}px`, o.width = `${r}px`, o.top = `${e}px`, o[this.hot.isRtl() ? "right" : "left"] = `${n}px`, o.margin = "0px", ce(this.select, Mp);
  }
  /**
   * Register shortcuts responsible for handling editor.
   *
   * @private
   */
  registerShortcuts() {
    const n = this.hot.getShortcutManager().getContext("editor"), r = {
      group: BE
    };
    this.isInFullEditMode() !== !1 && n.addShortcuts([{
      keys: [["ArrowUp"]],
      callback: () => {
        const i = this.select.selectedIndex - 1;
        i >= 0 && (this.select[i].selected = !0);
      }
    }, {
      keys: [["ArrowDown"]],
      callback: () => {
        const i = this.select.selectedIndex + 1;
        i <= this.select.length - 1 && (this.select[i].selected = !0);
      }
    }], r);
  }
  /**
   * Unregister shortcuts responsible for handling editor.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("editor").removeShortcutsByGroup(BE);
  }
}
const W6 = "time";
class nH extends Ha {
  static get EDITOR_TYPE() {
    return W6;
  }
  /**
   * Prepares editor's meta data.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, n, r, i, o, s) {
    super.prepare(e, n, r, i, o, s), this.TEXTAREA.dir = "ltr";
  }
}
function V6() {
  hr(Ql), hr(xb), hr(qx), hr(Qx), hr(Hb), hr(Pb), hr(Jx), hr(eH), hr(tH), hr(Ha), hr(nH);
}
const B6 = "html";
function Db(t, e, n, r, i, o, s) {
  sh.apply(this, [t, e, n, r, i, o, s]), Pa(e, o ?? "", !1);
}
Db.RENDERER_TYPE = B6;
const U6 = "autocomplete";
function Jl(t, e, n, r, i, o, s) {
  const {
    rootDocument: a
  } = t, l = s.allowHtml ? Db : Go, u = a.createElement("DIV"), c = t.getSettings().ariaTags;
  if (u.className = "htAutocompleteArrow", c && u.setAttribute(...Vo()), u.appendChild(a.createTextNode(String.fromCharCode(9660))), l.apply(this, [t, e, n, r, i, o, s]), e.firstChild || e.appendChild(a.createTextNode(String.fromCharCode(160))), e.insertBefore(u, e.firstChild), ce(e, "htAutocomplete"), !t.acArrowListener) {
    const d = new _r(t);
    t.acArrowListener = function(g) {
      Ve(g.target, "htAutocompleteArrow") && t.view._wt.getSetting("onCellDblClick", null, t._createCellCoords(n, r), e);
    }, d.addEventListener(t.rootElement, "mousedown", t.acArrowListener), t.addHookOnce("afterDestroy", () => {
      d.destroy();
    });
  }
}
Jl.RENDERER_TYPE = U6;
const UE = /* @__PURE__ */ new WeakMap(), YE = /* @__PURE__ */ new WeakMap(), Y6 = "htBadValue", Ul = "data-row", Yl = "data-col", G6 = "checkboxRenderer", rH = "checkbox";
_e.getSingleton().add("modifyAutoColumnSizeSeed", function(t, e, n) {
  const {
    label: r,
    type: i,
    row: o,
    column: s,
    prop: a
  } = e;
  if (i === rH) {
    if (r) {
      const {
        value: l,
        property: u
      } = r;
      let c = n;
      if (l)
        c = typeof l == "function" ? l(o, s, a, n) : l;
      else if (u) {
        const d = this.getDataAtRowProp(o, u);
        c = d !== null ? d : n;
      }
      t = c;
    }
    return t;
  }
});
function Nb(t, e, n, r, i, o, s) {
  const {
    rootDocument: a
  } = t, l = t.getSettings().ariaTags;
  sh.apply(this, [t, e, n, r, i, o, s]), z6(t);
  let u = j6(a);
  const c = s.label;
  let d = !1;
  if (typeof s.checkedTemplate > "u" && (s.checkedTemplate = !0), typeof s.uncheckedTemplate > "u" && (s.uncheckedTemplate = !1), vi(e), o === s.checkedTemplate || Zt(o).toLocaleLowerCase(s.locale) === Zt(s.checkedTemplate).toLocaleLowerCase(s.locale) ? u.checked = !0 : o === s.uncheckedTemplate || Zt(o).toLocaleLowerCase(s.locale) === Zt(s.uncheckedTemplate).toLocaleLowerCase(s.locale) ? u.checked = !1 : gn(o) ? ce(u, "noValue") : (u.style.display = "none", ce(u, Y6), d = !0), Ne(u, [[Ul, n], [Yl, r]]), l && Ne(u, [uS(u.checked ? t.getTranslatedPhrase(Tb) : t.getTranslatedPhrase(_b)), ZY(u.checked), YY()]), !d && c) {
    let E = "";
    if (c.value)
      E = typeof c.value == "function" ? c.value.call(this, n, r, i, o) : c.value;
    else if (c.property) {
      const M = t.getDataAtRowProp(n, c.property);
      E = M !== null ? M : "";
    }
    const I = K6(a, E, c.separated !== !0);
    c.position === "before" ? c.separated ? (e.appendChild(I), e.appendChild(u)) : (I.appendChild(u), u = I) : (!c.position || c.position === "after") && (c.separated ? (e.appendChild(u), e.appendChild(I)) : (I.insertBefore(u, I.firstChild), u = I));
  }
  (!c || c && !c.separated) && e.appendChild(u), d && e.appendChild(a.createTextNode("#bad-value#")), UE.has(t) || (UE.set(t, !0), g());
  function g() {
    const I = t.getShortcutManager().getContext("grid"), M = {
      group: G6
    };
    I.addShortcuts([{
      keys: [["space"]],
      callback: () => (p(), !C())
    }, {
      keys: [["enter"]],
      callback: () => (p(), !C()),
      runOnlyIf: () => t.getSettings().enterBeginsEditing
    }, {
      keys: [["delete"], ["backspace"]],
      callback: () => (p(!0), !C()),
      relativeToGroup: Ib,
      position: "before"
    }], M);
  }
  function p() {
    let E = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const I = t.getSelectedRange();
    if (I)
      for (let M = 0; M < I.length; M++) {
        const {
          row: y,
          col: $
        } = I[M].getTopStartCorner(), {
          row: X,
          col: G
        } = I[M].getBottomEndCorner(), q = [];
        for (let re = y; re <= X; re += 1)
          for (let v = $; v <= G; v += 1) {
            const S = t.getCellMeta(re, v);
            if (S.type !== "checkbox")
              return;
            if (S.readOnly === !0)
              continue;
            typeof S.checkedTemplate > "u" && (S.checkedTemplate = !0), typeof S.uncheckedTemplate > "u" && (S.uncheckedTemplate = !1);
            const b = t.getDataAtCell(re, v);
            E === !1 ? [S.checkedTemplate, S.checkedTemplate.toString()].includes(b) ? q.push([re, v, S.uncheckedTemplate]) : [S.uncheckedTemplate, S.uncheckedTemplate.toString(), null, void 0].includes(b) && q.push([re, v, S.checkedTemplate]) : q.push([re, v, S.uncheckedTemplate]);
          }
        q.length > 0 && t.setDataAtCell(q);
      }
  }
  function C() {
    const E = t.getSelectedRange();
    if (E) {
      for (let I = 0; I < E.length; I++) {
        const M = E[I].getTopStartCorner(), y = E[I].getBottomEndCorner();
        for (let $ = M.row; $ <= y.row; $++)
          for (let X = M.col; X <= y.col; X++) {
            const G = t.getCellMeta($, X);
            if (G.type !== "checkbox")
              return !1;
            const q = t.getCell($, X);
            if (q == null)
              return !0;
            if (q.querySelectorAll("input[type=checkbox]").length > 0 && !G.readOnly)
              return !0;
          }
      }
      return !1;
    }
  }
}
Nb.RENDERER_TYPE = rH;
function z6(t) {
  let e = YE.get(t);
  if (!e) {
    const {
      rootElement: n
    } = t;
    e = new _r(t), e.addEventListener(n, "click", (r) => q6(r, t)), e.addEventListener(n, "mouseup", (r) => X6(r, t)), e.addEventListener(n, "change", (r) => Z6(r, t)), YE.set(t, e);
  }
  return e;
}
function j6(t) {
  const e = t.createElement("input");
  return e.className = "htCheckboxRendererInput", e.type = "checkbox", e.setAttribute("tabindex", "-1"), e.cloneNode(!1);
}
function K6(t, e, n) {
  const r = t.createElement("label");
  return r.className = `htCheckboxRendererLabel ${n ? "fullWidth" : ""}`, r.appendChild(t.createTextNode(e)), r.cloneNode(!0);
}
function X6(t, e) {
  const {
    target: n
  } = t;
  Lb(n) && (!n.hasAttribute(Ul) || !n.hasAttribute(Yl) || setTimeout(e.listen, 10));
}
function q6(t, e) {
  const {
    target: n
  } = t;
  if (!Lb(n) || !n.hasAttribute(Ul) || !n.hasAttribute(Yl))
    return;
  const r = parseInt(n.getAttribute(Ul), 10), i = parseInt(n.getAttribute(Yl), 10);
  e.getCellMeta(r, i).readOnly && t.preventDefault();
}
function Z6(t, e) {
  const {
    target: n
  } = t;
  if (!Lb(n) || !n.hasAttribute(Ul) || !n.hasAttribute(Yl))
    return;
  const r = parseInt(n.getAttribute(Ul), 10), i = parseInt(n.getAttribute(Yl), 10), o = e.getCellMeta(r, i);
  if (!o.readOnly) {
    let s = null;
    t.target.checked ? s = o.uncheckedTemplate === void 0 ? !0 : o.checkedTemplate : s = o.uncheckedTemplate === void 0 ? !1 : o.uncheckedTemplate, e.setDataAtCell(r, i, s);
  }
}
function Lb(t) {
  return t.tagName === "INPUT" && t.getAttribute("type") === "checkbox";
}
function Jh(t) {
  throw new Error('Could not dynamically require "' + t + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var ZC = {}, Q6 = {
  get exports() {
    return ZC;
  },
  set exports(t) {
    ZC = t;
  }
};
(function(t, e) {
  (function(n) {
    t.exports = n();
  })(function() {
    return function n(r, i, o) {
      function s(u, c) {
        if (!i[u]) {
          if (!r[u]) {
            var d = typeof Jh == "function" && Jh;
            if (!c && d)
              return d(u, !0);
            if (a)
              return a(u, !0);
            var g = new Error("Cannot find module '" + u + "'");
            throw g.code = "MODULE_NOT_FOUND", g;
          }
          var p = i[u] = { exports: {} };
          r[u][0].call(p.exports, function(C) {
            return s(r[u][1][C] || C);
          }, p, p.exports, n, r, i, o);
        }
        return i[u].exports;
      }
      for (var a = typeof Jh == "function" && Jh, l = 0; l < o.length; l++)
        s(o[l]);
      return s;
    }({ 1: [function(n, r, i) {
      (function(o) {
        var s, a = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, l = Math.ceil, u = Math.floor, c = "[BigNumber Error] ", d = c + "Number primitive has more than 15 significant digits: ", g = 1e14, p = 14, C = 9007199254740991, E = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], I = 1e7, M = 1e9;
        function y(S) {
          var b = 0 | S;
          return 0 < S || S === b ? b : b - 1;
        }
        function $(S) {
          for (var b, L, P = 1, x = S.length, W = S[0] + ""; P < x; ) {
            for (b = S[P++] + "", L = p - b.length; L--; b = "0" + b)
              ;
            W += b;
          }
          for (x = W.length; W.charCodeAt(--x) === 48; )
            ;
          return W.slice(0, x + 1 || 1);
        }
        function X(S, b) {
          var L, P, x = S.c, W = b.c, D = S.s, B = b.s, z = S.e, w = b.e;
          if (!D || !B)
            return null;
          if (L = x && !x[0], P = W && !W[0], L || P)
            return L ? P ? 0 : -B : D;
          if (D != B)
            return D;
          if (L = D < 0, P = z == w, !x || !W)
            return P ? 0 : !x ^ L ? 1 : -1;
          if (!P)
            return w < z ^ L ? 1 : -1;
          for (B = (z = x.length) < (w = W.length) ? z : w, D = 0; D < B; D++)
            if (x[D] != W[D])
              return x[D] > W[D] ^ L ? 1 : -1;
          return z == w ? 0 : w < z ^ L ? 1 : -1;
        }
        function G(S, b, L, P) {
          if (S < b || L < S || S !== (S < 0 ? l(S) : u(S)))
            throw Error(c + (P || "Argument") + (typeof S == "number" ? S < b || L < S ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(S));
        }
        function q(S) {
          var b = S.c.length - 1;
          return y(S.e / p) == b && S.c[b] % 2 != 0;
        }
        function re(S, b) {
          return (1 < S.length ? S.charAt(0) + "." + S.slice(1) : S) + (b < 0 ? "e" : "e+") + b;
        }
        function v(S, b, L) {
          var P, x;
          if (b < 0) {
            for (x = L + "."; ++b; x += L)
              ;
            S = x + S;
          } else if (++b > (P = S.length)) {
            for (x = L, b -= P; --b; x += L)
              ;
            S += x;
          } else
            b < P && (S = S.slice(0, b) + "." + S.slice(b));
          return S;
        }
        (s = function S(b) {
          var L, P, x, W, D, B, z, w, h, f, m = ee.prototype = { constructor: ee, toString: null, valueOf: null }, T = new ee(1), O = 20, _ = 4, Y = -7, U = 21, ie = -1e7, se = 1e7, oe = !1, de = 1, Ce = 0, we = { prefix: "", groupSize: 3, secondaryGroupSize: 0, groupSeparator: ",", decimalSeparator: ".", fractionGroupSize: 0, fractionGroupSeparator: " ", suffix: "" }, pe = "0123456789abcdefghijklmnopqrstuvwxyz";
          function ee(R, A) {
            var N, J, F, Q, K, j, te, Z, ne = this;
            if (!(ne instanceof ee))
              return new ee(R, A);
            if (A == null) {
              if (R instanceof ee)
                return ne.s = R.s, ne.e = R.e, void (ne.c = (R = R.c) ? R.slice() : R);
              if ((j = typeof R == "number") && 0 * R == 0) {
                if (ne.s = 1 / R < 0 ? (R = -R, -1) : 1, R === ~~R) {
                  for (Q = 0, K = R; 10 <= K; K /= 10, Q++)
                    ;
                  return ne.e = Q, void (ne.c = [R]);
                }
                Z = String(R);
              } else {
                if (Z = String(R), !a.test(Z))
                  return x(ne, Z, j);
                ne.s = Z.charCodeAt(0) == 45 ? (Z = Z.slice(1), -1) : 1;
              }
              -1 < (Q = Z.indexOf(".")) && (Z = Z.replace(".", "")), 0 < (K = Z.search(/e/i)) ? (Q < 0 && (Q = K), Q += +Z.slice(K + 1), Z = Z.substring(0, K)) : Q < 0 && (Q = Z.length);
            } else {
              if (G(A, 2, pe.length, "Base"), Z = String(R), A == 10)
                return Fe(ne = new ee(R instanceof ee ? R : Z), O + ne.e + 1, _);
              if (j = typeof R == "number") {
                if (0 * R != 0)
                  return x(ne, Z, j, A);
                if (ne.s = 1 / R < 0 ? (Z = Z.slice(1), -1) : 1, ee.DEBUG && 15 < Z.replace(/^0\.0*|\./, "").length)
                  throw Error(d + R);
                j = !1;
              } else
                ne.s = Z.charCodeAt(0) === 45 ? (Z = Z.slice(1), -1) : 1;
              for (N = pe.slice(0, A), Q = K = 0, te = Z.length; K < te; K++)
                if (N.indexOf(J = Z.charAt(K)) < 0) {
                  if (J == ".") {
                    if (Q < K) {
                      Q = te;
                      continue;
                    }
                  } else if (!F && (Z == Z.toUpperCase() && (Z = Z.toLowerCase()) || Z == Z.toLowerCase() && (Z = Z.toUpperCase()))) {
                    F = !0, K = -1, Q = 0;
                    continue;
                  }
                  return x(ne, String(R), j, A);
                }
              -1 < (Q = (Z = P(Z, A, 10, ne.s)).indexOf(".")) ? Z = Z.replace(".", "") : Q = Z.length;
            }
            for (K = 0; Z.charCodeAt(K) === 48; K++)
              ;
            for (te = Z.length; Z.charCodeAt(--te) === 48; )
              ;
            if (Z = Z.slice(K, ++te)) {
              if (te -= K, j && ee.DEBUG && 15 < te && (C < R || R !== u(R)))
                throw Error(d + ne.s * R);
              if (se < (Q = Q - K - 1))
                ne.c = ne.e = null;
              else if (Q < ie)
                ne.c = [ne.e = 0];
              else {
                if (ne.e = Q, ne.c = [], K = (Q + 1) % p, Q < 0 && (K += p), K < te) {
                  for (K && ne.c.push(+Z.slice(0, K)), te -= p; K < te; )
                    ne.c.push(+Z.slice(K, K += p));
                  Z = Z.slice(K), K = p - Z.length;
                } else
                  K -= te;
                for (; K--; Z += "0")
                  ;
                ne.c.push(+Z);
              }
            } else
              ne.c = [ne.e = 0];
          }
          function ye(R, A, N, J) {
            var F, Q, K, j, te;
            if (N == null ? N = _ : G(N, 0, 8), !R.c)
              return R.toString();
            if (F = R.c[0], K = R.e, A == null)
              te = $(R.c), te = J == 1 || J == 2 && (K <= Y || U <= K) ? re(te, K) : v(te, K, "0");
            else if (Q = (R = Fe(new ee(R), A, N)).e, j = (te = $(R.c)).length, J == 1 || J == 2 && (A <= Q || Q <= Y)) {
              for (; j < A; te += "0", j++)
                ;
              te = re(te, Q);
            } else if (A -= K, te = v(te, Q, "0"), j < Q + 1) {
              if (0 < --A)
                for (te += "."; A--; te += "0")
                  ;
            } else if (0 < (A += Q - j))
              for (Q + 1 == j && (te += "."); A--; te += "0")
                ;
            return R.s < 0 && F ? "-" + te : te;
          }
          function $e(R, A) {
            for (var N, J = 1, F = new ee(R[0]); J < R.length; J++) {
              if (!(N = new ee(R[J])).s) {
                F = N;
                break;
              }
              A.call(F, N) && (F = N);
            }
            return F;
          }
          function Ae(R, A, N) {
            for (var J = 1, F = A.length; !A[--F]; A.pop())
              ;
            for (F = A[0]; 10 <= F; F /= 10, J++)
              ;
            return (N = J + N * p - 1) > se ? R.c = R.e = null : R.c = N < ie ? [R.e = 0] : (R.e = N, A), R;
          }
          function Fe(R, A, N, J) {
            var F, Q, K, j, te, Z, ne, fe = R.c, Ee = E;
            if (fe) {
              e: {
                for (F = 1, j = fe[0]; 10 <= j; j /= 10, F++)
                  ;
                if ((Q = A - F) < 0)
                  Q += p, K = A, ne = (te = fe[Z = 0]) / Ee[F - K - 1] % 10 | 0;
                else if ((Z = l((Q + 1) / p)) >= fe.length) {
                  if (!J)
                    break e;
                  for (; fe.length <= Z; fe.push(0))
                    ;
                  te = ne = 0, K = (Q %= p) - p + (F = 1);
                } else {
                  for (te = j = fe[Z], F = 1; 10 <= j; j /= 10, F++)
                    ;
                  ne = (K = (Q %= p) - p + F) < 0 ? 0 : te / Ee[F - K - 1] % 10 | 0;
                }
                if (J = J || A < 0 || fe[Z + 1] != null || (K < 0 ? te : te % Ee[F - K - 1]), J = N < 4 ? (ne || J) && (N == 0 || N == (R.s < 0 ? 3 : 2)) : 5 < ne || ne == 5 && (N == 4 || J || N == 6 && (0 < Q ? 0 < K ? te / Ee[F - K] : 0 : fe[Z - 1]) % 10 & 1 || N == (R.s < 0 ? 8 : 7)), A < 1 || !fe[0])
                  return fe.length = 0, J ? (A -= R.e + 1, fe[0] = Ee[(p - A % p) % p], R.e = -A || 0) : fe[0] = R.e = 0, R;
                if (Q == 0 ? (fe.length = Z, j = 1, Z--) : (fe.length = Z + 1, j = Ee[p - Q], fe[Z] = 0 < K ? u(te / Ee[F - K] % Ee[K]) * j : 0), J)
                  for (; ; ) {
                    if (Z == 0) {
                      for (Q = 1, K = fe[0]; 10 <= K; K /= 10, Q++)
                        ;
                      for (K = fe[0] += j, j = 1; 10 <= K; K /= 10, j++)
                        ;
                      Q != j && (R.e++, fe[0] == g && (fe[0] = 1));
                      break;
                    }
                    if (fe[Z] += j, fe[Z] != g)
                      break;
                    fe[Z--] = 0, j = 1;
                  }
                for (Q = fe.length; fe[--Q] === 0; fe.pop())
                  ;
              }
              R.e > se ? R.c = R.e = null : R.e < ie && (R.c = [R.e = 0]);
            }
            return R;
          }
          function Ie(R) {
            var A, N = R.e;
            return N === null ? R.toString() : (A = $(R.c), A = N <= Y || U <= N ? re(A, N) : v(A, N, "0"), R.s < 0 ? "-" + A : A);
          }
          return ee.clone = S, ee.ROUND_UP = 0, ee.ROUND_DOWN = 1, ee.ROUND_CEIL = 2, ee.ROUND_FLOOR = 3, ee.ROUND_HALF_UP = 4, ee.ROUND_HALF_DOWN = 5, ee.ROUND_HALF_EVEN = 6, ee.ROUND_HALF_CEIL = 7, ee.ROUND_HALF_FLOOR = 8, ee.EUCLID = 9, ee.config = ee.set = function(R) {
            var A, N;
            if (R != null) {
              if (typeof R != "object")
                throw Error(c + "Object expected: " + R);
              if (R.hasOwnProperty(A = "DECIMAL_PLACES") && (G(N = R[A], 0, M, A), O = N), R.hasOwnProperty(A = "ROUNDING_MODE") && (G(N = R[A], 0, 8, A), _ = N), R.hasOwnProperty(A = "EXPONENTIAL_AT") && ((N = R[A]) && N.pop ? (G(N[0], -M, 0, A), G(N[1], 0, M, A), Y = N[0], U = N[1]) : (G(N, -M, M, A), Y = -(U = N < 0 ? -N : N))), R.hasOwnProperty(A = "RANGE"))
                if ((N = R[A]) && N.pop)
                  G(N[0], -M, -1, A), G(N[1], 1, M, A), ie = N[0], se = N[1];
                else {
                  if (G(N, -M, M, A), !N)
                    throw Error(c + A + " cannot be zero: " + N);
                  ie = -(se = N < 0 ? -N : N);
                }
              if (R.hasOwnProperty(A = "CRYPTO")) {
                if ((N = R[A]) !== !!N)
                  throw Error(c + A + " not true or false: " + N);
                if (N) {
                  if (typeof crypto > "u" || !crypto || !crypto.getRandomValues && !crypto.randomBytes)
                    throw oe = !N, Error(c + "crypto unavailable");
                  oe = N;
                } else
                  oe = N;
              }
              if (R.hasOwnProperty(A = "MODULO_MODE") && (G(N = R[A], 0, 9, A), de = N), R.hasOwnProperty(A = "POW_PRECISION") && (G(N = R[A], 0, M, A), Ce = N), R.hasOwnProperty(A = "FORMAT")) {
                if (typeof (N = R[A]) != "object")
                  throw Error(c + A + " not an object: " + N);
                we = N;
              }
              if (R.hasOwnProperty(A = "ALPHABET")) {
                if (typeof (N = R[A]) != "string" || /^.$|[+-.\s]|(.).*\1/.test(N))
                  throw Error(c + A + " invalid: " + N);
                pe = N;
              }
            }
            return { DECIMAL_PLACES: O, ROUNDING_MODE: _, EXPONENTIAL_AT: [Y, U], RANGE: [ie, se], CRYPTO: oe, MODULO_MODE: de, POW_PRECISION: Ce, FORMAT: we, ALPHABET: pe };
          }, ee.isBigNumber = function(R) {
            return R instanceof ee || R && R._isBigNumber === !0 || !1;
          }, ee.maximum = ee.max = function() {
            return $e(arguments, m.lt);
          }, ee.minimum = ee.min = function() {
            return $e(arguments, m.gt);
          }, ee.random = (W = 9007199254740992, D = Math.random() * W & 2097151 ? function() {
            return u(Math.random() * W);
          } : function() {
            return 8388608 * (1073741824 * Math.random() | 0) + (8388608 * Math.random() | 0);
          }, function(R) {
            var A, N, J, F, Q, K = 0, j = [], te = new ee(T);
            if (R == null ? R = O : G(R, 0, M), F = l(R / p), oe)
              if (crypto.getRandomValues) {
                for (A = crypto.getRandomValues(new Uint32Array(F *= 2)); K < F; )
                  9e15 <= (Q = 131072 * A[K] + (A[K + 1] >>> 11)) ? (N = crypto.getRandomValues(new Uint32Array(2)), A[K] = N[0], A[K + 1] = N[1]) : (j.push(Q % 1e14), K += 2);
                K = F / 2;
              } else {
                if (!crypto.randomBytes)
                  throw oe = !1, Error(c + "crypto unavailable");
                for (A = crypto.randomBytes(F *= 7); K < F; )
                  9e15 <= (Q = 281474976710656 * (31 & A[K]) + 1099511627776 * A[K + 1] + 4294967296 * A[K + 2] + 16777216 * A[K + 3] + (A[K + 4] << 16) + (A[K + 5] << 8) + A[K + 6]) ? crypto.randomBytes(7).copy(A, K) : (j.push(Q % 1e14), K += 7);
                K = F / 7;
              }
            if (!oe)
              for (; K < F; )
                (Q = D()) < 9e15 && (j[K++] = Q % 1e14);
            for (F = j[--K], R %= p, F && R && (Q = E[p - R], j[K] = u(F / Q) * Q); j[K] === 0; j.pop(), K--)
              ;
            if (K < 0)
              j = [J = 0];
            else {
              for (J = -1; j[0] === 0; j.splice(0, 1), J -= p)
                ;
              for (K = 1, Q = j[0]; 10 <= Q; Q /= 10, K++)
                ;
              K < p && (J -= p - K);
            }
            return te.e = J, te.c = j, te;
          }), ee.sum = function() {
            for (var R = 1, A = arguments, N = new ee(A[0]); R < A.length; )
              N = N.plus(A[R++]);
            return N;
          }, P = function() {
            var R = "0123456789";
            function A(N, J, F, Q) {
              for (var K, j, te = [0], Z = 0, ne = N.length; Z < ne; ) {
                for (j = te.length; j--; te[j] *= J)
                  ;
                for (te[0] += Q.indexOf(N.charAt(Z++)), K = 0; K < te.length; K++)
                  te[K] > F - 1 && (te[K + 1] == null && (te[K + 1] = 0), te[K + 1] += te[K] / F | 0, te[K] %= F);
              }
              return te.reverse();
            }
            return function(N, J, F, Q, K) {
              var j, te, Z, ne, fe, Ee, He, ke, Ge = N.indexOf("."), Rt = O, Qe = _;
              for (0 <= Ge && (ne = Ce, Ce = 0, N = N.replace(".", ""), Ee = (ke = new ee(J)).pow(N.length - Ge), Ce = ne, ke.c = A(v($(Ee.c), Ee.e, "0"), 10, F, R), ke.e = ke.c.length), Z = ne = (He = A(N, J, F, K ? (j = pe, R) : (j = R, pe))).length; He[--ne] == 0; He.pop())
                ;
              if (!He[0])
                return j.charAt(0);
              if (Ge < 0 ? --Z : (Ee.c = He, Ee.e = Z, Ee.s = Q, He = (Ee = L(Ee, ke, Rt, Qe, F)).c, fe = Ee.r, Z = Ee.e), Ge = He[te = Z + Rt + 1], ne = F / 2, fe = fe || te < 0 || He[te + 1] != null, fe = Qe < 4 ? (Ge != null || fe) && (Qe == 0 || Qe == (Ee.s < 0 ? 3 : 2)) : ne < Ge || Ge == ne && (Qe == 4 || fe || Qe == 6 && 1 & He[te - 1] || Qe == (Ee.s < 0 ? 8 : 7)), te < 1 || !He[0])
                N = fe ? v(j.charAt(1), -Rt, j.charAt(0)) : j.charAt(0);
              else {
                if (He.length = te, fe)
                  for (--F; ++He[--te] > F; )
                    He[te] = 0, te || (++Z, He = [1].concat(He));
                for (ne = He.length; !He[--ne]; )
                  ;
                for (Ge = 0, N = ""; Ge <= ne; N += j.charAt(He[Ge++]))
                  ;
                N = v(N, Z, j.charAt(0));
              }
              return N;
            };
          }(), L = function() {
            function R(J, F, Q) {
              var K, j, te, Z, ne = 0, fe = J.length, Ee = F % I, He = F / I | 0;
              for (J = J.slice(); fe--; )
                ne = ((j = Ee * (te = J[fe] % I) + (K = He * te + (Z = J[fe] / I | 0) * Ee) % I * I + ne) / Q | 0) + (K / I | 0) + He * Z, J[fe] = j % Q;
              return ne && (J = [ne].concat(J)), J;
            }
            function A(J, F, Q, K) {
              var j, te;
              if (Q != K)
                te = K < Q ? 1 : -1;
              else
                for (j = te = 0; j < Q; j++)
                  if (J[j] != F[j]) {
                    te = J[j] > F[j] ? 1 : -1;
                    break;
                  }
              return te;
            }
            function N(J, F, Q, K) {
              for (var j = 0; Q--; )
                J[Q] -= j, j = J[Q] < F[Q] ? 1 : 0, J[Q] = j * K + J[Q] - F[Q];
              for (; !J[0] && 1 < J.length; J.splice(0, 1))
                ;
            }
            return function(J, F, Q, K, j) {
              var te, Z, ne, fe, Ee, He, ke, Ge, Rt, Qe, mt, Et, eo, Or, xt, rn, bi, Tn = J.s == F.s ? 1 : -1, Jt = J.c, Mt = F.c;
              if (!(Jt && Jt[0] && Mt && Mt[0]))
                return new ee(J.s && F.s && (Jt ? !Mt || Jt[0] != Mt[0] : Mt) ? Jt && Jt[0] == 0 || !Mt ? 0 * Tn : Tn / 0 : NaN);
              for (Rt = (Ge = new ee(Tn)).c = [], Tn = Q + (Z = J.e - F.e) + 1, j || (j = g, Z = y(J.e / p) - y(F.e / p), Tn = Tn / p | 0), ne = 0; Mt[ne] == (Jt[ne] || 0); ne++)
                ;
              if (Mt[ne] > (Jt[ne] || 0) && Z--, Tn < 0)
                Rt.push(1), fe = !0;
              else {
                for (Or = Jt.length, rn = Mt.length, Tn += 2, 1 < (Ee = u(j / (Mt[ne = 0] + 1))) && (Mt = R(Mt, Ee, j), Jt = R(Jt, Ee, j), rn = Mt.length, Or = Jt.length), eo = rn, mt = (Qe = Jt.slice(0, rn)).length; mt < rn; Qe[mt++] = 0)
                  ;
                bi = Mt.slice(), bi = [0].concat(bi), xt = Mt[0], Mt[1] >= j / 2 && xt++;
                do {
                  if (Ee = 0, (te = A(Mt, Qe, rn, mt)) < 0) {
                    if (Et = Qe[0], rn != mt && (Et = Et * j + (Qe[1] || 0)), 1 < (Ee = u(Et / xt)))
                      for (j <= Ee && (Ee = j - 1), ke = (He = R(Mt, Ee, j)).length, mt = Qe.length; A(He, Qe, ke, mt) == 1; )
                        Ee--, N(He, rn < ke ? bi : Mt, ke, j), ke = He.length, te = 1;
                    else
                      Ee == 0 && (te = Ee = 1), ke = (He = Mt.slice()).length;
                    if (ke < mt && (He = [0].concat(He)), N(Qe, He, mt, j), mt = Qe.length, te == -1)
                      for (; A(Mt, Qe, rn, mt) < 1; )
                        Ee++, N(Qe, rn < mt ? bi : Mt, mt, j), mt = Qe.length;
                  } else
                    te === 0 && (Ee++, Qe = [0]);
                  Rt[ne++] = Ee, Qe[0] ? Qe[mt++] = Jt[eo] || 0 : (Qe = [Jt[eo]], mt = 1);
                } while ((eo++ < Or || Qe[0] != null) && Tn--);
                fe = Qe[0] != null, Rt[0] || Rt.splice(0, 1);
              }
              if (j == g) {
                for (ne = 1, Tn = Rt[0]; 10 <= Tn; Tn /= 10, ne++)
                  ;
                Fe(Ge, Q + (Ge.e = ne + Z * p - 1) + 1, K, fe);
              } else
                Ge.e = Z, Ge.r = +fe;
              return Ge;
            };
          }(), B = /^(-?)0([xbo])(?=\w[\w.]*$)/i, z = /^([^.]+)\.$/, w = /^\.([^.]+)$/, h = /^-?(Infinity|NaN)$/, f = /^\s*\+(?=[\w.])|^\s+|\s+$/g, x = function(R, A, N, J) {
            var F, Q = N ? A : A.replace(f, "");
            if (h.test(Q))
              R.s = isNaN(Q) ? null : Q < 0 ? -1 : 1, R.c = R.e = null;
            else {
              if (!N && (Q = Q.replace(B, function(K, j, te) {
                return F = (te = te.toLowerCase()) == "x" ? 16 : te == "b" ? 2 : 8, J && J != F ? K : j;
              }), J && (F = J, Q = Q.replace(z, "$1").replace(w, "0.$1")), A != Q))
                return new ee(Q, F);
              if (ee.DEBUG)
                throw Error(c + "Not a" + (J ? " base " + J : "") + " number: " + A);
              R.c = R.e = R.s = null;
            }
          }, m.absoluteValue = m.abs = function() {
            var R = new ee(this);
            return R.s < 0 && (R.s = 1), R;
          }, m.comparedTo = function(R, A) {
            return X(this, new ee(R, A));
          }, m.decimalPlaces = m.dp = function(R, A) {
            var N, J, F;
            if (R != null)
              return G(R, 0, M), A == null ? A = _ : G(A, 0, 8), Fe(new ee(this), R + this.e + 1, A);
            if (!(N = this.c))
              return null;
            if (J = ((F = N.length - 1) - y(this.e / p)) * p, F = N[F])
              for (; F % 10 == 0; F /= 10, J--)
                ;
            return J < 0 && (J = 0), J;
          }, m.dividedBy = m.div = function(R, A) {
            return L(this, new ee(R, A), O, _);
          }, m.dividedToIntegerBy = m.idiv = function(R, A) {
            return L(this, new ee(R, A), 0, 1);
          }, m.exponentiatedBy = m.pow = function(R, A) {
            var N, J, F, Q, K, j, te, Z, ne = this;
            if ((R = new ee(R)).c && !R.isInteger())
              throw Error(c + "Exponent not an integer: " + Ie(R));
            if (A != null && (A = new ee(A)), K = 14 < R.e, !ne.c || !ne.c[0] || ne.c[0] == 1 && !ne.e && ne.c.length == 1 || !R.c || !R.c[0])
              return Z = new ee(Math.pow(+Ie(ne), K ? 2 - q(R) : +Ie(R))), A ? Z.mod(A) : Z;
            if (j = R.s < 0, A) {
              if (A.c ? !A.c[0] : !A.s)
                return new ee(NaN);
              (J = !j && ne.isInteger() && A.isInteger()) && (ne = ne.mod(A));
            } else {
              if (9 < R.e && (0 < ne.e || ne.e < -1 || (ne.e == 0 ? 1 < ne.c[0] || K && 24e7 <= ne.c[1] : ne.c[0] < 8e13 || K && ne.c[0] <= 9999975e7)))
                return Q = ne.s < 0 && q(R) ? -0 : 0, -1 < ne.e && (Q = 1 / Q), new ee(j ? 1 / Q : Q);
              Ce && (Q = l(Ce / p + 2));
            }
            for (te = K ? (N = new ee(0.5), j && (R.s = 1), q(R)) : (F = Math.abs(+Ie(R))) % 2, Z = new ee(T); ; ) {
              if (te) {
                if (!(Z = Z.times(ne)).c)
                  break;
                Q ? Z.c.length > Q && (Z.c.length = Q) : J && (Z = Z.mod(A));
              }
              if (F) {
                if ((F = u(F / 2)) === 0)
                  break;
                te = F % 2;
              } else if (Fe(R = R.times(N), R.e + 1, 1), 14 < R.e)
                te = q(R);
              else {
                if ((F = +Ie(R)) == 0)
                  break;
                te = F % 2;
              }
              ne = ne.times(ne), Q ? ne.c && ne.c.length > Q && (ne.c.length = Q) : J && (ne = ne.mod(A));
            }
            return J ? Z : (j && (Z = T.div(Z)), A ? Z.mod(A) : Q ? Fe(Z, Ce, _, void 0) : Z);
          }, m.integerValue = function(R) {
            var A = new ee(this);
            return R == null ? R = _ : G(R, 0, 8), Fe(A, A.e + 1, R);
          }, m.isEqualTo = m.eq = function(R, A) {
            return X(this, new ee(R, A)) === 0;
          }, m.isFinite = function() {
            return !!this.c;
          }, m.isGreaterThan = m.gt = function(R, A) {
            return 0 < X(this, new ee(R, A));
          }, m.isGreaterThanOrEqualTo = m.gte = function(R, A) {
            return (A = X(this, new ee(R, A))) === 1 || A === 0;
          }, m.isInteger = function() {
            return !!this.c && y(this.e / p) > this.c.length - 2;
          }, m.isLessThan = m.lt = function(R, A) {
            return X(this, new ee(R, A)) < 0;
          }, m.isLessThanOrEqualTo = m.lte = function(R, A) {
            return (A = X(this, new ee(R, A))) === -1 || A === 0;
          }, m.isNaN = function() {
            return !this.s;
          }, m.isNegative = function() {
            return this.s < 0;
          }, m.isPositive = function() {
            return 0 < this.s;
          }, m.isZero = function() {
            return !!this.c && this.c[0] == 0;
          }, m.minus = function(R, A) {
            var N, J, F, Q, K = this, j = K.s;
            if (A = (R = new ee(R, A)).s, !j || !A)
              return new ee(NaN);
            if (j != A)
              return R.s = -A, K.plus(R);
            var te = K.e / p, Z = R.e / p, ne = K.c, fe = R.c;
            if (!te || !Z) {
              if (!ne || !fe)
                return ne ? (R.s = -A, R) : new ee(fe ? K : NaN);
              if (!ne[0] || !fe[0])
                return fe[0] ? (R.s = -A, R) : new ee(ne[0] ? K : _ == 3 ? -0 : 0);
            }
            if (te = y(te), Z = y(Z), ne = ne.slice(), j = te - Z) {
              for ((F = (Q = j < 0) ? (j = -j, ne) : (Z = te, fe)).reverse(), A = j; A--; F.push(0))
                ;
              F.reverse();
            } else
              for (J = (Q = (j = ne.length) < (A = fe.length)) ? j : A, j = A = 0; A < J; A++)
                if (ne[A] != fe[A]) {
                  Q = ne[A] < fe[A];
                  break;
                }
            if (Q && (F = ne, ne = fe, fe = F, R.s = -R.s), 0 < (A = (J = fe.length) - (N = ne.length)))
              for (; A--; ne[N++] = 0)
                ;
            for (A = g - 1; j < J; ) {
              if (ne[--J] < fe[J]) {
                for (N = J; N && !ne[--N]; ne[N] = A)
                  ;
                --ne[N], ne[J] += g;
              }
              ne[J] -= fe[J];
            }
            for (; ne[0] == 0; ne.splice(0, 1), --Z)
              ;
            return ne[0] ? Ae(R, ne, Z) : (R.s = _ == 3 ? -1 : 1, R.c = [R.e = 0], R);
          }, m.modulo = m.mod = function(R, A) {
            var N, J, F = this;
            return R = new ee(R, A), !F.c || !R.s || R.c && !R.c[0] ? new ee(NaN) : !R.c || F.c && !F.c[0] ? new ee(F) : (de == 9 ? (J = R.s, R.s = 1, N = L(F, R, 0, 3), R.s = J, N.s *= J) : N = L(F, R, 0, de), (R = F.minus(N.times(R))).c[0] || de != 1 || (R.s = F.s), R);
          }, m.multipliedBy = m.times = function(R, A) {
            var N, J, F, Q, K, j, te, Z, ne, fe, Ee, He, ke, Ge, Rt, Qe = this, mt = Qe.c, Et = (R = new ee(R, A)).c;
            if (!(mt && Et && mt[0] && Et[0]))
              return !Qe.s || !R.s || mt && !mt[0] && !Et || Et && !Et[0] && !mt ? R.c = R.e = R.s = null : (R.s *= Qe.s, mt && Et ? (R.c = [0], R.e = 0) : R.c = R.e = null), R;
            for (J = y(Qe.e / p) + y(R.e / p), R.s *= Qe.s, (te = mt.length) < (fe = Et.length) && (ke = mt, mt = Et, Et = ke, F = te, te = fe, fe = F), F = te + fe, ke = []; F--; ke.push(0))
              ;
            for (Ge = g, Rt = I, F = fe; 0 <= --F; ) {
              for (N = 0, Ee = Et[F] % Rt, He = Et[F] / Rt | 0, Q = F + (K = te); F < Q; )
                N = ((Z = Ee * (Z = mt[--K] % Rt) + (j = He * Z + (ne = mt[K] / Rt | 0) * Ee) % Rt * Rt + ke[Q] + N) / Ge | 0) + (j / Rt | 0) + He * ne, ke[Q--] = Z % Ge;
              ke[Q] = N;
            }
            return N ? ++J : ke.splice(0, 1), Ae(R, ke, J);
          }, m.negated = function() {
            var R = new ee(this);
            return R.s = -R.s || null, R;
          }, m.plus = function(R, A) {
            var N, J = this, F = J.s;
            if (A = (R = new ee(R, A)).s, !F || !A)
              return new ee(NaN);
            if (F != A)
              return R.s = -A, J.minus(R);
            var Q = J.e / p, K = R.e / p, j = J.c, te = R.c;
            if (!Q || !K) {
              if (!j || !te)
                return new ee(F / 0);
              if (!j[0] || !te[0])
                return te[0] ? R : new ee(j[0] ? J : 0 * F);
            }
            if (Q = y(Q), K = y(K), j = j.slice(), F = Q - K) {
              for ((N = 0 < F ? (K = Q, te) : (F = -F, j)).reverse(); F--; N.push(0))
                ;
              N.reverse();
            }
            for ((F = j.length) - (A = te.length) < 0 && (N = te, te = j, j = N, A = F), F = 0; A; )
              F = (j[--A] = j[A] + te[A] + F) / g | 0, j[A] = g === j[A] ? 0 : j[A] % g;
            return F && (j = [F].concat(j), ++K), Ae(R, j, K);
          }, m.precision = m.sd = function(R, A) {
            var N, J, F;
            if (R != null && R !== !!R)
              return G(R, 1, M), A == null ? A = _ : G(A, 0, 8), Fe(new ee(this), R, A);
            if (!(N = this.c))
              return null;
            if (J = (F = N.length - 1) * p + 1, F = N[F]) {
              for (; F % 10 == 0; F /= 10, J--)
                ;
              for (F = N[0]; 10 <= F; F /= 10, J++)
                ;
            }
            return R && this.e + 1 > J && (J = this.e + 1), J;
          }, m.shiftedBy = function(R) {
            return G(R, -C, C), this.times("1e" + R);
          }, m.squareRoot = m.sqrt = function() {
            var R, A, N, J, F, Q = this, K = Q.c, j = Q.s, te = Q.e, Z = O + 4, ne = new ee("0.5");
            if (j !== 1 || !K || !K[0])
              return new ee(!j || j < 0 && (!K || K[0]) ? NaN : K ? Q : 1 / 0);
            if ((N = (j = Math.sqrt(+Ie(Q))) == 0 || j == 1 / 0 ? (((A = $(K)).length + te) % 2 == 0 && (A += "0"), j = Math.sqrt(+A), te = y((te + 1) / 2) - (te < 0 || te % 2), new ee(A = j == 1 / 0 ? "1e" + te : (A = j.toExponential()).slice(0, A.indexOf("e") + 1) + te)) : new ee(j + "")).c[0]) {
              for ((j = (te = N.e) + Z) < 3 && (j = 0); ; )
                if (F = N, N = ne.times(F.plus(L(Q, F, Z, 1))), $(F.c).slice(0, j) === (A = $(N.c)).slice(0, j)) {
                  if (N.e < te && --j, (A = A.slice(j - 3, j + 1)) != "9999" && (J || A != "4999")) {
                    +A && (+A.slice(1) || A.charAt(0) != "5") || (Fe(N, N.e + O + 2, 1), R = !N.times(N).eq(Q));
                    break;
                  }
                  if (!J && (Fe(F, F.e + O + 2, 0), F.times(F).eq(Q))) {
                    N = F;
                    break;
                  }
                  Z += 4, j += 4, J = 1;
                }
            }
            return Fe(N, N.e + O + 1, _, R);
          }, m.toExponential = function(R, A) {
            return R != null && (G(R, 0, M), R++), ye(this, R, A, 1);
          }, m.toFixed = function(R, A) {
            return R != null && (G(R, 0, M), R = R + this.e + 1), ye(this, R, A);
          }, m.toFormat = function(R, A, N) {
            var J;
            if (N == null)
              R != null && A && typeof A == "object" ? (N = A, A = null) : R && typeof R == "object" ? (N = R, R = A = null) : N = we;
            else if (typeof N != "object")
              throw Error(c + "Argument not an object: " + N);
            if (J = this.toFixed(R, A), this.c) {
              var F, Q = J.split("."), K = +N.groupSize, j = +N.secondaryGroupSize, te = N.groupSeparator || "", Z = Q[0], ne = Q[1], fe = this.s < 0, Ee = fe ? Z.slice(1) : Z, He = Ee.length;
              if (j && (F = K, K = j, He -= j = F), 0 < K && 0 < He) {
                for (F = He % K || K, Z = Ee.substr(0, F); F < He; F += K)
                  Z += te + Ee.substr(F, K);
                0 < j && (Z += te + Ee.slice(F)), fe && (Z = "-" + Z);
              }
              J = ne ? Z + (N.decimalSeparator || "") + ((j = +N.fractionGroupSize) ? ne.replace(new RegExp("\\d{" + j + "}\\B", "g"), "$&" + (N.fractionGroupSeparator || "")) : ne) : Z;
            }
            return (N.prefix || "") + J + (N.suffix || "");
          }, m.toFraction = function(R) {
            var A, N, J, F, Q, K, j, te, Z, ne, fe, Ee, He = this, ke = He.c;
            if (R != null && (!(j = new ee(R)).isInteger() && (j.c || j.s !== 1) || j.lt(T)))
              throw Error(c + "Argument " + (j.isInteger() ? "out of range: " : "not an integer: ") + Ie(j));
            if (!ke)
              return new ee(He);
            for (A = new ee(T), Z = N = new ee(T), J = te = new ee(T), Ee = $(ke), Q = A.e = Ee.length - He.e - 1, A.c[0] = E[(K = Q % p) < 0 ? p + K : K], R = !R || 0 < j.comparedTo(A) ? 0 < Q ? A : Z : j, K = se, se = 1 / 0, j = new ee(Ee), te.c[0] = 0; ne = L(j, A, 0, 1), (F = N.plus(ne.times(J))).comparedTo(R) != 1; )
              N = J, J = F, Z = te.plus(ne.times(F = Z)), te = F, A = j.minus(ne.times(F = A)), j = F;
            return F = L(R.minus(N), J, 0, 1), te = te.plus(F.times(Z)), N = N.plus(F.times(J)), te.s = Z.s = He.s, fe = L(Z, J, Q *= 2, _).minus(He).abs().comparedTo(L(te, N, Q, _).minus(He).abs()) < 1 ? [Z, J] : [te, N], se = K, fe;
          }, m.toNumber = function() {
            return +Ie(this);
          }, m.toPrecision = function(R, A) {
            return R != null && G(R, 1, M), ye(this, R, A, 2);
          }, m.toString = function(R) {
            var A, N = this, J = N.s, F = N.e;
            return F === null ? J ? (A = "Infinity", J < 0 && (A = "-" + A)) : A = "NaN" : (A = R == null ? F <= Y || U <= F ? re($(N.c), F) : v($(N.c), F, "0") : R === 10 ? v($((N = Fe(new ee(N), O + F + 1, _)).c), N.e, "0") : (G(R, 2, pe.length, "Base"), P(v($(N.c), F, "0"), 10, R, J, !0)), J < 0 && N.c[0] && (A = "-" + A)), A;
          }, m.valueOf = m.toJSON = function() {
            return Ie(this);
          }, m._isBigNumber = !0, typeof Symbol == "function" && typeof Symbol.iterator == "symbol" && (m[Symbol.toStringTag] = "BigNumber", m[Symbol.for("nodejs.util.inspect.custom")] = m.valueOf), b != null && ee.set(b), ee;
        }()).default = s.BigNumber = s, r !== void 0 && r.exports ? r.exports = s : (o || (o = typeof self < "u" && self ? self : window), o.BigNumber = s);
      })(this);
    }, {}], 2: [function(n, r, i) {
      r.exports = { languageTag: "en-US", delimiters: { thousands: ",", decimal: "." }, abbreviations: { thousand: "k", million: "m", billion: "b", trillion: "t" }, spaceSeparated: !1, ordinal: function(o) {
        var s = o % 10;
        return ~~(o % 100 / 10) == 1 ? "th" : s === 1 ? "st" : s === 2 ? "nd" : s === 3 ? "rd" : "th";
      }, currency: { symbol: "$", position: "prefix", code: "USD" }, currencyFormat: { thousandSeparated: !0, totalLength: 4, spaceSeparated: !0 }, formats: { fourDigits: { totalLength: 4, spaceSeparated: !0 }, fullWithTwoDecimals: { output: "currency", thousandSeparated: !0, mantissa: 2 }, fullWithTwoDecimalsNoCurrency: { thousandSeparated: !0, mantissa: 2 }, fullWithNoDecimals: { output: "currency", thousandSeparated: !0, mantissa: 0 } } };
    }, {}], 3: [function(n, r, i) {
      function o(y, $) {
        return function(X) {
          if (Array.isArray(X))
            return X;
        }(y) || function(X, G) {
          var q = [], re = !0, v = !1, S = void 0;
          try {
            for (var b, L = X[Symbol.iterator](); !(re = (b = L.next()).done) && (q.push(b.value), !G || q.length !== G); re = !0)
              ;
          } catch (P) {
            v = !0, S = P;
          } finally {
            try {
              re || L.return == null || L.return();
            } finally {
              if (v)
                throw S;
            }
          }
          return q;
        }(y, $) || function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }();
      }
      var s = n("./globalState"), a = n("./validating"), l = n("./parsing"), u = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"], c = { general: { scale: 1024, suffixes: u, marker: "bd" }, binary: { scale: 1024, suffixes: ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"], marker: "b" }, decimal: { scale: 1e3, suffixes: u, marker: "d" } }, d = { totalLength: 0, characteristic: 0, forceAverage: !1, average: !1, mantissa: -1, optionalMantissa: !0, thousandSeparated: !1, spaceSeparated: !1, negative: "sign", forceSign: !1 };
      function g(y) {
        var $ = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {}, X = 2 < arguments.length ? arguments[2] : void 0;
        if (typeof $ == "string" && ($ = l.parseFormat($)), !a.validateFormat($))
          return "ERROR: invalid format";
        var G = $.prefix || "", q = $.postfix || "", re = function(v, S, b) {
          switch (S.output) {
            case "currency":
              return S = M(S, s.currentCurrencyDefaultFormat()), function(pe, ee, ye) {
                var $e = ye.currentCurrency(), Ae = Object.assign({}, d, ee), Fe = void 0, Ie = "", R = !!Ae.totalLength || !!Ae.forceAverage || Ae.average, A = ee.currencyPosition || $e.position, N = ee.currencySymbol || $e.symbol;
                Ae.spaceSeparated && (Ie = " "), A === "infix" && (Fe = Ie + N + Ie);
                var J = I({ instance: pe, providedFormat: ee, state: ye, decimalSeparator: Fe });
                return A === "prefix" && (J = pe._value < 0 && Ae.negative === "sign" ? "-".concat(Ie).concat(N).concat(J.slice(1)) : N + Ie + J), A && A !== "postfix" || (J = J + (Ie = R ? "" : Ie) + N), J;
              }(v, S, s);
            case "percent":
              return S = M(S, s.currentPercentageDefaultFormat()), function(pe, ee, ye, $e) {
                var Ae = ee.prefixSymbol, Fe = I({ instance: $e(100 * pe._value), providedFormat: ee, state: ye }), Ie = Object.assign({}, d, ee);
                return Ae ? "%".concat(Ie.spaceSeparated ? " " : "").concat(Fe) : "".concat(Fe).concat(Ie.spaceSeparated ? " " : "", "%");
              }(v, S, s, b);
            case "byte":
              return S = M(S, s.currentByteDefaultFormat()), T = v, _ = s, Y = b, U = (O = S).base || "binary", ie = c[U], se = p(T._value, ie.suffixes, ie.scale), oe = se.value, de = se.suffix, Ce = I({ instance: Y(oe), providedFormat: O, state: _, defaults: _.currentByteDefaultFormat() }), we = _.currentAbbreviations(), "".concat(Ce).concat(we.spaced ? " " : "").concat(de);
            case "time":
              return S = M(S, s.currentTimeDefaultFormat()), w = v, h = Math.floor(w._value / 60 / 60), f = Math.floor((w._value - 60 * h * 60) / 60), m = Math.round(w._value - 60 * h * 60 - 60 * f), "".concat(h, ":").concat(f < 10 ? "0" : "").concat(f, ":").concat(m < 10 ? "0" : "").concat(m);
            case "ordinal":
              return S = M(S, s.currentOrdinalDefaultFormat()), L = v, P = S, W = (x = s).currentOrdinal(), D = Object.assign({}, d, P), B = I({ instance: L, providedFormat: P, state: x }), z = W(L._value), "".concat(B).concat(D.spaceSeparated ? " " : "").concat(z);
            case "number":
            default:
              return I({ instance: v, providedFormat: S, numbro: b });
          }
          var L, P, x, W, D, B, z, w, h, f, m, T, O, _, Y, U, ie, se, oe, de, Ce, we;
        }(y, $, X);
        return re = (re = G + re) + q;
      }
      function p(y, $, X) {
        var G = $[0], q = Math.abs(y);
        if (X <= q) {
          for (var re = 1; re < $.length; ++re) {
            var v = Math.pow(X, re), S = Math.pow(X, re + 1);
            if (v <= q && q < S) {
              G = $[re], y /= v;
              break;
            }
          }
          G === $[0] && (y /= Math.pow(X, $.length - 1), G = $[$.length - 1]);
        }
        return { value: y, suffix: G };
      }
      function C(y) {
        for (var $ = "", X = 0; X < y; X++)
          $ += "0";
        return $;
      }
      function E(y, $) {
        return y.toString().indexOf("e") !== -1 ? function(X, G) {
          var q = X.toString(), re = o(q.split("e"), 2), v = re[0], S = re[1], b = o(v.split("."), 2), L = b[0], P = b[1], x = P === void 0 ? "" : P;
          if (0 < +S)
            q = L + x + C(S - x.length);
          else {
            var W = ".";
            W = +L < 0 ? "-0".concat(W) : "0".concat(W);
            var D = (C(-S - 1) + Math.abs(L) + x).substr(0, G);
            D.length < G && (D += C(G - D.length)), q = W + D;
          }
          return 0 < +S && 0 < G && (q += ".".concat(C(G))), q;
        }(y, $) : (Math.round(+"".concat(y, "e+").concat($)) / Math.pow(10, $)).toFixed($);
      }
      function I(y) {
        var $ = y.instance, X = y.providedFormat, G = y.state, q = G === void 0 ? s : G, re = y.decimalSeparator, v = y.defaults, S = v === void 0 ? q.currentDefaults() : v, b = $._value;
        if (b === 0 && q.hasZeroFormat())
          return q.getZeroFormat();
        if (!isFinite(b))
          return b.toString();
        var L, P, x, W, D, B, z, w, h = Object.assign({}, d, S, X), f = h.totalLength, m = f ? 0 : h.characteristic, T = h.optionalCharacteristic, O = h.forceAverage, _ = !!f || !!O || h.average, Y = f ? -1 : _ && X.mantissa === void 0 ? 0 : h.mantissa, U = !f && (X.optionalMantissa === void 0 ? Y === -1 : h.optionalMantissa), ie = h.trimMantissa, se = h.thousandSeparated, oe = h.spaceSeparated, de = h.negative, Ce = h.forceSign, we = h.exponential, pe = "";
        if (_) {
          var ee = function(R) {
            var A = R.value, N = R.forceAverage, J = R.abbreviations, F = R.spaceSeparated, Q = F !== void 0 && F, K = R.totalLength, j = K === void 0 ? 0 : K, te = "", Z = Math.abs(A), ne = -1;
            if (Z >= Math.pow(10, 12) && !N || N === "trillion" ? (te = J.trillion, A /= Math.pow(10, 12)) : Z < Math.pow(10, 12) && Z >= Math.pow(10, 9) && !N || N === "billion" ? (te = J.billion, A /= Math.pow(10, 9)) : Z < Math.pow(10, 9) && Z >= Math.pow(10, 6) && !N || N === "million" ? (te = J.million, A /= Math.pow(10, 6)) : (Z < Math.pow(10, 6) && Z >= Math.pow(10, 3) && !N || N === "thousand") && (te = J.thousand, A /= Math.pow(10, 3)), te && (te = (Q ? " " : "") + te), j) {
              var fe = A.toString().split(".")[0];
              ne = Math.max(j - fe.length, 0);
            }
            return { value: A, abbreviation: te, mantissaPrecision: ne };
          }({ value: b, forceAverage: O, abbreviations: q.currentAbbreviations(), spaceSeparated: oe, totalLength: f });
          b = ee.value, pe += ee.abbreviation, f && (Y = ee.mantissaPrecision);
        }
        if (we) {
          var ye = (P = (L = { value: b, characteristicPrecision: m }).value, x = L.characteristicPrecision, W = x === void 0 ? 0 : x, D = o(P.toExponential().split("e"), 2), B = D[0], z = D[1], w = +B, W && 1 < W && (w *= Math.pow(10, W - 1), z = 0 <= (z = +z - (W - 1)) ? "+".concat(z) : z), { value: w, abbreviation: "e".concat(z) });
          b = ye.value, pe = ye.abbreviation + pe;
        }
        var $e, Ae, Fe, Ie = function(R, A, N, J, F) {
          if (J === -1)
            return R;
          var Q = E(A, J), K = o(Q.toString().split("."), 2), j = K[0], te = K[1], Z = te === void 0 ? "" : te;
          if (Z.match(/^0+$/) && (N || F))
            return j;
          var ne = Z.match(/0+$/);
          return F && ne ? "".concat(j, ".").concat(Z.toString().slice(0, ne.index)) : Q.toString();
        }(b.toString(), b, U, Y, ie);
        return Ie = function(R, A, N, J, F) {
          var Q = J.currentDelimiters(), K = Q.thousands;
          F = F || Q.decimal;
          var j = Q.thousandsSize || 3, te = R.toString(), Z = te.split(".")[0], ne = te.split(".")[1];
          return N && (A < 0 && (Z = Z.slice(1)), function(fe, Ee) {
            for (var He = [], ke = 0, Ge = fe; 0 < Ge; Ge--)
              ke === Ee && (He.unshift(Ge), ke = 0), ke++;
            return He;
          }(Z.length, j).forEach(function(fe, Ee) {
            Z = Z.slice(0, fe + Ee) + K + Z.slice(fe + Ee);
          }), A < 0 && (Z = "-".concat(Z))), te = ne ? Z + F + ne : Z;
        }(Ie = function(R, A, N, J) {
          var F = R, Q = o(F.toString().split("."), 2), K = Q[0], j = Q[1];
          if (K.match(/^-?0$/) && N)
            return j ? "".concat(K.replace("0", ""), ".").concat(j) : K.replace("0", "");
          if (K.length < J)
            for (var te = J - K.length, Z = 0; Z < te; Z++)
              F = "0".concat(F);
          return F.toString();
        }(Ie, 0, T, m), b, se, q, re), (_ || we) && (Ie = Ie + pe), (Ce || b < 0) && ($e = Ie, Fe = de, Ie = (Ae = b) === 0 ? $e : +$e == 0 ? $e.replace("-", "") : 0 < Ae ? "+".concat($e) : Fe === "sign" ? $e : "(".concat($e.replace("-", ""), ")")), Ie;
      }
      function M(y, $) {
        if (!y)
          return $;
        var X = Object.keys(y);
        return X.length === 1 && X[0] === "output" ? $ : y;
      }
      r.exports = function(y) {
        return { format: function() {
          for (var $ = arguments.length, X = new Array($), G = 0; G < $; G++)
            X[G] = arguments[G];
          return g.apply(void 0, X.concat([y]));
        }, getByteUnit: function() {
          for (var $ = arguments.length, X = new Array($), G = 0; G < $; G++)
            X[G] = arguments[G];
          return function(q) {
            var re = c.general;
            return p(q._value, re.suffixes, re.scale).suffix;
          }.apply(void 0, X.concat([y]));
        }, getBinaryByteUnit: function() {
          for (var $ = arguments.length, X = new Array($), G = 0; G < $; G++)
            X[G] = arguments[G];
          return function(q) {
            var re = c.binary;
            return p(q._value, re.suffixes, re.scale).suffix;
          }.apply(void 0, X.concat([y]));
        }, getDecimalByteUnit: function() {
          for (var $ = arguments.length, X = new Array($), G = 0; G < $; G++)
            X[G] = arguments[G];
          return function(q) {
            var re = c.decimal;
            return p(q._value, re.suffixes, re.scale).suffix;
          }.apply(void 0, X.concat([y]));
        }, formatOrDefault: M };
      };
    }, { "./globalState": 4, "./parsing": 8, "./validating": 10 }], 4: [function(n, r, i) {
      var o = n("./en-US"), s = n("./validating"), a = n("./parsing"), l = {}, u = void 0, c = {}, d = null, g = {};
      function p(E) {
        u = E;
      }
      function C() {
        return c[u];
      }
      l.languages = function() {
        return Object.assign({}, c);
      }, l.currentLanguage = function() {
        return u;
      }, l.currentCurrency = function() {
        return C().currency;
      }, l.currentAbbreviations = function() {
        return C().abbreviations;
      }, l.currentDelimiters = function() {
        return C().delimiters;
      }, l.currentOrdinal = function() {
        return C().ordinal;
      }, l.currentDefaults = function() {
        return Object.assign({}, C().defaults, g);
      }, l.currentOrdinalDefaultFormat = function() {
        return Object.assign({}, l.currentDefaults(), C().ordinalFormat);
      }, l.currentByteDefaultFormat = function() {
        return Object.assign({}, l.currentDefaults(), C().byteFormat);
      }, l.currentPercentageDefaultFormat = function() {
        return Object.assign({}, l.currentDefaults(), C().percentageFormat);
      }, l.currentCurrencyDefaultFormat = function() {
        return Object.assign({}, l.currentDefaults(), C().currencyFormat);
      }, l.currentTimeDefaultFormat = function() {
        return Object.assign({}, l.currentDefaults(), C().timeFormat);
      }, l.setDefaults = function(E) {
        E = a.parseFormat(E), s.validateFormat(E) && (g = E);
      }, l.getZeroFormat = function() {
        return d;
      }, l.setZeroFormat = function(E) {
        return d = typeof E == "string" ? E : null;
      }, l.hasZeroFormat = function() {
        return d !== null;
      }, l.languageData = function(E) {
        if (E) {
          if (c[E])
            return c[E];
          throw new Error('Unknown tag "'.concat(E, '"'));
        }
        return C();
      }, l.registerLanguage = function(E) {
        var I = 1 < arguments.length && arguments[1] !== void 0 && arguments[1];
        if (!s.validateLanguage(E))
          throw new Error("Invalid language data");
        c[E.languageTag] = E, I && p(E.languageTag);
      }, l.setLanguage = function(E) {
        var I = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : o.languageTag;
        if (!c[E]) {
          var M = E.split("-")[0], y = Object.keys(c).find(function($) {
            return $.split("-")[0] === M;
          });
          return c[y] ? void p(y) : void p(I);
        }
        p(E);
      }, l.registerLanguage(o), u = o.languageTag, r.exports = l;
    }, { "./en-US": 2, "./parsing": 8, "./validating": 10 }], 5: [function(n, r, i) {
      r.exports = function(o) {
        return { loadLanguagesInNode: function(s) {
          return a = o, void s.forEach(function(l) {
            var u = void 0;
            try {
              u = n("../languages/".concat(l));
            } catch {
              console.error('Unable to load "'.concat(l, '". No matching language file found.'));
            }
            u && a.registerLanguage(u);
          });
          var a;
        } };
      };
    }, {}], 6: [function(n, r, i) {
      var o = n("bignumber.js");
      function s(a, l, u) {
        var c = new o(a._value), d = l;
        return u.isNumbro(l) && (d = l._value), d = new o(d), a._value = c.minus(d).toNumber(), a;
      }
      r.exports = function(a) {
        return { add: function(l, u) {
          return d = u, g = a, p = new o((c = l)._value), C = d, g.isNumbro(d) && (C = d._value), C = new o(C), c._value = p.plus(C).toNumber(), c;
          var c, d, g, p, C;
        }, subtract: function(l, u) {
          return s(l, u, a);
        }, multiply: function(l, u) {
          return d = u, g = a, p = new o((c = l)._value), C = d, g.isNumbro(d) && (C = d._value), C = new o(C), c._value = p.times(C).toNumber(), c;
          var c, d, g, p, C;
        }, divide: function(l, u) {
          return d = u, g = a, p = new o((c = l)._value), C = d, g.isNumbro(d) && (C = d._value), C = new o(C), c._value = p.dividedBy(C).toNumber(), c;
          var c, d, g, p, C;
        }, set: function(l, u) {
          return c = l, g = d = u, a.isNumbro(d) && (g = d._value), c._value = g, c;
          var c, d, g;
        }, difference: function(l, u) {
          return c = u, s(g = (d = a)(l._value), c, d), Math.abs(g._value);
          var c, d, g;
        } };
      };
    }, { "bignumber.js": 1 }], 7: [function(n, r, i) {
      function o(I, M) {
        for (var y = 0; y < M.length; y++) {
          var $ = M[y];
          $.enumerable = $.enumerable || !1, $.configurable = !0, "value" in $ && ($.writable = !0), Object.defineProperty(I, $.key, $);
        }
      }
      var s = n("./globalState"), a = n("./validating"), l = n("./loading")(E), u = n("./unformatting"), c = n("./formatting")(E), d = n("./manipulating")(E), g = n("./parsing"), p = function() {
        function I($) {
          (function(X, G) {
            if (!(X instanceof G))
              throw new TypeError("Cannot call a class as a function");
          })(this, I), this._value = $;
        }
        var M, y;
        return M = I, (y = [{ key: "clone", value: function() {
          return E(this._value);
        } }, { key: "format", value: function() {
          var $ = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {};
          return c.format(this, $);
        } }, { key: "formatCurrency", value: function($) {
          return typeof $ == "string" && ($ = g.parseFormat($)), ($ = c.formatOrDefault($, s.currentCurrencyDefaultFormat())).output = "currency", c.format(this, $);
        } }, { key: "formatTime", value: function() {
          var $ = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {};
          return $.output = "time", c.format(this, $);
        } }, { key: "binaryByteUnits", value: function() {
          return c.getBinaryByteUnit(this);
        } }, { key: "decimalByteUnits", value: function() {
          return c.getDecimalByteUnit(this);
        } }, { key: "byteUnits", value: function() {
          return c.getByteUnit(this);
        } }, { key: "difference", value: function($) {
          return d.difference(this, $);
        } }, { key: "add", value: function($) {
          return d.add(this, $);
        } }, { key: "subtract", value: function($) {
          return d.subtract(this, $);
        } }, { key: "multiply", value: function($) {
          return d.multiply(this, $);
        } }, { key: "divide", value: function($) {
          return d.divide(this, $);
        } }, { key: "set", value: function($) {
          return d.set(this, C($));
        } }, { key: "value", value: function() {
          return this._value;
        } }, { key: "valueOf", value: function() {
          return this._value;
        } }]) && o(M.prototype, y), I;
      }();
      function C(I) {
        var M = I;
        return E.isNumbro(I) ? M = I._value : typeof I == "string" ? M = E.unformat(I) : isNaN(I) && (M = NaN), M;
      }
      function E(I) {
        return new p(C(I));
      }
      E.version = "2.1.2", E.isNumbro = function(I) {
        return I instanceof p;
      }, E.language = s.currentLanguage, E.registerLanguage = s.registerLanguage, E.setLanguage = s.setLanguage, E.languages = s.languages, E.languageData = s.languageData, E.zeroFormat = s.setZeroFormat, E.defaultFormat = s.currentDefaults, E.setDefaults = s.setDefaults, E.defaultCurrencyFormat = s.currentCurrencyDefaultFormat, E.validate = a.validate, E.loadLanguagesInNode = l.loadLanguagesInNode, E.unformat = u.unformat, r.exports = E;
    }, { "./formatting": 3, "./globalState": 4, "./loading": 5, "./manipulating": 6, "./parsing": 8, "./unformatting": 9, "./validating": 10 }], 8: [function(n, r, i) {
      r.exports = { parseFormat: function(o) {
        var s, a, l, u, c, d, g, p, C, E, I, M, y, $, X, G, q, re, v, S, b = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {};
        return typeof o != "string" ? o : (a = b, o = (l = (s = o).match(/^{([^}]*)}/)) ? (a.prefix = l[1], s.slice(l[0].length)) : s, c = b, function(L, P) {
          if (L.indexOf("$") === -1) {
            if (L.indexOf("%") === -1)
              return L.indexOf("bd") !== -1 ? (P.output = "byte", P.base = "general") : L.indexOf("b") !== -1 ? (P.output = "byte", P.base = "binary") : L.indexOf("d") !== -1 ? (P.output = "byte", P.base = "decimal") : L.indexOf(":") === -1 ? L.indexOf("o") !== -1 && (P.output = "ordinal") : P.output = "time";
            P.output = "percent";
          } else
            P.output = "currency";
        }(o = (d = (u = o).match(/{([^}]*)}$/)) ? (c.postfix = d[1], u.slice(0, -d[0].length)) : u, b), g = b, (p = o.match(/[1-9]+[0-9]*/)) && (g.totalLength = +p[0]), C = b, (E = o.split(".")[0].match(/0+/)) && (C.characteristic = E[0].length), function(L, P) {
          if (L.indexOf(".") !== -1) {
            var x = L.split(".")[0];
            P.optionalCharacteristic = x.indexOf("0") === -1;
          }
        }(o, b), I = b, o.indexOf("a") !== -1 && (I.average = !0), y = b, (M = o).indexOf("K") !== -1 ? y.forceAverage = "thousand" : M.indexOf("M") !== -1 ? y.forceAverage = "million" : M.indexOf("B") !== -1 ? y.forceAverage = "billion" : M.indexOf("T") !== -1 && (y.forceAverage = "trillion"), function(L, P) {
          var x = L.split(".")[1];
          if (x) {
            var W = x.match(/0+/);
            W && (P.mantissa = W[0].length);
          }
        }(o, b), X = b, ($ = o).match(/\[\.]/) ? X.optionalMantissa = !0 : $.match(/\./) && (X.optionalMantissa = !1), G = b, o.indexOf(",") !== -1 && (G.thousandSeparated = !0), q = b, o.indexOf(" ") !== -1 && (q.spaceSeparated = !0), v = b, (re = o).match(/^\+?\([^)]*\)$/) && (v.negative = "parenthesis"), re.match(/^\+?-/) && (v.negative = "sign"), S = b, o.match(/^\+/) && (S.forceSign = !0), b);
      } };
    }, {}], 9: [function(n, r, i) {
      var o = [{ key: "ZiB", factor: Math.pow(1024, 7) }, { key: "ZB", factor: Math.pow(1e3, 7) }, { key: "YiB", factor: Math.pow(1024, 8) }, { key: "YB", factor: Math.pow(1e3, 8) }, { key: "TiB", factor: Math.pow(1024, 4) }, { key: "TB", factor: Math.pow(1e3, 4) }, { key: "PiB", factor: Math.pow(1024, 5) }, { key: "PB", factor: Math.pow(1e3, 5) }, { key: "MiB", factor: Math.pow(1024, 2) }, { key: "MB", factor: Math.pow(1e3, 2) }, { key: "KiB", factor: Math.pow(1024, 1) }, { key: "KB", factor: Math.pow(1e3, 1) }, { key: "GiB", factor: Math.pow(1024, 3) }, { key: "GB", factor: Math.pow(1e3, 3) }, { key: "EiB", factor: Math.pow(1024, 6) }, { key: "EB", factor: Math.pow(1e3, 6) }, { key: "B", factor: 1 }];
      function s(l) {
        return l.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      function a(l, u) {
        var c = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "", d = 3 < arguments.length ? arguments[3] : void 0, g = 4 < arguments.length ? arguments[4] : void 0, p = 5 < arguments.length ? arguments[5] : void 0, C = 6 < arguments.length ? arguments[6] : void 0;
        if (l !== "")
          return l === g ? 0 : function E(I, M) {
            var y = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "", $ = 3 < arguments.length ? arguments[3] : void 0, X = 4 < arguments.length ? arguments[4] : void 0, G = 5 < arguments.length ? arguments[5] : void 0, q = 6 < arguments.length ? arguments[6] : void 0;
            if (!isNaN(+I))
              return +I;
            var re = "", v = I.replace(/(^[^(]*)\((.*)\)([^)]*$)/, "$1$2$3");
            if (v !== I)
              return -1 * E(v, M, y, $, X, G, q);
            for (var S = 0; S < o.length; S++) {
              var b = o[S];
              if ((re = I.replace(b.key, "")) !== I)
                return E(re, M, y, $, X, G, q) * b.factor;
            }
            if ((re = I.replace("%", "")) !== I)
              return E(re, M, y, $, X, G, q) / 100;
            var L = parseFloat(I);
            if (!isNaN(L)) {
              var P = $(L);
              if (P && P !== "." && (re = I.replace(new RegExp("".concat(s(P), "$")), "")) !== I)
                return E(re, M, y, $, X, G, q);
              var x = {};
              Object.keys(G).forEach(function(f) {
                x[G[f]] = f;
              });
              for (var W = Object.keys(x).sort().reverse(), D = W.length, B = 0; B < D; B++) {
                var z = W[B], w = x[z];
                if ((re = I.replace(z, "")) !== I) {
                  var h = void 0;
                  switch (w) {
                    case "thousand":
                      h = Math.pow(10, 3);
                      break;
                    case "million":
                      h = Math.pow(10, 6);
                      break;
                    case "billion":
                      h = Math.pow(10, 9);
                      break;
                    case "trillion":
                      h = Math.pow(10, 12);
                  }
                  return E(re, M, y, $, X, G, q) * h;
                }
              }
            }
          }(function(E, I) {
            var M = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "", y = E.replace(M, "");
            return y = (y = y.replace(new RegExp("([0-9])".concat(s(I.thousands), "([0-9])"), "g"), "$1$2")).replace(I.decimal, ".");
          }(l, u, c), u, c, d, g, p, C);
      }
      r.exports = { unformat: function(l, u) {
        var c, d, g, p = n("./globalState"), C = p.currentDelimiters(), E = p.currentCurrency().symbol, I = p.currentOrdinal(), M = p.getZeroFormat(), y = p.currentAbbreviations(), $ = void 0;
        if (typeof l == "string")
          $ = function(X, G) {
            if (!X.indexOf(":") || G.thousands === ":")
              return !1;
            var q = X.split(":");
            if (q.length !== 3)
              return !1;
            var re = +q[0], v = +q[1], S = +q[2];
            return !isNaN(re) && !isNaN(v) && !isNaN(S);
          }(l, C) ? (c = l.split(":"), d = +c[0], g = +c[1], +c[2] + 60 * g + 3600 * d) : a(l, C, E, I, M, y, u);
        else {
          if (typeof l != "number")
            return;
          $ = l;
        }
        if ($ !== void 0)
          return $;
      } };
    }, { "./globalState": 4 }], 10: [function(n, r, i) {
      function o(C) {
        return function(E) {
          if (Array.isArray(E)) {
            for (var I = 0, M = new Array(E.length); I < E.length; I++)
              M[I] = E[I];
            return M;
          }
        }(C) || function(E) {
          if (Symbol.iterator in Object(E) || Object.prototype.toString.call(E) === "[object Arguments]")
            return Array.from(E);
        }(C) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }();
      }
      function s(C) {
        return (s = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(E) {
          return typeof E;
        } : function(E) {
          return E && typeof Symbol == "function" && E.constructor === Symbol && E !== Symbol.prototype ? "symbol" : typeof E;
        })(C);
      }
      var a = n("./unformatting"), l = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/, u = { output: { type: "string", validValues: ["currency", "percent", "byte", "time", "ordinal", "number"] }, base: { type: "string", validValues: ["decimal", "binary", "general"], restriction: function(C, E) {
        return E.output === "byte";
      }, message: "`base` must be provided only when the output is `byte`", mandatory: function(C) {
        return C.output === "byte";
      } }, characteristic: { type: "number", restriction: function(C) {
        return 0 <= C;
      }, message: "value must be positive" }, prefix: "string", postfix: "string", forceAverage: { type: "string", validValues: ["trillion", "billion", "million", "thousand"] }, average: "boolean", currencyPosition: { type: "string", validValues: ["prefix", "infix", "postfix"] }, currencySymbol: "string", totalLength: { type: "number", restrictions: [{ restriction: function(C) {
        return 0 <= C;
      }, message: "value must be positive" }, { restriction: function(C, E) {
        return !E.exponential;
      }, message: "`totalLength` is incompatible with `exponential`" }] }, mantissa: { type: "number", restriction: function(C) {
        return 0 <= C;
      }, message: "value must be positive" }, optionalMantissa: "boolean", trimMantissa: "boolean", optionalCharacteristic: "boolean", thousandSeparated: "boolean", spaceSeparated: "boolean", abbreviations: { type: "object", children: { thousand: "string", million: "string", billion: "string", trillion: "string" } }, negative: { type: "string", validValues: ["sign", "parenthesis"] }, forceSign: "boolean", exponential: { type: "boolean" }, prefixSymbol: { type: "boolean", restriction: function(C, E) {
        return E.output === "percent";
      }, message: "`prefixSymbol` can be provided only when the output is `percent`" } }, c = { languageTag: { type: "string", mandatory: !0, restriction: function(C) {
        return C.match(l);
      }, message: "the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)" }, delimiters: { type: "object", children: { thousands: "string", decimal: "string", thousandsSize: "number" }, mandatory: !0 }, abbreviations: { type: "object", children: { thousand: { type: "string", mandatory: !0 }, million: { type: "string", mandatory: !0 }, billion: { type: "string", mandatory: !0 }, trillion: { type: "string", mandatory: !0 } }, mandatory: !0 }, spaceSeparated: "boolean", ordinal: { type: "function", mandatory: !0 }, currency: { type: "object", children: { symbol: "string", position: "string", code: "string" }, mandatory: !0 }, defaults: "format", ordinalFormat: "format", byteFormat: "format", percentageFormat: "format", currencyFormat: "format", timeDefaults: "format", formats: { type: "object", children: { fourDigits: { type: "format", mandatory: !0 }, fullWithTwoDecimals: { type: "format", mandatory: !0 }, fullWithTwoDecimalsNoCurrency: { type: "format", mandatory: !0 }, fullWithNoDecimals: { type: "format", mandatory: !0 } } } };
      function d(C) {
        return !!a.unformat(C);
      }
      function g(C, E, I) {
        var M = 3 < arguments.length && arguments[3] !== void 0 && arguments[3], y = Object.keys(C).map(function($) {
          if (!E[$])
            return console.error("".concat(I, " Invalid key: ").concat($)), !1;
          var X = C[$], G = E[$];
          if (typeof G == "string" && (G = { type: G }), G.type === "format") {
            if (!g(X, u, "[Validate ".concat($, "]"), !0))
              return !1;
          } else if (s(X) !== G.type)
            return console.error("".concat(I, " ").concat($, ' type mismatched: "').concat(G.type, '" expected, "').concat(s(X), '" provided')), !1;
          if (G.restrictions && G.restrictions.length)
            for (var q = G.restrictions.length, re = 0; re < q; re++) {
              var v = G.restrictions[re], S = v.restriction, b = v.message;
              if (!S(X, C))
                return console.error("".concat(I, " ").concat($, " invalid value: ").concat(b)), !1;
            }
          return G.restriction && !G.restriction(X, C) ? (console.error("".concat(I, " ").concat($, " invalid value: ").concat(G.message)), !1) : G.validValues && G.validValues.indexOf(X) === -1 ? (console.error("".concat(I, " ").concat($, " invalid value: must be among ").concat(JSON.stringify(G.validValues), ', "').concat(X, '" provided')), !1) : !(G.children && !g(X, G.children, "[Validate ".concat($, "]")));
        });
        return M || y.push.apply(y, o(Object.keys(E).map(function($) {
          var X = E[$];
          if (typeof X == "string" && (X = { type: X }), X.mandatory) {
            var G = X.mandatory;
            if (typeof G == "function" && (G = G(C)), G && C[$] === void 0)
              return console.error("".concat(I, ' Missing mandatory key "').concat($, '"')), !1;
          }
          return !0;
        }))), y.reduce(function($, X) {
          return $ && X;
        }, !0);
      }
      function p(C) {
        return g(C, u, "[Validate format]");
      }
      r.exports = { validate: function(C, E) {
        var I = d(C), M = p(E);
        return I && M;
      }, validateFormat: p, validateInput: d, validateLanguage: function(C) {
        return g(C, c, "[Validate language]");
      } };
    }, { "./unformatting": 9 }] }, {}, [7])(7);
  });
})(Q6);
const Vs = ZC, J6 = "numeric";
function $b(t, e, n, r, i, o, s) {
  let a = o;
  if (Jn(a)) {
    const l = s.numericFormat, u = l && l.culture || "-", c = l && l.pattern, d = s.className || "", g = d.length ? d.split(" ") : [];
    if (typeof u < "u" && !Vs.languages()[u]) {
      const p = u.replace("-", ""), C = Vs.allLanguages ? Vs.allLanguages[u] : Vs[p];
      C && Vs.registerLanguage(C);
    }
    Vs.setLanguage(u), a = Vs(a).format(c || "0"), g.indexOf("htLeft") < 0 && g.indexOf("htCenter") < 0 && g.indexOf("htRight") < 0 && g.indexOf("htJustify") < 0 && g.push("htRight"), g.indexOf("htNumeric") < 0 && g.push("htNumeric"), s.className = g.join(" "), e.dir = "ltr";
  }
  Go(t, e, n, r, i, a, s);
}
$b.RENDERER_TYPE = J6;
const e9 = "password";
function kb(t, e, n, r, i, o, s) {
  Go.apply(this, [t, e, n, r, i, o, s]);
  const a = s.hashLength || e.innerHTML.length, l = s.hashSymbol || "*";
  let u = "";
  xe(a - 1, () => {
    u += l;
  }), Pa(e, u);
}
kb.RENDERER_TYPE = e9;
const t9 = "time";
function Fb(t, e, n, r, i, o, s) {
  Go.apply(this, [t, e, n, r, i, o, s]), e.dir = "ltr";
}
Fb.RENDERER_TYPE = t9;
function n9() {
  ki(Jl), ki(sh), ki(Nb), ki(Db), ki($b), ki(kb), ki(Go), ki(Fb);
}
const r9 = "autocomplete";
function Jg(t, e) {
  let n = t;
  if (n == null && (n = ""), this.allowEmpty && n === "") {
    e(!0);
    return;
  }
  this.strict && this.source ? typeof this.source == "function" ? this.source(n, GE(n, e)) : GE(n, e)(this.source) : e(!0);
}
Jg.VALIDATOR_TYPE = r9;
function GE(t, e) {
  const n = t;
  return function(r) {
    let i = !1;
    for (let o = 0, s = r.length; o < s; o++)
      if (n === r[o]) {
        i = !0;
        break;
      }
    e(i);
  };
}
function iH(t) {
  const e = new Date(t);
  return isNaN(new Date(`${t}T00:00`).getDate()) ? e : new Date(e.getTime() + e.getTimezoneOffset() * 6e4);
}
const i9 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  getNormalizedDate: iH
}, Symbol.toStringTag, { value: "Module" })), o9 = "date";
function Wb(t, e) {
  const n = TP(Zx, this.instance);
  let r = t, i = !0;
  r == null && (r = "");
  let o = le(r, this.dateFormat || n.defaultDateFormat, !0).isValid(), s = le(new Date(r)).isValid() || o;
  if (this.allowEmpty && r === "" && (s = !0, o = !0), s || (i = !1), !s && o && (i = !0), s && !o)
    if (this.correctFormat === !0) {
      const a = s9(r, this.dateFormat), l = this.instance.toVisualRow(this.row), u = this.instance.toVisualColumn(this.col);
      this.instance.setDataAtCell(l, u, a, "dateValidator"), i = !0;
    } else
      i = !1;
  e(i);
}
Wb.VALIDATOR_TYPE = o9;
function s9(t, e) {
  const n = le(iH(t)), r = le(t, e), i = t.search(/[A-z]/g) > -1;
  let o;
  return n.isValid() && n.format("x") === r.format("x") || !r.isValid() || i ? o = n : o = r, o.format(e);
}
const a9 = "numeric";
function Vb(t, e) {
  let n = t;
  n == null && (n = ""), this.allowEmpty && n === "" ? e(!0) : e(n === "" ? !1 : Jn(t));
}
Vb.VALIDATOR_TYPE = a9;
const l9 = [
  "YYYY-MM-DDTHH:mm:ss.SSSZ",
  "X",
  // Unix timestamp
  "x"
  // Unix ms timestamp
], u9 = "time";
function Bb(t, e) {
  const n = this.timeFormat || "h:mm:ss a";
  let r = !0, i = t;
  i === null && (i = ""), i = /^\d{3,}$/.test(i) ? parseInt(i, 10) : i;
  const o = /^\d{1,2}$/.test(i);
  o && (i += ":00");
  const s = le(i, l9, !0).isValid() ? le(i) : le(i, n);
  let a = s.isValid(), l = le(i, n, !0).isValid() && !o;
  if (this.allowEmpty && i === "" && (a = !0, l = !0), a || (r = !1), !a && l && (r = !0), a && !l)
    if (this.correctFormat === !0) {
      const u = s.format(n), c = this.instance.toVisualRow(this.row), d = this.instance.toVisualColumn(this.col);
      this.instance.setDataAtCell(c, d, u, "timeValidator"), r = !0;
    } else
      r = !1;
  e(r);
}
Bb.VALIDATOR_TYPE = u9;
function c9() {
  Il(Jg), Il(Wb), Il(Vb), Il(Bb);
}
const h9 = "autocomplete", d9 = {
  CELL_TYPE: h9,
  editor: xb,
  renderer: Jl,
  validator: Jg
}, f9 = "checkbox", g9 = {
  CELL_TYPE: f9,
  editor: qx,
  renderer: Nb
}, m9 = "date";
function oH(t, e, n, r, i, o, s) {
  Jl.apply(this, [t, e, n, r, i, o, s]);
}
oH.RENDERER_TYPE = m9;
const p9 = "date", w9 = {
  CELL_TYPE: p9,
  editor: Qx,
  // displays small gray arrow on right side of the cell
  renderer: oH,
  validator: Wb
}, C9 = "dropdown", v9 = {
  CELL_TYPE: C9,
  editor: Hb,
  // displays small gray arrow on right side of the cell
  renderer: Jl,
  validator: Jg
}, S9 = "handsontable";
function sH(t, e, n, r, i, o, s) {
  Jl.apply(this, [t, e, n, r, i, o, s]);
}
sH.RENDERER_TYPE = S9;
const y9 = "handsontable", b9 = {
  CELL_TYPE: y9,
  editor: Pb,
  // displays small gray arrow on right side of the cell
  renderer: sH
}, R9 = "numeric", E9 = {
  CELL_TYPE: R9,
  editor: Jx,
  renderer: $b,
  validator: Vb,
  dataType: "number"
}, T9 = "password", _9 = {
  CELL_TYPE: T9,
  editor: eH,
  renderer: kb,
  copyable: !1
}, M9 = "select";
function aH(t, e, n, r, i, o, s) {
  Go.apply(this, [t, e, n, r, i, o, s]);
}
aH.RENDERER_TYPE = M9;
const O9 = "select", A9 = {
  CELL_TYPE: O9,
  editor: tH,
  renderer: aH
}, I9 = "time", P9 = {
  CELL_TYPE: I9,
  editor: nH,
  renderer: Fb,
  validator: Bb
};
function x9() {
  $r(d9), $r(g9), $r(w9), $r(v9), $r(b9), $r(E9), $r(_9), $r(A9), $r(Xx), $r(P9);
}
function H9(t, e) {
  lH(t, e), e.add(t);
}
function D9(t, e, n) {
  lH(t, e), e.set(t, n);
}
function lH(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Ya(t, e, n) {
  return e = N9(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function N9(t) {
  var e = L9(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function L9(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function $9(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function Ga(t, e) {
  var n = k9(t, e, "get");
  return F9(t, n);
}
function k9(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function F9(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
const zE = /* @__PURE__ */ new Map([["plugin", Mz], ["cell-type", Fx], ["editor", EP], ["renderer", HP], ["validator", DP]]), W9 = "base", Op = [];
let Ai = null;
var Bs = /* @__PURE__ */ new WeakMap(), jE = /* @__PURE__ */ new WeakSet();
class gt {
  static get PLUGIN_KEY() {
    return W9;
  }
  /**
   * The `SETTING_KEYS` getter defines the keys that, when present in the config object, trigger the plugin update
   * after the `updateSettings` calls.
   * - When it returns `true`, the plugin updates after all `updateSettings` calls, regardless of the contents of the
   * config object.
   * - When it returns `false`, the plugin never updates on `updateSettings` calls.
   *
   * @returns {string[] | boolean}
   */
  static get SETTING_KEYS() {
    return [this.PLUGIN_KEY];
  }
  /**
   * The instance of the {@link EventManager} class.
   *
   * @type {EventManager}
   */
  /**
   * @param {object} hotInstance Handsontable instance.
   */
  constructor(e) {
    H9(this, jE), Ya(this, "eventManager", new _r(this)), Ya(this, "pluginName", null), Ya(this, "pluginsInitializedCallbacks", []), Ya(this, "isPluginsReady", !1), Ya(this, "enabled", !1), Ya(this, "initialized", !1), D9(this, Bs, {
      writable: !0,
      value: {}
    }), Ji(this, "hot", e, {
      writable: !1
    }), Ai = null, this.hot.addHook("afterPluginsInitialized", () => this.onAfterPluginsInitialized()), this.hot.addHook("afterUpdateSettings", (n) => this.onUpdateSettings(n)), this.hot.addHook("beforeInit", () => this.init());
  }
  init() {
    this.pluginName = this.hot.getPluginName(this);
    const e = this.constructor.PLUGIN_DEPS, n = Array.isArray(e) ? e : [];
    if (n.length > 0) {
      const i = [];
      if (n.forEach((o) => {
        const [s, a] = o.split(":");
        if (!zE.has(s))
          throw new Error(`Unknown plugin dependency type "${s}" was found.`);
        zE.get(s)(a) || i.push(` - ${a} (${s})`);
      }), i.length > 0) {
        const o = [`The ${this.pluginName} plugin requires the following modules:
`, `${i.join(`
`)}
`].join("");
        Op.push(o);
      }
    }
    if (Ai || (Ai = OS()), Ai.indexOf("UndoRedo") >= 0 && Ai.splice(Ai.indexOf("UndoRedo"), 1), Ai.indexOf(this.pluginName) >= 0 && Ai.splice(Ai.indexOf(this.pluginName), 1), this.hot.addHookOnce("afterPluginsInitialized", () => {
      this.isEnabled && this.isEnabled() && this.enablePlugin();
    }), Ai.length === 0) {
      if (Op.length > 0) {
        const i = [`${Op.join(`
`)}
`, "You have to import and register them manually."].join("");
        throw new Error(i);
      }
      this.hot.runHooks("afterPluginsInitialized");
    }
    this.initialized = !0;
  }
  /**
   * Enable plugin for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled = !0;
  }
  /**
   * Disable plugin for this Handsontable instance.
   */
  disablePlugin() {
    var e;
    (e = this.eventManager) === null || e === void 0 || e.clear(), this.clearHooks(), this.enabled = !1;
  }
  /**
   * Add listener to plugin hooks system.
   *
   * @param {string} name The hook name.
   * @param {Function} callback The listener function to add.
   */
  addHook(e, n) {
    Ga(this, Bs)[e] = Ga(this, Bs)[e] || [];
    const r = Ga(this, Bs)[e];
    this.hot.addHook(e, n), r.push(n), Ga(this, Bs)[e] = r;
  }
  /**
   * Remove all hooks listeners by hook name.
   *
   * @param {string} name The hook name.
   */
  removeHooks(e) {
    H(Ga(this, Bs)[e] || [], (n) => {
      this.hot.removeHook(e, n);
    });
  }
  /**
   * Clear all hooks.
   */
  clearHooks() {
    const e = Ga(this, Bs);
    Ze(e, (n, r) => this.removeHooks(r)), e.length = 0;
  }
  /**
   * Register function which will be immediately called after all plugins initialized.
   *
   * @param {Function} callback The listener function to call.
   */
  callOnPluginsReady(e) {
    this.isPluginsReady ? e() : this.pluginsInitializedCallbacks.push(e);
  }
  /**
   * On after plugins initialized listener.
   *
   * @private
   */
  onAfterPluginsInitialized() {
    H(this.pluginsInitializedCallbacks, (e) => e()), this.pluginsInitializedCallbacks.length = 0, this.isPluginsReady = !0;
  }
  /**
   * On update settings listener.
   *
   * @private
   * @param {object} newSettings New set of settings passed to the `updateSettings` method.
   */
  onUpdateSettings(e) {
    const n = $9(this, jE, V9).call(this, e);
    this.isEnabled && (this.enabled && !this.isEnabled() && this.disablePlugin(), !this.enabled && this.isEnabled() && this.enablePlugin(), this.enabled && this.isEnabled() && n && this.updatePlugin(e));
  }
  /**
   * Updates the plugin to use the latest options you have specified.
   *
   * @private
   */
  updatePlugin() {
  }
  /**
   * Destroy plugin.
   */
  destroy() {
    var e;
    (e = this.eventManager) === null || e === void 0 || e.destroy(), this.clearHooks(), Ze(this, (n, r) => {
      r !== "hot" && (this[r] = null);
    }), delete this.t, delete this.hot;
  }
}
function V9(t) {
  if (!t)
    return !1;
  const e = this.constructor.SETTING_KEYS;
  if (typeof e == "boolean")
    return e;
  for (let n = 0; n < e.length; n++)
    if (t[e[n]] !== void 0)
      return !0;
  return !1;
}
function Us(t, e, n) {
  return e = B9(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function B9(t) {
  var e = U9(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function U9(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
let Y9 = class {
  constructor(e) {
    Us(this, "hot", null), Us(this, "container", null), Us(this, "injected", !1), Us(this, "rows", []), Us(this, "columns", []), Us(this, "samples", null), Us(this, "settings", {
      useHeaders: !0
    }), this.hot = e;
  }
  /**
   * Add row.
   *
   * @param {number} row Row index.
   * @param {Map} samples Samples Map object.
   */
  addRow(e, n) {
    if (this.columns.length)
      throw new Error("Doesn't support multi-dimensional table");
    this.rows.length || (this.container = this.createContainer(this.hot.rootElement.className));
    const r = {
      row: e
    };
    this.rows.push(r), this.samples = n, this.table = this.createTable(this.hot.table.className), this.table.colGroup.appendChild(this.createColGroupsCol(e)), this.table.tr.appendChild(this.createRow(e)), this.container.container.appendChild(this.table.fragment), r.table = this.table.table;
  }
  /**
   * Add a row consisting of the column headers.
   *
   * @param {Map} samples A map with sampled table values.
   */
  addColumnHeadersRow(e) {
    const n = this.hot.getColHeader(0);
    if (n != null) {
      const r = {
        row: -1
      };
      this.rows.push(r), this.container = this.createContainer(this.hot.rootElement.className), this.samples = e, this.table = this.createTable(this.hot.table.className), this.table.colGroup.appendChild(this.createColGroupsCol()), this.appendColumnHeadersRow(), this.container.container.appendChild(this.table.fragment), r.table = this.table.table;
    }
  }
  /**
   * Add column.
   *
   * @param {number} column Column index.
   * @param {Map} samples A map with sampled table values.
   */
  addColumn(e, n) {
    if (this.rows.length)
      throw new Error("Doesn't support multi-dimensional table");
    this.columns.length || (this.container = this.createContainer(this.hot.rootElement.className));
    const r = {
      col: e
    };
    this.columns.push(r), this.samples = n, this.table = this.createTable(this.hot.table.className), this.getSetting("useHeaders") && this.hot.getColHeader(e) !== null && this.hot.view.appendColHeader(e, this.table.th), this.table.tBody.appendChild(this.createCol(e)), this.container.container.appendChild(this.table.fragment), r.table = this.table.table;
  }
  /**
   * Get calculated heights.
   *
   * @param {Function} callback Callback which will be fired for each calculated row.
   */
  getHeights(e) {
    this.injected || this.injectTable(), H(this.rows, (n) => {
      e(n.row, Bt(n.table) - 1);
    });
  }
  /**
   * Get calculated widths.
   *
   * @param {Function} callback Callback which will be fired for each calculated column.
   */
  getWidths(e) {
    this.injected || this.injectTable(), H(this.columns, (n) => {
      const {
        width: r
      } = n.table.getBoundingClientRect();
      e(n.col, Math.ceil(r));
    });
  }
  /**
   * Set the Ghost Table settings to the provided object.
   *
   * @param {object} settings New Ghost Table Settings.
   */
  setSettings(e) {
    this.settings = e;
  }
  /**
   * Set a single setting of the Ghost Table.
   *
   * @param {string} name Setting name.
   * @param {*} value Setting value.
   */
  setSetting(e, n) {
    this.settings || (this.settings = {}), this.settings[e] = n;
  }
  /**
   * Get the Ghost Table settings.
   *
   * @returns {object|null}
   */
  getSettings() {
    return this.settings;
  }
  /**
   * Get a single Ghost Table setting.
   *
   * @param {string} name The setting name to get.
   * @returns {boolean|null}
   */
  getSetting(e) {
    return this.settings ? this.settings[e] : null;
  }
  /**
   * Create colgroup col elements.
   *
   * @param {number} row Visual row index.
   * @returns {DocumentFragment}
   */
  createColGroupsCol(e) {
    const n = this.hot.rootDocument.createDocumentFragment();
    return this.hot.hasRowHeaders() && n.appendChild(this.createColElement(-1, -1)), this.samples.forEach((r) => {
      H(r.strings, (i) => {
        n.appendChild(this.createColElement(i.col, e));
      });
    }), n;
  }
  /**
   * Create table row element.
   *
   * @param {number} row Row index.
   * @returns {DocumentFragment} Returns created table row elements.
   */
  createRow(e) {
    const {
      rootDocument: n
    } = this.hot, r = n.createDocumentFragment(), i = n.createElement("th");
    return this.hot.hasRowHeaders() && (this.hot.view.appendRowHeader(e, i), r.appendChild(i)), this.samples.forEach((o) => {
      H(o.strings, (s) => {
        const a = s.col, l = this.hot.getCellMeta(e, a);
        l.col = a, l.row = e;
        const u = this.hot.getCellRenderer(l), c = n.createElement("td");
        c.setAttribute("ghost-table", 1), u(this.hot, c, e, a, this.hot.colToProp(a), s.value, l), r.appendChild(c);
      });
    }), r;
  }
  /**
   * Creates DOM elements for headers and appends them to the THEAD element of the table.
   */
  appendColumnHeadersRow() {
    const {
      rootDocument: e
    } = this.hot, n = e.createDocumentFragment(), r = [];
    if (this.hot.hasRowHeaders()) {
      const i = e.createElement("th");
      r.push([-1, i]), n.appendChild(i);
    }
    this.samples.forEach((i) => {
      H(i.strings, (o) => {
        const s = o.col, a = e.createElement("th");
        r.push([s, a]), n.appendChild(a);
      });
    }), this.table.tHead.appendChild(n), H(r, (i) => {
      const [o, s] = i;
      this.hot.view.appendColHeader(o, s);
    });
  }
  /**
   * Create table column elements.
   *
   * @param {number} column Column index.
   * @returns {DocumentFragment} Returns created column table column elements.
   */
  createCol(e) {
    const {
      rootDocument: n
    } = this.hot, r = n.createDocumentFragment();
    return this.samples.forEach((i) => {
      H(i.strings, (o) => {
        const s = o.row, a = this.hot.getCellMeta(s, e);
        a.col = e, a.row = s;
        const l = this.hot.getCellRenderer(a), u = n.createElement("td"), c = n.createElement("tr");
        u.setAttribute("ghost-table", 1), l(this.hot, u, s, e, this.hot.colToProp(e), o.value, a), c.appendChild(u), r.appendChild(c);
      });
    }), r;
  }
  /**
   * Remove table from document and reset internal state.
   */
  clean() {
    this.rows.length = 0, this.rows[-1] = void 0, this.columns.length = 0, this.samples && this.samples.clear(), this.samples = null, this.removeTable();
  }
  /**
   * Inject generated table into document.
   *
   * @param {HTMLElement} [parent=null] The element to which the ghost table is injected.
   */
  injectTable() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    this.injected || ((e || this.hot.rootElement).appendChild(this.container.fragment), this.injected = !0);
  }
  /**
   * Remove table from document.
   */
  removeTable() {
    this.injected && this.container.container.parentNode && (this.container.container.parentNode.removeChild(this.container.container), this.container = null, this.injected = !1);
  }
  /**
   * Create col element.
   *
   * @param {number} column Visual column index.
   * @param {number} row Visual row index.
   * @returns {HTMLElement}
   */
  createColElement(e, n) {
    const r = this.hot.rootDocument.createElement("col");
    let i = 0;
    n >= 0 && e >= 0 && (i = this.hot.getCellMeta(n, e).colspan);
    let o = this.hot.view._wt.wtTable.getStretchedColumnWidth(e);
    if (i > 1)
      for (let s = e + 1; s < e + i; s++)
        o += this.hot.view._wt.wtTable.getStretchedColumnWidth(s);
    return r.style.width = `${o}px`, r;
  }
  /**
   * Create table element.
   *
   * @param {string} className The CSS classes to add.
   * @returns {object}
   */
  createTable() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    const {
      rootDocument: n
    } = this.hot, r = n.createDocumentFragment(), i = n.createElement("table"), o = n.createElement("thead"), s = n.createElement("tbody"), a = n.createElement("colgroup"), l = n.createElement("tr"), u = n.createElement("th");
    return this.isVertical() && i.appendChild(a), this.isHorizontal() && (l.appendChild(u), o.appendChild(l), i.style.tableLayout = "auto", i.style.width = "auto"), i.appendChild(o), this.isVertical() && s.appendChild(l), i.appendChild(s), ce(i, e), r.appendChild(i), {
      fragment: r,
      table: i,
      tHead: o,
      tBody: s,
      colGroup: a,
      tr: l,
      th: u
    };
  }
  /**
   * Create container for tables.
   *
   * @param {string} className The CSS classes to add.
   * @returns {object}
   */
  createContainer() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    const {
      rootDocument: n
    } = this.hot, r = n.createDocumentFragment(), i = n.createElement("div"), o = `htGhostTable htAutoSize ${e.trim()}`;
    return ce(i, o), r.appendChild(i), {
      fragment: r,
      container: i
    };
  }
  /**
   * Checks if table is raised vertically (checking rows).
   *
   * @returns {boolean}
   */
  isVertical() {
    return !!(this.rows.length && !this.columns.length);
  }
  /**
   * Checks if table is raised horizontally (checking columns).
   *
   * @returns {boolean}
   */
  isHorizontal() {
    return !!(this.columns.length && !this.rows.length);
  }
};
const Ub = Y9;
function ed(t, e, n) {
  return e = G9(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function G9(t) {
  var e = z9(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function z9(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class Yb {
  /**
   * Number of samples to take of each value length.
   *
   * @type {number}
   */
  static get SAMPLE_COUNT() {
    return 3;
  }
  /**
   * Samples prepared for calculations.
   *
   * @type {Map}
   * @default {null}
   */
  constructor(e) {
    ed(this, "samples", null), ed(this, "dataFactory", null), ed(this, "customSampleCount", null), ed(this, "allowDuplicates", !1), this.dataFactory = e;
  }
  /**
   * Get the sample count for this instance.
   *
   * @returns {number}
   */
  getSampleCount() {
    return this.customSampleCount ? this.customSampleCount : Yb.SAMPLE_COUNT;
  }
  /**
   * Set the sample count.
   *
   * @param {number} sampleCount Number of samples to be collected.
   */
  setSampleCount(e) {
    this.customSampleCount = e;
  }
  /**
   * Set if the generator should accept duplicate values.
   *
   * @param {boolean} allowDuplicates `true` to allow duplicate values.
   */
  setAllowDuplicates(e) {
    this.allowDuplicates = e;
  }
  /**
   * Generate samples for row. You can control which area should be sampled by passing `rowRange` object and `colRange` object.
   *
   * @param {object|number} rowRange The rows range to generate the samples.
   * @param {object} colRange The column range to generate the samples.
   * @returns {object}
   */
  generateRowSamples(e, n) {
    return this.generateSamples("row", n, e);
  }
  /**
   * Generate samples for column. You can control which area should be sampled by passing `colRange` object and `rowRange` object.
   *
   * @param {object} colRange Column index.
   * @param {object} rowRange Column index.
   * @returns {object}
   */
  generateColumnSamples(e, n) {
    return this.generateSamples("col", n, e);
  }
  /**
   * Generate collection of samples.
   *
   * @param {string} type Type to generate. Can be `col` or `row`.
   * @param {object} range The range to generate the samples.
   * @param {object|number} specifierRange The range to generate the samples.
   * @returns {Map}
   */
  generateSamples(e, n, r) {
    const i = /* @__PURE__ */ new Map(), {
      from: o,
      to: s
    } = typeof r == "number" ? {
      from: r,
      to: r
    } : r;
    return xe(o, s, (a) => {
      const l = this.generateSample(e, n, a);
      i.set(a, l);
    }), i;
  }
  /**
   * Generate sample for specified type (`row` or `col`).
   *
   * @param {string} type Samples type `row` or `col`.
   * @param {object} range The range to generate the samples.
   * @param {number} specifierValue The range to generate the samples.
   * @returns {Map}
   */
  generateSample(e, n, r) {
    if (e !== "row" && e !== "col")
      throw new Error("Unsupported sample type");
    const i = /* @__PURE__ */ new Map(), o = e === "row" ? "col" : "row", s = [];
    return xe(n.from, n.to, (a) => {
      const l = e === "row" ? this.dataFactory(r, a) : this.dataFactory(a, r);
      if (l === !1)
        return;
      const {
        value: u,
        bundleSeed: c
      } = l, d = typeof c == "string" && c.length > 0;
      let g;
      d ? g = c : Xe(u) ? g = `${Object.keys(u).length}` : Array.isArray(u) ? g = `${u.length}` : g = `${Zt(u).length}`, i.has(g) || i.set(g, {
        needed: this.getSampleCount(),
        strings: []
      });
      const p = i.get(g);
      p.needed && (!(s.indexOf(u) > -1) || this.allowDuplicates || d) && (p.strings.push({
        value: u,
        [o]: a
      }), s.push(u), p.needed -= 1);
    }), i;
  }
}
const uH = Yb;
function za(t, e) {
  cH(t, e), e.add(t);
}
function j9(t, e, n) {
  cH(t, e), e.set(t, n);
}
function cH(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ja(t, e, n) {
  return e = K9(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function K9(t) {
  var e = X9(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function X9(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function q9(t, e, n) {
  var r = hH(t, e, "set");
  return Z9(t, r, n), n;
}
function Z9(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function td(t, e) {
  var n = hH(t, e, "get");
  return Q9(t, n);
}
function hH(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Q9(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function Ys(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
_e.getSingleton().register("modifyAutoColumnSizeSeed");
const Eu = "autoColumnSize", J9 = 10, e8 = "autoColumnSize";
var El = /* @__PURE__ */ new WeakMap(), KE = /* @__PURE__ */ new WeakSet(), XE = /* @__PURE__ */ new WeakSet(), qE = /* @__PURE__ */ new WeakSet(), Ap = /* @__PURE__ */ new WeakSet(), ZE = /* @__PURE__ */ new WeakSet(), QE = /* @__PURE__ */ new WeakSet();
class hc extends gt {
  static get PLUGIN_KEY() {
    return Eu;
  }
  static get PLUGIN_PRIORITY() {
    return J9;
  }
  static get SETTING_KEYS() {
    return !0;
  }
  static get CALCULATION_STEP() {
    return 50;
  }
  static get SYNC_CALCULATION_LIMIT() {
    return 50;
  }
  /**
   * Instance of {@link GhostTable} for rows and columns size calculations.
   *
   * @private
   * @type {GhostTable}
   */
  constructor(e) {
    super(e), za(this, QE), za(this, ZE), za(this, Ap), za(this, qE), za(this, XE), za(this, KE), ja(this, "ghostTable", new Ub(this.hot)), ja(this, "samplesGenerator", new uH((n, r) => {
      const i = this.hot.getCellMeta(n, r);
      let o = "";
      i.spanned || (o = this.hot.getDataAtCell(n, r));
      let s = "";
      return this.hot.hasHook("modifyAutoColumnSizeSeed") && (s = this.hot.runHooks("modifyAutoColumnSizeSeed", s, i, o)), {
        value: o,
        bundleSeed: s
      };
    })), ja(this, "firstCalculation", !0), ja(this, "inProgress", !1), ja(this, "measuredColumns", 0), ja(this, "columnWidthsMap", new Ps()), j9(this, El, {
      writable: !0,
      value: []
    }), this.hot.columnIndexMapper.registerMap(e8, this.columnWidthsMap), this.addHook("beforeColumnResize", (n, r, i) => Ys(this, Ap, JE).call(this, n, r, i));
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link #enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[Eu] !== !1 && !this.hot.getSettings().colWidths;
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const n = this.hot.getSettings()[Eu];
    n && n.useHeaders !== null && n.useHeaders !== void 0 && this.ghostTable.setSetting("useHeaders", n.useHeaders), this.setSamplingOptions(), this.addHook("afterLoadData", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return Ys(e, XE, n8).call(e, ...i);
    }), this.addHook("beforeChangeRender", (r) => Ys(this, qE, r8).call(this, r)), this.addHook("afterFormulasValuesUpdate", (r) => Ys(this, QE, o8).call(this, r)), this.addHook("beforeViewRender", (r) => Ys(this, KE, t8).call(this, r)), this.addHook("modifyColWidth", (r, i) => this.getColumnWidth(i, r)), this.addHook("afterInit", () => Ys(this, ZE, i8).call(this)), super.enablePlugin();
  }
  /**
   * Updates the plugin's state. This method is executed when {@link Core#updateSettings} is invoked.
   */
  updatePlugin() {
    const e = this.findColumnsWhereHeaderWasChanged();
    e.length && (this.clearCache(e), this.calculateVisibleColumnsWidth()), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin(), this.addHook("beforeColumnResize", (e, n, r) => Ys(this, Ap, JE).call(this, e, n, r));
  }
  /**
   * Calculates visible columns width.
   */
  calculateVisibleColumnsWidth() {
    if (!this.hot.countRows())
      return;
    const n = this.hot.renderCall, r = this.getFirstVisibleColumn(), i = this.getLastVisibleColumn();
    r === -1 || i === -1 || this.calculateColumnsWidth({
      from: r,
      to: i
    }, void 0, n);
  }
  /**
   * Calculates a columns width.
   *
   * @param {number|object} colRange Visual column index or an object with `from` and `to` visual indexes as a range.
   * @param {number|object} rowRange Visual row index or an object with `from` and `to` visual indexes as a range.
   * @param {boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.
   */
  calculateColumnsWidth() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      from: 0,
      to: this.hot.countCols() - 1
    }, n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      from: 0,
      to: this.hot.countRows() - 1
    }, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const i = typeof e == "number" ? {
      from: e,
      to: e
    } : e, o = typeof n == "number" ? {
      from: n,
      to: n
    } : n;
    xe(i.from, i.to, (s) => {
      let a = this.hot.toPhysicalColumn(s);
      if (a === null && (a = s), r || this.columnWidthsMap.getValueAtIndex(a) === null && !this.hot._getColWidthFromSettings(a)) {
        const l = this.samplesGenerator.generateColumnSamples(s, o);
        H(l, (u) => {
          let [c, d] = u;
          return this.ghostTable.addColumn(c, d);
        });
      }
    }), this.ghostTable.columns.length && (this.hot.batchExecution(() => {
      this.ghostTable.getWidths((s, a) => {
        const l = this.hot.toPhysicalColumn(s);
        this.columnWidthsMap.setValueAtIndex(l, a);
      });
    }, !0), this.measuredColumns = i.to + 1, this.ghostTable.clean());
  }
  /**
   * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.
   * To retrieve width for specified column use {@link AutoColumnSize##getColumnWidth} method.
   *
   * @param {object|number} rowRange Row index or an object with `from` and `to` properties which define row range.
   */
  calculateAllColumnsWidth() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      from: 0,
      to: this.hot.countRows() - 1
    }, n = 0;
    const r = this.hot.countCols() - 1;
    let i = null;
    this.inProgress = !0;
    const o = () => {
      if (!this.hot) {
        Dc(i), this.inProgress = !1;
        return;
      }
      this.calculateColumnsWidth({
        from: n,
        to: Math.min(n + hc.CALCULATION_STEP, r)
      }, e), n = n + hc.CALCULATION_STEP + 1, n < r ? i = Yg(o) : (Dc(i), this.inProgress = !1, this.hot.view.adjustElementsSize());
    }, s = this.getSyncCalculationLimit();
    this.firstCalculation && s >= 0 && (this.calculateColumnsWidth({
      from: 0,
      to: s
    }, e), this.firstCalculation = !1, n = s + 1), n < r ? o() : this.inProgress = !1;
  }
  /**
   * Sets the sampling options.
   *
   * @private
   */
  setSamplingOptions() {
    const e = this.hot.getSettings()[Eu], n = e && Vt(e, "samplingRatio") ? e.samplingRatio : void 0, r = e && Vt(e, "allowSampleDuplicates") ? e.allowSampleDuplicates : void 0;
    n && !isNaN(n) && this.samplesGenerator.setSampleCount(parseInt(n, 10)), r && this.samplesGenerator.setAllowDuplicates(r);
  }
  /**
   * Recalculates all columns width (overwrite cache values).
   */
  recalculateAllColumnsWidth() {
    this.hot.view && this.hot.view._wt.wtTable.isVisible() && (this.clearCache(), this.calculateAllColumnsWidth());
  }
  /**
   * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated
   * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).
   *
   * @returns {number}
   */
  getSyncCalculationLimit() {
    const e = this.hot.getSettings()[Eu];
    let n = hc.SYNC_CALCULATION_LIMIT;
    const r = this.hot.countCols() - 1;
    return Xe(e) && (n = e.syncLimit, aS(n) ? n = _S(r, n) : n >>= 0), Math.min(n, r);
  }
  /**
   * Gets the calculated column width.
   *
   * @param {number} column Visual column index.
   * @param {number} [defaultWidth] Default column width. It will be picked up if no calculated width found.
   * @param {boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).
   * @returns {number}
   */
  getColumnWidth(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0, i = n;
    return i === void 0 && (i = this.columnWidthsMap.getValueAtIndex(this.hot.toPhysicalColumn(e)), r && typeof i == "number" && (i = Math.max(i, PS.DEFAULT_WIDTH))), i;
  }
  /**
   * Gets the first visible column.
   *
   * @returns {number} Returns visual column index, -1 if table is not rendered or if there are no columns to base the the calculations on.
   */
  getFirstVisibleColumn() {
    const e = this.hot.view._wt;
    if (e.wtViewport.columnsVisibleCalculator) {
      const n = e.wtTable.getFirstVisibleColumn();
      if (n !== -1)
        return this.hot.columnIndexMapper.getVisualFromRenderableIndex(n);
    }
    if (e.wtViewport.columnsRenderCalculator) {
      const n = e.wtTable.getFirstRenderedColumn();
      if (n !== -1)
        return this.hot.columnIndexMapper.getVisualFromRenderableIndex(n);
    }
    return -1;
  }
  /**
   * Gets the last visible column.
   *
   * @returns {number} Returns visual column index or -1 if table is not rendered.
   */
  getLastVisibleColumn() {
    const e = this.hot.view._wt;
    if (e.wtViewport.columnsVisibleCalculator) {
      const n = e.wtTable.getLastVisibleColumn();
      if (n !== -1)
        return this.hot.columnIndexMapper.getVisualFromRenderableIndex(n);
    }
    if (e.wtViewport.columnsRenderCalculator) {
      const n = e.wtTable.getLastRenderedColumn();
      if (n !== -1)
        return this.hot.columnIndexMapper.getVisualFromRenderableIndex(n);
    }
    return -1;
  }
  /**
   * Collects all columns which titles has been changed in comparison to the previous state.
   *
   * @private
   * @returns {Array} It returns an array of physical column indexes.
   */
  findColumnsWhereHeaderWasChanged() {
    const e = this.hot.getColHeader();
    return nn(e, (r, i, o) => {
      const s = td(this, El).length;
      return (s - 1 < o || td(this, El)[o] !== i) && r.push(o), s - 1 < o ? td(this, El).push(i) : td(this, El)[o] = i, r;
    }, []);
  }
  /**
   * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.
   * Otherwise whole cache will be cleared.
   *
   * @param {number[]} [columns] List of physical column indexes to clear.
   */
  clearCache() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    e.length ? this.hot.batchExecution(() => {
      H(e, (n) => {
        this.columnWidthsMap.setValueAtIndex(n, null);
      });
    }, !0) : this.columnWidthsMap.clear();
  }
  /**
   * Checks if all widths were calculated. If not then return `true` (need recalculate).
   *
   * @returns {boolean}
   */
  isNeedRecalculate() {
    return !!Tr(this.columnWidthsMap.getValues().slice(0, this.measuredColumns), (e) => e === null).length;
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.ghostTable.clean(), super.destroy();
  }
}
function t8() {
  this.calculateVisibleColumnsWidth(), this.isNeedRecalculate() && !this.inProgress && this.calculateAllColumnsWidth();
}
function n8() {
  this.hot.view ? this.recalculateAllColumnsWidth() : setTimeout(() => {
    this.hot && this.recalculateAllColumnsWidth();
  }, 0);
}
function r8(t) {
  const e = qe(t, (n) => {
    let [, r] = n;
    return this.hot.toPhysicalColumn(this.hot.propToCol(r));
  });
  this.clearCache(Array.from(new Set(e)));
}
function JE(t, e, n) {
  let r = t;
  return n && (this.calculateColumnsWidth(e, void 0, !0), r = this.getColumnWidth(e, void 0, !1)), r;
}
function i8() {
  q9(this, El, this.hot.getColHeader());
}
function o8(t) {
  const e = Tr(t, (r) => {
    var i;
    return Re((i = r.address) === null || i === void 0 ? void 0 : i.col);
  }), n = qe(e, (r) => r.address.col);
  this.clearCache(Array.from(new Set(n)));
}
const fa = {
  horizontal: "horizontal",
  vertical: "vertical"
};
function s8(t, e, n) {
  let r, i, o;
  return e[0] === t[0] && e[1] < t[1] ? (o = "left", r = n(e[0], e[1]), i = n(e[2], t[1] - 1)) : e[2] === t[2] && e[0] === t[0] && e[3] > t[3] ? (o = "right", r = n(e[0], t[3] + 1), i = n(e[2], e[3])) : e[0] < t[0] && e[1] === t[1] ? (o = "up", r = n(e[0], e[1]), i = n(t[0] - 1, e[3])) : e[2] > t[2] && e[1] === t[1] && (o = "down", r = n(t[2] + 1, e[1]), i = n(e[2], e[3])), r && r.normalize(), i && i.normalize(), {
    directionOfDrag: o,
    startOfDragCoords: r,
    endOfDragCoords: i
  };
}
function a8(t) {
  const e = {};
  return t === !0 ? (e.directions = Object.keys(fa), e.autoInsertRow = !0) : Xe(t) ? (Re(t.autoInsertRow) ? t.direction === fa.horizontal ? e.autoInsertRow = !1 : e.autoInsertRow = t.autoInsertRow : e.autoInsertRow = !1, Re(t.direction) ? e.directions = [t.direction] : e.directions = Object.keys(fa)) : typeof t == "string" ? (e.directions = [t], e.autoInsertRow = !0) : (e.directions = [], e.autoInsertRow = !1), e;
}
function Tu(t, e) {
  l8(t, e), e.add(t);
}
function l8(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Ka(t, e, n) {
  return e = u8(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function u8(t) {
  var e = c8(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function c8(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function _u(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
_e.getSingleton().register("modifyAutofillRange");
_e.getSingleton().register("beforeAutofill");
_e.getSingleton().register("afterAutofill");
const eT = "autofill", h8 = 20, d8 = ["fillHandle"], f8 = "insert_row_below", g8 = 200;
var tT = /* @__PURE__ */ new WeakSet(), nT = /* @__PURE__ */ new WeakSet(), rT = /* @__PURE__ */ new WeakSet(), iT = /* @__PURE__ */ new WeakSet(), oT = /* @__PURE__ */ new WeakSet();
class m8 extends gt {
  constructor() {
    super(...arguments), Tu(this, oT), Tu(this, iT), Tu(this, rT), Tu(this, nT), Tu(this, tT), Ka(this, "addingStarted", !1), Ka(this, "mouseDownOnCellCorner", !1), Ka(this, "mouseDragOutside", !1), Ka(this, "handleDraggedCells", 0), Ka(this, "directions", []), Ka(this, "autoInsertRow", !1);
  }
  static get PLUGIN_KEY() {
    return eT;
  }
  static get PLUGIN_PRIORITY() {
    return h8;
  }
  static get SETTING_KEYS() {
    return [eT, ...d8];
  }
  /**
   * Checks if the plugin is enabled in the Handsontable settings.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings().fillHandle;
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.mapSettings(), this.registerEvents(), this.addHook("afterOnCellCornerMouseDown", (e) => _u(this, nT, w8).call(this, e)), this.addHook("afterOnCellCornerDblClick", (e) => _u(this, tT, p8).call(this, e)), this.addHook("beforeOnCellMouseOver", (e, n) => _u(this, rT, C8).call(this, n)), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - `autofill`
   *  - [`fillHandle`](@/api/options.md#fillhandle)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.clearMappedSettings(), super.disablePlugin();
  }
  /**
   * Gets selection data.
   *
   * @private
   * @returns {object[]} Ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.
   */
  getSelectionData() {
    const e = this.hot.getSelectedRangeLast(), {
      row: n,
      col: r
    } = e.getTopStartCorner(), {
      row: i,
      col: o
    } = e.getBottomEndCorner(), s = this.hot.runHooks("modifyCopyableRange", [{
      startRow: n,
      startCol: r,
      endRow: i,
      endCol: o
    }]), a = [], l = [], u = [];
    return H(s, (c) => {
      for (let d = c.startRow; d <= c.endRow; d += 1)
        a.indexOf(d) === -1 && a.push(d);
      for (let d = c.startCol; d <= c.endCol; d += 1)
        l.indexOf(d) === -1 && l.push(d);
    }), H(a, (c) => {
      const d = [];
      H(l, (g) => {
        d.push(this.hot.getCopyableData(c, g));
      }), u.push(d);
    }), u;
  }
  /**
   * Try to apply fill values to the area in fill border, omitting the selection border.
   *
   * @private
   * @returns {boolean} Reports if fill was applied.
   *
   * @fires Hooks#modifyAutofillRange
   * @fires Hooks#beforeAutofill
   * @fires Hooks#afterAutofill
   */
  fillIn() {
    if (this.hot.selection.highlight.getFill().isEmpty())
      return !1;
    const [e, n, r, i] = this.hot.selection.highlight.getFill().getVisualCorners(), o = this.hot.getSelectedRangeLast(), s = o.getTopStartCorner(), a = o.getBottomEndCorner();
    this.resetSelectionOfDraggedArea();
    const l = [s.row, s.col, a.row, a.col], u = this.hot.runHooks("modifyAutofillRange", [Math.min(s.row, e), Math.min(s.col, n), Math.max(a.row, r), Math.max(a.col, i)], l), {
      directionOfDrag: c,
      startOfDragCoords: d,
      endOfDragCoords: g
    } = s8(l, u, (p, C) => this.hot._createCellCoords(p, C));
    if (d && d.row > -1 && d.col > -1) {
      const p = this.getSelectionData(), C = o.clone(), E = this.hot._createCellRange(d, d, g), I = this.hot.runHooks("beforeAutofill", p, C, E, c);
      if (I === !1)
        return this.hot.selection.highlight.getFill().clear(), this.hot.render(), !1;
      let M = I;
      const y = I;
      if (["up", "left"].indexOf(c) > -1 && !(y.length === 1 && y[0].length === 0))
        if (M = [], c === "up") {
          const $ = g.row - d.row + 1, X = $ % y.length;
          for (let G = 0; G < $; G++)
            M.push(y[(G + (y.length - X)) % y.length]);
        } else {
          const $ = g.col - d.col + 1, X = $ % y[0].length;
          for (let G = 0; G < y.length; G++) {
            M.push([]);
            for (let q = 0; q < $; q++)
              M[G].push(y[G][(q + (y[G].length - X)) % y[G].length]);
          }
        }
      this.hot.populateFromArray(d.row, d.col, M, g.row, g.col, `${this.pluginName}.fill`, null), this.setSelection(u), this.hot.runHooks("afterAutofill", M, C, E, c), this.hot.render();
    } else
      this.hot._refreshBorders();
    return !0;
  }
  /**
   * Reduces the selection area if the handle was dragged outside of the table or on headers.
   *
   * @private
   * @param {CellCoords} coords Indexes of selection corners.
   * @returns {CellCoords}
   */
  reduceSelectionAreaIfNeeded(e) {
    return e.row < 0 && (e.row = 0), e.col < 0 && (e.col = 0), e;
  }
  /**
   * Gets the coordinates of the drag & drop borders.
   *
   * @private
   * @param {CellCoords} coordsOfSelection `CellCoords` coord object.
   * @returns {CellCoords}
   */
  getCoordsOfDragAndDropBorders(e) {
    const n = this.hot.getSelectedRangeLast(), r = n.getBottomEndCorner();
    let i = e;
    if (this.directions.includes(fa.vertical) && this.directions.includes(fa.horizontal)) {
      const o = n.getTopStartCorner();
      (r.col <= e.col || o.col >= e.col) && (i = this.hot._createCellCoords(r.row, e.col)), (r.row < e.row || o.row > e.row) && (i = this.hot._createCellCoords(e.row, r.col));
    } else if (this.directions.includes(fa.vertical))
      i = this.hot._createCellCoords(e.row, r.col);
    else if (this.directions.includes(fa.horizontal))
      i = this.hot._createCellCoords(r.row, e.col);
    else
      return;
    return this.reduceSelectionAreaIfNeeded(i);
  }
  /**
   * Show the fill border.
   *
   * @private
   * @param {CellCoords} coordsOfSelection `CellCoords` coord object.
   */
  showBorder(e) {
    const n = this.getCoordsOfDragAndDropBorders(e);
    n && this.redrawBorders(n);
  }
  /**
   * Add new row.
   *
   * @private
   */
  addRow() {
    this.hot._registerTimeout(() => {
      this.hot.alter(f8, void 0, 1, `${this.pluginName}.fill`), this.addingStarted = !1;
    }, g8);
  }
  /**
   * Add new rows if they are needed to continue auto-filling values.
   *
   * @private
   */
  addNewRowIfNeeded() {
    if (!this.hot.selection.highlight.getFill().isEmpty() && this.addingStarted === !1 && this.autoInsertRow) {
      const e = this.hot.getSelectedLast(), n = this.hot.selection.highlight.getFill().getVisualCorners(), r = this.hot.countRows();
      e[2] < r - 1 && n[2] === r - 1 && (this.addingStarted = !0, this.addRow());
    }
  }
  /**
   * Get index of last adjacent filled in row.
   *
   * @private
   * @param {Array} cornersOfSelectedCells Indexes of selection corners.
   * @returns {number} Gives number greater than or equal to zero when selection adjacent can be applied.
   *                   Or -1 when selection adjacent can't be applied.
   */
  getIndexOfLastAdjacentFilledInRow(e) {
    const n = this.hot.getData(), r = this.hot.countRows();
    let i;
    for (let o = e[2] + 1; o < r; o++) {
      for (let l = e[1]; l <= e[3]; l++)
        if (n[o][l])
          return -1;
      const s = n[o][e[1] - 1], a = n[o][e[3] + 1];
      (s || a) && (i = o);
    }
    return i;
  }
  /**
   * Adds a selection from the start area to the specific row index.
   *
   * @private
   * @param {Array} selectStartArea Selection area from which we start to create more comprehensive selection.
   * @param {number} rowIndex The row index into the selection will be added.
   */
  addSelectionFromStartAreaToSpecificRowIndex(e, n) {
    this.hot.selection.highlight.getFill().clear().add(this.hot._createCellCoords(e[0], e[1])).add(this.hot._createCellCoords(n, e[3])).commit();
  }
  /**
   * Sets selection based on passed corners.
   *
   * @private
   * @param {Array} cornersOfArea An array witch defines selection.
   */
  setSelection(e) {
    this.hot.selectCell(...qe(e, (n) => Math.max(n, 0)), !1, !1);
  }
  /**
   * Try to select cells down to the last row in the left column and then returns if selection was applied.
   *
   * @private
   * @returns {boolean}
   */
  selectAdjacent() {
    const e = this.hot.getSelectedLast(), n = this.getIndexOfLastAdjacentFilledInRow(e);
    return n === -1 || n === void 0 ? !1 : (this.addSelectionFromStartAreaToSpecificRowIndex(e, n), !0);
  }
  /**
   * Resets selection of dragged area.
   *
   * @private
   */
  resetSelectionOfDraggedArea() {
    this.handleDraggedCells = 0, this.hot.selection.highlight.getFill().clear();
  }
  /**
   * Redraws borders.
   *
   * @private
   * @param {CellCoords} coords `CellCoords` coord object.
   */
  redrawBorders(e) {
    this.hot.selection.highlight.getFill().clear().add(this.hot.getSelectedRangeLast().from).add(this.hot.getSelectedRangeLast().to).add(e).commit(), this.hot.view.render();
  }
  /**
   * Get if mouse was dragged outside.
   *
   * @private
   * @param {MouseEvent} event `mousemove` event properties.
   * @returns {boolean}
   */
  getIfMouseWasDraggedOutside(e) {
    const {
      documentElement: n
    } = this.hot.rootDocument, r = an(this.hot.table).top - (this.hot.rootWindow.pageYOffset || n.scrollTop) + Bt(this.hot.table), i = an(this.hot.table).left - (this.hot.rootWindow.pageXOffset || n.scrollLeft) + yt(this.hot.table);
    return e.clientY > r && e.clientX <= i;
  }
  /**
   * Bind the events used by the plugin.
   *
   * @private
   */
  registerEvents() {
    const {
      documentElement: e
    } = this.hot.rootDocument;
    this.eventManager.addEventListener(e, "mouseup", () => _u(this, iT, v8).call(this)), this.eventManager.addEventListener(e, "mousemove", (n) => _u(this, oT, S8).call(this, n));
  }
  /**
   * Clears mapped settings.
   *
   * @private
   */
  clearMappedSettings() {
    this.directions.length = 0, this.autoInsertRow = !1;
  }
  /**
   * Map settings.
   *
   * @private
   */
  mapSettings() {
    const e = a8(this.hot.getSettings().fillHandle);
    this.directions = e.directions, this.autoInsertRow = e.autoInsertRow;
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
function p8() {
  this.selectAdjacent() && this.fillIn();
}
function w8() {
  this.handleDraggedCells = 1, this.mouseDownOnCellCorner = !0;
}
function C8(t) {
  this.mouseDownOnCellCorner && !this.hot.view.isMouseDown() && this.handleDraggedCells && (this.handleDraggedCells += 1, this.showBorder(t), this.addNewRowIfNeeded());
}
function v8() {
  this.handleDraggedCells && (this.handleDraggedCells > 1 && this.fillIn(), this.handleDraggedCells = 0, this.mouseDownOnCellCorner = !1);
}
function S8(t) {
  const e = this.getIfMouseWasDraggedOutside(t);
  this.addingStarted === !1 && this.handleDraggedCells > 0 && e ? (this.mouseDragOutside = !0, this.addingStarted = !0) : this.mouseDragOutside = !1, this.mouseDragOutside && this.autoInsertRow && this.addRow();
}
function nd(t, e) {
  y8(t, e), e.add(t);
}
function y8(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Gs(t, e, n) {
  return e = b8(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function b8(t) {
  var e = R8(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function R8(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Mu(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const rd = "autoRowSize", E8 = 40, T8 = "autoRowSize";
var sT = /* @__PURE__ */ new WeakSet(), Ip = /* @__PURE__ */ new WeakSet(), aT = /* @__PURE__ */ new WeakSet(), lT = /* @__PURE__ */ new WeakSet();
class dc extends gt {
  static get PLUGIN_KEY() {
    return rd;
  }
  static get PLUGIN_PRIORITY() {
    return E8;
  }
  static get SETTING_KEYS() {
    return !0;
  }
  static get CALCULATION_STEP() {
    return 50;
  }
  static get SYNC_CALCULATION_LIMIT() {
    return 500;
  }
  /**
   * Columns header's height cache.
   *
   * @private
   * @type {number}
   */
  constructor(e) {
    super(e), nd(this, lT), nd(this, aT), nd(this, Ip), nd(this, sT), Gs(this, "headerHeight", null), Gs(this, "ghostTable", new Ub(this.hot)), Gs(this, "samplesGenerator", new uH((n, r) => {
      if (n >= 0 && r >= 0 && this.hot.getCellMeta(n, r).hidden)
        return !1;
      let i;
      return n >= 0 ? i = this.hot.getDataAtCell(n, r) : n === -1 && (i = this.hot.getColHeader(r)), {
        value: i
      };
    })), Gs(this, "firstCalculation", !0), Gs(this, "inProgress", !1), Gs(this, "measuredRows", 0), Gs(this, "rowHeightsMap", new Ps()), this.hot.rowIndexMapper.registerMap(T8, this.rowHeightsMap), this.addHook("beforeRowResize", (n, r, i) => Mu(this, Ip, uT).call(this, n, r, i));
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    const e = this.hot.getSettings()[rd];
    return e === !0 || Xe(e);
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.setSamplingOptions(), this.addHook("afterLoadData", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Mu(e, aT, M8).call(e, ...r);
    }), this.addHook("beforeChangeRender", (n) => Mu(this, lT, O8).call(this, n)), this.addHook("beforeColumnResize", () => this.recalculateAllRowsHeight()), this.addHook("beforeViewRender", (n) => Mu(this, sT, _8).call(this, n)), this.addHook("modifyRowHeight", (n, r) => this.getRowHeight(r, n)), this.addHook("modifyColumnHeaderHeight", () => this.getColumnHeaderHeight()), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.headerHeight = null, super.disablePlugin(), this.addHook("beforeRowResize", (e, n, r) => Mu(this, Ip, uT).call(this, e, n, r));
  }
  /**
   * Calculate a given rows height.
   *
   * @param {number|object} rowRange Row index or an object with `from` and `to` indexes as a range.
   * @param {number|object} colRange Column index or an object with `from` and `to` indexes as a range.
   * @param {boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.
   */
  calculateRowsHeight() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      from: 0,
      to: this.hot.countRows() - 1
    }, n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      from: 0,
      to: this.hot.countCols() - 1
    }, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const i = typeof e == "number" ? {
      from: e,
      to: e
    } : e, o = typeof n == "number" ? {
      from: n,
      to: n
    } : n;
    if (this.hot.getColHeader(0) !== null) {
      const s = this.samplesGenerator.generateRowSamples(-1, o);
      this.ghostTable.addColumnHeadersRow(s.get(-1));
    }
    xe(i.from, i.to, (s) => {
      if (r || this.rowHeightsMap.getValueAtIndex(s) === null) {
        const a = this.samplesGenerator.generateRowSamples(s, o);
        H(a, (l) => {
          let [u, c] = l;
          return this.ghostTable.addRow(u, c);
        });
      }
    }), this.ghostTable.rows.length && (this.hot.batchExecution(() => {
      this.ghostTable.getHeights((s, a) => {
        s < 0 ? this.headerHeight = a : this.rowHeightsMap.setValueAtIndex(this.hot.toPhysicalRow(s), a);
      });
    }, !0), this.measuredRows = i.to + 1, this.ghostTable.clean());
  }
  /**
   * Calculate all rows heights. The calculated row will be cached in the {@link AutoRowSize#heights} property.
   * To retrieve height for specified row use {@link AutoRowSize#getRowHeight} method.
   *
   * @param {object|number} colRange Row index or an object with `from` and `to` properties which define row range.
   */
  calculateAllRowsHeight() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      from: 0,
      to: this.hot.countCols() - 1
    }, n = 0;
    const r = this.hot.countRows() - 1;
    let i = null;
    this.inProgress = !0;
    const o = () => {
      if (!this.hot) {
        Dc(i), this.inProgress = !1;
        return;
      }
      this.calculateRowsHeight({
        from: n,
        to: Math.min(n + dc.CALCULATION_STEP, r)
      }, e), n = n + dc.CALCULATION_STEP + 1, n < r ? i = Yg(o) : (Dc(i), this.inProgress = !1, this.hot.view.adjustElementsSize(!0), this.hot.view._wt.wtOverlays.inlineStartOverlay.needFullRender && this.hot.view._wt.wtOverlays.inlineStartOverlay.clone.draw());
    }, s = this.getSyncCalculationLimit();
    this.firstCalculation && s >= 0 && (this.calculateRowsHeight({
      from: 0,
      to: s
    }, e), this.firstCalculation = !1, n = s + 1), n < r ? o() : (this.inProgress = !1, this.hot.view.adjustElementsSize(!1));
  }
  /**
   * Sets the sampling options.
   *
   * @private
   */
  setSamplingOptions() {
    const e = this.hot.getSettings()[rd], n = e && Vt(e, "samplingRatio") ? e.samplingRatio : void 0, r = e && Vt(e, "allowSampleDuplicates") ? e.allowSampleDuplicates : void 0;
    n && !isNaN(n) && this.samplesGenerator.setSampleCount(parseInt(n, 10)), r && this.samplesGenerator.setAllowDuplicates(r);
  }
  /**
   * Recalculates all rows height (overwrite cache values).
   */
  recalculateAllRowsHeight() {
    _s(this.hot.view._wt.wtTable.TABLE) && (this.clearCache(), this.calculateAllRowsHeight());
  }
  /**
   * Gets value which tells how many rows should be calculated synchronously (rest of the rows will be calculated
   * asynchronously). The limit is calculated based on `syncLimit` set to autoRowSize option (see {@link Options#autoRowSize}).
   *
   * @returns {number}
   */
  getSyncCalculationLimit() {
    const e = this.hot.getSettings()[rd];
    let n = dc.SYNC_CALCULATION_LIMIT;
    const r = this.hot.countRows() - 1;
    return Xe(e) && (n = e.syncLimit, aS(n) ? n = _S(r, n) : n >>= 0), Math.min(n, r);
  }
  /**
   * Get a row's height, as measured in the DOM.
   *
   * The height returned includes 1 px of the row's bottom border.
   *
   * Mind that this method is different from the
   * [`getRowHeight()`](@/api/core.md#getrowheight) method
   * of Handsontable's [Core](@/api/core.md).
   *
   * @param {number} row A visual row index.
   * @param {number} [defaultHeight] If no height is found, `defaultHeight` is returned instead.
   * @returns {number} The height of the specified row, in pixels.
   */
  getRowHeight(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
    const r = e < 0 ? this.headerHeight : this.rowHeightsMap.getValueAtIndex(this.hot.toPhysicalRow(e));
    let i = n;
    return r !== null && r > (n || 0) && (i = r), i;
  }
  /**
   * Get the calculated column header height.
   *
   * @returns {number|undefined}
   */
  getColumnHeaderHeight() {
    return this.headerHeight;
  }
  /**
   * Get the first visible row.
   *
   * @returns {number} Returns row index, -1 if table is not rendered or if there are no rows to base the the calculations on.
   */
  getFirstVisibleRow() {
    const e = this.hot.view._wt;
    return e.wtViewport.rowsVisibleCalculator ? e.wtTable.getFirstVisibleRow() : e.wtViewport.rowsRenderCalculator ? e.wtTable.getFirstRenderedRow() : -1;
  }
  /**
   * Gets the last visible row.
   *
   * @returns {number} Returns row index or -1 if table is not rendered.
   */
  getLastVisibleRow() {
    const e = this.hot.view._wt;
    return e.wtViewport.rowsVisibleCalculator ? e.wtTable.getLastVisibleRow() : e.wtViewport.rowsRenderCalculator ? e.wtTable.getLastRenderedRow() : -1;
  }
  /**
   * Clears cached heights.
   */
  clearCache() {
    this.headerHeight = null, this.rowHeightsMap.init();
  }
  /**
   * Clears cache by range.
   *
   * @param {object|number} range Row index or an object with `from` and `to` properties which define row range.
   */
  clearCacheByRange(e) {
    const {
      from: n,
      to: r
    } = typeof e == "number" ? {
      from: e,
      to: e
    } : e;
    this.hot.batchExecution(() => {
      xe(Math.min(n, r), Math.max(n, r), (i) => {
        this.rowHeightsMap.setValueAtIndex(i, null);
      });
    }, !0);
  }
  /**
   * Checks if all heights were calculated. If not then return `true` (need recalculate).
   *
   * @returns {boolean}
   */
  isNeedRecalculate() {
    return !!Tr(this.rowHeightsMap.getValues().slice(0, this.measuredRows), (e) => e === null).length;
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.ghostTable.clean(), super.destroy();
  }
}
function _8() {
  const t = this.hot.renderCall, e = this.hot.getSettings().fixedRowsBottom, n = this.getFirstVisibleRow(), r = this.getLastVisibleRow();
  if (!(n === -1 || r === -1)) {
    if (this.calculateRowsHeight({
      from: n,
      to: r
    }, void 0, t), e) {
      const i = this.hot.countRows() - 1;
      this.calculateRowsHeight({
        from: i - e,
        to: i
      });
    }
    this.isNeedRecalculate() && !this.inProgress && this.calculateAllRowsHeight();
  }
}
function uT(t, e, n) {
  let r = t;
  return n && (this.calculateRowsHeight(e, void 0, !0), r = this.getRowHeight(e)), r;
}
function M8() {
  this.hot.view ? this.recalculateAllRowsHeight() : this.hot._registerTimeout(() => {
    this.hot && this.recalculateAllRowsHeight();
  });
}
function O8(t) {
  let e = null;
  t.length === 1 ? e = t[0][0] : t.length > 1 && (e = {
    from: t[0][0],
    to: t[t.length - 1][0]
  }), e !== null && this.clearCacheByRange(e);
}
const {
  getListWithInsertedItems: A8,
  getListWithRemovedItems: I8
} = wx("physicallyIndexed");
class P8 extends xa {
  constructor() {
    super((e) => e);
  }
  /**
   * Add values to list and reorganize.
   *
   * @private
   * @param {number} insertionIndex Position inside the list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insert(e, n) {
    const r = ry(this.indexedValues, n);
    this.indexedValues = A8(r, e, n, this.initValueOrFn), super.insert(e, n);
  }
  /**
   * Remove values from the list and reorganize.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  remove(e) {
    const n = I8(this.indexedValues, e);
    this.indexedValues = ny(n, e), super.remove(e);
  }
}
const x8 = P8, {
  getListWithInsertedItems: H8,
  getListWithRemovedItems: D8
} = wx("physicallyIndexed");
class N8 extends xa {
  constructor() {
    super((e) => e);
  }
  /**
   * Add values to list and reorganize.
   *
   * @private
   * @param {number} insertionIndex Position inside the list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insert(e, n) {
    this.indexedValues = H8(this.indexedValues, e, n, (r, i) => this.getNextValue(i)), super.insert(e, n);
  }
  /**
   * Remove values from the list and reorganize.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  remove(e) {
    this.indexedValues = D8(this.indexedValues, e), super.remove(e);
  }
  /**
   * Get next values, which should be greater than actual maximum value in the list.
   *
   * @param {number} ordinalNumber Position in the list.
   * @returns {number}
   */
  getNextValue(e) {
    return Math.max(...this.getValues()) + 1 + e;
  }
}
const L8 = N8;
function $8(t, e) {
  k8(t, e), e.add(t);
}
function k8(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function F8(t, e, n) {
  return e = W8(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function W8(t) {
  var e = V8(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function V8(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function B8(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const Pp = "bindRowsWithHeaders", U8 = 210, Y8 = "loose", G8 = /* @__PURE__ */ new Map([["loose", x8], ["strict", L8]]);
var cT = /* @__PURE__ */ new WeakSet();
class z8 extends gt {
  constructor() {
    super(...arguments), $8(this, cT), F8(this, "headerIndexes", null);
  }
  static get PLUGIN_KEY() {
    return Pp;
  }
  static get PLUGIN_PRIORITY() {
    return U8;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link BindRowsWithHeaders#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Pp];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled)
      return;
    let e = this.hot.getSettings()[Pp];
    typeof e != "string" && (e = Y8);
    const n = G8.get(e);
    this.headerIndexes = this.hot.rowIndexMapper.registerMap("bindRowsWithHeaders", new n()), this.addHook("modifyRowHeader", (r) => B8(this, cT, j8).call(this, r)), super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.rowIndexMapper.unregisterMap("bindRowsWithHeaders"), super.disablePlugin();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
function j8(t) {
  return this.headerIndexes.getValueAtIndex(this.hot.toPhysicalRow(t));
}
function id(t, e) {
  dH(t, e), e.add(t);
}
function K8(t, e, n) {
  dH(t, e), e.set(t, n);
}
function dH(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function hT(t, e, n) {
  return e = X8(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function X8(t) {
  var e = q8(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function q8(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function dT(t, e) {
  var n = fH(t, e, "get");
  return Z8(t, n);
}
function Z8(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function od(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function xp(t, e, n) {
  var r = fH(t, e, "set");
  return Q8(t, r, n), n;
}
function fH(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Q8(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
const rf = "collapsibleColumns", J8 = 290, e7 = ["nestedHeaders"], Ll = "collapsibleIndicator", fT = rf, gT = /* @__PURE__ */ new Map([["collapse", {
  hideColumn: !0,
  beforeHook: "beforeColumnCollapse",
  afterHook: "afterColumnCollapse"
}], ["expand", {
  hideColumn: !1,
  beforeHook: "beforeColumnExpand",
  afterHook: "afterColumnExpand"
}]]);
var Xa = /* @__PURE__ */ new WeakMap(), mT = /* @__PURE__ */ new WeakSet(), pT = /* @__PURE__ */ new WeakSet(), wT = /* @__PURE__ */ new WeakSet(), CT = /* @__PURE__ */ new WeakSet();
class t7 extends gt {
  constructor() {
    super(...arguments), id(this, CT), id(this, wT), id(this, pT), id(this, mT), hT(this, "nestedHeadersPlugin", null), hT(this, "headerStateManager", null), K8(this, Xa, {
      writable: !0,
      value: null
    });
  }
  static get PLUGIN_KEY() {
    return rf;
  }
  static get PLUGIN_PRIORITY() {
    return J8;
  }
  static get PLUGIN_DEPS() {
    return ["plugin:NestedHeaders"];
  }
  static get SETTING_KEYS() {
    return [rf, ...e7];
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link CollapsibleColumns#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[rf];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const {
      nestedHeaders: n
    } = this.hot.getSettings();
    n || Pt("You need to configure the Nested Headers plugin in order to use collapsible headers."), xp(this, Xa, this.hot.columnIndexMapper.createAndRegisterIndexMap(this.pluginName, "hiding")), this.nestedHeadersPlugin = this.hot.getPlugin("nestedHeaders"), this.headerStateManager = this.nestedHeadersPlugin.getStateManager(), this.addHook("init", () => od(this, wT, i7).call(this)), this.addHook("afterLoadData", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return od(e, CT, o7).call(e, ...i);
    }), this.addHook("afterGetColHeader", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return od(e, mT, n7).call(e, ...i);
    }), this.addHook("beforeOnCellMouseDown", (r, i, o) => od(this, pT, r7).call(this, r, i, o)), this.registerShortcuts(), super.enablePlugin(), this.updatePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *   - [`collapsibleColumns`](@/api/options.md#collapsiblecolumns)
   *   - [`nestedHeaders`](@/api/options.md#nestedheaders)
   */
  updatePlugin() {
    if (this.hot.view) {
      if (!this.nestedHeadersPlugin.detectedOverlappedHeaders) {
        const {
          collapsibleColumns: e
        } = this.hot.getSettings();
        typeof e == "boolean" ? this.headerStateManager.mapState((n) => ({
          collapsible: n.origColspan > 1
        })) : Array.isArray(e) && (this.headerStateManager.mapState(() => ({
          collapsible: !1
        })), this.headerStateManager.mergeStateWith(e));
      }
      super.updatePlugin();
    }
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.columnIndexMapper.unregisterMap(this.pluginName), xp(this, Xa, null), this.nestedHeadersPlugin = null, this.unregisterShortcuts(), this.clearButtons(), super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for toggling collapsible columns.
   *
   * @private
   */
  registerShortcuts() {
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Enter"]],
      callback: () => {
        var e;
        const {
          row: n,
          col: r
        } = this.hot.getSelectedRangeLast().highlight, {
          collapsible: i,
          isCollapsed: o,
          columnIndex: s
        } = (e = this.headerStateManager.getHeaderTreeNodeData(n, r)) !== null && e !== void 0 ? e : {};
        i && (o ? this.expandSection({
          row: n,
          col: s
        }) : this.collapseSection({
          row: n,
          col: s
        }));
      },
      runOnlyIf: () => {
        var e;
        return (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight.isHeader();
      },
      group: fT
    });
  }
  /**
   * Unregister shortcuts responsible for toggling collapsible columns.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(fT);
  }
  /**
   * Clears the expand/collapse buttons.
   *
   * @private
   */
  clearButtons() {
    if (!this.hot.view)
      return;
    const e = this.hot.view._wt.getSetting("columnHeaders").length, n = this.hot.view._wt.wtTable.THEAD, r = this.hot.view._wt.wtOverlays.topOverlay.clone.wtTable.THEAD, i = this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay ? this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null, o = function(s) {
      s && s.parentNode.removeChild(s);
    };
    xe(0, e - 1, (s) => {
      const a = n.childNodes[s], l = r.childNodes[s], u = i ? i.childNodes[s] : null;
      xe(0, a.childNodes.length - 1, (c) => {
        let d = a.childNodes[c].querySelector(`.${Ll}`);
        o(d), l && l.childNodes[c] && (d = l.childNodes[c].querySelector(`.${Ll}`), o(d)), i && u && u.childNodes[c] && (d = u.childNodes[c].querySelector(`.${Ll}`), o(d));
      });
    });
  }
  /**
   * Expands section at the provided coords.
   *
   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).
   */
  expandSection(e) {
    this.toggleCollapsibleSection([e], "expand");
  }
  /**
   * Collapses section at the provided coords.
   *
   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).
   */
  collapseSection(e) {
    this.toggleCollapsibleSection([e], "collapse");
  }
  /**
   * Collapses or expand all collapsible sections, depending on the action parameter.
   *
   * @param {string} action 'collapse' or 'expand'.
   */
  toggleAllCollapsibleSections(e) {
    const n = this.headerStateManager.mapNodes((r) => {
      const {
        collapsible: i,
        origColspan: o,
        headerLevel: s,
        columnIndex: a,
        isCollapsed: l
      } = r;
      if (i === !0 && o > 1 && (l && e === "expand" || !l && e === "collapse"))
        return {
          row: this.headerStateManager.levelToRowCoords(s),
          col: a
        };
    });
    this.toggleCollapsibleSection(n, e);
  }
  /**
   * Collapses all collapsible sections.
   */
  collapseAll() {
    this.toggleAllCollapsibleSections("collapse");
  }
  /**
   * Expands all collapsible sections.
   */
  expandAll() {
    this.toggleAllCollapsibleSections("expand");
  }
  /**
   * Collapses/Expands a section.
   *
   * @param {Array} coords Array of coords - section coordinates.
   * @param {string} [action] Action definition ('collapse' or 'expand').
   * @fires Hooks#beforeColumnCollapse
   * @fires Hooks#beforeColumnExpand
   * @fires Hooks#afterColumnCollapse
   * @fires Hooks#afterColumnExpand
   */
  toggleCollapsibleSection(e, n) {
    if (!gT.has(n))
      throw new Error(`Unsupported action is passed (${n}).`);
    if (!Array.isArray(e))
      return;
    const r = Tr(e, (g) => {
      let {
        row: p
      } = g;
      return p < 0;
    });
    let i = r.length > 0;
    H(r, (g) => {
      var p;
      let {
        row: C,
        col: E
      } = g;
      const {
        collapsible: I,
        isCollapsed: M
      } = (p = this.headerStateManager.getHeaderSettings(C, E)) !== null && p !== void 0 ? p : {};
      if (!I || M && n === "collapse" || !M && n === "expand")
        return i = !1, !1;
    });
    const o = [], s = [];
    i && H(r, (g) => {
      let {
        row: p,
        col: C
      } = g;
      const {
        colspanCompensation: E,
        affectedColumns: I,
        rollbackModification: M
      } = this.headerStateManager.triggerNodeModification(n, p, C);
      E > 0 && (s.push(...I), o.push(M));
    });
    const a = this.getCollapsedColumns();
    let l = [];
    n === "collapse" ? l = oS([...a, ...s]) : n === "expand" && (l = Tr(a, (g) => !s.includes(g)));
    const u = gT.get(n);
    if (this.hot.runHooks(u.beforeHook, a, l, i) === !1) {
      H(o, (g) => {
        g();
      });
      return;
    }
    this.hot.batchExecution(() => {
      H(s, (g) => {
        dT(this, Xa).setValueAtIndex(this.hot.toPhysicalColumn(g), u.hideColumn);
      });
    }, !0);
    const d = this.getCollapsedColumns().length !== a.length;
    this.hot.runHooks(u.afterHook, a, l, i, d), this.hot.render(), this.hot.view.adjustElementsSize(!0);
  }
  /**
   * Gets an array of physical indexes of collapsed columns.
   *
   * @private
   * @returns {number[]}
   */
  getCollapsedColumns() {
    return dT(this, Xa).getHiddenIndexes();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    xp(this, Xa, null), super.destroy();
  }
}
function n7(t, e, n) {
  var r;
  const {
    collapsible: i,
    origColspan: o,
    isCollapsed: s
  } = (r = this.headerStateManager.getHeaderSettings(n, t)) !== null && r !== void 0 ? r : {}, a = i && o > 1 && t >= this.hot.getSettings().fixedColumnsStart, l = this.hot.getSettings().ariaTags;
  let u = e.querySelector(`.${Ll}`);
  if (Ia(e, [Ur("")[0]]), a)
    u || (u = this.hot.rootDocument.createElement("div"), ce(u, Ll), e.querySelector("div:first-child").appendChild(u)), Ye(u, ["collapsed", "expanded"]), s ? (ce(u, "collapsed"), Ts(u, "+"), l && Ne(e, ...Ur(!1))) : (ce(u, "expanded"), Ts(u, "-"), l && Ne(e, ...Ur(!0))), l && Ne(u, ...Vo());
  else {
    var c;
    (c = u) === null || c === void 0 || c.remove();
  }
}
function r7(t, e) {
  Ve(t.target, Ll) && (Ve(t.target, "expanded") ? (this.eventManager.fireEvent(t.target, "mouseup"), this.toggleCollapsibleSection([e], "collapse")) : Ve(t.target, "collapsed") && (this.eventManager.fireEvent(t.target, "mouseup"), this.toggleCollapsibleSection([e], "expand")), Kr(t));
}
function i7() {
  this.updatePlugin();
}
function o7(t, e) {
  e || this.updatePlugin();
}
function zs(t, e, n) {
  return e = s7(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function s7(t) {
  var e = a7(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function a7(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const l7 = ["sortEmptyCells", "indicator", "headerAction", "compareFunctionFactory"], u7 = !1, c7 = !0, h7 = !0;
class d7 {
  constructor(e, n) {
    zs(this, "hot", void 0), zs(this, "sortingStates", new jg()), zs(this, "sortEmptyCells", u7), zs(this, "indicator", c7), zs(this, "headerAction", h7), zs(this, "compareFunctionFactory", void 0), zs(this, "mapName", void 0), this.hot = e, this.mapName = n, this.hot.columnIndexMapper.registerMap(n, this.sortingStates);
  }
  /**
   * Update column properties which affect the sorting result.
   *
   * **Note**: All column properties can be overwritten by {@link Options#columns} option.
   *
   * @param {object} allSortSettings Column sorting plugin's configuration object.
   */
  updateAllColumnsProperties(e) {
    Xe(e) && Ze(e, (n, r) => {
      l7.includes(r) && (this[r] = n);
    });
  }
  /**
   * Get all column properties which affect the sorting result.
   *
   * @returns {object}
   */
  getAllColumnsProperties() {
    const e = {
      sortEmptyCells: this.sortEmptyCells,
      indicator: this.indicator,
      headerAction: this.headerAction
    };
    return typeof this.compareFunctionFactory == "function" && (e.compareFunctionFactory = this.compareFunctionFactory), e;
  }
  /**
   * Get sort order of column.
   *
   * @param {number} searchedColumn Visual column index.
   * @returns {string|undefined} Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).
   */
  getSortOrderOfColumn(e) {
    var n;
    return (n = this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(e))) === null || n === void 0 ? void 0 : n.sortOrder;
  }
  /**
   * Get order of particular column in the states queue.
   *
   * @param {number} column Visual column index.
   * @returns {number}
   */
  getIndexOfColumnInSortQueue(e) {
    return e = this.hot.toPhysicalColumn(e), this.sortingStates.getEntries().findIndex((n) => {
      let [r] = n;
      return r === e;
    });
  }
  /**
   * Get number of sorted columns.
   *
   * @returns {number}
   */
  getNumberOfSortedColumns() {
    return this.sortingStates.getLength();
  }
  /**
   * Get if list of sorted columns is empty.
   *
   * @returns {boolean}
   */
  isListOfSortedColumnsEmpty() {
    return this.getNumberOfSortedColumns() === 0;
  }
  /**
   * Get if particular column is sorted.
   *
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  isColumnSorted(e) {
    return Xe(this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(e)));
  }
  /**
   * Queue of sort states containing sorted columns and their orders (Array of objects containing `column` and `sortOrder` properties).
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
   *
   * @returns {Array<object>}
   */
  getSortStates() {
    return this.sortingStates === null ? [] : this.sortingStates.getEntries().map((n) => {
      let [r, i] = n;
      return {
        column: this.hot.toVisualColumn(r),
        ...i
      };
    });
  }
  /**
   * Get sort state for particular column. Object contains `column` and `sortOrder` properties.
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
   *
   * @param {number} column Visual column index.
   * @returns {object|undefined}
   */
  getColumnSortState(e) {
    const n = this.getSortOrderOfColumn(e);
    if (Re(n))
      return {
        column: e,
        sortOrder: n
      };
  }
  /**
   * Set all column states.
   *
   * @param {Array} sortStates Sort states.
   */
  setSortStates(e) {
    this.sortingStates.clear();
    for (let n = 0; n < e.length; n += 1)
      this.sortingStates.setValueAtIndex(this.hot.toPhysicalColumn(e[n].column), {
        sortOrder: e[n].sortOrder
      });
  }
  /**
   * Destroy the state manager.
   */
  destroy() {
    this.hot.columnIndexMapper.unregisterMap(this.mapName), this.sortingStates = null;
  }
}
const Yf = "asc", Gf = "desc", gH = "colHeader";
function f7(t) {
  if (Xe(t) === !1)
    return !1;
  const {
    column: e,
    sortOrder: n
  } = t;
  return Number.isInteger(e) && [Yf, Gf].includes(n);
}
function g7(t) {
  if (t.some((n) => f7(n) === !1))
    return !1;
  const e = t.map((n) => {
    let {
      column: r
    } = n;
    return r;
  });
  return new Set(e).size === e.length;
}
function vT(t) {
  if (t !== Gf)
    return t === Yf ? Gf : Yf;
}
function mH(t) {
  return t.querySelector(`.${gH}`);
}
function pH(t, e) {
  if (t < 0 || !e.parentNode)
    return !1;
  const n = e.parentNode.parentNode.childNodes;
  return Array.from(n).indexOf(e.parentNode) - n.length === -1;
}
function Gb(t, e, n) {
  return t === -1 && e >= 0 && Ms(n) === !1;
}
const m7 = "ascending", p7 = "descending", wH = "indicatorDisabled", CH = "columnSorting", vH = "sortAction", SH = /* @__PURE__ */ new Map([[Yf, m7], [Gf, p7]]);
function w7(t, e, n, r) {
  const i = [CH];
  if (r && i.push(vH), n === !1)
    return i.push(wH), i;
  const o = t.getSortOrderOfColumn(e);
  return Re(o) && i.push(SH.get(o)), i;
}
function C7() {
  return Array.from(SH.values()).concat(vH, wH, CH);
}
function yH(t, e, n) {
  const r = e.locale;
  return function(i, o) {
    const {
      sortEmptyCells: s
    } = n;
    return typeof i == "string" && (i = i.toLocaleLowerCase(r)), typeof o == "string" && (o = o.toLocaleLowerCase(r)), i === o ? ji : gn(i) ? gn(o) ? ji : s && t === "asc" ? Xt : qt : gn(o) ? s && t === "asc" ? qt : Xt : isNaN(i) && !isNaN(o) ? t === "asc" ? qt : Xt : !isNaN(i) && isNaN(o) || (isNaN(i) || isNaN(o) || (i = parseFloat(i), o = parseFloat(o)), i < o) ? t === "asc" ? Xt : qt : i > o ? t === "asc" ? qt : Xt : ji;
  };
}
const bH = "default";
function v7(t, e, n) {
  return function(r, i) {
    const o = parseFloat(r), s = parseFloat(i), {
      sortEmptyCells: a
    } = n;
    if (o === s || isNaN(o) && isNaN(s))
      return ji;
    if (a) {
      if (gn(r))
        return t === "asc" ? Xt : qt;
      if (gn(i))
        return t === "asc" ? qt : Xt;
    }
    return isNaN(o) ? qt : isNaN(s) ? Xt : o < s ? t === "asc" ? Xt : qt : o > s ? t === "asc" ? qt : Xt : ji;
  };
}
const S7 = "numeric";
function y7(t, e, n) {
  const r = e.checkedTemplate, i = e.uncheckedTemplate, {
    sortEmptyCells: o
  } = n;
  return function(s, a) {
    const l = gn(s), u = gn(a), c = l ? i : s, d = u ? i : a, g = c === i || c === r, p = d === i || d === r;
    if (o === !1) {
      if (l && u === !1)
        return qt;
      if (l === !1 && u)
        return Xt;
    }
    return g === !1 && p ? t === "asc" ? Xt : qt : g && p === !1 ? t === "asc" ? qt : Xt : g === !1 && p === !1 ? yH(t, e, n)(s, a) : c === i && d === r ? t === "asc" ? Xt : qt : c === r && d === i ? t === "asc" ? qt : Xt : ji;
  };
}
const b7 = "checkbox";
function R7(t, e, n) {
  return function(r, i) {
    const {
      sortEmptyCells: o
    } = n;
    if (r === i)
      return ji;
    if (gn(r))
      return gn(i) ? ji : o && t === "asc" ? Xt : qt;
    if (gn(i))
      return o && t === "asc" ? qt : Xt;
    const s = e.dateFormat, a = le(r, s), l = le(i, s);
    return a.isValid() ? l.isValid() ? l.isAfter(a) ? t === "asc" ? Xt : qt : l.isBefore(a) ? t === "asc" ? qt : Xt : ji : Xt : qt;
  };
}
const E7 = "date", {
  register: em,
  getItem: ST,
  hasItem: T7
} = yi("sorting.compareFunctionFactory"), {
  register: RH,
  getItem: _7
} = yi("sorting.mainSortComparator");
function EH(t) {
  return T7(t) ? ST(t) : ST(bH);
}
em(S7, v7);
em(b7, y7);
em(E7, R7);
em(bH, yH);
const ji = 0, Xt = -1, qt = 1;
function M7(t, e) {
  const n = _7(e);
  for (var r = arguments.length, i = new Array(r > 2 ? r - 2 : 0), o = 2; o < r; o++)
    i[o - 2] = arguments[o];
  t.sort(n(...i));
}
function O7(t, e) {
  return function(n, r) {
    const [, ...i] = n, [, ...o] = r;
    return function(a) {
      const l = t[a], u = e[a], c = i[a], d = o[a], g = u.columnSorting;
      return (g.compareFunctionFactory ? g.compareFunctionFactory : EH(u.type))(l, u, g)(c, d);
    }(0);
  };
}
function sd(t, e) {
  A7(t, e), e.add(t);
}
function A7(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ad(t, e, n) {
  return e = I7(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function I7(t) {
  var e = P7(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function P7(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Tl(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const zf = "columnSorting", x7 = 50, jf = "append", H7 = "replace", yT = zf;
RH(zf, O7);
_e.getSingleton().register("beforeColumnSort");
_e.getSingleton().register("afterColumnSort");
var of = /* @__PURE__ */ new WeakSet(), bT = /* @__PURE__ */ new WeakSet(), RT = /* @__PURE__ */ new WeakSet(), ET = /* @__PURE__ */ new WeakSet();
class TH extends gt {
  constructor() {
    super(...arguments), sd(this, ET), sd(this, RT), sd(this, bT), sd(this, of), ad(this, "columnStatesManager", null), ad(this, "columnMetaCache", null), ad(this, "pluginKey", zf), ad(this, "indexesSequenceCache", null);
  }
  static get PLUGIN_KEY() {
    return zf;
  }
  static get PLUGIN_PRIORITY() {
    return x7;
  }
  /**
   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ColumnSorting#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[this.pluginKey];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.columnStatesManager = new d7(this.hot, `${this.pluginKey}.sortingStates`), this.columnMetaCache = new Ps((n) => {
      let r = this.hot.toVisualColumn(n);
      return r === null && (r = n), this.getMergedPluginSettings(r);
    }), this.hot.columnIndexMapper.registerMap(`${this.pluginKey}.columnMeta`, this.columnMetaCache), this.addHook("afterGetColHeader", (n, r) => Tl(this, bT, D7).call(this, n, r)), this.addHook("beforeOnCellMouseDown", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Tl(e, ET, L7).call(e, ...r);
    }), this.addHook("afterOnCellMouseDown", (n, r) => this.onAfterOnCellMouseDown(n, r)), this.addHook("afterInit", () => Tl(this, of, QC).call(this)), this.addHook("afterLoadData", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Tl(e, RT, N7).call(e, ...r);
    }), this.hot.view && Tl(this, of, QC).call(this), this.registerShortcuts(), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    const e = (n, r) => {
      const i = mH(r);
      pH(n, r) === !1 || i === null || this.updateHeaderClasses(i);
    };
    this.hot.addHook("afterGetColHeader", e), this.hot.addHookOnce("afterViewRender", () => {
      this.hot.removeHook("afterGetColHeader", e);
    }), this.hot.batchExecution(() => {
      this.indexesSequenceCache !== null && (this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues()), this.hot.rowIndexMapper.unregisterMap(this.pluginKey));
    }, !0), this.hot.columnIndexMapper.unregisterMap(`${this.pluginKey}.columnMeta`), this.columnStatesManager.destroy(), this.columnMetaCache = null, this.columnStatesManager = null, this.unregisterShortcuts(), super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for toggling column sorting functionality.
   *
   * @private
   */
  registerShortcuts() {
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Enter"]],
      callback: () => {
        const {
          highlight: e
        } = this.hot.getSelectedRangeLast();
        e.row === -1 && e.col >= 0 && this.sort(this.getColumnNextConfig(e.col));
      },
      runOnlyIf: () => {
        var e;
        const n = (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
        return n && this.hot.selection.isCellVisible(n) && n.isHeader();
      },
      group: yT
    });
  }
  /**
   * Unregister shortcuts responsible for toggling column sorting functionality.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(yT);
  }
  // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.
  /**
   * Sorts the table by chosen columns and orders.
   *
   * @param {undefined|object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.
   * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).
   *
   * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.
   *
   * @example
   * ```js
   * // sort ascending first visual column
   * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });
   * ```
   *
   * @fires Hooks#beforeColumnSort
   * @fires Hooks#afterColumnSort
   */
  sort(e) {
    const n = this.getSortConfig(), r = this.getNormalizedSortConfigs(e), i = this.areValidSortConfigs(r);
    this.hot.runHooks("beforeColumnSort", n, r, i) !== !1 && (n.length === 0 && this.indexesSequenceCache === null && (this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new Cx()), this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence())), i && (this.columnStatesManager.setSortStates(r), this.sortByPresetSortStates(r), this.saveAllSortSettings(r)), this.hot.runHooks("afterColumnSort", n, i ? r : n, i), i && (this.hot.render(), this.hot.forceFullRender = !1, this.hot.view.render()));
  }
  /**
   * Clear the sort performed on the table.
   */
  clearSort() {
    this.sort([]);
  }
  /**
   * Checks if the table is sorted (any column have to be sorted).
   *
   * @returns {boolean}
   */
  isSorted() {
    return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();
  }
  /**
   * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.
   *
   * @param {number} [column] Visual column index.
   * @returns {undefined|object|Array}
   */
  getSortConfig(e) {
    return Re(e) ? this.columnStatesManager.getColumnSortState(e) : this.columnStatesManager.getSortStates();
  }
  /**
   * @description
   * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.
   * Note: Please keep in mind that this method doesn't re-render the table.
   *
   * @example
   * ```js
   * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {
   *   const columnSortPlugin = this.getPlugin('columnSorting');
   *
   *   columnSortPlugin.setSortConfig(destinationSortConfigs);
   *
   *   // const newData = ... // Calculated data set, ie. from an AJAX call.
   *
   *   this.loadData(newData); // Load new data set and re-render the table.
   *
   *   return false; // The blockade for the default sort action.
   * }
   * ```
   *
   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   */
  setSortConfig(e) {
    const n = this.getNormalizedSortConfigs(e);
    this.areValidSortConfigs(n) && this.columnStatesManager.setSortStates(n);
  }
  /**
   * Get normalized sort configs.
   *
   * @private
   * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   * @returns {Array}
   */
  getNormalizedSortConfigs() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    return Array.isArray(e) ? e.slice(0, 1) : [e];
  }
  /**
   * Get if sort configs are valid.
   *
   * @private
   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
   * @returns {boolean}
   */
  areValidSortConfigs(e) {
    const n = this.hot.countCols();
    return g7(e) && e.every((r) => {
      let {
        column: i
      } = r;
      return i <= n && i >= 0;
    });
  }
  /**
   * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.
   *
   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
   *
   * @private
   * @fires Hooks#persistentStateSave
   */
  saveAllSortSettings(e) {
    const n = this.columnStatesManager.getAllColumnsProperties(), r = (i) => {
      let {
        column: o,
        ...s
      } = i;
      return {
        column: this.hot.toPhysicalColumn(o),
        ...s
      };
    };
    n.initialConfig = qe(e, r), this.hot.runHooks("persistentStateSave", "columnSorting", n);
  }
  /**
   * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.
   *
   * @private
   * @returns {object} Previously saved sort settings.
   *
   * @fires Hooks#persistentStateLoad
   */
  getAllSavedSortSettings() {
    const e = {};
    this.hot.runHooks("persistentStateLoad", "columnSorting", e);
    const n = e.value, r = (i) => {
      let {
        column: o,
        ...s
      } = i;
      return {
        column: this.hot.toVisualColumn(o),
        ...s
      };
    };
    return Re(n) && Array.isArray(n.initialConfig) && (n.initialConfig = qe(n.initialConfig, r)), n;
  }
  /**
   * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.
   *
   * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.
   *
   * @private
   * @param {number} column Visual column index.
   * @returns {undefined|object}
   */
  getColumnNextConfig(e) {
    const n = this.columnStatesManager.getSortOrderOfColumn(e);
    if (Re(n)) {
      const i = vT(n);
      return Re(i) ? {
        column: e,
        sortOrder: i
      } : void 0;
    }
    const r = this.hot.countCols();
    if (Number.isInteger(e) && e >= 0 && e < r)
      return {
        column: e,
        sortOrder: vT()
      };
  }
  /**
   * Get sort configuration with "next order" for particular column.
   *
   * @private
   * @param {number} columnToChange Visual column index of column which order will be changed.
   * @param {string} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one
   * change order of particular column and change it's position in the sort queue to the last one. The second one
   * just change order of particular column.
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
   *
   * @returns {Array}
   */
  getNextSortConfig(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : jf;
    const r = this.columnStatesManager.getIndexOfColumnInSortQueue(e), i = r !== -1, o = this.getSortConfig(), s = this.getColumnNextConfig(e);
    if (i) {
      if (It(s))
        return [...o.slice(0, r), ...o.slice(r + 1)];
      if (n === jf)
        return [...o.slice(0, r), ...o.slice(r + 1), s];
      if (n === H7)
        return [...o.slice(0, r), s, ...o.slice(r + 1)];
    }
    return Re(s) ? o.concat(s) : o;
  }
  /**
   * Get plugin's column config for the specified column index.
   *
   * @private
   * @param {object} columnConfig Configuration inside `columns` property for the specified column index.
   * @returns {object}
   */
  getPluginColumnConfig(e) {
    if (Xe(e)) {
      const n = e[this.pluginKey];
      if (Xe(n))
        return n;
    }
    return {};
  }
  /**
   * Get plugin settings related properties, properly merged from cascade settings.
   *
   * @private
   * @param {number} column Visual column index.
   * @returns {object}
   */
  getMergedPluginSettings(e) {
    const n = this.hot.getSettings()[this.pluginKey], r = this.columnStatesManager.getAllColumnsProperties(), i = this.hot.getCellMeta(0, e), o = Object.getPrototypeOf(i);
    return Array.isArray(o.columns) ? Object.assign(r, n, this.getPluginColumnConfig(o.columns[e])) : At(o.columns) ? Object.assign(r, n, this.getPluginColumnConfig(o.columns(e))) : Object.assign(r, n);
  }
  /**
   * Get copy of settings for first cell in the column.
   *
   * @private
   * @param {number} column Visual column index.
   * @returns {object}
   */
  // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from column meta we call this function.
  // TODO: Remove test named: "should not break the dataset when inserted new row" (#5431).
  getFirstCellSettings(e) {
    const n = this.hot.getCellMeta(0, e), r = Object.create(n);
    return r[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(e)), r;
  }
  /**
   * Get number of rows which should be sorted.
   *
   * @private
   * @param {number} numberOfRows Total number of displayed rows.
   * @returns {number}
   */
  getNumberOfRowsToSort(e) {
    const n = this.hot.getSettings();
    return n.maxRows <= e ? n.maxRows : e - n.minSpareRows;
  }
  /**
   * Performs the sorting using a stable sort function basing on internal state of sorting.
   *
   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
   * @private
   */
  sortByPresetSortStates(e) {
    if (e.length === 0) {
      this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());
      return;
    }
    const n = [], r = this.hot.countRows(), i = (u) => qe(e, (c) => this.hot.getDataAtCell(u, c.column));
    for (let u = 0; u < this.getNumberOfRowsToSort(r); u += 1)
      n.push([this.hot.toPhysicalRow(u)].concat(i(u)));
    const o = qe(n, (u) => u[0]);
    M7(n, this.pluginKey, qe(e, (u) => u.sortOrder), qe(e, (u) => this.getFirstCellSettings(u.column)));
    for (let u = n.length; u < r; u += 1)
      n.push([u].concat(i(u)));
    const s = qe(n, (u) => u[0]), a = new Map(qe(o, (u, c) => [u, s[c]])), l = qe(this.hot.rowIndexMapper.getIndexesSequence(), (u) => a.has(u) ? a.get(u) : u);
    this.hot.rowIndexMapper.setIndexesSequence(l);
  }
  /**
   * Sort the table by provided configuration.
   *
   * @private
   * @param {object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,
   * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.
   */
  sortBySettings(e) {
    if (Xe(e)) {
      this.columnStatesManager.updateAllColumnsProperties(e);
      const n = e.initialConfig;
      (Array.isArray(n) || Xe(n)) && this.sort(n);
    } else
      this.hot.render();
  }
  /**
   * Update header classes.
   *
   * @private
   * @param {HTMLElement} headerSpanElement Header span element.
   * @param {...*} args Extra arguments for helpers.
   */
  updateHeaderClasses(e) {
    if (Ye(e, C7()), this.enabled !== !1) {
      for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++)
        r[i - 1] = arguments[i];
      ce(e, w7(...r));
    }
  }
  /**
   * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called
   * for `updateSettings` in specific situations.
   *
   * @private
   * @param {object} newSettings New settings object.
   */
  onUpdateSettings(e) {
    super.onUpdateSettings(), this.columnMetaCache !== null && this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes()), Re(e[this.pluginKey]) && this.sortBySettings(e[this.pluginKey]);
  }
  /**
   * Indicates if clickable header was clicked.
   *
   * @private
   * @param {MouseEvent} event The `mousedown` event.
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  wasClickableHeaderClicked(e, n) {
    return this.getFirstCellSettings(n)[this.pluginKey].headerAction && Ve(e.target, gH);
  }
  /**
   * Callback for the `onAfterOnCellMouseDown` hook.
   *
   * @private
   * @param {Event} event Event which are provided by hook.
   * @param {CellCoords} coords Visual coords of the selected cell.
   */
  onAfterOnCellMouseDown(e, n) {
    Gb(n.row, n.col, e) !== !1 && this.wasClickableHeaderClicked(e, n.col) && (this.hot.getShortcutManager().isCtrlPressed() && (this.hot.deselectCell(), this.hot.selectColumns(n.col)), this.sort(this.getColumnNextConfig(n.col)));
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    var e;
    (e = this.columnStatesManager) === null || e === void 0 || e.destroy(), super.destroy();
  }
}
function QC() {
  const t = this.getAllSavedSortSettings();
  if (Xe(t))
    this.sortBySettings(t);
  else {
    const e = this.hot.getSettings()[this.pluginKey];
    this.sortBySettings(e);
  }
}
function D7(t, e) {
  const n = mH(e);
  if (pH(t, e) === !1 || n === null)
    return;
  const r = this.getFirstCellSettings(t)[this.pluginKey], i = r.indicator, o = r.headerAction;
  if (this.updateHeaderClasses(n, this.columnStatesManager, t, i, o), this.hot.getSettings().ariaTags) {
    const s = this.columnStatesManager.getSortOrderOfColumn(t);
    Ne(e, ...qY(s ? `${s}ending` : "none"));
  }
}
function N7(t) {
  t === !0 && this.hot.view && Tl(this, of, QC).call(this);
}
function L7(t, e, n, r) {
  Gb(e.row, e.col, t) !== !1 && this.wasClickableHeaderClicked(t, e.col) && this.hot.getShortcutManager().isCtrlPressed() && (r.column = !0);
}
function js(t, e, n) {
  return e = $7(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function $7(t) {
  var e = k7(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function k7(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class F7 {
  constructor(e, n) {
    js(this, "plugin", void 0), js(this, "hot", void 0), js(this, "endpoints", []), js(this, "settings", void 0), js(this, "settingsType", "array"), js(this, "currentEndpoint", null), js(this, "cellsToSetCache", []), this.plugin = e, this.hot = this.plugin.hot, this.settings = n;
  }
  /**
   * Get a single endpoint object.
   *
   * @param {number} index Index of the endpoint.
   * @returns {object}
   */
  getEndpoint(e) {
    return this.settingsType === "function" ? this.fillMissingEndpointData(this.settings)[e] : this.endpoints[e];
  }
  /**
   * Get an array with all the endpoints.
   *
   * @returns {Array}
   */
  getAllEndpoints() {
    return this.settingsType === "function" ? this.fillMissingEndpointData(this.settings) : this.endpoints;
  }
  /**
   * Used to fill the blanks in the endpoint data provided by a settings function.
   *
   * @private
   * @param {Function} func Function provided in the HOT settings.
   * @returns {Array} An array of endpoints.
   */
  fillMissingEndpointData(e) {
    return this.parseSettings(e.call(this));
  }
  /**
   * Parse plugin's settings.
   *
   * @param {Array} settings The settings array.
   * @returns {object[]}
   */
  parseSettings(e) {
    const n = [];
    let r = e;
    if (!r && typeof this.settings == "function") {
      this.settingsType = "function";
      return;
    }
    return r || (r = this.settings), H(r, (i) => {
      const o = {};
      this.assignSetting(i, o, "ranges", [[0, this.hot.countRows() - 1]]), this.assignSetting(i, o, "reversedRowCoords", !1), this.assignSetting(i, o, "destinationRow", new Error(`
        You must provide a destination row for the Column Summary plugin in order to work properly!
      `)), this.assignSetting(i, o, "destinationColumn", new Error(`
        You must provide a destination column for the Column Summary plugin in order to work properly!
      `)), this.assignSetting(i, o, "sourceColumn", i.destinationColumn), this.assignSetting(i, o, "type", "sum"), this.assignSetting(i, o, "forceNumeric", !1), this.assignSetting(i, o, "suppressDataTypeErrors", !0), this.assignSetting(i, o, "suppressDataTypeErrors", !0), this.assignSetting(i, o, "customFunction", null), this.assignSetting(i, o, "readOnly", !0), this.assignSetting(i, o, "roundFloat", !1), n.push(o);
    }), n;
  }
  /**
   * Setter for the internal setting objects.
   *
   * @param {object} settings Object with the settings.
   * @param {object} endpoint Contains information about the endpoint for the the calculation.
   * @param {string} name Settings name.
   * @param {object} defaultValue Default value for the settings.
   */
  assignSetting(e, n, r, i) {
    if (r === "ranges" && e[r] === void 0) {
      n[r] = i;
      return;
    } else if (r === "ranges" && e[r].length === 0)
      return;
    if (e[r] === void 0) {
      if (i instanceof Error)
        throw i;
      n[r] = i;
    } else
      r === "destinationRow" && n.reversedRowCoords ? n[r] = this.hot.countRows() - e[r] - 1 : n[r] = e[r];
  }
  /**
   * Resets the endpoint setup before the structure alteration (like inserting or removing rows/columns). Used for settings provided as a function.
   *
   * @private
   * @param {string} action Type of the action performed.
   * @param {number} index Row/column index.
   * @param {number} number Number of rows/columns added/removed.
   */
  resetSetupBeforeStructureAlteration(e, n, r) {
    if (this.settingsType !== "function")
      return;
    const i = e.indexOf("row") > -1 ? "row" : "col", o = this.getAllEndpoints();
    H(o, (s) => {
      i === "row" && s.destinationRow >= n && (e === "insert_row" ? s.alterRowOffset = r : e === "remove_row" && (s.alterRowOffset = -1 * r)), i === "col" && s.destinationColumn >= n && (e === "insert_col" ? s.alterColumnOffset = r : e === "remove_col" && (s.alterColumnOffset = -1 * r));
    }), this.resetAllEndpoints(o, !1);
  }
  /**
   * AfterCreateRow/afterCreateRow/afterRemoveRow/afterRemoveCol hook callback. Reset and reenables the summary functionality
   * after changing the table structure.
   *
   * @private
   * @param {string} action Type of the action performed.
   * @param {number} index Row/column index.
   * @param {number} number Number of rows/columns added/removed.
   * @param {Array} [logicRows] Array of the logical indexes.
   * @param {string} [source] Source of change.
   * @param {boolean} [forceRefresh] `true` of the endpoints should refresh after completing the function.
   */
  resetSetupAfterStructureAlteration(e, n, r, i, o) {
    let s = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : !0;
    if (this.settingsType === "function") {
      const g = () => (this.hot.removeHook("beforeViewRender", g), this.refreshAllEndpoints());
      this.hot.addHookOnce("beforeViewRender", g);
      return;
    }
    const a = e.indexOf("row") > -1 ? "row" : "col", l = e.indexOf("remove") > -1 ? -1 : 1, u = this.getAllEndpoints(), c = e.indexOf("move_row") === 0, d = n;
    H(u, (g) => {
      a === "row" && g.destinationRow >= d && (g.alterRowOffset = l * r), a === "col" && g.destinationColumn >= d && (g.alterColumnOffset = l * r);
    }), this.resetAllEndpoints(u, !c), c ? H(u, (g) => {
      this.extendEndpointRanges(g, d, i[0], i.length), this.recreatePhysicalRanges(g), this.clearOffsetInformation(g);
    }) : H(u, (g) => {
      this.shiftEndpointCoordinates(g, d);
    }), s && this.refreshAllEndpoints();
  }
  /**
   * Clear the offset information from the endpoint object.
   *
   * @private
   * @param {object} endpoint And endpoint object.
   */
  clearOffsetInformation(e) {
    e.alterRowOffset = void 0, e.alterColumnOffset = void 0;
  }
  /**
   * Extend the row ranges for the provided endpoint.
   *
   * @private
   * @param {object} endpoint The endpoint object.
   * @param {number} placeOfAlteration Index of the row where the alteration takes place.
   * @param {number} previousPosition Previous endpoint result position.
   * @param {number} offset Offset generated by the alteration.
   */
  extendEndpointRanges(e, n, r, i) {
    H(e.ranges, (o) => {
      o[1] && (n >= o[0] && n <= o[1] ? r > o[1] ? o[1] += i : r < o[0] && (o[0] -= i) : r >= o[0] && r <= o[1] && (o[1] -= i, n <= o[0] && (o[0] += 1, o[1] += 1)));
    });
  }
  /**
   * Recreate the physical ranges for the provided endpoint. Used (for example) when a row gets moved and extends an existing range.
   *
   * @private
   * @param {object} endpoint An endpoint object.
   */
  recreatePhysicalRanges(e) {
    const n = e.ranges, r = [], i = [];
    H(n, (o) => {
      const s = [];
      if (o[1])
        for (let a = o[0]; a <= o[1]; a++)
          s.push(this.hot.toPhysicalRow(a));
      else
        s.push(this.hot.toPhysicalRow(o[0]));
      i.push(s);
    }), H(i, (o) => {
      let s = [];
      H(o, (a, l) => {
        l === 0 ? s.push(a) : o[l] !== o[l - 1] + 1 && (s.push(o[l - 1]), r.push(s), s = [], s.push(a)), l === o.length - 1 && (s.push(a), r.push(s));
      });
    }), e.ranges = r;
  }
  /**
   * Shifts the endpoint coordinates by the defined offset.
   *
   * @private
   * @param {object} endpoint Endpoint object.
   * @param {number} offsetStartIndex Index of the performed change (if the change is located after the endpoint, nothing about the endpoint has to be changed.
   */
  shiftEndpointCoordinates(e, n) {
    e.alterRowOffset && e.alterRowOffset !== 0 ? (e.destinationRow += e.alterRowOffset || 0, H(e.ranges, (r) => {
      H(r, (i, o) => {
        i >= n && (r[o] += e.alterRowOffset || 0);
      });
    })) : e.alterColumnOffset && e.alterColumnOffset !== 0 && (e.destinationColumn += e.alterColumnOffset || 0, e.sourceColumn += e.alterColumnOffset || 0);
  }
  /**
   * Resets (removes) the endpoints from the table.
   *
   * @param {Array} [endpoints] Array containing the endpoints.
   * @param {boolean} [useOffset=true] Use the cell offset value.
   */
  resetAllEndpoints() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getAllEndpoints(), n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    e.some((i) => {
      const o = i.alterRowOffset || 0, s = i.alterColumnOffset || 0;
      return i.destinationRow + o >= this.hot.countRows() || i.destinationColumn + s >= this.hot.countCols();
    }) || (this.cellsToSetCache = [], H(e, (i) => {
      this.resetEndpointValue(i, n);
    }), this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset"), this.cellsToSetCache = []);
  }
  /**
   * Calculate and refresh all defined endpoints.
   */
  refreshAllEndpoints() {
    this.cellsToSetCache = [], H(this.getAllEndpoints(), (e) => {
      this.currentEndpoint = e, this.plugin.calculate(e), this.setEndpointValue(e, "init");
    }), this.currentEndpoint = null, this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset"), this.cellsToSetCache = [];
  }
  /**
   * Calculate and refresh endpoints only in the changed columns.
   *
   * @param {Array} changes Array of changes from the `afterChange` hook.
   */
  refreshChangedEndpoints(e) {
    const n = [];
    this.cellsToSetCache = [], H(e, (r, i, o) => {
      `${r[2] || ""}` != `${r[3]}` && H(this.getAllEndpoints(), (s, a) => {
        this.hot.propToCol(o[i][1]) === s.sourceColumn && n.indexOf(a) === -1 && n.push(a);
      });
    }), H(n, (r) => {
      this.refreshEndpoint(this.getEndpoint(r));
    }), this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset"), this.cellsToSetCache = [];
  }
  /**
   * Calculate and refresh a single endpoint.
   *
   * @param {object} endpoint Contains the endpoint information.
   */
  refreshEndpoint(e) {
    this.currentEndpoint = e, this.plugin.calculate(e), this.setEndpointValue(e), this.currentEndpoint = null;
  }
  /**
   * Reset the endpoint value.
   *
   * @param {object} endpoint Contains the endpoint information.
   * @param {boolean} [useOffset=true] Use the cell offset value.
   */
  resetEndpointValue(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    const r = e.alterRowOffset || 0, i = e.alterColumnOffset || 0;
    this.cellsToSetCache.push([this.hot.toVisualRow(e.destinationRow + (n ? r : 0)), this.hot.toVisualColumn(e.destinationColumn + (n ? i : 0)), ""]);
  }
  /**
   * Set the endpoint value.
   *
   * @param {object} endpoint Contains the endpoint information.
   * @param {string} [source] Source of the call information.
   * @param {boolean} [render=false] `true` if it needs to render the table afterwards.
   */
  setEndpointValue(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const i = this.hot.toVisualRow(e.destinationRow);
    if (e.destinationRow >= this.hot.countRows() || e.destinationColumn >= this.hot.countCols()) {
      this.throwOutOfBoundsWarning();
      return;
    }
    const o = this.hot.toVisualRow(e.destinationRow);
    if (o !== null) {
      const s = this.hot.getCellMeta(o, e.destinationColumn);
      (n === "init" || s.readOnly !== e.readOnly) && (s.readOnly = e.readOnly, s.className = "columnSummaryResult");
    }
    e.roundFloat && !isNaN(e.result) && (e.result = e.result.toFixed(e.roundFloat)), r ? this.hot.setDataAtCell(i, e.destinationColumn, e.result, "ColumnSummary.set") : this.cellsToSetCache.push([i, e.destinationColumn, e.result]), e.alterRowOffset = void 0, e.alterColumnOffset = void 0;
  }
  /**
   * Throw an error for the calculation range being out of boundaries.
   *
   * @private
   */
  throwOutOfBoundsWarning() {
    Pt("One of the Column Summary plugins' destination points you provided is beyond the table boundaries!");
  }
}
const W7 = F7;
function Hp(t) {
  return t == null || isNaN(t);
}
function Dp(t, e) {
  V7(t, e), e.add(t);
}
function V7(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function B7(t, e, n) {
  return e = U7(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function U7(t) {
  var e = Y7(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Y7(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Np(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const Lp = "columnSummary", G7 = 220;
var TT = /* @__PURE__ */ new WeakSet(), _T = /* @__PURE__ */ new WeakSet(), MT = /* @__PURE__ */ new WeakSet();
class z7 extends gt {
  constructor() {
    super(...arguments), Dp(this, MT), Dp(this, _T), Dp(this, TT), B7(this, "endpoints", null);
  }
  static get PLUGIN_KEY() {
    return Lp;
  }
  static get PLUGIN_PRIORITY() {
    return G7;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ColumnSummary#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Lp];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.settings = this.hot.getSettings()[Lp], this.endpoints = new W7(this, this.settings), this.addHook("afterInit", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Np(e, TT, j7).call(e, ...r);
    }), this.addHook("afterChange", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Np(e, _T, K7).call(e, ...r);
    }), this.addHook("beforeCreateRow", (n, r, i) => this.endpoints.resetSetupBeforeStructureAlteration("insert_row", n, r, null, i)), this.addHook("beforeCreateCol", (n, r, i) => this.endpoints.resetSetupBeforeStructureAlteration("insert_col", n, r, null, i)), this.addHook("beforeRemoveRow", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return e.endpoints.resetSetupBeforeStructureAlteration("remove_row", ...r);
    }), this.addHook("beforeRemoveCol", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return e.endpoints.resetSetupBeforeStructureAlteration("remove_col", ...r);
    }), this.addHook("afterCreateRow", (n, r, i) => this.endpoints.resetSetupAfterStructureAlteration("insert_row", n, r, null, i)), this.addHook("afterCreateCol", (n, r, i) => this.endpoints.resetSetupAfterStructureAlteration("insert_col", n, r, null, i)), this.addHook("afterRemoveRow", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return e.endpoints.resetSetupAfterStructureAlteration("remove_row", ...r);
    }), this.addHook("afterRemoveCol", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return e.endpoints.resetSetupAfterStructureAlteration("remove_col", ...r);
    }), this.addHook("afterRowMove", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Np(e, MT, X7).call(e, ...r);
    }), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.endpoints = null, this.settings = null, this.currentEndpoint = null;
  }
  /**
   * Calculates math for a single endpoint.
   *
   * @private
   * @param {object} endpoint Contains information about the endpoint.
   */
  calculate(e) {
    switch (e.type.toLowerCase()) {
      case "sum":
        e.result = this.calculateSum(e);
        break;
      case "min":
        e.result = this.calculateMinMax(e, e.type);
        break;
      case "max":
        e.result = this.calculateMinMax(e, e.type);
        break;
      case "count":
        e.result = this.countEntries(e);
        break;
      case "average":
        e.result = this.calculateAverage(e);
        break;
      case "custom":
        e.result = e.customFunction.call(this, e);
        break;
    }
  }
  /**
   * Calculates sum of the values contained in ranges provided in the plugin config.
   *
   * @private
   * @param {object} endpoint Contains the endpoint information.
   * @returns {number} Sum for the selected range.
   */
  calculateSum(e) {
    let n = 0;
    return Ze(e.ranges, (r) => {
      n += this.getPartialSum(r, e.sourceColumn);
    }), n;
  }
  /**
   * Returns partial sum of values from a single row range.
   *
   * @private
   * @param {Array} rowRange Range for the sum.
   * @param {number} col Column index.
   * @returns {number} The partial sum.
   */
  getPartialSum(e, n) {
    let r = 0, i = e[1] || e[0], o = null, s = 0;
    do {
      if (o = this.getCellValue(i, n), o = Hp(o) ? null : o, o !== null) {
        const a = (`${o}`.split(".")[1] || []).length || 1;
        a > s && (s = a);
      }
      r += o || 0, i -= 1;
    } while (i >= e[0]);
    return Math.round(r * 10 ** s) / 10 ** s;
  }
  /**
   * Calculates the minimal value for the selected ranges.
   *
   * @private
   * @param {object} endpoint Contains the endpoint information.
   * @param {string} type `'min'` or `'max'`.
   * @returns {number} Min or Max value.
   */
  calculateMinMax(e, n) {
    let r = null;
    return Ze(e.ranges, (i) => {
      const o = this.getPartialMinMax(i, e.sourceColumn, n);
      if (r === null && o !== null && (r = o), o !== null)
        switch (n) {
          case "min":
            r = Math.min(r, o);
            break;
          case "max":
            r = Math.max(r, o);
            break;
        }
    }), r === null ? "Not enough data" : r;
  }
  /**
   * Returns a local minimum of the provided sub-range.
   *
   * @private
   * @param {Array} rowRange Range for the calculation.
   * @param {number} col Column index.
   * @param {string} type `'min'` or `'max'`.
   * @returns {number|null} Min or max value.
   */
  getPartialMinMax(e, n, r) {
    let i = null, o = e[1] || e[0], s;
    do {
      if (s = this.getCellValue(o, n), s = Hp(s) ? null : s, i === null)
        i = s;
      else if (s !== null)
        switch (r) {
          case "min":
            i = Math.min(i, s);
            break;
          case "max":
            i = Math.max(i, s);
            break;
        }
      o -= 1;
    } while (o >= e[0]);
    return i;
  }
  /**
   * Counts empty cells in the provided row range.
   *
   * @private
   * @param {Array} rowRange Row range for the calculation.
   * @param {number} col Column index.
   * @returns {number} Empty cells count.
   */
  countEmpty(e, n) {
    let r, i = 0, o = e[1] || e[0];
    do
      r = this.getCellValue(o, n), r = Hp(r) ? null : r, r === null && (i += 1), o -= 1;
    while (o >= e[0]);
    return i;
  }
  /**
   * Counts non-empty cells in the provided row range.
   *
   * @private
   * @param {object} endpoint Contains the endpoint information.
   * @returns {number} Entry count.
   */
  countEntries(e) {
    let n = 0;
    const r = e.ranges;
    return Ze(r, (i) => {
      const o = i[1] === void 0 ? 1 : i[1] - i[0] + 1, s = this.countEmpty(i, e.sourceColumn);
      n += o, n -= s;
    }), n;
  }
  /**
   * Calculates the average value from the cells in the range.
   *
   * @private
   * @param {object} endpoint Contains the endpoint information.
   * @returns {number} Avarage value.
   */
  calculateAverage(e) {
    const n = this.calculateSum(e), r = this.countEntries(e);
    return n / r;
  }
  /**
   * Returns a cell value, taking into consideration a basic validation.
   *
   * @private
   * @param {number} row Row index.
   * @param {number} col Column index.
   * @returns {string} The cell value.
   */
  getCellValue(e, n) {
    const r = this.hot.toVisualRow(e), i = this.hot.toVisualColumn(n);
    let o = this.hot.getSourceDataAtCell(e, n), s = "";
    if (r !== null && i !== null && (s = this.hot.getCellMeta(r, i).className || ""), s.indexOf("columnSummaryResult") > -1)
      return null;
    if (this.endpoints.currentEndpoint.forceNumeric && (typeof o == "string" && (o = o.replace(/,/, ".")), o = parseFloat(o)), isNaN(o) && !this.endpoints.currentEndpoint.suppressDataTypeErrors)
      throw new Error(bt`ColumnSummary plugin: cell at (${e}, ${n}) is not in a\x20
          numeric format. Cannot do the calculation.`);
    return o;
  }
}
function j7() {
  this.endpoints.endpoints = this.endpoints.parseSettings(), this.endpoints.refreshAllEndpoints(!0);
}
function K7(t, e) {
  t && e !== "ColumnSummary.reset" && e !== "ColumnSummary.set" && e !== "loadData" && this.endpoints.refreshChangedEndpoints(t);
}
function X7(t, e) {
  this.endpoints.resetSetupBeforeStructureAlteration("move_row", t[0], t.length, t, this.pluginName), this.endpoints.resetSetupAfterStructureAlteration("move_row", e, t.length, t, this.pluginName);
}
function qa(t, e, n) {
  return e = q7(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function q7(t) {
  var e = Z7(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Z7(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class xl {
  static get CLASS_EDITOR_CONTAINER() {
    return "htCommentsContainer";
  }
  static get CLASS_EDITOR() {
    return "htComments";
  }
  static get CLASS_INPUT() {
    return "htCommentTextArea";
  }
  static get CLASS_CELL() {
    return "htCommentCell";
  }
  /**
   * @type {HTMLDocument}
   */
  constructor(e, n) {
    qa(this, "rootDocument", void 0), qa(this, "isRtl", !1), qa(this, "container", null), qa(this, "editor", void 0), qa(this, "editorStyle", void 0), qa(this, "hidden", !0), this.rootDocument = e, this.isRtl = n, this.editor = this.createEditor(), this.editorStyle = this.editor.style, this.hide();
  }
  /**
   * Set position of the comments editor according to the  provided x and y coordinates.
   *
   * @param {number} x X position (in pixels).
   * @param {number} y Y position (in pixels).
   */
  setPosition(e, n) {
    this.editorStyle.left = `${e}px`, this.editorStyle.top = `${n}px`;
  }
  /**
   * Set the editor size according to the provided arguments.
   *
   * @param {number} width Width in pixels.
   * @param {number} height Height in pixels.
   */
  setSize(e, n) {
    if (e && n) {
      const r = this.getInputElement();
      r.style.width = `${e}px`, r.style.height = `${n}px`;
    }
  }
  /**
   * Returns the size of the comments editor.
   *
   * @returns {{ width: number, height: number }}
   */
  getSize() {
    return {
      width: yt(this.getInputElement()),
      height: Bt(this.getInputElement())
    };
  }
  /**
   * Reset the editor size to its initial state.
   */
  resetSize() {
    const e = this.getInputElement();
    e.style.width = "", e.style.height = "";
  }
  /**
   * Set the read-only state for the comments editor.
   *
   * @param {boolean} state The new read only state.
   */
  setReadOnlyState(e) {
    const n = this.getInputElement();
    n.readOnly = e;
  }
  /**
   * Show the comments editor.
   */
  show() {
    this.editorStyle.display = "block", this.hidden = !1;
  }
  /**
   * Hide the comments editor.
   */
  hide() {
    this.hidden || (this.editorStyle.display = "none"), this.hidden = !0;
  }
  /**
   * Checks if the editor is visible.
   *
   * @returns {boolean}
   */
  isVisible() {
    return this.editorStyle.display === "block";
  }
  /**
   * Set the comment value.
   *
   * @param {string} [value] The value to use.
   */
  setValue() {
    const n = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "") || "";
    this.getInputElement().value = n;
  }
  /**
   * Get the comment value.
   *
   * @returns {string}
   */
  getValue() {
    return this.getInputElement().value;
  }
  /**
   * Checks if the comment input element is focused.
   *
   * @returns {boolean}
   */
  isFocused() {
    return this.rootDocument.activeElement === this.getInputElement();
  }
  /**
   * Focus the comments input element.
   */
  focus() {
    this.getInputElement().focus();
  }
  /**
   * Create the `textarea` to be used as a comments editor.
   *
   * @returns {HTMLElement}
   */
  createEditor() {
    const e = this.rootDocument.createElement("div"), n = this.rootDocument.createElement("textarea");
    return e.style.display = "none", this.container = this.rootDocument.createElement("div"), this.container.setAttribute("dir", this.isRtl ? "rtl" : "ltr"), ce(this.container, xl.CLASS_EDITOR_CONTAINER), this.rootDocument.body.appendChild(this.container), ce(e, xl.CLASS_EDITOR), ce(n, xl.CLASS_INPUT), n.setAttribute("data-hot-input", !0), e.appendChild(n), this.container.appendChild(e), e;
  }
  /**
   * Get the input element.
   *
   * @returns {HTMLElement}
   */
  getInputElement() {
    return this.editor.querySelector(`.${xl.CLASS_INPUT}`);
  }
  /**
   * Destroy the comments editor.
   */
  destroy() {
    const e = this.container ? this.container.parentNode : null;
    this.editor.parentNode.removeChild(this.editor), this.editor = null, this.editorStyle = null, e && e.removeChild(this.container);
  }
}
const Q7 = xl;
function $p(t, e, n) {
  return e = J7(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function J7(t) {
  var e = e5(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function e5(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const t5 = 250, n5 = 250;
class _H {
  constructor(e) {
    $p(this, "wasLastActionShow", !0), $p(this, "showDebounced", null), $p(this, "hidingTimer", null), this.updateDelay(e);
  }
  /**
   * Responsible for hiding comment after proper delay.
   */
  hide() {
    this.wasLastActionShow = !1, this.hidingTimer = setTimeout(() => {
      this.wasLastActionShow === !1 && this.runLocalHooks("hide");
    }, n5);
  }
  /**
   * Responsible for showing comment after proper delay.
   *
   * @param {object} range Coordinates of selected cell.
   */
  show(e) {
    this.wasLastActionShow = !0, this.showDebounced(e);
  }
  /**
   * Cancel hiding comment.
   */
  cancelHiding() {
    this.wasLastActionShow = !0, clearTimeout(this.hidingTimer), this.hidingTimer = null;
  }
  /**
   * Update the switch settings.
   *
   * @param {number} displayDelay Delay of showing the comments (in milliseconds).
   */
  updateDelay() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : t5;
    this.showDebounced = kg((n) => {
      this.wasLastActionShow && this.runLocalHooks("show", n.from.row, n.from.col);
    }, e);
  }
  /**
   * Destroy the switcher.
   */
  destroy() {
    this.clearLocalHooks();
  }
}
_t(_H, pr);
const r5 = _H;
function i5(t, e) {
  return t.indexOf(e) !== -1 ? t : `${t.replace("htTop", "").replace("htMiddle", "").replace("htBottom", "").replace("  ", "")} ${e}`;
}
function o5(t, e) {
  return t.indexOf(e) !== -1 ? t : `${t.replace("htLeft", "").replace("htCenter", "").replace("htRight", "").replace("htJustify", "").replace("  ", "")} ${e}`;
}
function Ks(t, e) {
  const n = {};
  return H(t, (r) => {
    r.forAll((i, o) => {
      i >= 0 && o >= 0 && (n[i] || (n[i] = []), n[i][o] = e(i, o));
    });
  }), n;
}
function ss(t, e, n, r, i) {
  H(t, (o) => {
    o.forAll((s, a) => {
      s >= 0 && a >= 0 && s5(s, a, e, n, r, i);
    });
  });
}
function s5(t, e, n, r, i, o) {
  const s = i(t, e);
  let a = r;
  s.className && (n === "vertical" ? a = i5(s.className, r) : a = o5(s.className, r)), o(t, e, "className", a);
}
function So(t) {
  return `<span class="selected">${String.fromCharCode(10003)}</span>${t}`;
}
function Vi(t, e) {
  let n = !1;
  return Array.isArray(t) && H(t, (r) => (r.forAll((i, o) => {
    if (i >= 0 && o >= 0 && e(i, o))
      return n = !0, !1;
  }), n)), n;
}
function tm(t, e) {
  const n = {
    top: 0,
    left: 0
  };
  if (e !== t.ownerDocument) {
    const {
      frameElement: r
    } = e.defaultView, {
      top: i,
      left: o
    } = r.getBoundingClientRect();
    n.top = i, n.left = o;
  }
  return n;
}
const et = "---------";
function a5() {
  return {
    name: et
  };
}
const Wr = "alignment";
function l5() {
  return {
    key: Wr,
    name() {
      return this.getTranslatedPhrase(Ay);
    },
    disabled() {
      if (this.countRows() === 0 || this.countCols() === 0)
        return !0;
      const t = this.getSelectedRangeLast();
      return !t || t.isSingleHeader() ? !0 : !(this.getSelectedRange() && !this.selection.isSelectedByCorner());
    },
    submenu: {
      items: [{
        key: `${Wr}:left`,
        name() {
          let t = this.getTranslatedPhrase(Iy);
          return Vi(this.getSelectedRange(), (n, r) => {
            const i = this.getCellMeta(n, r).className;
            if (i && i.indexOf("htLeft") !== -1)
              return !0;
          }) && (t = So(t)), t;
        },
        callback() {
          const t = this.getSelectedRange(), e = Ks(t, (i, o) => this.getCellMeta(i, o).className), n = "horizontal", r = "htLeft";
          this.runHooks("beforeCellAlignment", e, t, n, r), ss(t, n, r, (i, o) => this.getCellMeta(i, o), (i, o, s, a) => this.setCellMeta(i, o, s, a)), this.render();
        },
        disabled: !1
      }, {
        key: `${Wr}:center`,
        name() {
          let t = this.getTranslatedPhrase(Py);
          return Vi(this.getSelectedRange(), (n, r) => {
            const i = this.getCellMeta(n, r).className;
            if (i && i.indexOf("htCenter") !== -1)
              return !0;
          }) && (t = So(t)), t;
        },
        callback() {
          const t = this.getSelectedRange(), e = Ks(t, (i, o) => this.getCellMeta(i, o).className), n = "horizontal", r = "htCenter";
          this.runHooks("beforeCellAlignment", e, t, n, r), ss(t, n, r, (i, o) => this.getCellMeta(i, o), (i, o, s, a) => this.setCellMeta(i, o, s, a)), this.render();
        },
        disabled: !1
      }, {
        key: `${Wr}:right`,
        name() {
          let t = this.getTranslatedPhrase(xy);
          return Vi(this.getSelectedRange(), (n, r) => {
            const i = this.getCellMeta(n, r).className;
            if (i && i.indexOf("htRight") !== -1)
              return !0;
          }) && (t = So(t)), t;
        },
        callback() {
          const t = this.getSelectedRange(), e = Ks(t, (i, o) => this.getCellMeta(i, o).className), n = "horizontal", r = "htRight";
          this.runHooks("beforeCellAlignment", e, t, n, r), ss(t, n, r, (i, o) => this.getCellMeta(i, o), (i, o, s, a) => this.setCellMeta(i, o, s, a)), this.render();
        },
        disabled: !1
      }, {
        key: `${Wr}:justify`,
        name() {
          let t = this.getTranslatedPhrase(Hy);
          return Vi(this.getSelectedRange(), (n, r) => {
            const i = this.getCellMeta(n, r).className;
            if (i && i.indexOf("htJustify") !== -1)
              return !0;
          }) && (t = So(t)), t;
        },
        callback() {
          const t = this.getSelectedRange(), e = Ks(t, (i, o) => this.getCellMeta(i, o).className), n = "horizontal", r = "htJustify";
          this.runHooks("beforeCellAlignment", e, t, n, r), ss(t, n, r, (i, o) => this.getCellMeta(i, o), (i, o, s, a) => this.setCellMeta(i, o, s, a)), this.render();
        },
        disabled: !1
      }, {
        name: et
      }, {
        key: `${Wr}:top`,
        name() {
          let t = this.getTranslatedPhrase(Dy);
          return Vi(this.getSelectedRange(), (n, r) => {
            const i = this.getCellMeta(n, r).className;
            if (i && i.indexOf("htTop") !== -1)
              return !0;
          }) && (t = So(t)), t;
        },
        callback() {
          const t = this.getSelectedRange(), e = Ks(t, (i, o) => this.getCellMeta(i, o).className), n = "vertical", r = "htTop";
          this.runHooks("beforeCellAlignment", e, t, n, r), ss(t, n, r, (i, o) => this.getCellMeta(i, o), (i, o, s, a) => this.setCellMeta(i, o, s, a)), this.render();
        },
        disabled: !1
      }, {
        key: `${Wr}:middle`,
        name() {
          let t = this.getTranslatedPhrase(Ny);
          return Vi(this.getSelectedRange(), (n, r) => {
            const i = this.getCellMeta(n, r).className;
            if (i && i.indexOf("htMiddle") !== -1)
              return !0;
          }) && (t = So(t)), t;
        },
        callback() {
          const t = this.getSelectedRange(), e = Ks(t, (i, o) => this.getCellMeta(i, o).className), n = "vertical", r = "htMiddle";
          this.runHooks("beforeCellAlignment", e, t, n, r), ss(t, n, r, (i, o) => this.getCellMeta(i, o), (i, o, s, a) => this.setCellMeta(i, o, s, a)), this.render();
        },
        disabled: !1
      }, {
        key: `${Wr}:bottom`,
        name() {
          let t = this.getTranslatedPhrase(Ly);
          return Vi(this.getSelectedRange(), (n, r) => {
            const i = this.getCellMeta(n, r).className;
            if (i && i.indexOf("htBottom") !== -1)
              return !0;
          }) && (t = So(t)), t;
        },
        callback() {
          const t = this.getSelectedRange(), e = Ks(t, (i, o) => this.getCellMeta(i, o).className), n = "vertical", r = "htBottom";
          this.runHooks("beforeCellAlignment", e, t, n, r), ss(t, n, r, (i, o) => this.getCellMeta(i, o), (i, o, s, a) => this.setCellMeta(i, o, s, a)), this.render();
        },
        disabled: !1
      }]
    }
  };
}
const nm = "clear_column";
function u5() {
  return {
    key: nm,
    name() {
      return this.getTranslatedPhrase(my);
    },
    callback(t, e) {
      const n = e[0].start.col, r = e[0].end.col;
      this.countRows() && this.populateFromArray(0, n, [[null]], Math.max(e[0].start.row, e[0].end.row), r, "ContextMenu.clearColumn");
    },
    disabled() {
      const t = this.getSelectedRangeLast();
      return !t || t.isSingleHeader() && t.highlight.col < 0 ? !0 : !this.selection.isSelectedByColumnHeader();
    }
  };
}
const ah = "col_left";
function c5() {
  return {
    key: ah,
    name() {
      return this.getTranslatedPhrase(ly);
    },
    callback() {
      const t = this.getSelectedRangeLast().getTopLeftCorner(), e = this.isRtl() ? "insert_col_end" : "insert_col_start";
      this.alter(e, t.col, 1, "ContextMenu.columnLeft");
    },
    disabled() {
      if (!this.isColumnModificationAllowed())
        return !0;
      const t = this.getSelectedRangeLast();
      return !t || t.isSingleHeader() && t.highlight.col < 0 ? !0 : this.selection.isSelectedByCorner() ? this.countCols() === 0 : this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;
    },
    hidden() {
      return !this.getSettings().allowInsertColumn;
    }
  };
}
const lh = "col_right";
function h5() {
  return {
    key: lh,
    name() {
      return this.getTranslatedPhrase(uy);
    },
    callback() {
      const t = this.getSelectedRangeLast().getTopRightCorner(), e = this.isRtl() ? "insert_col_start" : "insert_col_end";
      this.alter(e, t.col, 1, "ContextMenu.columnRight");
    },
    disabled() {
      if (!this.isColumnModificationAllowed())
        return !0;
      const t = this.getSelectedRangeLast();
      return !t || t.isSingleHeader() && t.highlight.col < 0 ? !0 : this.selection.isSelectedByCorner() ? !1 : this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;
    },
    hidden() {
      return !this.getSettings().allowInsertColumn;
    }
  };
}
const uh = "make_read_only";
function d5() {
  return {
    key: uh,
    name() {
      let t = this.getTranslatedPhrase(gy);
      return Vi(this.getSelectedRange(), (n, r) => this.getCellMeta(n, r).readOnly) && (t = So(t)), t;
    },
    callback() {
      const t = this.getSelectedRange(), e = Vi(t, (n, r) => this.getCellMeta(n, r).readOnly);
      H(t, (n) => {
        n.forAll((r, i) => {
          r >= 0 && i >= 0 && this.setCellMeta(r, i, "readOnly", !e);
        });
      }), this.render();
    },
    disabled() {
      const t = this.getSelectedRangeLast();
      return !!(!t || t.isSingleHeader() || this.selection.isSelectedByCorner() || this.countRows() === 0 || this.countCols() === 0 || !this.getSelectedRange() || this.getSelectedRange().length === 0);
    }
  };
}
const rm = "redo";
function f5() {
  return {
    key: rm,
    name() {
      return this.getTranslatedPhrase(fy);
    },
    callback() {
      this.redo();
    },
    hidden() {
      const t = this.getPlugin("undoRedo");
      return !t || !t.isEnabled();
    },
    disabled() {
      return !this.getPlugin("undoRedo").isRedoAvailable();
    }
  };
}
const ch = "remove_col";
function g5() {
  return {
    key: ch,
    name() {
      const t = this.getSelected();
      let e = 0;
      if (t)
        if (t.length > 1)
          e = 1;
        else {
          const [, n, , r] = t[0];
          n - r !== 0 && (e = 1);
        }
      return this.getTranslatedPhrase(hy, e);
    },
    callback() {
      this.alter("remove_col", yq(this), null, "ContextMenu.removeColumn");
    },
    disabled() {
      if (!this.isColumnModificationAllowed())
        return !0;
      const t = this.getSelectedRangeLast();
      if (!t || t.isSingleHeader() && t.highlight.col < 0)
        return !0;
      const e = this.countCols();
      return this.selection.isSelectedByCorner() ? e === 0 : this.selection.isSelectedByRowHeader() || e === 0;
    },
    hidden() {
      return !this.getSettings().allowRemoveColumn;
    }
  };
}
const im = "remove_row";
function m5() {
  return {
    key: im,
    name() {
      const t = this.getSelected();
      let e = 0;
      if (t)
        if (t.length > 1)
          e = 1;
        else {
          const [n, , r] = t[0];
          n - r !== 0 && (e = 1);
        }
      return this.getTranslatedPhrase(cy, e);
    },
    callback() {
      this.alter("remove_row", bq(this), 1, "ContextMenu.removeRow");
    },
    disabled() {
      const t = this.getSelectedRangeLast();
      if (!t || t.isSingleHeader() && t.highlight.row < 0)
        return !0;
      const e = this.countRows();
      return this.selection.isSelectedByCorner() ? e === 0 : this.selection.isSelectedByColumnHeader() || e === 0;
    },
    hidden() {
      return !this.getSettings().allowRemoveRow;
    }
  };
}
const om = "row_above";
function p5() {
  return {
    key: om,
    name() {
      return this.getTranslatedPhrase(sy);
    },
    callback() {
      const t = this.getSelectedRangeLast().getTopLeftCorner();
      this.alter("insert_row_above", t.row, 1, "ContextMenu.rowAbove");
    },
    disabled() {
      const t = this.getSelectedRangeLast();
      return !t || t.isSingleHeader() && t.highlight.row < 0 ? !0 : this.selection.isSelectedByCorner() ? this.countRows() === 0 : this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows;
    },
    hidden() {
      return !this.getSettings().allowInsertRow;
    }
  };
}
const sm = "row_below";
function w5() {
  return {
    key: sm,
    name() {
      return this.getTranslatedPhrase(ay);
    },
    callback() {
      const t = this.getSelectedRangeLast().getBottomRightCorner();
      this.alter("insert_row_below", t.row, 1, "ContextMenu.rowBelow");
    },
    disabled() {
      const t = this.getSelectedRangeLast();
      return !t || t.isSingleHeader() && t.highlight.row < 0 ? !0 : this.selection.isSelectedByCorner() ? !1 : this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows;
    },
    hidden() {
      return !this.getSettings().allowInsertRow;
    }
  };
}
const $c = "no_items";
function C5() {
  return {
    key: $c,
    name() {
      return this.getTranslatedPhrase(oy);
    },
    disabled: !0,
    isCommand: !1
  };
}
const am = "undo";
function v5() {
  return {
    key: am,
    name() {
      return this.getTranslatedPhrase(dy);
    },
    callback() {
      this.undo();
    },
    hidden() {
      const t = this.getPlugin("undoRedo");
      return !t || !t.isEnabled();
    },
    disabled() {
      return !this.getPlugin("undoRedo").isUndoAvailable();
    }
  };
}
const S5 = [om, sm, ah, lh, nm, im, ch, am, rm, uh, Wr, et, $c], y5 = {
  [et]: a5,
  [$c]: C5,
  [om]: p5,
  [sm]: w5,
  [ah]: c5,
  [lh]: h5,
  [nm]: u5,
  [im]: m5,
  [ch]: g5,
  [am]: v5,
  [rm]: f5,
  [uh]: d5,
  [Wr]: l5
};
function MH() {
  const t = {};
  return Ze(y5, (e, n) => {
    t[n] = e();
  }), t;
}
function b5(t) {
  return {
    key: "commentsAddEdit",
    name() {
      var e;
      const n = (e = this.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
      return n != null && n.isCell() && t.getCommentAtCell(n.row, n.col) ? this.getTranslatedPhrase(_y) : this.getTranslatedPhrase(Ty);
    },
    callback() {
      const e = this.getSelectedRangeLast();
      this.deselectCell(), t.setRange(e), t.show(), t.focusEditor();
    },
    disabled() {
      const e = this.getSelectedRangeLast();
      return !!(!e || e.highlight.isHeader() || this.selection.isEntireRowSelected() && this.selection.isEntireColumnSelected() || this.countRenderedRows() === 0 || this.countRenderedCols() === 0);
    }
  };
}
function R5(t) {
  return {
    key: "commentsRemove",
    name() {
      return this.getTranslatedPhrase(My);
    },
    callback() {
      this.getSelectedRangeLast().forAll((n, r) => {
        n >= 0 && r >= 0 && t.removeCommentAtCell(n, r, !1);
      }), this.render();
    },
    disabled() {
      const e = this.getSelectedRangeLast();
      return !!(!e || e.highlight.isHeader() || this.selection.isEntireRowSelected() && this.selection.isEntireColumnSelected() || this.countRenderedRows() === 0 || this.countRenderedCols() === 0);
    }
  };
}
function E5(t) {
  return {
    key: "commentsReadOnly",
    name() {
      const e = this.getTranslatedPhrase(Oy);
      return Vi(this.getSelectedRange(), (r, i) => t.getCommentMeta(r, i, sf)) ? So(e) : e;
    },
    callback() {
      this.getSelectedRangeLast().forAll((n, r) => {
        if (n >= 0 && r >= 0) {
          const i = !!t.getCommentMeta(n, r, sf);
          t.updateCommentMeta(n, r, {
            [sf]: !i
          });
        }
      });
    },
    disabled() {
      const e = this.getSelectedRangeLast();
      return !!(!e || e.highlight.isHeader() || !t.getCommentAtCell(e.highlight.row, e.highlight.col) || this.selection.isEntireRowSelected() && this.selection.isEntireColumnSelected() || this.countRenderedRows() === 0 || this.countRenderedCols() === 0);
    }
  };
}
function Ii(t, e) {
  OH(t, e), e.add(t);
}
function Xs(t, e, n) {
  OH(t, e), e.set(t, n);
}
function OH(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function T5(t, e, n) {
  return e = _5(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function _5(t) {
  var e = M5(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function M5(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Pi(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function Oo(t, e, n) {
  var r = AH(t, e, "set");
  return O5(t, r, n), n;
}
function O5(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function it(t, e) {
  var n = AH(t, e, "get");
  return A5(t, n);
}
function AH(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function A5(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
const fc = "comments", I5 = 60, yo = "comment", ec = "value", IH = "style", sf = "readOnly", ld = fc, JC = `plugin:${fc}`;
var Nt = /* @__PURE__ */ new WeakMap(), li = /* @__PURE__ */ new WeakMap(), lm = /* @__PURE__ */ new WeakMap(), af = /* @__PURE__ */ new WeakMap(), Kf = /* @__PURE__ */ new WeakMap(), ev = /* @__PURE__ */ new WeakMap(), Xf = /* @__PURE__ */ new WeakMap(), OT = /* @__PURE__ */ new WeakSet(), AT = /* @__PURE__ */ new WeakSet(), IT = /* @__PURE__ */ new WeakSet(), PT = /* @__PURE__ */ new WeakSet(), xT = /* @__PURE__ */ new WeakSet(), HT = /* @__PURE__ */ new WeakSet(), DT = /* @__PURE__ */ new WeakSet(), NT = /* @__PURE__ */ new WeakSet(), LT = /* @__PURE__ */ new WeakSet(), $T = /* @__PURE__ */ new WeakSet();
class P5 extends gt {
  constructor() {
    super(...arguments), Ii(this, $T), Ii(this, LT), Ii(this, NT), Ii(this, DT), Ii(this, HT), Ii(this, xT), Ii(this, PT), Ii(this, IT), Ii(this, AT), Ii(this, OT), T5(this, "range", {}), Xs(this, Nt, {
      writable: !0,
      value: null
    }), Xs(this, li, {
      writable: !0,
      value: null
    }), Xs(this, lm, {
      writable: !0,
      value: !1
    }), Xs(this, af, {
      writable: !0,
      value: !1
    }), Xs(this, Kf, {
      writable: !0,
      value: {}
    }), Xs(this, ev, {
      writable: !0,
      value: null
    }), Xs(this, Xf, {
      writable: !0,
      value: ""
    });
  }
  static get PLUGIN_KEY() {
    return fc;
  }
  static get PLUGIN_PRIORITY() {
    return I5;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link Comments#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[fc];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (it(this, Nt) || Oo(this, Nt, new Q7(this.hot.rootDocument, this.hot.isRtl())), it(this, li) || Oo(this, li, new r5(this.getDisplayDelaySetting())), this.addHook("afterContextMenuDefaultOptions", (e) => this.addToContextMenu(e)), this.addHook("afterRenderer", (e, n, r, i, o, s) => Pi(this, PT, N5).call(this, e, s)), this.addHook("afterScroll", () => Pi(this, $T, V5).call(this)), this.addHook("afterBeginEditing", () => this.hide()), this.addHook("afterDocumentKeyDown", (e) => Pi(this, LT, W5).call(this, e)), it(this, li).addLocalHook("hide", () => this.hide()), it(this, li).addLocalHook("show", (e, n) => this.showAtCell(e, n)), this.registerShortcuts(), this.registerListeners(), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *   - [`comments`](@/api/options.md#comments)
   */
  updatePlugin() {
    it(this, li).updateDelay(this.getDisplayDelaySetting()), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.unregisterShortcuts(), super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for toggling context menu.
   *
   * @private
   */
  registerShortcuts() {
    const e = this.hot.getShortcutManager(), n = e.getContext("grid"), r = e.addContext(JC);
    n.addShortcut({
      keys: [["Control", "Alt", "M"]],
      callback: () => {
        const i = this.hot.getSelectedRangeLast();
        Oo(this, af, !0), this.hot.scrollToFocusedCell(() => {
          this.setRange(i), this.show(), this.focusEditor(), e.setActiveContextName(JC), this.hot._registerTimeout(() => {
            Oo(this, af, !1);
          });
        });
      },
      stopPropagation: !0,
      runOnlyIf: () => {
        var i;
        return ((i = this.hot.getSelectedRangeLast()) === null || i === void 0 ? void 0 : i.highlight.isCell()) && !it(this, Nt).isVisible();
      },
      group: ld
    }), r.addShortcut({
      keys: [["Escape"]],
      callback: () => {
        it(this, Nt).setValue(it(this, Xf)), this.hide(), e.setActiveContextName("grid");
      },
      runOnlyIf: () => {
        var i;
        return ((i = this.hot.getSelectedRangeLast()) === null || i === void 0 ? void 0 : i.highlight.isCell()) && it(this, Nt).isVisible();
      },
      group: ld
    }), r.addShortcut({
      keys: [["Control/Meta", "Enter"]],
      callback: () => {
        this.hide(), e.setActiveContextName("grid");
      },
      runOnlyIf: () => {
        var i;
        return ((i = this.hot.getSelectedRangeLast()) === null || i === void 0 ? void 0 : i.highlight.isCell()) && it(this, Nt).isVisible();
      },
      group: ld
    });
  }
  /**
   * Unregister shortcuts responsible for toggling context menu.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(ld);
  }
  /**
   * Registers all necessary DOM listeners.
   *
   * @private
   */
  registerListeners() {
    const {
      rootDocument: e
    } = this.hot, n = this.getEditorInputElement();
    this.eventManager.addEventListener(e, "mouseover", (r) => Pi(this, AT, H5).call(this, r)), this.eventManager.addEventListener(e, "mousedown", (r) => Pi(this, OT, x5).call(this, r)), this.eventManager.addEventListener(e, "mouseup", () => Pi(this, IT, D5).call(this)), this.eventManager.addEventListener(n, "focus", () => Pi(this, HT, $5).call(this)), this.eventManager.addEventListener(n, "blur", () => Pi(this, xT, L5).call(this)), this.eventManager.addEventListener(n, "mousedown", (r) => Pi(this, DT, k5).call(this, r)), this.eventManager.addEventListener(n, "mouseup", (r) => Pi(this, NT, F5).call(this, r));
  }
  /**
   * Sets the current cell range to be able to use general methods like {@link Comments#setComment}, {@link Comments#removeComment}, {@link Comments#show}.
   *
   * @param {object} range Object with `from` property, each with `row` and `col` properties.
   */
  setRange(e) {
    this.range = e;
  }
  /**
   * Clears the currently selected cell.
   */
  clearRange() {
    this.range = {};
  }
  /**
   * Checks if the event target is a cell containing a comment.
   *
   * @private
   * @param {Event} event DOM event.
   * @returns {boolean}
   */
  targetIsCellWithComment(e) {
    const n = Es(e.target, "TD", "TBODY");
    return !!(n && Ve(n, "htCommentCell") && Es(n, [this.hot.rootElement]));
  }
  /**
   * Checks if the event target is a comment textarea.
   *
   * @private
   * @param {Event} event DOM event.
   * @returns {boolean}
   */
  targetIsCommentTextArea(e) {
    return this.getEditorInputElement() === e.target;
  }
  /**
   * Sets a comment for a cell according to the previously set range (see {@link Comments#setRange}).
   *
   * @param {string} value Comment contents.
   */
  setComment(e) {
    if (!this.range.from)
      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
    const n = it(this, Nt).getValue();
    let r = "";
    e != null ? r = e : n != null && (r = n);
    const i = this.range.from.row, o = this.range.from.col;
    this.updateCommentMeta(i, o, {
      [ec]: r
    }), this.hot.render();
  }
  /**
   * Sets a comment for a specified cell.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} value Comment contents.
   */
  setCommentAtCell(e, n, r) {
    this.setRange({
      from: this.hot._createCellCoords(e, n)
    }), this.setComment(r);
  }
  /**
   * Removes a comment from a cell according to previously set range (see {@link Comments#setRange}).
   *
   * @param {boolean} [forceRender=true] If set to `true`, the table will be re-rendered at the end of the operation.
   */
  removeComment() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
    if (!this.range.from)
      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
    this.hot.setCellMeta(this.range.from.row, this.range.from.col, yo), e && this.hot.render(), this.hide();
  }
  /**
   * Removes a comment from a specified cell.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {boolean} [forceRender=true] If `true`, the table will be re-rendered at the end of the operation.
   */
  removeCommentAtCell(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    this.setRange({
      from: this.hot._createCellCoords(e, n)
    }), this.removeComment(r);
  }
  /**
   * Gets comment from a cell according to previously set range (see {@link Comments#setRange}).
   *
   * @returns {string|undefined} Returns a content of the comment.
   */
  getComment() {
    const e = this.range.from.row, n = this.range.from.col;
    return this.getCommentMeta(e, n, ec);
  }
  /**
   * Gets comment from a cell at the provided coordinates.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @returns {string|undefined} Returns a content of the comment.
   */
  getCommentAtCell(e, n) {
    return this.getCommentMeta(e, n, ec);
  }
  /**
   * Shows the comment editor accordingly to the previously set range (see {@link Comments#setRange}).
   *
   * @returns {boolean} Returns `true` if comment editor was shown.
   */
  show() {
    var e;
    if (!this.range.from)
      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
    const {
      from: {
        row: n,
        col: r
      }
    } = this.range;
    if (n < 0 || n > this.hot.countSourceRows() - 1 || r < 0 || r > this.hot.countSourceCols() - 1)
      return !1;
    const i = this.hot.getCellMeta(this.range.from.row, this.range.from.col);
    return it(this, li).cancelHiding(), it(this, Nt).setValue((e = i[yo] ? i[yo][ec] : null) !== null && e !== void 0 ? e : ""), it(this, Nt).show(), this.refreshEditor(!0), !0;
  }
  /**
   * Shows comment editor according to cell coordinates.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @returns {boolean} Returns `true` if comment editor was shown.
   */
  showAtCell(e, n) {
    return this.setRange({
      from: this.hot._createCellCoords(e, n)
    }), this.show();
  }
  /**
   * Hides the comment editor.
   */
  hide() {
    it(this, Nt).hide();
  }
  /**
   * Refreshes comment editor position and styling.
   *
   * @param {boolean} [force=false] If `true` then recalculation will be forced.
   */
  refreshEditor() {
    var e, n;
    if (!(arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1) && (!this.range.from || !it(this, Nt).isVisible()))
      return;
    const {
      rowIndexMapper: i,
      columnIndexMapper: o
    } = this.hot, {
      row: s,
      col: a
    } = this.range.from;
    let l = i.getRenderableFromVisualIndex(s), u = o.getRenderableFromVisualIndex(a);
    const c = l === null;
    it(this, Nt).setPosition(0, 0), l === null && (l = i.getRenderableFromVisualIndex(i.getNearestNotHiddenIndex(s, -1))), u === null && (u = o.getRenderableFromVisualIndex(o.getNearestNotHiddenIndex(a, -1)));
    const d = l === null, g = u === null;
    l = (e = l) !== null && e !== void 0 ? e : 0, u = (n = u) !== null && n !== void 0 ? n : 0;
    const {
      rootWindow: p,
      view: {
        _wt: C
      }
    } = this.hot, {
      wtTable: E
    } = C, I = C.getCell({
      row: l,
      col: u
    }, !0), M = this.getCommentMeta(s, a, IH);
    M ? it(this, Nt).setSize(M.width, M.height) : it(this, Nt).resetSize();
    const y = g ? 0 : E.getStretchedColumnWidth(u), $ = c && !d ? Bt(I) : 0, {
      left: X,
      top: G,
      width: q,
      height: re
    } = I.getBoundingClientRect(), {
      width: v,
      height: S
    } = it(this, Nt).getSize(), {
      innerWidth: b,
      innerHeight: L
    } = this.hot.rootWindow, P = this.hot.rootDocument.documentElement;
    let x = X + p.scrollX + y, W = G + p.scrollY + $;
    this.hot.isRtl() && (x -= v + y), this.hot.isLtr() && X + q + v > b ? x = X + p.scrollX - v - 1 : this.hot.isRtl() && x < -(P.scrollWidth - P.clientWidth) && (x = X + p.scrollX + y + 1), G + S > L && (W -= S - re + 1), it(this, Nt).setPosition(x, W), it(this, Nt).setReadOnlyState(this.getCommentMeta(s, a, sf));
  }
  /**
   * Focuses the comments editor element.
   */
  focusEditor() {
    it(this, Nt).focus();
  }
  /**
   * Sets or update the comment-related cell meta.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} metaObject Object defining all the comment-related meta information.
   */
  updateCommentMeta(e, n, r) {
    const i = this.hot.getCellMeta(e, n)[yo];
    let o;
    i ? (o = Wn(i), th(o, r)) : o = r, this.hot.setCellMeta(e, n, yo, o);
  }
  /**
   * Gets the comment related meta information.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} property Cell meta property.
   * @returns {Mixed}
   */
  getCommentMeta(e, n, r) {
    const i = this.hot.getCellMeta(e, n);
    if (i[yo])
      return i[yo][r];
  }
  /**
   * Add Comments plugin options to the Context Menu.
   *
   * @private
   * @param {object} options The menu options.
   */
  addToContextMenu(e) {
    e.items.push({
      name: et
    }, b5(this), R5(this), E5(this));
  }
  /**
   * Get `displayDelay` setting of comment plugin.
   *
   * @private
   * @returns {number|undefined}
   */
  getDisplayDelaySetting() {
    const e = this.hot.getSettings()[fc];
    if (Xe(e))
      return e.displayDelay;
  }
  /**
   * Gets the editors input element.
   *
   * @private
   * @returns {HTMLTextAreaElement}
   */
  getEditorInputElement() {
    return it(this, Nt).getInputElement();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    it(this, Nt) && it(this, Nt).destroy(), it(this, li) && it(this, li).destroy(), super.destroy();
  }
}
function x5(t) {
  if (!(!this.hot.view || !this.hot.view._wt) && !it(this, lm) && !this.targetIsCommentTextArea(t)) {
    const e = Es(t.target, "TD", "TBODY");
    let n = null;
    e && (n = this.hot.getCoords(e)), (!e || this.range.from && n && (this.range.from.row !== n.row || this.range.from.col !== n.col)) && this.hide();
  }
}
function H5(t) {
  const {
    rootDocument: e
  } = this.hot;
  if (!(it(this, lm) || it(this, Nt).isFocused() || Ve(t.target, "wtBorder") || it(this, ev) === t.target || !it(this, Nt)))
    if (Oo(this, ev, e.elementFromPoint(t.clientX, t.clientY)), this.targetIsCellWithComment(t)) {
      const n = this.hot._createCellRange(this.hot.getCoords(t.target));
      it(this, li).show(n);
    } else
      vs(t.target, e) && !this.targetIsCommentTextArea(t) && it(this, li).hide();
}
function D5() {
  Oo(this, lm, !1);
}
function N5(t, e) {
  e[yo] && e[yo][ec] && ce(t, e.commentedCellClassName);
}
function L5() {
  Oo(this, Xf, ""), this.hot.getShortcutManager().setActiveContextName("grid"), this.setComment();
}
function $5() {
  Oo(this, Xf, this.getComment()), this.hot.listen(), this.hot.getShortcutManager().setActiveContextName(JC);
}
function k5(t) {
  Oo(this, Kf, {
    width: yt(t.target),
    height: Bt(t.target)
  });
}
function F5(t) {
  const e = yt(t.target), n = Bt(t.target);
  (e !== it(this, Kf).width + 1 || n !== it(this, Kf).height + 2) && this.updateCommentMeta(this.range.from.row, this.range.from.col, {
    [IH]: {
      width: e,
      height: n
    }
  });
}
function W5(t) {
  it(this, Nt).isVisible() && Kr(t);
}
function V5() {
  it(this, af) || this.hide();
}
var kT = p1, B5 = TypeError, U5 = function(t, e) {
  if (!delete t[e])
    throw new B5("Cannot delete property " + kT(e) + " of " + kT(t));
}, Y5 = Ma, G5 = wg, z5 = vg, j5 = I1, K5 = U5, X5 = P1, q5 = [].unshift(0) !== 1, Z5 = function() {
  try {
    Object.defineProperty([], "length", { writable: !1 }).unshift();
  } catch (t) {
    return t instanceof TypeError;
  }
}, Q5 = q5 || !Z5();
Y5({ target: "Array", proto: !0, arity: 1, forced: Q5 }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  unshift: function(e) {
    var n = G5(this), r = z5(n), i = arguments.length;
    if (i) {
      X5(r + i);
      for (var o = r; o--; ) {
        var s = o + i;
        o in n ? n[s] = n[o] : K5(n, s);
      }
      for (var a = 0; a < i; a++)
        n[a] = arguments[a];
    }
    return j5(n, r + i);
  }
});
function kp(t, e, n) {
  return e = J5(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function J5(t) {
  var e = eZ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function eZ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class PH {
  constructor(e) {
    kp(this, "hot", void 0), kp(this, "commands", {}), kp(this, "commonCallback", null), this.hot = e;
  }
  /**
   * Register command.
   *
   * @param {string} name Command name.
   * @param {object} commandDescriptor Command descriptor object with properties like `key` (command id),
   *                                   `callback` (task to execute), `name` (command name), `disabled` (command availability).
   */
  registerCommand(e, n) {
    this.commands[e] = n;
  }
  /**
   * Set common callback which will be trigger on every executed command.
   *
   * @param {Function} callback Function which will be fired on every command execute.
   */
  setCommonCallback(e) {
    this.commonCallback = e;
  }
  /**
   * Execute command by its name.
   *
   * @param {string} commandName Command id.
   * @param {*} params Arguments passed to command task.
   */
  execute(e) {
    for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++)
      r[i - 1] = arguments[i];
    const o = e.split(":"), s = o[0], a = o.length === 2 ? o[1] : null;
    let l = this.commands[s];
    if (!l)
      throw new Error(`Menu command '${s}' not exists.`);
    if (a && l.submenu && (l = tZ(a, l.submenu.items)), l.disabled === !0 || typeof l.disabled == "function" && l.disabled.call(this.hot) === !0 || Vt(l, "submenu"))
      return;
    const u = [];
    typeof l.callback == "function" && u.push(l.callback), typeof this.commonCallback == "function" && u.push(this.commonCallback), r.unshift(o.join(":")), H(u, (c) => c.apply(this.hot, r));
  }
}
function tZ(t, e) {
  let n;
  return H(e, (r) => {
    const i = r.key ? r.key.split(":") : null;
    if (Array.isArray(i) && i[1] === t)
      return n = r, !1;
  }), n;
}
function Fp(t, e, n) {
  return e = nZ(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function nZ(t) {
  var e = rZ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function rZ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class xH {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    Fp(this, "hot", void 0), Fp(this, "predefinedItems", MH()), Fp(this, "defaultOrderPattern", void 0), this.hot = e, this.defaultOrderPattern = n;
  }
  /**
   * Set predefined items.
   *
   * @param {Array} predefinedItemsCollection Array of predefined items.
   */
  setPredefinedItems(e) {
    const n = {};
    this.defaultOrderPattern.length = 0, Ze(e, (r, i) => {
      let o = "";
      r.name === et ? (n[et] = r, o = et) : isNaN(parseInt(i, 10)) ? (r.key = r.key === void 0 ? i : r.key, n[i] = r, o = r.key) : (n[r.key] = r, o = r.key), this.defaultOrderPattern.push(o);
    }), this.predefinedItems = n;
  }
  /**
   * Get all menu items based on pattern.
   *
   * @param {Array|object|boolean} pattern Pattern which you can define by displaying menu items order. If `true` default
   *                                       pattern will be used.
   * @returns {Array}
   */
  getItems() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    return iZ(e, this.defaultOrderPattern, this.predefinedItems);
  }
}
function iZ() {
  let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  const r = [];
  let i = t;
  return i && i.items ? i = i.items : Array.isArray(i) || (i = e), Xe(i) ? Ze(i, (o, s) => {
    let a = n[typeof o == "string" ? o : s];
    a || (a = o), Xe(o) ? ln(a, o) : typeof a == "string" && (a = {
      name: a
    }), a.key === void 0 && (a.key = s), r.push(a);
  }) : H(i, (o, s) => {
    let a = n[o];
    !a && S5.indexOf(o) >= 0 || (a || (a = {
      name: o,
      key: `${s}`
    }), Xe(o) && ln(a, o), a.key === void 0 && (a.key = s), r.push(a));
  }), r;
}
function qo(t, e, n) {
  return e = oZ(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function oZ(t) {
  var e = sZ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function sZ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class aZ {
  constructor(e, n) {
    qo(this, "top", void 0), qo(this, "topRelative", void 0), qo(this, "left", void 0), qo(this, "leftRelative", void 0), qo(this, "scrollTop", void 0), qo(this, "scrollLeft", void 0), qo(this, "cellHeight", void 0), qo(this, "cellWidth", void 0);
    const r = n.scrollY, i = n.scrollX;
    let o, s, a, l, u, c;
    this.rootWindow = n, this.type = this.getSourceType(e), this.type === "literal" ? (o = parseInt(e.top, 10), a = parseInt(e.left, 10), u = e.height || 0, c = e.width || 0, s = o, l = a, o += r, a += i) : this.type === "event" && (o = parseInt(e.pageY, 10), a = parseInt(e.pageX, 10), u = e.target.clientHeight, c = e.target.clientWidth, s = o - r, l = a - i), this.top = o, this.topRelative = s, this.left = a, this.leftRelative = l, this.scrollTop = r, this.scrollLeft = i, this.cellHeight = u, this.cellWidth = c;
  }
  /**
   * Get source type name.
   *
   * @param {*} object Event or Object with coordinates.
   * @returns {string} Returns one of this values: `'literal'`, `'event'`.
   */
  getSourceType(e) {
    let n = "literal";
    return e instanceof Event && (n = "event"), n;
  }
  /**
   * Checks if element can be placed above the cursor.
   *
   * @param {HTMLElement} element Element to check if it's size will fit above the cursor.
   * @returns {boolean}
   */
  fitsAbove(e) {
    return this.topRelative >= e.offsetHeight;
  }
  /**
   * Checks if element can be placed below the cursor.
   *
   * @param {HTMLElement} element Element to check if it's size will fit below the cursor.
   * @param {number} [viewportHeight] The viewport height.
   * @returns {boolean}
   */
  fitsBelow(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rootWindow.innerHeight;
    return this.topRelative + e.offsetHeight <= n;
  }
  /**
   * Checks if element can be placed on the right of the cursor.
   *
   * @param {HTMLElement} element Element to check if it's size will fit on the right of the cursor.
   * @param {number} [viewportWidth] The viewport width.
   * @returns {boolean}
   */
  fitsOnRight(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rootWindow.innerWidth;
    return this.leftRelative + this.cellWidth + e.offsetWidth <= n;
  }
  /**
   * Checks if element can be placed on the left on the cursor.
   *
   * @param {HTMLElement} element Element to check if it's size will fit on the left of the cursor.
   * @returns {boolean}
   */
  fitsOnLeft(e) {
    return this.leftRelative >= e.offsetWidth;
  }
}
function Ou(t, e, n) {
  lZ(t, e), e.set(t, n);
}
function lZ(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function nt(t, e) {
  var n = HH(t, e, "get");
  return uZ(t, n);
}
function uZ(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function ud(t, e, n) {
  var r = HH(t, e, "set");
  return cZ(t, r, n), n;
}
function HH(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function cZ(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var zn = /* @__PURE__ */ new WeakMap(), Zo = /* @__PURE__ */ new WeakMap(), On = /* @__PURE__ */ new WeakMap(), Wp = /* @__PURE__ */ new WeakMap(), Za = /* @__PURE__ */ new WeakMap();
class hZ {
  constructor(e) {
    Ou(this, zn, {
      writable: !0,
      value: void 0
    }), Ou(this, Zo, {
      writable: !0,
      value: void 0
    }), Ou(this, On, {
      writable: !0,
      value: void 0
    }), Ou(this, Wp, {
      writable: !0,
      value: !1
    }), Ou(this, Za, {
      writable: !0,
      value: {
        above: 0,
        below: 0,
        left: 0,
        right: 0
      }
    }), ud(this, Wp, e);
  }
  /**
   * Sets offset position for specified directions (`above`, `below`, `left` or `right`).
   *
   * @param {'above' | 'below' | 'left' | 'right'} direction A direction name.
   * @param {number} [offset=0] Offset value.
   * @returns {Positioner}
   */
  setOffset(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return nt(this, Za)[e] = n, this;
  }
  /**
   * Sets the menu element to work with. The element can be owned by the main menu or the submenu.
   *
   * @param {HTMLElement} container The menu container element.
   * @returns {Positioner}
   */
  setElement(e) {
    return ud(this, zn, e), this;
  }
  /**
   * Sets the parent menu element to work with.
   *
   * @param {HTMLElement} container The parent menu container element.
   * @returns {Positioner}
   */
  setParentElement(e) {
    return ud(this, Zo, e), this;
  }
  /**
   * Updates the menu position.
   *
   * @param {object|MouseEvent} coords The literal object with `top`, `left`, `width` and `height` props or a
   * mouse event object.
   */
  updatePosition(e) {
    ud(this, On, new aZ(e, nt(this, zn).ownerDocument.defaultView)), nt(this, Wp) ? (nt(this, On).fitsBelow(nt(this, zn)) ? this.setPositionBelowCursor() : nt(this, On).fitsAbove(nt(this, zn)) ? this.setPositionAboveCursor() : this.setPositionBelowCursor(), this.updateHorizontalPosition()) : (this.setPositionBelowCursor(), this.setPositionOnRightOfCursor());
  }
  /**
   * Updates the menu horizontal position.
   */
  updateHorizontalPosition() {
    nt(this, zn).dir === "rtl" ? nt(this, On).fitsOnLeft(nt(this, zn)) ? this.setPositionOnLeftOfCursor() : this.setPositionOnRightOfCursor() : nt(this, On).fitsOnRight(nt(this, zn)) ? this.setPositionOnRightOfCursor() : this.setPositionOnLeftOfCursor();
  }
  /**
   * Sets the menu position above the cursor object.
   */
  setPositionAboveCursor() {
    let e = nt(this, Za).above + nt(this, On).top - nt(this, zn).offsetHeight;
    nt(this, Zo) && (e = nt(this, On).top + nt(this, On).cellHeight - nt(this, zn).offsetHeight + 3), nt(this, zn).style.top = `${e}px`;
  }
  /**
   * Sets the menu position below the cursor object.
   */
  setPositionBelowCursor() {
    let e = nt(this, Za).below + nt(this, On).top + 1;
    nt(this, Zo) && (e = nt(this, On).top - 1), nt(this, zn).style.top = `${e}px`;
  }
  /**
   * Sets the menu position on the right of the cursor object.
   */
  setPositionOnRightOfCursor() {
    let e = nt(this, On).left;
    if (nt(this, Zo)) {
      const {
        right: n
      } = nt(this, Zo).getBoundingClientRect();
      e += nt(this, On).cellWidth + n - (nt(this, On).left + nt(this, On).cellWidth);
    } else
      e += nt(this, Za).right;
    nt(this, zn).style.left = `${e}px`;
  }
  /**
   * Sets the menu position on the left of the cursor object.
   */
  setPositionOnLeftOfCursor() {
    let e = nt(this, Za).left + nt(this, On).left - nt(this, zn).offsetWidth;
    if (nt(this, Zo)) {
      const {
        left: n
      } = nt(this, Zo).getBoundingClientRect();
      e -= nt(this, On).left - n;
    }
    nt(this, zn).style.left = `${e}px`;
  }
}
function DH(t) {
  let {
    initialPage: e = -1,
    size: n = () => 0,
    onItemSelect: r = () => {
    },
    onClear: i = () => {
    }
  } = t;
  const o = /* @__PURE__ */ new Set();
  let s = mr(e, -1, C() - 1);
  function a(I, M) {
    const y = C() - 1;
    return I < 0 && (I = y), I > y && (I = 0), o.has(I) ? -1 : (o.add(I), r(I, !1) === !1 && (I = a(
      M === 1 ? ++I : --I,
      // eslint-disable-line no-plusplus
      M
    )), I);
  }
  function l(I) {
    I > -1 && I < C() && r(I, !0) !== !1 && (s = I);
  }
  function u() {
    return s;
  }
  function c() {
    C() > 0 && (o.clear(), s = a(0, 1));
  }
  function d() {
    C() > 0 && (o.clear(), s = a(C() - 1, -1));
  }
  function g() {
    C() > 0 && (o.clear(), s = a(++s, 1));
  }
  function p() {
    C() > 0 && (o.clear(), s = a(--s, -1));
  }
  function C() {
    return Math.max(n(), 0);
  }
  function E() {
    o.clear(), s = e, i();
  }
  return {
    setCurrentPage: l,
    getCurrentPage: u,
    toFirstItem: c,
    toLastItem: d,
    toNextItem: g,
    toPreviousItem: p,
    getSize: C,
    clear: E
  };
}
function dZ(t) {
  return qe(t, (e) => ({
    start: e.getTopStartCorner(),
    end: e.getBottomEndCorner()
  }));
}
function tv(t) {
  return Vt(t, "submenu");
}
function nv(t) {
  return new RegExp(et, "i").test(t.name);
}
function lf(t, e) {
  return t.disabled === !0 || typeof t.disabled == "function" && t.disabled.call(e) === !0;
}
function FT(t) {
  return Vt(t, "disableSelection");
}
function fZ(t) {
  return Ve(t, "htSeparator");
}
function gZ(t) {
  return Ve(t, "htSubmenu");
}
function mZ(t) {
  return Ve(t, "htDisabled");
}
function pZ(t) {
  return Ve(t, "htSelectionDisabled");
}
function wZ(t, e) {
  return !t.hidden || !(typeof t.hidden == "function" && t.hidden.call(e));
}
function NH(t, e) {
  const n = t.slice(0);
  for (let r = 0; r < n.length && n[r].name === e; )
    n.shift();
  return n;
}
function CZ(t, e) {
  let n = t.slice(0);
  return n.reverse(), n = NH(n, e), n.reverse(), n;
}
function vZ(t) {
  const e = [];
  return H(t, (n, r) => {
    r > 0 ? e[e.length - 1].name !== n.name && e.push(n) : e.push(n);
  }), e;
}
function SZ(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : et, n = t.slice(0);
  return n = NH(n, e), n = CZ(n, e), n = vZ(n), n;
}
function yZ(t) {
  return DH({
    size: () => t.countRows(),
    onItemSelect(e, n) {
      const r = t.getCell(e, 0);
      if (!r || fZ(r) || mZ(r) || pZ(r))
        return !1;
      t.selectCell(e, 0, ...n ? [e, 0, !1, !1] : []);
    },
    onClear() {
      t.deselectCell();
    }
  });
}
function bZ(t) {
  return [{
    keys: [["Tab"], ["Shift", "Tab"], ["Control/Meta", "A"]],
    forwardToContext: t.hot.getShortcutManager().getContext("grid"),
    callback: () => t.close(!0)
  }, {
    keys: [["Escape"]],
    callback: () => t.close()
  }, {
    keys: [["ArrowDown"]],
    callback: () => t.getNavigator().toNextItem()
  }, {
    keys: [["ArrowUp"]],
    callback: () => t.getNavigator().toPreviousItem()
  }, {
    keys: [["ArrowRight"]],
    callback: () => {
      const e = t.hotMenu.getSelectedLast();
      if (e) {
        const n = t.openSubMenu(e[0]);
        n && n.getNavigator().toFirstItem();
      }
    }
  }, {
    keys: [["ArrowLeft"]],
    callback: () => {
      t.hotMenu.getSelectedLast() && t.isSubMenu() && (t.close(), t.isSubMenu() && t.parentMenu.hotMenu.listen());
    }
  }, {
    keys: [["Control/Meta", "ArrowUp"], ["Home"]],
    callback: () => t.getNavigator().toFirstItem()
  }, {
    keys: [["Control/Meta", "ArrowDown"], ["End"]],
    callback: () => t.getNavigator().toLastItem()
  }, {
    keys: [["Enter"], ["Space"]],
    callback: (e) => {
      const n = t.hotMenu.getSelectedLast();
      n && (t.hotMenu.getSourceDataAtRow(n[0]).submenu ? t.openSubMenu(n[0]).getNavigator().toFirstItem() : (t.executeCommand(e), t.close(!0)));
    }
  }, {
    keys: [["PageUp"]],
    callback: () => {
      t.hotMenu.getSelectedLast() ? t.hotMenu.selection.transformStart(-t.hotMenu.countVisibleRows(), 0) : t.getNavigator().toFirstItem();
    }
  }, {
    keys: [["PageDown"]],
    callback: () => {
      t.hotMenu.getSelectedLast() ? t.hotMenu.selection.transformStart(t.hotMenu.countVisibleRows(), 0) : t.getNavigator().toLastItem();
    }
  }];
}
const LH = "menu", WT = LH;
function RZ(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  const n = [];
  r(bZ(t)), e.forEach((u) => {
    let {
      shortcuts: c,
      contextName: d
    } = u;
    i(c, d);
  });
  function r(u, c) {
    a(c).addShortcuts(u, {
      group: LH
    });
  }
  function i(u, c) {
    const d = a(c);
    u.forEach((g) => {
      let {
        keys: p
      } = g;
      p.forEach((C) => d.removeShortcutsByKeys(C));
    }), n.push({
      shortcuts: u,
      contextName: c
    }), r(u, c);
  }
  function o() {
    return [...n];
  }
  function s(u) {
    return u ? `${WT}:${u}` : WT;
  }
  function a(u) {
    var c;
    const d = t.hotMenu.getShortcutManager(), g = s(u);
    return (c = d.getContext(g)) !== null && c !== void 0 ? c : d.addContext(g);
  }
  function l(u) {
    t.hotMenu.getShortcutManager().setActiveContextName(s(u));
  }
  return {
    addCustomShortcuts: i,
    getCustomShortcuts: o,
    getContext: a,
    listen: l
  };
}
function EZ(t) {
  return (e, n, r, i, o, s) => {
    if (n.hasAttribute("ghost-table"))
      return;
    const a = e.getSourceDataAtRow(r), l = t.rootDocument.createElement("div"), u = typeof s == "function" ? s.call(t) : s;
    if (vi(n), ce(l, "htItemWrapper"), t.getSettings().ariaTags) {
      const c = !lf(a, t) && !FT(a) && !nv(a);
      Ne(n, [VY(), uS(u), ...c ? [Kl(-1)] : [], ...lf(a, t) ? [KY()] : [], ...tv(a) ? [Ur(!1)] : []]);
    }
    n.className = "", n.appendChild(l), nv(a) ? ce(n, "htSeparator") : typeof a.renderer == "function" ? (ce(n, "htCustomMenuRenderer"), n.appendChild(a.renderer(e, l, r, i, o, u))) : Pa(l, u), lf(a, t) ? ce(n, "htDisabled") : FT(a) ? ce(n, "htSelectionDisabled") : tv(a) && ce(n, "htSubmenu");
  };
}
function VT(t, e, n) {
  TZ(t, e), e.set(t, n);
}
function TZ(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function xi(t, e, n) {
  return e = _Z(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function _Z(t) {
  var e = MZ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function MZ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function BT(t, e, n) {
  var r = $H(t, e, "set");
  return OZ(t, r, n), n;
}
function OZ(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function Au(t, e) {
  var n = $H(t, e, "get");
  return AZ(t, n);
}
function $H(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function AZ(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
const UT = 215;
var Iu = /* @__PURE__ */ new WeakMap(), cd = /* @__PURE__ */ new WeakMap();
class eu {
  /**
   * @param {Core} hotInstance Handsontable instance.
   * @param {MenuOptions} [options] Menu options.
   */
  constructor(e, n) {
    var r = this;
    xi(this, "hot", void 0), xi(this, "options", void 0), xi(this, "eventManager", new _r(this)), xi(this, "container", void 0), xi(this, "positioner", void 0), xi(this, "hotMenu", null), xi(this, "hotSubMenus", {}), xi(this, "parentMenu", void 0), xi(this, "menuItems", null), xi(this, "origOutsideClickDeselects", null), VT(this, Iu, {
      writable: !0,
      value: void 0
    }), VT(this, cd, {
      writable: !0,
      value: void 0
    }), this.hot = e, this.options = n || {
      parent: null,
      name: null,
      className: "",
      keepInViewport: !0,
      standalone: !1,
      minWidth: UT,
      container: this.hot.rootDocument.documentElement
    }, this.container = this.createContainer(this.options.name), this.positioner = new hZ(this.options.keepInViewport), this.parentMenu = this.options.parent || null, this.registerEvents(), this.isSubMenu() && this.addLocalHook("afterSelectionChange", function() {
      for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++)
        o[s] = arguments[s];
      return r.parentMenu.runLocalHooks("afterSelectionChange", ...o);
    });
  }
  /**
   * Register event listeners.
   *
   * @private
   */
  registerEvents() {
    let e = this.hot.rootWindow;
    for (; e; )
      this.eventManager.addEventListener(e.document, "mousedown", (n) => this.onDocumentMouseDown(n)), this.eventManager.addEventListener(e.document, "contextmenu", (n) => this.onDocumentContextMenu(n)), e = Ic(e);
  }
  /**
   * Set array of objects which defines menu items.
   *
   * @param {Array} menuItems Menu items to display.
   */
  setMenuItems(e) {
    this.menuItems = e;
  }
  /**
   * Gets the controller object that allows modifying the the menu item selection.
   *
   * @returns {Paginator | undefined}
   */
  getNavigator() {
    return Au(this, Iu);
  }
  /**
   * Gets the controller object that allows extending the keyboard shortcuts of the menu.
   *
   * @returns {KeyboardShortcutsMenuController | undefined}
   */
  getKeyboardShortcutsCtrl() {
    return Au(this, cd);
  }
  /**
   * Returns currently selected menu item. Returns `null` if no item was selected.
   *
   * @returns {object|null}
   */
  getSelectedItem() {
    return this.hasSelectedItem() ? this.hotMenu.getSourceDataAtRow(this.hotMenu.getSelectedLast()[0]) : null;
  }
  /**
   * Checks if the menu has selected (highlighted) any item from the menu list.
   *
   * @returns {boolean}
   */
  hasSelectedItem() {
    return Array.isArray(this.hotMenu.getSelectedLast());
  }
  /**
   * Check if menu is using as sub-menu.
   *
   * @returns {boolean}
   */
  isSubMenu() {
    return this.parentMenu !== null;
  }
  /**
   * Open menu.
   *
   * @fires Hooks#beforeContextMenuShow
   * @fires Hooks#afterContextMenuShow
   */
  open() {
    this.runLocalHooks("beforeOpen"), this.container.removeAttribute("style"), this.container.style.display = "block";
    const e = kg((a) => this.openSubMenu(a), 300), n = this.options.minWidth || UT;
    let r = !1, i = Tr(this.menuItems, (a) => (a.key === $c && (r = !0), wZ(a, this.hot)));
    if (i.length < 1 && !r)
      i.push(MH()[$c]);
    else if (i.length === 0)
      return;
    i = SZ(i, et);
    let o = !1;
    const s = {
      data: i,
      colHeaders: !1,
      autoColumnSize: !0,
      autoWrapRow: !1,
      modifyColWidth(a) {
        return Re(a) && a < n ? n : a;
      },
      autoRowSize: !1,
      readOnly: !0,
      editor: !1,
      copyPaste: !1,
      hiddenRows: !0,
      maxCols: 1,
      columns: [{
        data: "name",
        renderer: EZ(this.hot)
      }],
      renderAllRows: !0,
      fragmentSelection: !1,
      outsideClickDeselects: !1,
      disableVisualSelection: "area",
      layoutDirection: this.hot.isRtl() ? "rtl" : "ltr",
      ariaTags: !1,
      beforeOnCellMouseOver: (a, l) => {
        Au(this, Iu).setCurrentPage(l.row);
      },
      afterOnCellMouseOver: (a, l) => {
        this.isAllSubMenusClosed() ? e(l.row) : this.openSubMenu(l.row);
      },
      rowHeights: (a) => i[a].name === et ? 1 : 23,
      afterOnCellContextMenu: (a) => {
        a.preventDefault(), PC() && o && this.hasSelectedItem() && this.close(!0);
      },
      afterSelection: (a, l, u, c, d) => {
        this.hotMenu.view.isMouseDown() && (d.value = !0), this.runLocalHooks("afterSelectionChange", this.getSelectedItem());
      },
      beforeOnCellMouseUp: (a) => {
        this.hasSelectedItem() && (o = !this.isCommandPassive(this.getSelectedItem()), this.executeCommand(a));
      },
      afterOnCellMouseUp: (a) => {
        (!PC() || !Ms(a)) && o && this.hasSelectedItem() && (Mo() || bS() ? this.hot._registerTimeout(() => this.close(!0), 325) : this.close(!0));
      },
      afterUnlisten: () => {
        !this.hasSelectedItem() && this.isOpened() && this.hotMenu.listen();
      }
    };
    this.origOutsideClickDeselects = this.hot.getSettings().outsideClickDeselects, this.hot.getSettings().outsideClickDeselects = !1, this.hotMenu = new this.hot.constructor(this.container, s), this.hotMenu.addHook("afterInit", () => this.onAfterInit()), this.hotMenu.init(), BT(this, Iu, yZ(this.hotMenu)), BT(this, cd, RZ(this)), Au(this, cd).listen(), this.focus(), this.isSubMenu() && this.addLocalHook("afterOpen", () => this.parentMenu.runLocalHooks("afterSubmenuOpen", this)), this.runLocalHooks("afterOpen", this);
  }
  /**
   * Close menu.
   *
   * @param {boolean} [closeParent=false] If `true` try to close parent menu if exists.
   */
  close() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    if (this.isOpened()) {
      if (e && this.isSubMenu())
        this.parentMenu.close();
      else if (Au(this, Iu).clear(), this.closeAllSubMenus(), this.container.style.display = "none", this.hotMenu.destroy(), this.hotMenu = null, this.hot.getSettings().outsideClickDeselects = this.origOutsideClickDeselects, this.runLocalHooks("afterClose"), this.isSubMenu()) {
        if (this.hot.getSettings().ariaTags) {
          const n = this.parentMenu.hotMenu.getSelectedLast();
          if (n) {
            const r = this.parentMenu.hotMenu.getCell(n[0], 0);
            Ne(r, [Ur(!1)]);
          }
        }
        this.parentMenu.hotMenu.listen();
      }
    }
  }
  /**
   * Open sub menu at the provided row index.
   *
   * @param {number} row Row index.
   * @returns {Menu|boolean} Returns created menu or `false` if no one menu was created.
   */
  openSubMenu(e) {
    if (!this.hotMenu)
      return !1;
    const n = this.hotMenu.getCell(e, 0);
    if (this.closeAllSubMenus(), !n || !gZ(n))
      return !1;
    const r = this.hotMenu.getSourceDataAtRow(e), i = new eu(this.hot, {
      parent: this,
      name: r.name,
      className: this.options.className,
      keepInViewport: !0,
      container: this.options.container
    });
    return i.setMenuItems(r.submenu.items), i.open(), i.setPosition(n.getBoundingClientRect()), this.hotSubMenus[r.key] = i, this.hot.getSettings().ariaTags && Ne(n, [Ur(!0)]), i;
  }
  /**
   * Close sub menu at row index.
   *
   * @param {number} row Row index.
   */
  closeSubMenu(e) {
    const n = this.hotMenu.getSourceDataAtRow(e), r = this.hotSubMenus[n.key];
    if (r) {
      r.destroy(), delete this.hotSubMenus[n.key];
      const i = this.hotMenu.getCell(e, 0);
      this.hot.getSettings().ariaTags && Ne(i, [Ur(!1)]);
    }
  }
  /**
   * Close all opened sub menus.
   */
  closeAllSubMenus() {
    H(this.hotMenu.getData(), (e, n) => this.closeSubMenu(n));
  }
  /**
   * Checks if all created and opened sub menus are closed.
   *
   * @returns {boolean}
   */
  isAllSubMenusClosed() {
    return Object.keys(this.hotSubMenus).length === 0;
  }
  /**
   * Focus the menu so all keyboard shortcuts become active.
   */
  focus() {
    this.isOpened() && (this.hotMenu.rootElement.focus({
      preventScroll: !0
    }), this.getKeyboardShortcutsCtrl().listen(), this.hotMenu.listen());
  }
  /**
   * Destroy instance.
   */
  destroy() {
    const e = this.container.parentNode;
    this.clearLocalHooks(), this.close(), this.parentMenu = null, this.eventManager.destroy(), e && e.removeChild(this.container);
  }
  /**
   * Checks if menu was opened.
   *
   * @returns {boolean} Returns `true` if menu was opened.
   */
  isOpened() {
    return this.hotMenu !== null;
  }
  /**
   * Execute menu command.
   *
   * The `executeCommand()` method works only for selected cells.
   *
   * When no cells are selected, `executeCommand()` doesn't do anything.
   *
   * @param {Event} [event] The mouse event object.
   */
  executeCommand(e) {
    if (!this.isOpened() || !this.hasSelectedItem())
      return;
    const n = this.getSelectedItem();
    if (this.runLocalHooks("select", n, e), this.isCommandPassive(n))
      return;
    const r = this.hot.getSelectedRange(), i = r ? dZ(r) : [];
    this.runLocalHooks("executeCommand", n.key, i, e), this.isSubMenu() && this.parentMenu.runLocalHooks("executeCommand", n.key, i, e);
  }
  /**
   * Checks if the passed command is passive or not. The command is passive when it's marked as
   * disabled, the descriptor object contains `isCommand` property set to `false`, command
   * is a separator, or the item is recognized as submenu. For passive items the menu is not
   * closed automatically after the user trigger the command through the UI.
   *
   * @param {object} commandDescriptor Selected menu item from the menu data source.
   * @returns {boolean}
   */
  isCommandPassive(e) {
    return e.isCommand === !1 || nv(e) || lf(e, this.hot) || tv(e);
  }
  /**
   * Set offset menu position for specified area (`above`, `below`, `left` or `right`).
   *
   * @param {string} area Specified area name (`above`, `below`, `left` or `right`).
   * @param {number} offset Offset value.
   */
  setOffset(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    this.positioner.setOffset(e, n);
  }
  /**
   * Set menu position based on dom event or based on literal object.
   *
   * @param {Event|object} coords Event or literal Object with coordinates.
   */
  setPosition(e) {
    this.isSubMenu() && this.positioner.setParentElement(this.parentMenu.container), this.positioner.setElement(this.container).updatePosition(e);
  }
  /**
   * Create container/wrapper for handsontable.
   *
   * @private
   * @param {string} [name] Class name.
   * @returns {HTMLElement}
   */
  createContainer() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    const n = this.options.container.ownerDocument;
    let r = e, i;
    return r && (At(r) && (r = r.call(this.hot), r === null || It(r) ? r = "" : r = r.toString()), r = r.replace(/[^A-z0-9]/g, "_"), r = `${this.options.className}Sub_${r}`, i = n.querySelector(`.${this.options.className}.${r}`)), i || (i = n.createElement("div"), ce(i, `htMenu ${this.options.className}`), r && ce(i, r), this.options.container.appendChild(i)), i;
  }
  /**
   * On after init listener.
   *
   * @private
   */
  onAfterInit() {
    const {
      wtTable: e
    } = this.hotMenu.view._wt, n = this.hotMenu.getSettings().data, r = e.hider.style, i = e.holder.style, o = parseInt(r.width, 10), s = nn(n, (a, l) => a + (l.name === et ? 1 : 26), 0);
    i.width = `${o + 3}px`, i.height = `${s + 3}px`, r.height = i.height, this.hot.getSettings().ariaTags && Ne(this.hotMenu.rootElement, [WY(), Kl(-1)]);
  }
  /**
   * Document mouse down listener.
   *
   * @private
   * @param {Event} event The mouse event object.
   */
  onDocumentMouseDown(e) {
    this.isOpened() && (this.options.standalone && this.hotMenu && !vs(e.target, this.hotMenu.rootElement) ? this.close(!0) : (this.isAllSubMenusClosed() || this.isSubMenu()) && !vs(e.target, ".htMenu") && this.close(!0));
  }
  /**
   * Document's contextmenu listener.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onDocumentContextMenu(e) {
    this.isOpened() && Ve(e.target, "htCore") && vs(e.target, this.hotMenu.rootElement) && e.preventDefault();
  }
}
_t(eu, pr);
function hd(t, e) {
  IZ(t, e), e.add(t);
}
function IZ(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Vp(t, e, n) {
  return e = PZ(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function PZ(t) {
  var e = xZ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function xZ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function dd(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const tc = "contextMenu", HZ = 70, YT = tc;
_e.getSingleton().register("afterContextMenuDefaultOptions");
_e.getSingleton().register("beforeContextMenuShow");
_e.getSingleton().register("afterContextMenuShow");
_e.getSingleton().register("afterContextMenuHide");
_e.getSingleton().register("afterContextMenuExecute");
var GT = /* @__PURE__ */ new WeakSet(), zT = /* @__PURE__ */ new WeakSet(), jT = /* @__PURE__ */ new WeakSet(), KT = /* @__PURE__ */ new WeakSet();
class um extends gt {
  constructor() {
    super(...arguments), hd(this, KT), hd(this, jT), hd(this, zT), hd(this, GT), Vp(this, "commandExecutor", new PH(this.hot)), Vp(this, "itemsFactory", null), Vp(this, "menu", null);
  }
  static get PLUGIN_KEY() {
    return tc;
  }
  static get PLUGIN_PRIORITY() {
    return HZ;
  }
  static get PLUGIN_DEPS() {
    return ["plugin:AutoColumnSize"];
  }
  /**
   * Context menu default items order when `contextMenu` options is set as `true`.
   *
   * @returns {string[]}
   */
  static get DEFAULT_ITEMS() {
    return [om, sm, et, ah, lh, et, im, ch, et, am, rm, et, uh, et, Wr];
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ContextMenu#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[tc];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const n = this.hot.getSettings()[tc];
    typeof n.callback == "function" && this.commandExecutor.setCommonCallback(n.callback), this.menu = new eu(this.hot, {
      className: "htContextMenu",
      keepInViewport: !0,
      container: n.uiContainer || this.hot.rootDocument.body
    }), this.menu.addLocalHook("beforeOpen", () => dd(this, zT, NZ).call(this)), this.menu.addLocalHook("afterOpen", () => dd(this, jT, LZ).call(this)), this.menu.addLocalHook("afterClose", () => dd(this, KT, $Z).call(this)), this.menu.addLocalHook("executeCommand", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return e.executeCommand.call(e, ...i);
    }), this.addHook("afterOnCellContextMenu", (r) => dd(this, GT, DZ).call(this, r)), this.registerShortcuts(), super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`contextMenu`](@/api/options.md#contextmenu)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.close(), this.menu && (this.menu.destroy(), this.menu = null), this.unregisterShortcuts(), super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for toggling context menu.
   *
   * @private
   */
  registerShortcuts() {
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Control/Meta", "Shift", "Backslash"], ["Shift", "F10"]],
      callback: () => {
        const {
          highlight: e
        } = this.hot.getSelectedRangeLast();
        this.hot.scrollToFocusedCell();
        const n = this.hot.getCell(e.row, e.col, !0).getBoundingClientRect(), r = tm(this.menu.container, this.hot.rootDocument);
        this.open({
          left: n.left + r.left,
          top: n.top + r.top - 1 + n.height
        }, {
          left: n.width,
          above: -n.height
        }), this.menu.getNavigator().toFirstItem();
      },
      runOnlyIf: () => {
        var e;
        const n = (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
        return n && this.hot.selection.isCellVisible(n) && !this.menu.isOpened();
      },
      group: YT
    });
  }
  /**
   * Unregister shortcuts responsible for toggling context menu.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(YT);
  }
  /**
   * Opens menu and re-position it based on the passed coordinates.
   *
   * @param {{ top: number, left: number }|Event} position An object with `top` and `left` properties
   * which contains coordinates relative to the browsers viewport (without included scroll offsets).
   * Or if the native event is passed the menu will be positioned based on the `pageX` and `pageY`
   * coordinates.
   * @param {{ above: number, below: number, left: number, right: number }} offset An object allows applying
   * the offset to the menu position.
   * @fires Hooks#beforeContextMenuShow
   * @fires Hooks#afterContextMenuShow
   */
  open(e) {
    var n;
    let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      above: 0,
      below: 0,
      left: 0,
      right: 0
    };
    (n = this.menu) !== null && n !== void 0 && n.isOpened() || (this.prepareMenuItems(), this.menu.open(), Ze(r, (i, o) => {
      this.menu.setOffset(o, i);
    }), this.menu.setPosition(e));
  }
  /**
   * Closes the menu.
   */
  close() {
    var e;
    (e = this.menu) === null || e === void 0 || e.close(), this.itemsFactory = null;
  }
  /**
   * Execute context menu command.
   *
   * The `executeCommand()` method works only for selected cells.
   *
   * When no cells are selected, `executeCommand()` doesn't do anything.
   *
   * You can execute all predefined commands:
   *  * `'row_above'` - Insert row above
   *  * `'row_below'` - Insert row below
   *  * `'col_left'` - Insert column left
   *  * `'col_right'` - Insert column right
   *  * `'clear_column'` - Clear selected column
   *  * `'remove_row'` - Remove row
   *  * `'remove_col'` - Remove column
   *  * `'undo'` - Undo last action
   *  * `'redo'` - Redo last action
   *  * `'make_read_only'` - Make cell read only
   *  * `'alignment:left'` - Alignment to the left
   *  * `'alignment:top'` - Alignment to the top
   *  * `'alignment:right'` - Alignment to the right
   *  * `'alignment:bottom'` - Alignment to the bottom
   *  * `'alignment:middle'` - Alignment to the middle
   *  * `'alignment:center'` - Alignment to the center (justify).
   *
   * Or you can execute command registered in settings where `key` is your command name.
   *
   * @param {string} commandName The command name to be executed.
   * @param {*} params Additional parameters passed to command executor module.
   */
  executeCommand(e) {
    this.itemsFactory === null && this.prepareMenuItems();
    for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++)
      r[i - 1] = arguments[i];
    this.commandExecutor.execute(e, ...r);
  }
  /**
   * Prepares available contextMenu's items list and registers them in commandExecutor.
   *
   * @private
   * @fires Hooks#afterContextMenuDefaultOptions
   * @fires Hooks#beforeContextMenuSetItems
   */
  prepareMenuItems() {
    this.itemsFactory = new xH(this.hot, um.DEFAULT_ITEMS);
    const e = this.hot.getSettings()[tc], n = {
      items: this.itemsFactory.getItems(e)
    };
    this.hot.runHooks("afterContextMenuDefaultOptions", n), this.itemsFactory.setPredefinedItems(n.items);
    const r = this.itemsFactory.getItems(e);
    this.hot.runHooks("beforeContextMenuSetItems", r), this.menu.setMenuItems(r), H(r, (i) => this.commandExecutor.registerCommand(i.key, i));
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.close(), this.menu && this.menu.destroy(), super.destroy();
  }
}
function DZ(t) {
  const e = this.hot.getSettings(), n = e.rowHeaders, r = e.colHeaders;
  function i(a) {
    return a.nodeName === "TD" || a.parentNode.nodeName === "TD";
  }
  const o = t.target;
  if (this.close(), Ve(o, "handsontableInput") || (t.preventDefault(), t.stopPropagation(), !(n || r) && !i(o) && !(Ve(o, "current") && Ve(o, "wtBorder"))))
    return;
  const s = tm(this.menu.container, this.hot.rootDocument);
  this.open({
    top: t.clientY + s.top,
    left: t.clientX + s.left
  });
}
function NZ() {
  this.hot.runHooks("beforeContextMenuShow", this);
}
function LZ() {
  this.hot.runHooks("afterContextMenuShow", this);
}
function $Z() {
  this.hot.listen(), this.hot.runHooks("afterContextMenuHide", this);
}
um.SEPARATOR = {
  name: et
};
function kZ(t) {
  return {
    key: "copy",
    name() {
      return this.getTranslatedPhrase(py);
    },
    callback() {
      t.copyCellsOnly();
    },
    disabled() {
      if (this.countRows() === 0 || this.countCols() === 0)
        return !0;
      const e = this.getSelectedRangeLast();
      if (!e || e.isSingleHeader())
        return !0;
      const n = this.getSelected();
      return !n || n.length > 1;
    },
    hidden: !1
  };
}
function FZ(t) {
  return {
    key: "copy_column_headers_only",
    name() {
      const e = this.getSelectedRangeLast(), n = e ? mr(e.getWidth() - 1, 0, 1) : 0;
      return this.getTranslatedPhrase(vy, n);
    },
    callback() {
      t.copyColumnHeadersOnly();
    },
    disabled() {
      if (!this.hasColHeaders())
        return !0;
      const e = this.getSelectedRangeLast();
      if (!e || e.isSingleHeader())
        return !0;
      const n = this.getSelected();
      return !n || n.length > 1;
    },
    hidden: !1
  };
}
function WZ(t) {
  return {
    key: "copy_with_column_group_headers",
    name() {
      const e = this.getSelectedRangeLast(), n = e ? mr(e.getWidth() - 1, 0, 1) : 0;
      return this.getTranslatedPhrase(Cy, n);
    },
    callback() {
      t.copyWithAllColumnHeaders();
    },
    disabled() {
      if (!this.hasColHeaders() || !this.getSettings().nestedHeaders)
        return !0;
      const e = this.getSelectedRangeLast();
      if (!e || e.isSingleHeader())
        return !0;
      const n = this.getSelected();
      return !n || n.length > 1;
    },
    hidden: !1
  };
}
function VZ(t) {
  return {
    key: "copy_with_column_headers",
    name() {
      const e = this.getSelectedRangeLast(), n = e ? mr(e.getWidth() - 1, 0, 1) : 0;
      return this.getTranslatedPhrase(wy, n);
    },
    callback() {
      t.copyWithColumnHeaders();
    },
    disabled() {
      if (!this.hasColHeaders())
        return !0;
      const e = this.getSelectedRangeLast();
      if (!e || e.isSingleHeader())
        return !0;
      const n = this.getSelected();
      return !n || n.length > 1;
    },
    hidden: !1
  };
}
function BZ(t) {
  return {
    key: "cut",
    name() {
      return this.getTranslatedPhrase(Sy);
    },
    callback() {
      t.cut();
    },
    disabled() {
      if (this.countRows() === 0 || this.countCols() === 0)
        return !0;
      const e = this.getSelectedRangeLast();
      if (!e || e.isSingleHeader())
        return !0;
      const n = this.getSelected();
      return !n || n.length > 1;
    },
    hidden: !1
  };
}
class UZ {
  constructor() {
    this.data = {};
  }
  setData(e, n) {
    this.data[e] = n;
  }
  getData(e) {
    return this.data[e] || void 0;
  }
}
class YZ {
  constructor() {
    this.clipboardData = new UZ();
  }
}
function XT(t, e) {
  kH(t, e), e.add(t);
}
function Qa(t, e, n) {
  kH(t, e), e.set(t, n);
}
function kH(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function fd(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function Xn(t, e) {
  var n = FH(t, e, "get");
  return GZ(t, n);
}
function GZ(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function Ja(t, e, n) {
  var r = FH(t, e, "set");
  return zZ(t, r, n), n;
}
function FH(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function zZ(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var Qo = /* @__PURE__ */ new WeakMap(), Bp = /* @__PURE__ */ new WeakMap(), Pu = /* @__PURE__ */ new WeakMap(), rv = /* @__PURE__ */ new WeakMap(), iv = /* @__PURE__ */ new WeakMap(), xu = /* @__PURE__ */ new WeakMap(), gd = /* @__PURE__ */ new WeakSet(), qT = /* @__PURE__ */ new WeakSet();
class jZ {
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @param {{
   *   countRows: function(): number,
   *   countColumns: function(): number,
   *   rowsLimit: function(): number,
   *   columnsLimit: function(): number,
   *   countColumnHeaders: function(): number
   * }} dependencies The utils class dependencies.
   */
  constructor(e) {
    let {
      countRows: n,
      countColumns: r,
      rowsLimit: i,
      columnsLimit: o,
      countColumnHeaders: s
    } = e;
    XT(this, qT), XT(this, gd), Qa(this, Qo, {
      writable: !0,
      value: void 0
    }), Qa(this, Bp, {
      writable: !0,
      value: void 0
    }), Qa(this, Pu, {
      writable: !0,
      value: void 0
    }), Qa(this, rv, {
      writable: !0,
      value: void 0
    }), Qa(this, iv, {
      writable: !0,
      value: void 0
    }), Qa(this, xu, {
      writable: !0,
      value: void 0
    }), Ja(this, Bp, n), Ja(this, Pu, r), Ja(this, rv, i), Ja(this, iv, o), Ja(this, xu, s);
  }
  /* eslint-enable jsdoc/require-description-complete-sentence */
  /**
   * Sets the selection range to be processed.
   *
   * @param {CellRange} selectedRange The selection range represented by the CellRange class.
   */
  setSelectedRange(e) {
    Ja(this, Qo, e);
  }
  /**
   * Returns a new coords object within the dataset range (cells) with `startRow`, `startCol`, `endRow`
   * and `endCol` keys.
   *
   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
   */
  getCellsRange() {
    if (Xn(this, Bp).call(this) === 0 || Xn(this, Pu).call(this) === 0)
      return null;
    const {
      row: e,
      col: n
    } = Xn(this, Qo).getTopStartCorner(), {
      row: r,
      col: i
    } = Xn(this, Qo).getBottomEndCorner(), o = fd(this, qT, KZ).call(this, e, r), s = fd(this, gd, Up).call(this, n, i);
    return {
      isRangeTrimmed: r !== o || i !== s,
      startRow: e,
      startCol: n,
      endRow: o,
      endCol: s
    };
  }
  /**
   * Returns a new coords object within the most-bottom column headers range with `startRow`,
   * `startCol`, `endRow` and `endCol` keys.
   *
   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
   */
  getMostBottomColumnHeadersRange() {
    if (Xn(this, Pu).call(this) === 0 || Xn(this, xu).call(this) === 0)
      return null;
    const {
      col: e
    } = Xn(this, Qo).getTopStartCorner(), {
      col: n
    } = Xn(this, Qo).getBottomEndCorner(), r = fd(this, gd, Up).call(this, e, n);
    return {
      isRangeTrimmed: n !== r,
      startRow: -1,
      startCol: e,
      endRow: -1,
      endCol: r
    };
  }
  /**
   * Returns a new coords object within all column headers layers (including nested headers) range with
   * `startRow`, `startCol`, `endRow` and `endCol` keys.
   *
   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
   */
  getAllColumnHeadersRange() {
    if (Xn(this, Pu).call(this) === 0 || Xn(this, xu).call(this) === 0)
      return null;
    const {
      col: e
    } = Xn(this, Qo).getTopStartCorner(), {
      col: n
    } = Xn(this, Qo).getBottomEndCorner(), r = fd(this, gd, Up).call(this, e, n);
    return {
      isRangeTrimmed: n !== r,
      startRow: -Xn(this, xu).call(this),
      startCol: e,
      endRow: -1,
      endCol: r
    };
  }
}
function Up(t, e) {
  return Math.min(e, Math.max(t + Xn(this, iv).call(this) - 1, t));
}
function KZ(t, e) {
  return Math.min(e, Math.max(t + Xn(this, rv).call(this) - 1, t));
}
function WH(t) {
  const e = [], n = [];
  return H(t, (r) => {
    const i = Math.min(r.startRow, r.endRow), o = Math.max(r.startRow, r.endRow);
    xe(i, o, (l) => {
      e.indexOf(l) === -1 && e.push(l);
    });
    const s = Math.min(r.startCol, r.endCol), a = Math.max(r.startCol, r.endCol);
    xe(s, a, (l) => {
      n.indexOf(l) === -1 && n.push(l);
    });
  }), {
    rows: e,
    columns: n
  };
}
function lo(t, e) {
  VH(t, e), e.add(t);
}
function qs(t, e, n) {
  VH(t, e), e.set(t, n);
}
function VH(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Hu(t, e, n) {
  return e = XZ(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function XZ(t) {
  var e = qZ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function qZ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Cr(t, e) {
  var n = BH(t, e, "get");
  return ZZ(t, n);
}
function ZZ(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function ci(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function uo(t, e, n) {
  var r = BH(t, e, "set");
  return QZ(t, r, n), n;
}
function BH(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function QZ(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
_e.getSingleton().register("afterCopyLimit");
_e.getSingleton().register("modifyCopyableRange");
_e.getSingleton().register("beforeCut");
_e.getSingleton().register("afterCut");
_e.getSingleton().register("beforePaste");
_e.getSingleton().register("afterPaste");
_e.getSingleton().register("beforeCopy");
_e.getSingleton().register("afterCopy");
const md = "copyPaste", JZ = 80, eQ = ["fragmentSelection"], ZT = ['<meta name="generator" content="Handsontable"/>', '<style type="text/css">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join("");
var ov = /* @__PURE__ */ new WeakMap(), sv = /* @__PURE__ */ new WeakMap(), av = /* @__PURE__ */ new WeakMap(), el = /* @__PURE__ */ new WeakMap(), pd = /* @__PURE__ */ new WeakMap(), wd = /* @__PURE__ */ new WeakMap(), tl = /* @__PURE__ */ new WeakMap(), Yp = /* @__PURE__ */ new WeakSet(), QT = /* @__PURE__ */ new WeakSet(), UH = /* @__PURE__ */ new WeakSet(), zb = /* @__PURE__ */ new WeakSet(), JT = /* @__PURE__ */ new WeakSet(), e_ = /* @__PURE__ */ new WeakSet(), t_ = /* @__PURE__ */ new WeakSet(), n_ = /* @__PURE__ */ new WeakSet(), r_ = /* @__PURE__ */ new WeakSet();
class tQ extends gt {
  constructor() {
    super(...arguments), lo(this, r_), lo(this, n_), lo(this, t_), lo(this, e_), lo(this, JT), lo(this, zb), lo(this, UH), lo(this, QT), lo(this, Yp), Hu(this, "columnsLimit", 1 / 0), Hu(this, "rowsLimit", 1 / 0), Hu(this, "pasteMode", "overwrite"), Hu(this, "uiContainer", this.hot.rootDocument.body), qs(this, ov, {
      writable: !0,
      value: !1
    }), qs(this, sv, {
      writable: !0,
      value: !1
    }), qs(this, av, {
      writable: !0,
      value: !1
    }), qs(this, el, {
      writable: !0,
      value: "cells-only"
    }), qs(this, pd, {
      writable: !0,
      value: !1
    }), qs(this, wd, {
      writable: !0,
      value: !1
    }), qs(this, tl, {
      writable: !0,
      value: new jZ({
        countRows: () => this.hot.countRows(),
        countColumns: () => this.hot.countCols(),
        rowsLimit: () => this.rowsLimit,
        columnsLimit: () => this.columnsLimit,
        countColumnHeaders: () => this.hot.view.getColumnHeadersCount()
      })
    }), Hu(this, "copyableRanges", []);
  }
  static get PLUGIN_KEY() {
    return md;
  }
  static get SETTING_KEYS() {
    return [md, ...eQ];
  }
  static get PLUGIN_PRIORITY() {
    return JZ;
  }
  /**
   * Checks if the [`CopyPaste`](#copypaste) plugin is enabled.
   *
   * This method gets called by Handsontable's [`beforeInit`](@/api/hooks.md#beforeinit) hook.
   * If it returns `true`, the [`enablePlugin()`](#enableplugin) method gets called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[md];
  }
  /**
   * Enables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const {
      [md]: n
    } = this.hot.getSettings();
    if (typeof n == "object") {
      var r, i;
      this.pasteMode = (r = n.pasteMode) !== null && r !== void 0 ? r : this.pasteMode, this.rowsLimit = isNaN(n.rowsLimit) ? this.rowsLimit : n.rowsLimit, this.columnsLimit = isNaN(n.columnsLimit) ? this.columnsLimit : n.columnsLimit, uo(this, ov, !!n.copyColumnHeaders), uo(this, sv, !!n.copyColumnGroupHeaders), uo(this, av, !!n.copyColumnHeadersOnly), this.uiContainer = (i = n.uiContainer) !== null && i !== void 0 ? i : this.uiContainer;
    }
    this.addHook("afterContextMenuDefaultOptions", (o) => ci(this, JT, iQ).call(this, o)), this.addHook("afterSelectionEnd", () => ci(this, e_, oQ).call(this)), this.eventManager.addEventListener(this.hot.rootDocument, "copy", function() {
      return e.onCopy(...arguments);
    }), this.eventManager.addEventListener(this.hot.rootDocument, "cut", function() {
      return e.onCut(...arguments);
    }), this.eventManager.addEventListener(this.hot.rootDocument, "paste", function() {
      return e.onPaste(...arguments);
    }), SS() && (this.eventManager.addEventListener(this.hot.rootDocument.body, "mouseenter", function() {
      for (var o = arguments.length, s = new Array(o), a = 0; a < o; a++)
        s[a] = arguments[a];
      return ci(e, t_, sQ).call(e, ...s);
    }), this.eventManager.addEventListener(this.hot.rootDocument.body, "mouseleave", function() {
      for (var o = arguments.length, s = new Array(o), a = 0; a < o; a++)
        s[a] = arguments[a];
      return ci(e, n_, aQ).call(e, ...s);
    }), this.addHook("afterSelection", () => ci(this, r_, lQ).call(this))), super.enablePlugin();
  }
  /**
   * Updates the state of the [`CopyPaste`](#copypaste) plugin.
   *
   * Gets called when [`updateSettings()`](@/api/core.md#updatesettings)
   * is invoked with any of the following configuration options:
   *  - [`copyPaste`](@/api/options.md#copypaste)
   *  - [`fragmentSelection`](@/api/options.md#fragmentselection)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
  }
  /**
   * Copies the contents of the selected cells (and/or their related column headers) to the system clipboard.
   *
   * Takes an optional parameter (`copyMode`) that defines the scope of copying:
   *
   * | `copyMode` value              | Description                                                     |
   * | ----------------------------- | --------------------------------------------------------------- |
   * | `'cells-only'` (default)      | Copy the selected cells                                         |
   * | `'with-column-headers'`       | - Copy the selected cells<br>- Copy the nearest column headers  |
   * | `'with-column-group-headers'` | - Copy the selected cells<br>- Copy all related columns headers |
   * | `'column-headers-only'`       | Copy the nearest column headers (without copying cells)         |
   *
   * @param {string} [copyMode='cells-only'] Copy mode.
   */
  copy() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "cells-only";
    uo(this, el, e), uo(this, pd, !0), ci(this, Yp, i_).call(this, "copy");
  }
  /**
   * Copies the contents of the selected cells.
   */
  copyCellsOnly() {
    this.copy("cells-only");
  }
  /**
   * Copies the contents of column headers that are nearest to the selected cells.
   */
  copyColumnHeadersOnly() {
    this.copy("column-headers-only");
  }
  /**
   * Copies the contents of the selected cells and all their related column headers.
   */
  copyWithAllColumnHeaders() {
    this.copy("with-column-group-headers");
  }
  /**
   * Copies the contents of the selected cells and their nearest column headers.
   */
  copyWithColumnHeaders() {
    this.copy("with-column-headers");
  }
  /**
   * Cuts the contents of the selected cells to the system clipboard.
   */
  cut() {
    uo(this, wd, !0), ci(this, Yp, i_).call(this, "cut");
  }
  /**
   * Converts the contents of multiple ranges (`ranges`) into a single string.
   *
   * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.
   * @returns {string} A string that will be copied to the clipboard.
   */
  getRangedCopyableData(e) {
    return cc(this.getRangedData(e));
  }
  /**
   * Converts the contents of multiple ranges (`ranges`) into an array of arrays.
   *
   * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.
   * @returns {Array[]} An array of arrays that will be copied to the clipboard.
   */
  getRangedData(e) {
    const n = [], {
      rows: r,
      columns: i
    } = WH(e);
    return H(r, (o) => {
      const s = [];
      H(i, (a) => {
        o < 0 ? s.push(this.hot.getColHeader(a, o)) : s.push(this.hot.getCopyableData(o, a));
      }), n.push(s);
    }), n;
  }
  /**
   * Simulates the paste action.
   *
   * For security reasons, modern browsers don't allow reading from the system clipboard.
   *
   * @param {string} pastableText The value to paste, as a raw string.
   * @param {string} [pastableHtml=''] The value to paste, as HTML.
   */
  paste() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e;
    if (!e && !n)
      return;
    const r = new YZ();
    e && r.clipboardData.setData("text/plain", e), n && r.clipboardData.setData("text/html", n), this.onPaste(r);
  }
  /**
   * Prepares copyable text from the cells selection in the invisible textarea.
   */
  setCopyableText() {
    const e = this.hot.getSelectedRangeLast();
    if (!e)
      return;
    if (e.isSingleHeader()) {
      this.copyableRanges = [];
      return;
    }
    Cr(this, tl).setSelectedRange(e);
    const n = /* @__PURE__ */ new Map([["headers", null], ["cells", null]]);
    Cr(this, el) === "column-headers-only" ? n.set("headers", Cr(this, tl).getMostBottomColumnHeadersRange()) : (Cr(this, el) === "with-column-headers" ? n.set("headers", Cr(this, tl).getMostBottomColumnHeadersRange()) : Cr(this, el) === "with-column-group-headers" && n.set("headers", Cr(this, tl).getAllColumnHeadersRange()), n.set("cells", Cr(this, tl).getCellsRange())), this.copyableRanges = Array.from(n.values()).filter((i) => i !== null).map((i) => {
      let {
        startRow: o,
        startCol: s,
        endRow: a,
        endCol: l
      } = i;
      return {
        startRow: o,
        startCol: s,
        endRow: a,
        endCol: l
      };
    }), this.copyableRanges = this.hot.runHooks("modifyCopyableRange", this.copyableRanges);
    const r = n.get("cells");
    if (r !== null && r.isRangeTrimmed) {
      const {
        startRow: i,
        startCol: o,
        endRow: s,
        endCol: a
      } = r;
      this.hot.runHooks("afterCopyLimit", s - i + 1, a - o + 1, this.rowsLimit, this.columnsLimit);
    }
  }
  /**
   * Verifies if editor exists and is open.
   *
   * @private
   * @returns {boolean}
   */
  isEditorOpened() {
    var e;
    return (e = this.hot.getActiveEditor()) === null || e === void 0 ? void 0 : e.isOpened();
  }
  /**
   * Prepares new values to populate them into datasource.
   *
   * @private
   * @param {Array} inputArray An array of the data to populate.
   * @param {Array} [selection] The selection which indicates from what position the data will be populated.
   * @returns {Array} Range coordinates after populate data.
   */
  populateValues(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.hot.getSelectedRangeLast();
    if (!e.length)
      return;
    const r = e.length, i = e[0].length, o = [], {
      row: s,
      col: a
    } = n.getTopStartCorner(), {
      row: l,
      col: u
    } = n.getBottomEndCorner();
    let c = s, d = a, g = s, p = a;
    for (; o.length < r || c <= l; ) {
      const {
        skipRowOnPaste: C,
        visualRow: E
      } = this.hot.getCellMeta(c, a);
      if (c = E + 1, C === !0)
        continue;
      g = E, d = a;
      const I = [], M = o.length % r;
      for (; I.length < i || d <= u; ) {
        const {
          skipColumnOnPaste: y,
          visualCol: $
        } = this.hot.getCellMeta(s, d);
        if (d = $ + 1, y === !0)
          continue;
        p = $;
        const X = I.length % i;
        I.push(e[M][X]);
      }
      o.push(I);
    }
    return this.hot.populateFromArray(s, a, o, void 0, void 0, "CopyPaste.paste", this.pasteMode), [s, a, g, p];
  }
  /**
   * `copy` event callback on textarea element.
   *
   * @param {Event} event ClipboardEvent.
   * @private
   */
  onCopy(e) {
    if (!this.hot.isListening() && !Cr(this, pd) || this.isEditorOpened())
      return;
    this.setCopyableText(), uo(this, pd, !1);
    const n = this.getRangedData(this.copyableRanges), r = ci(this, QT, nQ).call(this, this.copyableRanges);
    if (!!this.hot.runHooks("beforeCopy", n, this.copyableRanges, r)) {
      const o = cc(n);
      if (e && e.clipboardData) {
        const s = NC(n, this.hot.rootDocument);
        e.clipboardData.setData("text/plain", o), e.clipboardData.setData("text/html", [ZT, s].join(""));
      } else
        typeof ClipboardEvent > "u" && this.hot.rootWindow.clipboardData.setData("Text", o);
      this.hot.runHooks("afterCopy", n, this.copyableRanges, r);
    }
    uo(this, el, "cells-only"), e.preventDefault();
  }
  /**
   * `cut` event callback on textarea element.
   *
   * @param {Event} event ClipboardEvent.
   * @private
   */
  onCut(e) {
    if (!this.hot.isListening() && !Cr(this, wd) || this.isEditorOpened())
      return;
    this.setCopyableText(), uo(this, wd, !1);
    const n = this.getRangedData(this.copyableRanges);
    if (!!this.hot.runHooks("beforeCut", n, this.copyableRanges)) {
      const i = cc(n);
      if (e && e.clipboardData) {
        const o = NC(n, this.hot.rootDocument);
        e.clipboardData.setData("text/plain", i), e.clipboardData.setData("text/html", [ZT, o].join(""));
      } else
        typeof ClipboardEvent > "u" && this.hot.rootWindow.clipboardData.setData("Text", i);
      this.hot.emptySelectedCells("CopyPaste.cut"), this.hot.runHooks("afterCut", n, this.copyableRanges);
    }
    e.preventDefault();
  }
  /**
   * `paste` event callback on textarea element.
   *
   * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.
   * @private
   */
  onPaste(e) {
    if (!this.hot.isListening() || this.isEditorOpened() || !this.hot.getSelected())
      return;
    e && e.preventDefault && e.preventDefault();
    let n;
    if (e && typeof e.clipboardData < "u") {
      const a = Hg(e.clipboardData.getData("text/html"), {
        ADD_TAGS: ["meta"],
        ADD_ATTR: ["content"],
        FORCE_BODY: !0
      });
      a && /(<table)|(<TABLE)/g.test(a) ? n = AP(a, this.hot.rootDocument).data : n = e.clipboardData.getData("text/plain");
    } else
      typeof ClipboardEvent > "u" && typeof this.hot.rootWindow.clipboardData < "u" && (n = this.hot.rootWindow.clipboardData.getData("Text"));
    if (typeof n == "string" && (n = Pq(n)), n === void 0 || n && n.length === 0 || this.hot.runHooks("beforePaste", n, this.copyableRanges) === !1)
      return;
    const [r, i, o, s] = this.populateValues(n);
    this.hot.selectCell(r, i, Math.min(this.hot.countRows() - 1, o), Math.min(this.hot.countCols() - 1, s)), this.hot.runHooks("afterPaste", n, this.copyableRanges);
  }
  /**
   * Destroys the `CopyPaste` plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
function i_(t) {
  if (SS()) {
    const e = this.hot.getSelectedRangeLast();
    if (e) {
      const {
        row: n,
        col: r
      } = e.highlight, i = this.hot.getCell(n, r, !0);
      i && sP(i, () => {
        this.hot.rootDocument.execCommand(t);
      });
    }
  } else
    this.hot.rootDocument.execCommand(t);
}
function nQ(t) {
  const {
    rows: e
  } = WH(t);
  let n = 0;
  for (let r = 0; r < e.length && !(e[r] >= 0); r++)
    n += 1;
  return {
    columnHeadersCount: n
  };
}
function rQ() {
  if (this.hot.isListening()) {
    const t = this.hot.getSelectedRangeLast();
    if (t) {
      const {
        row: e,
        col: n
      } = t.highlight, r = this.hot.getCell(e, n, !0);
      r && pS(r);
    }
  }
}
function YH() {
  if (this.hot.isListening()) {
    const t = this.hot.getSelectedRangeLast();
    if (t) {
      const {
        row: e,
        col: n
      } = t.highlight, r = this.hot.getCell(e, n, !0);
      r != null && r.hasAttribute("contenteditable") && wS(r);
    }
  }
}
function iQ(t) {
  t.items.push({
    name: "---------"
  }, kZ(this)), Cr(this, ov) && t.items.push(VZ(this)), Cr(this, sv) && t.items.push(WZ(this)), Cr(this, av) && t.items.push(FZ(this)), t.items.push(BZ(this));
}
function oQ() {
  this.isEditorOpened() || this.hot.getSettings().fragmentSelection || this.setCopyableText();
}
function sQ() {
  ci(this, zb, YH).call(this);
}
function aQ() {
  ci(this, UH, rQ).call(this);
}
function lQ() {
  ci(this, zb, YH).call(this);
}
function GH(t, e) {
  return `border_row${t}col${e}`;
}
function nc() {
  return {
    width: 1,
    color: "#000"
  };
}
function Ao() {
  return {
    hide: !0
  };
}
function uQ() {
  return {
    width: 1,
    color: "#000",
    cornerVisible: !1
  };
}
function Gp(t) {
  if (Re(t.start) || Re(t.left)) {
    var e;
    t.start = (e = t.start) !== null && e !== void 0 ? e : t.left;
  }
  if (Re(t.end) || Re(t.right)) {
    var n;
    t.end = (n = t.end) !== null && n !== void 0 ? n : t.right;
  }
  return delete t.left, delete t.right, t;
}
function Du(t) {
  return Re(t.start) && (t.left = t.start), Re(t.end) && (t.right = t.end), t;
}
function zp(t, e) {
  return {
    id: GH(t, e),
    border: uQ(),
    row: t,
    col: e,
    top: Ao(),
    bottom: Ao(),
    start: Ao(),
    end: Ao()
  };
}
function cQ(t, e) {
  return Vt(e, "border") && e.border && (t.border = e.border), Vt(e, "top") && Re(e.top) && (e.top ? (Xe(e.top) || (e.top = nc()), t.top = e.top) : (e.top = Ao(), t.top = e.top)), Vt(e, "bottom") && Re(e.bottom) && (e.bottom ? (Xe(e.bottom) || (e.bottom = nc()), t.bottom = e.bottom) : (e.bottom = Ao(), t.bottom = e.bottom)), Vt(e, "start") && Re(e.start) && (e.start ? (Xe(e.start) || (e.start = nc()), t.start = e.start) : (e.start = Ao(), t.start = e.start)), Vt(e, "end") && Re(e.end) && (e.end ? (Xe(e.end) || (e.end = nc()), t.end = e.end) : (e.end = Ao(), t.end = e.end)), t;
}
function Lo(t, e) {
  let n = !1;
  return H(t.getSelectedRange(), (r) => {
    r.forAll((i, o) => {
      if (i < 0 || o < 0)
        return;
      const s = t.getCellMeta(i, o).borders;
      if (s)
        if (e) {
          if (!Vt(s[e], "hide") || s[e].hide === !1)
            return n = !0, !1;
        } else
          return n = !0, !1;
    });
  }), n;
}
function cm(t) {
  return `<span class="selected">${String.fromCharCode(10003)}</span>${t}`;
}
function hQ(t) {
  return t.some((e) => Re(e.left) || Re(e.right));
}
function dQ(t) {
  return t.some((e) => Re(e.start) || Re(e.end));
}
const fQ = /* @__PURE__ */ new Map([["left", "start"], ["right", "end"]]);
function gQ(t) {
  var e;
  return (e = fQ.get(t)) !== null && e !== void 0 ? e : t;
}
function mQ(t) {
  return {
    key: "borders:bottom",
    name() {
      let e = this.getTranslatedPhrase(Wy);
      return Lo(this, "bottom") && (e = cm(e)), e;
    },
    callback(e, n) {
      const r = Lo(this, "bottom");
      t.prepareBorder(n, "bottom", r);
    }
  };
}
function pQ(t) {
  const e = t.hot.isRtl() ? "end" : "start";
  return {
    key: "borders:left",
    name() {
      let n = this.getTranslatedPhrase(Vy);
      return Lo(this, e) && (n = cm(n)), n;
    },
    callback(n, r) {
      const i = Lo(this, e);
      t.prepareBorder(r, e, i);
    }
  };
}
function wQ(t) {
  return {
    key: "borders:no_borders",
    name() {
      return this.getTranslatedPhrase(By);
    },
    callback(e, n) {
      t.prepareBorder(n, "noBorders");
    },
    disabled() {
      return !Lo(this);
    }
  };
}
function CQ(t) {
  const e = t.hot.isRtl() ? "start" : "end";
  return {
    key: "borders:right",
    name() {
      let n = this.getTranslatedPhrase(Fy);
      return Lo(this, e) && (n = cm(n)), n;
    },
    callback(n, r) {
      const i = Lo(this, e);
      t.prepareBorder(r, e, i);
    }
  };
}
function vQ(t) {
  return {
    key: "borders:top",
    name() {
      let e = this.getTranslatedPhrase(ky);
      return Lo(this, "top") && (e = cm(e)), e;
    },
    callback(e, n) {
      const r = Lo(this, "top");
      t.prepareBorder(n, "top", r);
    }
  };
}
function o_(t, e) {
  SQ(t, e), e.add(t);
}
function SQ(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function yQ(t, e, n) {
  return e = bQ(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function bQ(t) {
  var e = RQ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function RQ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function s_(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const uf = "customBorders", EQ = 90;
var a_ = /* @__PURE__ */ new WeakSet(), l_ = /* @__PURE__ */ new WeakSet();
class TQ extends gt {
  constructor() {
    super(...arguments), o_(this, l_), o_(this, a_), yQ(this, "savedBorders", []);
  }
  static get PLUGIN_KEY() {
    return uf;
  }
  static get PLUGIN_PRIORITY() {
    return EQ;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link CustomBorders#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[uf];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.addHook("afterContextMenuDefaultOptions", (e) => s_(this, a_, _Q).call(this, e)), this.addHook("init", () => s_(this, l_, MQ).call(this)), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hideBorders(), super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`customBorders`](@/api/options.md#customborders)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), this.changeBorderSettings(), super.updatePlugin();
  }
  /**
   * Set custom borders.
   *
   * @example
   * ```js
   * const customBordersPlugin = hot.getPlugin('customBorders');
   *
   * // Using an array of arrays (produced by `.getSelected()` method).
   * customBordersPlugin.setBorders([[1, 1, 2, 2], [6, 2, 0, 2]], {start: {width: 2, color: 'blue'}});
   *
   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
   * //  Selecting a cell range.
   * hot.selectCell(0, 0, 2, 2);
   * // Returning selected cells' range with the getSelectedRange method.
   * customBordersPlugin.setBorders(hot.getSelectedRange(), {start: {hide: false, width: 2, color: 'blue'}});
   * ```
   *
   * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
   * @param {object} borderObject Object with `top`, `right`, `bottom` and `start` properties.
   */
  setBorders(e, n) {
    let r = ["top", "bottom", "start", "end"], i = null;
    n && (this.checkSettingsCohesion([n]), r = Object.keys(n), i = Gp(n));
    const o = Bl(e), s = Lc(o, {
      createCellCoords: this.hot._createCellCoords.bind(this.hot),
      createCellRange: this.hot._createCellRange.bind(this.hot)
    });
    H(e, (a) => {
      s(a).forAll((l, u) => {
        H(r, (c) => {
          this.prepareBorderFromCustomAdded(l, u, i, gQ(c));
        });
      });
    }), this.hot.view.render();
  }
  /**
   * Get custom borders.
   *
   * @example
   * ```js
   * const customBordersPlugin = hot.getPlugin('customBorders');
   *
   * // Using an array of arrays (produced by `.getSelected()` method).
   * customBordersPlugin.getBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);
   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
   * customBordersPlugin.getBorders(hot.getSelectedRange());
   * // Using without param - return all customBorders.
   * customBordersPlugin.getBorders();
   * ```
   *
   * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
   * @returns {object[]} Returns array of border objects.
   */
  getBorders(e) {
    if (!Array.isArray(e))
      return this.savedBorders;
    const n = Bl(e), r = Lc(n, {
      createCellCoords: this.hot._createCellCoords.bind(this.hot),
      createCellRange: this.hot._createCellRange.bind(this.hot)
    }), i = [];
    return H(e, (o) => {
      r(o).forAll((s, a) => {
        H(this.savedBorders, (l) => {
          l.row === s && l.col === a && i.push(Du(l));
        });
      });
    }), i;
  }
  /**
   * Clear custom borders.
   *
   * @example
   * ```js
   * const customBordersPlugin = hot.getPlugin('customBorders');
   *
   * // Using an array of arrays (produced by `.getSelected()` method).
   * customBordersPlugin.clearBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);
   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
   * customBordersPlugin.clearBorders(hot.getSelectedRange());
   * // Using without param - clear all customBorders.
   * customBordersPlugin.clearBorders();
   * ```
   *
   * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
   */
  clearBorders(e) {
    e ? this.setBorders(e) : (H(this.savedBorders, (n) => {
      this.clearBordersFromSelectionSettings(n.id), this.clearNullCellRange(), this.hot.removeCellMeta(n.row, n.col, "borders");
    }), this.savedBorders.length = 0);
  }
  /**
   * Insert WalkontableSelection instance into Walkontable settings.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
   */
  insertBorderIntoSettings(e, n) {
    this.checkSavedBorders(e) || this.savedBorders.push(e);
    const i = this.hot._createCellRange(this.hot._createCellCoords(e.row, e.col));
    this.checkCustomSelections(e, i, n) || this.hot.selection.highlight.addCustomSelection({
      border: e,
      visualCellRange: i
    });
  }
  /**
   * Prepare borders from setting (single cell).
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} borderDescriptor Object with `row` and `col`, `start`, `end`, `top` and `bottom` properties.
   * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
   */
  prepareBorderFromCustomAdded(e, n, r, i) {
    const o = this.hot.countRows(), s = this.hot.countCols();
    if (e >= o || n >= s)
      return;
    let a = zp(e, n);
    r && (a = cQ(a, r), H(this.hot.selection.highlight.customSelections, (l) => {
      if (a.id === l.settings.id)
        return Object.assign(l.settings, r), a.id = l.settings.id, a.top = l.settings.top, a.bottom = l.settings.bottom, a.start = l.settings.start, a.end = l.settings.end, !1;
    })), this.hot.setCellMeta(e, n, "borders", Du(a)), this.insertBorderIntoSettings(a, i);
  }
  /**
   * Prepare borders from setting (object).
   *
   * @private
   * @param {object} range {CellRange} The CellRange object.
   * @param {object} customBorder Object with `start`, `end`, `top` and `bottom` properties.
   */
  prepareBorderFromCustomAddedRange(e, n) {
    const r = Math.min(e.to.row, this.hot.countRows() - 1), i = Math.min(e.to.col, this.hot.countCols() - 1);
    xe(e.from.row, r, (o) => {
      xe(e.from.col, i, (s) => {
        const a = zp(o, s);
        let l = 0;
        o === e.from.row && Vt(n, "top") && (l += 1, a.top = n.top), o === e.to.row && Vt(n, "bottom") && (l += 1, a.bottom = n.bottom), s === e.from.col && Vt(n, "start") && (l += 1, a.start = n.start), s === e.to.col && Vt(n, "end") && (l += 1, a.end = n.end), l > 0 && (this.hot.setCellMeta(o, s, "borders", Du(a)), this.insertBorderIntoSettings(a));
      });
    });
  }
  /**
   * Remove border (triggered from context menu).
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   */
  removeAllBorders(e, n) {
    const r = GH(e, n);
    this.spliceBorder(r), this.clearBordersFromSelectionSettings(r), this.clearNullCellRange(), this.hot.removeCellMeta(e, n, "borders");
  }
  /**
   * Set borders for each cell re. To border position.
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `start`, `end` and `noBorders`.
   * @param {boolean} remove True when remove borders, and false when add borders.
   */
  setBorder(e, n, r, i) {
    let o = this.hot.getCellMeta(e, n).borders;
    !o || o.border === void 0 ? o = zp(e, n) : o = Gp(o), i ? (o[r] = Ao(), this.countHide(o) === 4 ? this.removeAllBorders(e, n) : (this.checkCustomSelectionsFromContextMenu(o, r, i) || this.insertBorderIntoSettings(o), this.hot.setCellMeta(e, n, "borders", Du(o)))) : (o[r] = nc(), this.checkCustomSelectionsFromContextMenu(o, r, i) || this.insertBorderIntoSettings(o), this.hot.setCellMeta(e, n, "borders", Du(o)));
  }
  /**
   * Prepare borders based on cell and border position.
   *
   * @private
   * @param {CellRange[]} selected An array of CellRange objects.
   * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `left`, `right` and `noBorders`.
   * @param {boolean} remove True when remove borders, and false when add borders.
   */
  prepareBorder(e, n, r) {
    H(e, (i) => {
      let {
        start: o,
        end: s
      } = i;
      if (o.row === s.row && o.col === s.col)
        n === "noBorders" ? this.removeAllBorders(o.row, o.col) : this.setBorder(o.row, o.col, n, r);
      else
        switch (n) {
          case "noBorders":
            xe(o.col, s.col, (a) => {
              xe(o.row, s.row, (l) => {
                this.removeAllBorders(l, a);
              });
            });
            break;
          case "top":
            xe(o.col, s.col, (a) => {
              this.setBorder(o.row, a, n, r);
            });
            break;
          case "bottom":
            xe(o.col, s.col, (a) => {
              this.setBorder(s.row, a, n, r);
            });
            break;
          case "start":
            xe(o.row, s.row, (a) => {
              this.setBorder(a, o.col, n, r);
            });
            break;
          case "end":
            xe(o.row, s.row, (a) => {
              this.setBorder(a, s.col, n, r);
            });
            break;
        }
    });
  }
  /**
   * Create borders from settings.
   *
   * @private
   * @param {Array} customBorders Object with `row` and `col`, `start`, `end`, `top` and `bottom` properties.
   */
  createCustomBorders(e) {
    H(e, (n) => {
      const r = Gp(n);
      n.range ? this.prepareBorderFromCustomAddedRange(n.range, r) : this.prepareBorderFromCustomAdded(n.row, n.col, r);
    });
  }
  /**
   * Count hide property in border object.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   * @returns {number}
   */
  countHide(e) {
    const {
      top: n,
      bottom: r,
      start: i,
      end: o
    } = e;
    return nn([n, r, i, o], (a, l) => {
      let u = a;
      return l && l.hide && (u += 1), u;
    }, 0);
  }
  /**
   * Clear borders settings from custom selections.
   *
   * @private
   * @param {string} borderId Border id name as string.
   */
  clearBordersFromSelectionSettings(e) {
    const n = qe(this.hot.selection.highlight.customSelections, (r) => r.settings.id).indexOf(e);
    n > -1 && this.hot.selection.highlight.customSelections[n].clear();
  }
  /**
   * Clear cellRange with null value.
   *
   * @private
   */
  clearNullCellRange() {
    H(this.hot.selection.highlight.customSelections, (e, n) => {
      if (e.cellRange === null)
        return this.hot.selection.highlight.customSelections[n].destroy(), this.hot.selection.highlight.customSelections.splice(n, 1), !1;
    });
  }
  /**
   * Hide custom borders.
   *
   * @private
   */
  hideBorders() {
    H(this.savedBorders, (e) => {
      this.clearBordersFromSelectionSettings(e.id), this.clearNullCellRange();
    });
  }
  /**
   * Splice border from savedBorders.
   *
   * @private
   * @param {string} borderId Border id name as string.
   */
  spliceBorder(e) {
    const n = qe(this.savedBorders, (r) => r.id).indexOf(e);
    n > -1 && this.savedBorders.splice(n, 1);
  }
  /**
   * Check if an border already exists in the savedBorders array, and if true update border in savedBorders.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   *
   * @returns {boolean}
   */
  checkSavedBorders(e) {
    let n = !1;
    return this.countHide(e) === 4 ? (this.spliceBorder(e.id), n = !0) : H(this.savedBorders, (i, o) => {
      if (e.id === i.id)
        return this.savedBorders[o] = e, n = !0, !1;
    }), n;
  }
  /**
   * Check if an border already exists in the customSelections, and if true call toggleHiddenClass method.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `start`, `end` and `noBorders`.
   * @param {boolean} remove True when remove borders, and false when add borders.
   *
   * @returns {boolean}
   */
  checkCustomSelectionsFromContextMenu(e, n, r) {
    let i = !1;
    return H(this.hot.selection.highlight.customSelections, (o) => {
      if (e.id === o.settings.id) {
        const s = this.hot.view._wt.selectionManager.getBorderInstances(o);
        return H(s, (a) => {
          a.toggleHiddenClass(n, r);
        }), i = !0, !1;
      }
    }), i;
  }
  /**
   * Check if an border already exists in the customSelections, and if true reset cellRange.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   * @param {CellRange} cellRange The selection range to check.
   * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
   * @returns {boolean}
   */
  checkCustomSelections(e, n, r) {
    const i = this.countHide(e);
    let o = !1;
    return i === 4 ? (this.removeAllBorders(e.row, e.col), o = !0) : H(this.hot.selection.highlight.customSelections, (s) => {
      if (e.id === s.settings.id) {
        if (s.visualCellRange = n, s.commit(), r) {
          const a = this.hot.view._wt.selectionManager.getBorderInstances(s);
          H(a, (l) => {
            l.changeBorderStyle(r, e);
          });
        }
        return o = !0, !1;
      }
    }), o;
  }
  /**
   * Change borders from settings.
   *
   * @private
   */
  changeBorderSettings() {
    const e = this.hot.getSettings()[uf];
    if (Array.isArray(e)) {
      const n = Wn(e);
      this.checkSettingsCohesion(n), n.length || (this.savedBorders = n), this.createCustomBorders(n);
    } else
      e !== void 0 && this.createCustomBorders(this.savedBorders);
  }
  /**
   * Checks the settings cohesion. The properties such like "left"/"right" are supported only
   * in the LTR mode and the "left"/"right" options can not be used together with "start"/"end" properties.
   *
   * @private
   * @param {object[]} customBorders The user defined custom border objects array.
   */
  checkSettingsCohesion(e) {
    const n = hQ(e), r = dQ(e);
    if (n && r)
      throw new Error('The "left"/"right" and "start"/"end" options should not be used together. Please use only the option "start"/"end".');
    if (this.hot.isRtl() && n)
      throw new Error('The "left"/"right" properties are not supported for RTL. Please use option "start"/"end".');
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
function _Q(t) {
  this.hot.getSettings()[uf] && t.items.push({
    name: "---------"
  }, {
    key: "borders",
    name() {
      return this.getTranslatedPhrase($y);
    },
    disabled() {
      const e = this.getSelectedRangeLast();
      return !e || e.isSingleHeader() ? !0 : this.selection.isSelectedByCorner();
    },
    submenu: {
      items: [vQ(this), CQ(this), mQ(this), pQ(this), wQ(this)]
    }
  });
}
function MQ() {
  this.changeBorderSettings();
}
function OQ(t, e) {
  AQ(t, e), e.add(t);
}
function AQ(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function jp(t, e, n) {
  return e = IQ(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function IQ(t) {
  var e = PQ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function PQ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function u_(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const c_ = "dragToScroll", xQ = 100;
var Kp = /* @__PURE__ */ new WeakSet();
class HQ extends gt {
  constructor() {
    super(...arguments), OQ(this, Kp), jp(this, "boundaries", null), jp(this, "callback", null), jp(this, "listening", !1);
  }
  static get PLUGIN_KEY() {
    return c_;
  }
  static get PLUGIN_PRIORITY() {
    return xQ;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link DragToScroll#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[c_];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.addHook("afterOnCellMouseDown", (e) => u_(this, Kp, h_).call(this, e)), this.addHook("afterOnCellCornerMouseDown", (e) => u_(this, Kp, h_).call(this, e)), this.registerEvents(), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`dragToScroll`](@/api/options.md#dragtoscroll)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.unregisterEvents(), super.disablePlugin();
  }
  /**
   * Sets the value of the visible element.
   *
   * @param {DOMRect} boundaries An object with coordinates compatible with DOMRect.
   */
  setBoundaries(e) {
    this.boundaries = e;
  }
  /**
   * Changes callback function.
   *
   * @param {Function} callback The callback function.
   */
  setCallback(e) {
    this.callback = e;
  }
  /**
   * Checks if the mouse position (X, Y) is outside of the viewport and fires a callback with calculated X an Y diffs
   * between passed boundaries.
   *
   * @param {number} x Mouse X coordinate to check.
   * @param {number} y Mouse Y coordinate to check.
   */
  check(e, n) {
    let r = 0, i = 0;
    n < this.boundaries.top ? i = n - this.boundaries.top : n > this.boundaries.bottom && (i = n - this.boundaries.bottom), e < this.boundaries.left ? r = e - this.boundaries.left : e > this.boundaries.right && (r = e - this.boundaries.right), this.callback(r, i);
  }
  /**
   * Enables listening on `mousemove` event.
   *
   * @private
   */
  listen() {
    this.listening = !0;
  }
  /**
   * Disables listening on `mousemove` event.
   *
   * @private
   */
  unlisten() {
    this.listening = !1;
  }
  /**
   * Returns current state of listening.
   *
   * @private
   * @returns {boolean}
   */
  isListening() {
    return this.listening;
  }
  /**
   * Registers dom listeners.
   *
   * @private
   */
  registerEvents() {
    const {
      rootWindow: e
    } = this.hot;
    let n = e;
    for (; n; )
      this.eventManager.addEventListener(n.document, "contextmenu", () => this.unlisten()), this.eventManager.addEventListener(n.document, "mouseup", () => this.unlisten()), this.eventManager.addEventListener(n.document, "mousemove", (r) => this.onMouseMove(r)), n = Ic(n);
  }
  /**
   * Unbinds the events used by the plugin.
   *
   * @private
   */
  unregisterEvents() {
    this.eventManager.clear();
  }
  /**
   * 'mouseMove' event callback.
   *
   * @private
   * @param {MouseEvent} event `mousemove` event properties.
   */
  onMouseMove(e) {
    this.isListening() && this.check(e.clientX, e.clientY);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
function h_(t) {
  if (Ms(t))
    return;
  const e = this.hot.view._wt.wtTable.holder;
  e !== this.hot.rootWindow && (this.setBoundaries(e.getBoundingClientRect()), this.setCallback((n, r) => {
    n < 0 ? e.scrollLeft -= 50 : n > 0 && (e.scrollLeft += 50), r < 0 ? e.scrollTop -= 20 : r > 0 && (e.scrollTop += 20);
  }), this.listen());
}
function Zs(t, e) {
  DQ(t, e), e.add(t);
}
function DQ(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Xp(t, e, n) {
  return e = NQ(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function NQ(t) {
  var e = LQ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function LQ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function as(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
_e.getSingleton().register("afterDropdownMenuDefaultOptions");
_e.getSingleton().register("beforeDropdownMenuShow");
_e.getSingleton().register("afterDropdownMenuShow");
_e.getSingleton().register("afterDropdownMenuHide");
_e.getSingleton().register("afterDropdownMenuExecute");
const cf = "dropdownMenu", $Q = 230, lv = "changeType", qp = cf;
var jb = /* @__PURE__ */ new WeakSet(), d_ = /* @__PURE__ */ new WeakSet(), f_ = /* @__PURE__ */ new WeakSet(), g_ = /* @__PURE__ */ new WeakSet(), m_ = /* @__PURE__ */ new WeakSet(), p_ = /* @__PURE__ */ new WeakSet(), w_ = /* @__PURE__ */ new WeakSet();
class hm extends gt {
  static get PLUGIN_KEY() {
    return cf;
  }
  static get PLUGIN_PRIORITY() {
    return $Q;
  }
  static get PLUGIN_DEPS() {
    return ["plugin:AutoColumnSize"];
  }
  /**
   * Default menu items order when `dropdownMenu` is enabled by setting the config item to `true`.
   *
   * @returns {Array}
   */
  static get DEFAULT_ITEMS() {
    return [ah, lh, et, ch, et, nm, et, uh, et, Wr];
  }
  /**
   * Instance of {@link CommandExecutor}.
   *
   * @private
   * @type {CommandExecutor}
   */
  constructor(e) {
    super(e), Zs(this, w_), Zs(this, p_), Zs(this, m_), Zs(this, g_), Zs(this, f_), Zs(this, d_), Zs(this, jb), Xp(this, "commandExecutor", new PH(this.hot)), Xp(this, "itemsFactory", null), Xp(this, "menu", null), this.hot.addHook("afterGetColHeader", (n, r) => as(this, f_, FQ).call(this, n, r));
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link DropdownMenu#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[cf];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   *
   * @fires Hooks#afterDropdownMenuDefaultOptions
   * @fires Hooks#beforeDropdownMenuSetItems
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    this.itemsFactory = new xH(this.hot, hm.DEFAULT_ITEMS);
    const n = this.hot.getSettings()[cf], r = {
      items: this.itemsFactory.getItems(n)
    };
    this.registerEvents(), typeof n.callback == "function" && this.commandExecutor.setCommonCallback(n.callback), this.registerShortcuts(), super.enablePlugin(), this.callOnPluginsReady(() => {
      this.hot.runHooks("afterDropdownMenuDefaultOptions", r), this.itemsFactory.setPredefinedItems(r.items);
      const i = this.itemsFactory.getItems(n);
      this.menu && this.menu.destroy(), this.menu = new eu(this.hot, {
        className: "htDropdownMenu",
        keepInViewport: !0,
        container: n.uiContainer || this.hot.rootDocument.body
      }), this.hot.runHooks("beforeDropdownMenuSetItems", i), this.menu.setMenuItems(i), this.menu.addLocalHook("beforeOpen", () => as(this, g_, WQ).call(this)), this.menu.addLocalHook("afterOpen", () => as(this, m_, VQ).call(this)), this.menu.addLocalHook("afterSubmenuOpen", (o) => as(this, p_, BQ).call(this, o)), this.menu.addLocalHook("afterClose", () => as(this, w_, UQ).call(this)), this.menu.addLocalHook("executeCommand", function() {
        for (var o = arguments.length, s = new Array(o), a = 0; a < o; a++)
          s[a] = arguments[a];
        return e.executeCommand.call(e, ...s);
      }), H(i, (o) => this.commandExecutor.registerCommand(o.key, o));
    });
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`dropdownMenu`](@/api/options.md#dropdownmenu)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.close(), this.menu && this.menu.destroy(), this.unregisterShortcuts(), super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for toggling dropdown menu.
   *
   * @private
   */
  registerShortcuts() {
    const e = this.hot.getShortcutManager().getContext("grid"), n = () => {
      const {
        highlight: r
      } = this.hot.getSelectedRangeLast();
      if ((r.isHeader() && r.row === -1 || r.isCell()) && r.col >= 0) {
        this.hot.selectColumns(r.col, r.col, -1);
        const {
          from: i
        } = this.hot.getSelectedRangeLast(), o = tm(this.menu.container, this.hot.rootDocument), s = this.hot.getCell(-1, i.col, !0), a = s.getBoundingClientRect();
        this.open({
          left: a.left + o.left,
          top: a.top + s.offsetHeight + o.top
        }, {
          left: a.width
        }), this.menu.getNavigator().toFirstItem();
      }
    };
    e.addShortcuts([{
      keys: [["Shift", "Alt", "ArrowDown"], ["Control/Meta", "Enter"]],
      callback: n,
      runOnlyIf: () => {
        var r;
        const i = (r = this.hot.getSelectedRangeLast()) === null || r === void 0 ? void 0 : r.highlight;
        return i && this.hot.selection.isCellVisible(i) && i.isHeader() && !this.menu.isOpened();
      },
      captureCtrl: !0,
      group: qp
    }, {
      keys: [["Shift", "Alt", "ArrowDown"]],
      callback: n,
      runOnlyIf: () => {
        var r;
        const i = (r = this.hot.getSelectedRangeLast()) === null || r === void 0 ? void 0 : r.highlight;
        return i && this.hot.selection.isCellVisible(i) && i.isCell() && !this.menu.isOpened();
      },
      group: qp
    }]);
  }
  /**
   * Unregister shortcuts responsible for toggling dropdown menu.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(qp);
  }
  /**
   * Registers the DOM listeners.
   *
   * @private
   */
  registerEvents() {
    this.eventManager.addEventListener(this.hot.rootElement, "click", (e) => as(this, d_, kQ).call(this, e));
  }
  /**
   * Opens menu and re-position it based on the passed coordinates.
   *
   * @param {{ top: number, left: number }|Event} position An object with `top` and `left` properties
   * which contains coordinates relative to the browsers viewport (without included scroll offsets).
   * Or if the native event is passed the menu will be positioned based on the `pageX` and `pageY`
   * coordinates.
   * @param {{ above: number, below: number, left: number, right: number }} offset An object allows applying
   * the offset to the menu position.
   * @fires Hooks#beforeDropdownMenuShow
   * @fires Hooks#afterDropdownMenuShow
   */
  open(e) {
    var n;
    let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      above: 0,
      below: 0,
      left: 0,
      right: 0
    };
    (n = this.menu) !== null && n !== void 0 && n.isOpened() || (this.menu.open(), Ze(r, (i, o) => {
      this.menu.setOffset(o, i);
    }), this.menu.setPosition(e));
  }
  /**
   * Closes dropdown menu.
   */
  close() {
    var e;
    (e = this.menu) === null || e === void 0 || e.close();
  }
  /**
   * Executes context menu command.
   *
   * The `executeCommand()` method works only for selected cells.
   *
   * When no cells are selected, `executeCommand()` doesn't do anything.
   *
   * You can execute all predefined commands:
   *  * `'row_above'` - Insert row above
   *  * `'row_below'` - Insert row below
   *  * `'col_left'` - Insert column left
   *  * `'col_right'` - Insert column right
   *  * `'clear_column'` - Clear selected column
   *  * `'remove_row'` - Remove row
   *  * `'remove_col'` - Remove column
   *  * `'undo'` - Undo last action
   *  * `'redo'` - Redo last action
   *  * `'make_read_only'` - Make cell read only
   *  * `'alignment:left'` - Alignment to the left
   *  * `'alignment:top'` - Alignment to the top
   *  * `'alignment:right'` - Alignment to the right
   *  * `'alignment:bottom'` - Alignment to the bottom
   *  * `'alignment:middle'` - Alignment to the middle
   *  * `'alignment:center'` - Alignment to the center (justify).
   *
   * Or you can execute command registered in settings where `key` is your command name.
   *
   * @param {string} commandName Command name to execute.
   * @param {*} params Additional parameters passed to the command executor.
   */
  executeCommand(e) {
    for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++)
      r[i - 1] = arguments[i];
    this.commandExecutor.execute(e, ...r);
  }
  /**
   * Turns on / off listening on dropdown menu.
   *
   * @private
   * @param {boolean} listen Turn on listening when value is set to true, otherwise turn it off.
   */
  setListening() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
    this.menu.isOpened() && (e ? this.menu.hotMenu.listen() : this.menu.hotMenu.unlisten());
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.close(), this.menu && this.menu.destroy(), super.destroy();
  }
}
function zH(t) {
  t.getKeyboardShortcutsCtrl().addCustomShortcuts([{
    keys: [["Control/Meta", "A"]],
    callback: () => !1
  }]);
}
function kQ(t) {
  if (t.stopPropagation(), Ve(t.target, lv)) {
    const e = tm(this.menu.container, this.hot.rootDocument), n = t.target.getBoundingClientRect();
    this.open({
      left: n.left + e.left,
      top: n.top + t.target.offsetHeight + 3 + e.top
    }, {
      left: n.width
    });
  }
}
function FQ(t, e) {
  const n = e.parentNode;
  if (!n)
    return;
  const r = n.parentNode.childNodes, i = Array.prototype.indexOf.call(r, n);
  if (t < 0 || i !== r.length - 1)
    return;
  const o = e.querySelector(`.${lv}`);
  if (this.enabled && o)
    return;
  if (!this.enabled) {
    o && o.parentNode.removeChild(o);
    return;
  }
  const s = this.hot.rootDocument.createElement("button");
  s.className = lv, s.type = "button", s.tabIndex = -1, this.hot.getSettings().ariaTags && (Ne(s, [Vo(), uS(" ")]), Ne(e, [zI("menu")])), s.onclick = function() {
    return !1;
  }, e.firstChild.insertBefore(s, e.firstChild.firstChild);
}
function WQ() {
  this.hot.runHooks("beforeDropdownMenuShow", this);
}
function VQ() {
  this.hot.runHooks("afterDropdownMenuShow", this), as(this, jb, zH).call(this, this.menu);
}
function BQ(t) {
  as(this, jb, zH).call(this, t);
}
function UQ() {
  this.hot.listen(), this.hot.runHooks("afterDropdownMenuHide", this);
}
hm.SEPARATOR = {
  name: et
};
function C_(t, e, n) {
  return e = YQ(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function YQ(t) {
  var e = GQ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function GQ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class zQ {
  constructor(e) {
    C_(this, "hot", void 0), C_(this, "options", {}), this.hot = e;
  }
  /**
   * Set options for data provider.
   *
   * @param {object} options Object with specified options.
   */
  setOptions(e) {
    this.options = e;
  }
  /**
   * Get table data based on provided settings to the class constructor.
   *
   * @returns {Array}
   */
  getData() {
    const {
      startRow: e,
      startCol: n,
      endRow: r,
      endCol: i
    } = this._getDataRange(), o = this.options, s = [];
    return xe(e, r, (a) => {
      const l = [];
      !o.exportHiddenRows && this._isHiddenRow(a) || (xe(n, i, (u) => {
        !o.exportHiddenColumns && this._isHiddenColumn(u) || l.push(this.hot.getDataAtCell(a, u));
      }), s.push(l));
    }), s;
  }
  /**
   * Gets list of row headers.
   *
   * @returns {Array}
   */
  getRowHeaders() {
    const e = [];
    if (this.options.rowHeaders) {
      const {
        startRow: n,
        endRow: r
      } = this._getDataRange(), i = this.hot.getRowHeader();
      xe(n, r, (o) => {
        !this.options.exportHiddenRows && this._isHiddenRow(o) || e.push(i[o]);
      });
    }
    return e;
  }
  /**
   * Gets list of columns headers.
   *
   * @returns {Array}
   */
  getColumnHeaders() {
    const e = [];
    if (this.options.columnHeaders) {
      const {
        startCol: n,
        endCol: r
      } = this._getDataRange(), i = this.hot.getColHeader();
      xe(n, r, (o) => {
        !this.options.exportHiddenColumns && this._isHiddenColumn(o) || e.push(i[o]);
      });
    }
    return e;
  }
  /**
   * Get data range object based on settings provided in the class constructor.
   *
   * @private
   * @returns {object} Returns object with keys `startRow`, `startCol`, `endRow` and `endCol`.
   */
  _getDataRange() {
    const e = this.hot.countCols() - 1, n = this.hot.countRows() - 1;
    let [r = 0, i = 0, o = n, s = e] = this.options.range;
    return r = Math.max(r, 0), i = Math.max(i, 0), o = Math.min(o, n), s = Math.min(s, e), {
      startRow: r,
      startCol: i,
      endRow: o,
      endCol: s
    };
  }
  /**
   * Check if row at specified row index is hidden.
   *
   * @private
   * @param {number} row Row index.
   * @returns {boolean}
   */
  _isHiddenRow(e) {
    return this.hot.rowIndexMapper.isHidden(this.hot.toPhysicalRow(e));
  }
  /**
   * Check if column at specified column index is hidden.
   *
   * @private
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  _isHiddenColumn(e) {
    return this.hot.columnIndexMapper.isHidden(this.hot.toPhysicalColumn(e));
  }
}
const jQ = zQ;
function v_(t, e, n) {
  return e = KQ(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function KQ(t) {
  var e = XQ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function XQ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class Kb {
  /**
   * Default options.
   *
   * @returns {object}
   */
  static get DEFAULT_OPTIONS() {
    return {
      mimeType: "text/plain",
      fileExtension: "txt",
      filename: "Handsontable [YYYY]-[MM]-[DD]",
      encoding: "utf-8",
      bom: !1,
      columnHeaders: !1,
      rowHeaders: !1,
      exportHiddenColumns: !1,
      exportHiddenRows: !1,
      range: []
    };
  }
  /**
   * Data provider.
   *
   * @type {DataProvider}
   */
  constructor(e, n) {
    v_(this, "dataProvider", void 0), v_(this, "options", void 0), this.dataProvider = e, this.options = this._mergeOptions(n), this.dataProvider.setOptions(this.options);
  }
  /**
   * Merge options provided by users with defaults.
   *
   * @param {object} options An object with options to merge with.
   * @returns {object} Returns new options object.
   */
  _mergeOptions(e) {
    let n = er(this.constructor.DEFAULT_OPTIONS);
    const r = new Date();
    return n = ln(er(Kb.DEFAULT_OPTIONS), n), n = ln(n, e), n.filename = lS(n.filename, {
      YYYY: r.getFullYear(),
      MM: `${r.getMonth() + 1}`.padStart(2, "0"),
      DD: `${r.getDate()}`.padStart(2, "0")
    }), n;
  }
}
const qQ = Kb, ZQ = String.fromCharCode(13), QQ = String.fromCharCode(34), JQ = String.fromCharCode(10);
class eJ extends qQ {
  /**
   * Default options for exporting CSV format.
   *
   * @returns {object}
   */
  static get DEFAULT_OPTIONS() {
    return {
      mimeType: "text/csv",
      fileExtension: "csv",
      bom: !0,
      columnDelimiter: ",",
      rowDelimiter: `\r
`
    };
  }
  /**
   * Create string body in desired format.
   *
   * @returns {string}
   */
  export() {
    const e = this.options, n = this.dataProvider.getData();
    let r = this.dataProvider.getColumnHeaders();
    const i = r.length > 0, o = this.dataProvider.getRowHeaders(), s = o.length > 0;
    let a = e.bom ? String.fromCharCode(65279) : "";
    return i && (r = qe(r, (l) => this._escapeCell(l, !0)), s && (a += e.columnDelimiter), a += r.join(e.columnDelimiter), a += e.rowDelimiter), H(n, (l, u) => {
      u > 0 && (a += e.rowDelimiter), s && (a += this._escapeCell(o[u]) + e.columnDelimiter), a += l.map((c) => this._escapeCell(c)).join(e.columnDelimiter);
    }), a;
  }
  /**
   * Escape cell value.
   *
   * @param {*} value Cell value.
   * @param {boolean} [force=false] Indicates if cell value will be escaped forcefully.
   * @returns {string}
   */
  _escapeCell(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, r = Zt(e);
    return r !== "" && (n || r.indexOf(ZQ) >= 0 || r.indexOf(QQ) >= 0 || r.indexOf(JQ) >= 0 || r.indexOf(this.options.columnDelimiter) >= 0) && (r = r.replace(new RegExp('"', "g"), '""'), r = `"${r}"`), r;
  }
}
const tJ = eJ, nJ = "csv", uv = {
  [nJ]: tJ
};
function rJ(t, e, n) {
  return typeof uv[t] == "function" ? new uv[t](e, n) : null;
}
const iJ = "exportFile", oJ = 240;
class sJ extends gt {
  static get PLUGIN_KEY() {
    return iJ;
  }
  static get PLUGIN_PRIORITY() {
    return oJ;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ExportFile#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !0;
  }
  /**
   * @typedef ExportOptions
   * @memberof ExportFile
   * @type {object}
   * @property {boolean} [exportHiddenRows=false] Include hidden rows in the exported file.
   * @property {boolean} [exportHiddenColumns=false] Include hidden columns in the exported file.
   * @property {boolean} [columnHeaders=false] Include column headers in the exported file.
   * @property {boolean} [rowHeaders=false] Include row headers in the exported file.
   * @property {string} [columnDelimiter=','] Column delimiter.
   * @property {string} [range=[]] Cell range that will be exported to file.
   */
  /**
   * Exports table data as a string.
   *
   * @param {string} format Export format type eq. `'csv'`.
   * @param {ExportOptions} options Export options.
   * @returns {string}
   */
  exportAsString(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return this._createTypeFormatter(e, n).export();
  }
  /**
   * Exports table data as a blob object.
   *
   * @param {string} format Export format type eq. `'csv'`.
   * @param {ExportOptions} options Export options.
   * @returns {Blob}
   */
  exportAsBlob(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return this._createBlob(this._createTypeFormatter(e, n));
  }
  /**
   * Exports table data as a downloadable file.
   *
   * @param {string} format Export format type eq. `'csv'`.
   * @param {ExportOptions} options Export options.
   */
  downloadFile(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const {
      rootDocument: r,
      rootWindow: i
    } = this.hot, o = this._createTypeFormatter(e, n), s = this._createBlob(o), a = i.URL || i.webkitURL, l = r.createElement("a"), u = `${o.options.filename}.${o.options.fileExtension}`;
    if (l.download !== void 0) {
      const c = a.createObjectURL(s);
      l.style.display = "none", l.setAttribute("href", c), l.setAttribute("download", u), r.body.appendChild(l), l.dispatchEvent(new MouseEvent("click")), r.body.removeChild(l), setTimeout(() => {
        a.revokeObjectURL(c);
      }, 100);
    } else
      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob(s, u);
  }
  /**
   * Creates and returns class formatter for specified export type.
   *
   * @private
   * @param {string} format Export format type eq. `'csv'`.
   * @param {ExportOptions} options Export options.
   * @returns {BaseType}
   */
  _createTypeFormatter(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!uv[e])
      throw new Error(`Export format type "${e}" is not supported.`);
    return rJ(e, new jQ(this.hot), n);
  }
  /**
   * Creates blob object based on provided type formatter class.
   *
   * @private
   * @param {BaseType} typeFormatter The instance of the specyfic formatter/exporter.
   * @returns {Blob}
   */
  _createBlob(e) {
    let n = null;
    return typeof Blob < "u" && (n = new Blob([e.export()], {
      type: `${e.options.mimeType};charset=${e.options.encoding}`
    })), n;
  }
}
function nl(t, e, n) {
  return e = aJ(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function aJ(t) {
  var e = lJ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function lJ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class hh {
  constructor(e, n) {
    let {
      id: r,
      stateless: i = !0
    } = n;
    nl(this, "hot", void 0), nl(this, "id", void 0), nl(this, "elements", []), nl(this, "hidden", !1), nl(this, "stateId", ""), nl(this, "state", void 0), this.hot = e, this.id = r, this.stateId = `Filters.component.${this.id}`, this.state = i ? null : this.hot.columnIndexMapper.registerMap(this.stateId, new jg());
  }
  /**
   * Gets the list of elements from which the component is built.
   *
   * @returns {BaseUI[]}
   */
  getElements() {
    return this.elements;
  }
  /**
   * Reset elements to its initial state.
   */
  reset() {
    H(this.elements, (e) => e.reset());
  }
  /**
   * Hide component.
   */
  hide() {
    this.hidden = !0;
  }
  /**
   * Show component.
   */
  show() {
    this.hidden = !1;
  }
  /**
   * Check if component is hidden.
   *
   * @returns {boolean}
   */
  isHidden() {
    return this.hot === null || this.hidden;
  }
  /**
   * Restores the component state from the given physical column index. The method
   * internally calls the `setState` method. The state then is individually processed
   * by each component.
   *
   * @param {number} physicalColumn The physical column index.
   */
  restoreState(e) {
    this.state && this.setState(this.state.getValueAtIndex(e));
  }
  /**
   * The custom logic for component state restoring.
   */
  setState() {
    throw new Error("The state setting logic is not implemented");
  }
  /**
   * Saves the component state to the given physical column index. The method
   * internally calls the `getState` method, which returns the current state of
   * the component.
   *
   * @param {number} physicalColumn The physical column index.
   */
  saveState(e) {
    this.state && this.state.setValueAtIndex(e, this.getState());
  }
  /**
   * The custom logic for component state gathering (for stateful components).
   */
  getState() {
    throw new Error("The state gathering logic is not implemented");
  }
  /**
   * Destroy element.
   */
  destroy() {
    this.hot.columnIndexMapper.unregisterMap(this.stateId), this.clearLocalHooks(), H(this.elements, (e) => e.destroy()), this.state = null, this.elements = null, this.hot = null;
  }
}
_t(hh, pr);
const kc = {};
function As(t, e) {
  if (!kc[t])
    throw Error(`Filter condition "${t}" does not exist.`);
  const {
    condition: n,
    descriptor: r
  } = kc[t];
  let i = e;
  return r.inputValuesDecorator && (i = r.inputValuesDecorator(i)), function(o) {
    return n.apply(o.meta.instance, [].concat([o], [i]));
  };
}
function ga(t) {
  if (!kc[t])
    throw Error(`Filter condition "${t}" does not exist.`);
  return kc[t].descriptor;
}
function un(t, e, n) {
  n.key = t, kc[t] = {
    condition: e,
    descriptor: n
  };
}
const En = "none";
function uJ() {
  return !0;
}
un(En, uJ, {
  name: Kg,
  inputsCount: 0,
  showOperators: !1
});
const gc = "empty";
function cJ(t) {
  return gn(t.value);
}
un(gc, cJ, {
  name: Xy,
  inputsCount: 0,
  showOperators: !0
});
const hf = "not_empty";
function hJ(t, e) {
  return !As(gc, e)(t);
}
un(hf, hJ, {
  name: qy,
  inputsCount: 0,
  showOperators: !0
});
const mc = "eq";
function dJ(t, e) {
  let [n] = e;
  return Zt(t.value).toLocaleLowerCase(t.meta.locale) === Zt(n);
}
un(mc, dJ, {
  name: Zy,
  inputsCount: 1,
  showOperators: !0
});
const df = "neq";
function fJ(t, e) {
  return !As(mc, e)(t);
}
un(df, fJ, {
  name: Qy,
  inputsCount: 1,
  showOperators: !0
});
const jH = "gt";
function gJ(t, e) {
  let [n] = e, r = n;
  return t.meta.type === "numeric" && (r = parseFloat(r, 10)), t.value > r;
}
un(jH, gJ, {
  name: rb,
  inputsCount: 1,
  showOperators: !0
});
const KH = "gte";
function mJ(t, e) {
  let [n] = e, r = n;
  return t.meta.type === "numeric" && (r = parseFloat(r, 10)), t.value >= r;
}
un(KH, mJ, {
  name: ib,
  inputsCount: 1,
  showOperators: !0
});
const XH = "lt";
function pJ(t, e) {
  let [n] = e, r = n;
  return t.meta.type === "numeric" && (r = parseFloat(r, 10)), t.value < r;
}
un(XH, pJ, {
  name: ob,
  inputsCount: 1,
  showOperators: !0
});
const qH = "lte";
function wJ(t, e) {
  let [n] = e, r = n;
  return t.meta.type === "numeric" && (r = parseFloat(r, 10)), t.value <= r;
}
un(qH, wJ, {
  name: sb,
  inputsCount: 1,
  showOperators: !0
});
const Xb = "date_after";
function CJ(t, e) {
  let [n] = e;
  const r = le(t.value, t.meta.dateFormat), i = le(n, t.meta.dateFormat);
  return !r.isValid() || !i.isValid() ? !1 : r.diff(i) >= 0;
}
un(Xb, CJ, {
  name: ub,
  inputsCount: 1,
  showOperators: !0
});
const qb = "date_before";
function vJ(t, e) {
  let [n] = e;
  const r = le(t.value, t.meta.dateFormat), i = le(n, t.meta.dateFormat);
  return !r.isValid() || !i.isValid() ? !1 : r.diff(i) <= 0;
}
un(qb, vJ, {
  name: cb,
  inputsCount: 1,
  showOperators: !0
});
const qf = "between";
function SJ(t, e) {
  let [n, r] = e, i = n, o = r;
  if (t.meta.type === "numeric") {
    const s = parseFloat(i, 10), a = parseFloat(o, 10);
    i = Math.min(s, a), o = Math.max(s, a);
  } else if (t.meta.type === "date") {
    const s = As(qb, [o]), a = As(Xb, [i]);
    return s(t) && a(t);
  }
  return t.value >= i && t.value <= o;
}
un(qf, SJ, {
  name: ab,
  inputsCount: 2,
  showOperators: !0
});
const ZH = "not_between";
function yJ(t, e) {
  return !As(qf, e)(t);
}
un(ZH, yJ, {
  name: lb,
  inputsCount: 2,
  showOperators: !0
});
const QH = "begins_with";
function bJ(t, e) {
  let [n] = e;
  return Zt(t.value).toLocaleLowerCase(t.meta.locale).startsWith(Zt(n));
}
un(QH, bJ, {
  name: Jy,
  inputsCount: 1,
  showOperators: !0
});
const JH = "ends_with";
function RJ(t, e) {
  let [n] = e;
  return Zt(t.value).toLocaleLowerCase(t.meta.locale).endsWith(Zt(n));
}
un(JH, RJ, {
  name: eb,
  inputsCount: 1,
  showOperators: !0
});
const Zb = "contains";
function EJ(t, e) {
  let [n] = e;
  return Zt(t.value).toLocaleLowerCase(t.meta.locale).indexOf(Zt(n)) >= 0;
}
un(Zb, EJ, {
  name: tb,
  inputsCount: 1,
  showOperators: !0
});
const eD = "not_contains";
function TJ(t, e) {
  return !As(Zb, e)(t);
}
un(eD, TJ, {
  name: nb,
  inputsCount: 1,
  showOperators: !0
});
const tD = "date_tomorrow";
function _J(t) {
  const e = le(t.value, t.meta.dateFormat);
  return e.isValid() ? e.isSame(le().subtract(-1, "days").startOf("day"), "d") : !1;
}
un(tD, _J, {
  name: db,
  inputsCount: 0
});
const nD = "date_today";
function MJ(t) {
  const e = le(t.value, t.meta.dateFormat);
  return e.isValid() ? e.isSame(le().startOf("day"), "d") : !1;
}
un(nD, MJ, {
  name: hb,
  inputsCount: 0
});
const rD = "date_yesterday";
function OJ(t) {
  const e = le(t.value, t.meta.dateFormat);
  return e.isValid() ? e.isSame(le().subtract(1, "days").startOf("day"), "d") : !1;
}
un(rD, OJ, {
  name: fb,
  inputsCount: 0
});
YP();
function AJ(t, e) {
  let n = t;
  return n === "" && (n = `(${e})`), n;
}
const cv = (/* @__PURE__ */ new Set([1])).has(1), IJ = cv && typeof Array.from == "function";
function dh(t) {
  let e = t;
  return cv && (e = new Set(e)), function(n) {
    let r;
    return cv ? r = e.has(n) : r = !!~e.indexOf(n), r;
  };
}
function iD(t) {
  return t ?? "";
}
function hv(t) {
  let e = t;
  return IJ ? e = Array.from(new Set(e)) : e = oS(e), e = e.sort((n, r) => typeof n == "number" && typeof r == "number" ? n - r : n === r ? 0 : n > r ? 1 : -1), e;
}
function S_(t, e, n, r) {
  const i = [], o = t === e;
  let s;
  return o || (s = dh(e)), H(t, (a) => {
    let l = !1;
    (o || s(a)) && (l = !0);
    const u = {
      checked: l,
      value: a,
      visualValue: AJ(a, n)
    };
    r && r(u), i.push(u);
  }), i;
}
const ma = "by_value";
function PJ(t, e) {
  let [n] = e;
  return n(t.value);
}
un(ma, PJ, {
  name: "By value",
  inputsCount: 0,
  inputValuesDecorator(t) {
    let [e] = t;
    return [dh(e)];
  },
  showOperators: !1
});
const Fc = {};
function xJ(t) {
  if (!Fc[t])
    throw Error(`Operation with id "${t}" does not exist.`);
  const e = Fc[t].func;
  return function(n, r) {
    return e(n, r);
  };
}
function HJ(t) {
  return Fc[t].name;
}
function Qb(t, e, n) {
  Fc[t] = {
    name: e,
    func: n
  };
}
const bs = "conjunction", DJ = pb;
function NJ(t, e) {
  return t.every((n) => n.func(e));
}
Qb(bs, DJ, NJ);
const Zf = "disjunction", LJ = Xg;
function $J(t, e) {
  return t.some((n) => n.func(e));
}
Qb(Zf, LJ, $J);
const Jb = "disjunctionWithExtraCondition", kJ = Xg;
function FJ(t, e) {
  if (t.length < 3)
    throw Error("Operation doesn't work on less then three conditions.");
  return t.slice(0, t.length - 1).some((n) => n.func(e)) && t[t.length - 1].func(e);
}
Qb(Jb, kJ, FJ);
const WJ = "numeric", oD = "text", VJ = "date", y_ = {
  [WJ]: [En, et, gc, hf, et, mc, df, et, jH, KH, XH, qH, qf, ZH],
  [oD]: [En, et, gc, hf, et, mc, df, et, QH, JH, et, Zb, eD],
  [VJ]: [En, et, gc, hf, et, mc, df, et, qb, Xb, qf, et, tD, nD, rD]
};
function BJ(t) {
  const e = [];
  let n = t;
  return y_[n] || (n = oD), H(y_[n], (r) => {
    let i;
    r === et ? i = {
      name: et
    } : i = er(ga(r)), e.push(i);
  }), e;
}
function Nu(t, e, n) {
  return e = UJ(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function UJ(t) {
  var e = YJ(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function YJ(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const Zp = "built", Qp = "building", b_ = ["click", "input", "keydown", "keypress", "keyup", "focus", "blur", "change"];
let mi = class sD {
  static get DEFAULTS() {
    return er({
      className: "",
      value: "",
      tagName: "div",
      children: [],
      wrapIt: !0
    });
  }
  /**
   * Instance of Handsontable.
   *
   * @type {Core}
   */
  constructor(e, n) {
    Nu(this, "hot", void 0), Nu(this, "eventManager", new _r(this)), Nu(this, "options", void 0), Nu(this, "_element", void 0), Nu(this, "buildState", void 0), this.hot = e, this.options = ln(sD.DEFAULTS, n), this._element = this.hot.rootDocument.createElement(this.options.wrapIt ? "div" : this.options.tagName);
  }
  /**
   * Set the element value.
   *
   * @param {*} value Set the component value.
   */
  setValue(e) {
    this.options.value = e, this.update();
  }
  /**
   * Get the element value.
   *
   * @returns {*}
   */
  getValue() {
    return this.options.value;
  }
  /**
   * Get element as a DOM object.
   *
   * @returns {Element}
   */
  get element() {
    return this.buildState === Qp ? this._element : this.buildState === Zp ? (this.update(), this._element) : (this.buildState = Qp, this.build(), this.buildState = Zp, this._element);
  }
  /**
   * Check if element was built (built whole DOM structure).
   *
   * @returns {boolean}
   */
  isBuilt() {
    return this.buildState === Zp;
  }
  /**
   * Translate value if it is possible. It's checked if value belongs to namespace of translated phrases.
   *
   * @param {*} value Value which will may be translated.
   * @returns {*} Translated value if translation was possible, original value otherwise.
   */
  translateIfPossible(e) {
    return typeof e == "string" && e.startsWith(rr) ? this.hot.getTranslatedPhrase(e) : e;
  }
  /**
   * Build DOM structure.
   */
  build() {
    const e = (n, r) => {
      this.eventManager.addEventListener(n, r, (i) => this.runLocalHooks(r, i, this));
    };
    if (this.buildState || (this.buildState = Qp), this._element.setAttribute("data-hot-input", !0), this.options.tabIndex !== void 0 && this._element.setAttribute("tabindex", this.options.tabIndex), this.options.role !== void 0 && this._element.setAttribute("role", this.options.role), this.options.className && ce(this._element, this.options.className), this.options.children.length)
      H(this.options.children, (n) => this._element.appendChild(n.element));
    else if (this.options.wrapIt) {
      const n = this.hot.rootDocument.createElement(this.options.tagName);
      n.setAttribute("data-hot-input", !0), Ze(this.options, (r, i) => {
        n[i] !== void 0 && i !== "className" && i !== "tagName" && i !== "children" && (n[i] = this.translateIfPossible(r));
      }), this._element.appendChild(n), H(b_, (r) => e(n, r));
    } else
      H(b_, (n) => e(this._element, n));
  }
  /**
   * Update DOM structure.
   */
  update() {
  }
  /**
   * Reset to initial state.
   */
  reset() {
    this.options.value = "", this.update();
  }
  /**
   * Show element.
   */
  show() {
    this.element.style.display = "";
  }
  /**
   * Hide element.
   */
  hide() {
    this.element.style.display = "none";
  }
  /**
   * Focus element.
   */
  focus() {
  }
  destroy() {
    this.eventManager.destroy(), this.eventManager = null, this.hot = null, this._element.parentNode && this._element.parentNode.removeChild(this._element), this._element = null;
  }
};
_t(mi, pr);
function GJ(t, e) {
  aD(t, e), e.add(t);
}
function zJ(t, e, n) {
  aD(t, e), e.set(t, n);
}
function aD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Cd(t, e) {
  var n = lD(t, e, "get");
  return jJ(t, n);
}
function jJ(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function KJ(t, e, n) {
  var r = lD(t, e, "set");
  return XJ(t, r, n), n;
}
function lD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function XJ(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function qJ(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
var rl = /* @__PURE__ */ new WeakMap(), R_ = /* @__PURE__ */ new WeakSet();
class Rs extends mi {
  static get DEFAULTS() {
    return er({
      placeholder: "",
      type: "text",
      tagName: "input",
      tabIndex: -1
    });
  }
  /**
   * The reference to the input element.
   *
   * @type {HTMLInputElement}
   */
  constructor(e, n) {
    super(e, ln(Rs.DEFAULTS, n)), GJ(this, R_), zJ(this, rl, {
      writable: !0,
      value: void 0
    }), this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   */
  registerHooks() {
    this.addLocalHook("keyup", (e) => qJ(this, R_, ZJ).call(this, e));
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build();
    const e = this.hot.rootDocument.createElement("div");
    KJ(this, rl, this._element.firstChild), ce(this._element, "htUIInput"), ce(e, "htUIInputIcon"), this._element.appendChild(e), this.update();
  }
  /**
   * Update element.
   */
  update() {
    this.isBuilt() && (Cd(this, rl).type = this.options.type, Cd(this, rl).placeholder = this.translateIfPossible(this.options.placeholder), Cd(this, rl).value = this.translateIfPossible(this.options.value));
  }
  /**
   * Focus element.
   */
  focus() {
    this.isBuilt() && Cd(this, rl).focus();
  }
}
function ZJ(t) {
  this.options.value = t.target.value;
}
function Jp(t, e) {
  uD(t, e), e.add(t);
}
function Lu(t, e, n) {
  uD(t, e), e.set(t, n);
}
function uD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function il(t, e, n) {
  var r = cD(t, e, "set");
  return QJ(t, r, n), n;
}
function QJ(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function ew(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function Ut(t, e) {
  var n = cD(t, e, "get");
  return JJ(t, n);
}
function cD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function JJ(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
var mn = /* @__PURE__ */ new WeakMap(), vd = /* @__PURE__ */ new WeakMap(), Sd = /* @__PURE__ */ new WeakMap(), tw = /* @__PURE__ */ new WeakMap(), yd = /* @__PURE__ */ new WeakMap(), E_ = /* @__PURE__ */ new WeakSet(), T_ = /* @__PURE__ */ new WeakSet(), __ = /* @__PURE__ */ new WeakSet();
class Wc extends mi {
  static get DEFAULTS() {
    return er({
      className: "htUISelect",
      wrapIt: !1,
      tabIndex: -1
    });
  }
  /**
   * Instance of {@link Menu}.
   *
   * @type {Menu}
   */
  constructor(e, n) {
    super(e, ln(Wc.DEFAULTS, n)), Jp(this, __), Jp(this, T_), Jp(this, E_), Lu(this, mn, {
      writable: !0,
      value: null
    }), Lu(this, vd, {
      writable: !0,
      value: []
    }), Lu(this, Sd, {
      writable: !0,
      value: void 0
    }), Lu(this, tw, {
      writable: !0,
      value: void 0
    }), Lu(this, yd, {
      writable: !0,
      value: void 0
    }), this.registerHooks();
  }
  /**
   * Gets the instance of the Menu.
   *
   * @returns {Menu}
   */
  getMenu() {
    return Ut(this, mn);
  }
  /**
   * Register all necessary hooks.
   */
  registerHooks() {
    this.addLocalHook("click", () => ew(this, __, nee).call(this));
  }
  /**
   * Set options which can be selected in the list.
   *
   * @param {Array} items Array of objects with required keys `key` and `name`.
   */
  setItems(e) {
    il(this, vd, this.translateNames(e)), Ut(this, mn) && Ut(this, mn).setMenuItems(Ut(this, vd));
  }
  /**
   * Translate names of menu items.
   *
   * @param {Array} items Array of objects with required keys `key` and `name`.
   * @returns {Array} Items with translated `name` keys.
   */
  translateNames(e) {
    return H(e, (n) => {
      n.name = this.translateIfPossible(n.name);
    }), e;
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build(), il(this, mn, new eu(this.hot, {
      className: "htSelectUI htFiltersConditionsMenu",
      keepInViewport: !1,
      standalone: !0,
      container: this.options.menuContainer
    })), Ut(this, mn).setMenuItems(Ut(this, vd));
    const e = new mi(this.hot, {
      className: "htUISelectCaption"
    }), n = new mi(this.hot, {
      className: "htUISelectDropdown"
    });
    il(this, Sd, e), il(this, tw, e.element), il(this, yd, n), this.hot.getSettings().ariaTags && (Ne(n.element, [Vo()]), Ne(this._element, [GI()])), H([e, n], (r) => this._element.appendChild(r.element)), Ut(this, mn).addLocalHook("select", (r) => ew(this, E_, eee).call(this, r)), Ut(this, mn).addLocalHook("afterClose", () => ew(this, T_, tee).call(this)), this.update();
  }
  /**
   * Update DOM structure.
   */
  update() {
    if (!this.isBuilt())
      return;
    let e;
    this.options.value ? e = this.options.value.name : e = Ut(this, mn).hot.getTranslatedPhrase(Kg), Ut(this, tw).textContent = e, super.update();
  }
  /**
   * Open select dropdown menu with available options.
   */
  openOptions() {
    const e = this.element.getBoundingClientRect();
    Ut(this, mn) && (Ut(this, mn).open(), Ut(this, mn).setPosition({
      left: this.hot.isLtr() ? e.left - 5 : e.left - 31,
      top: e.top - 1,
      width: e.width,
      height: e.height
    }), Ut(this, mn).getNavigator().toFirstItem(), Ut(this, mn).getKeyboardShortcutsCtrl().addCustomShortcuts([{
      keys: [["Tab"], ["Shift", "Tab"]],
      callback: (n) => {
        this.closeOptions(), this.runLocalHooks("tabKeydown", n);
      }
    }, {
      keys: [["Control/Meta", "A"]],
      callback: () => !1
    }]));
  }
  /**
   * Close select dropdown menu.
   */
  closeOptions() {
    Ut(this, mn) && Ut(this, mn).close();
  }
  /**
   * Focus element.
   */
  focus() {
    this.isBuilt() && this.element.focus();
  }
  /**
   * Destroy instance.
   */
  destroy() {
    Ut(this, mn) && (Ut(this, mn).destroy(), il(this, mn, null)), Ut(this, Sd) && Ut(this, Sd).destroy(), Ut(this, yd) && Ut(this, yd).destroy(), super.destroy();
  }
}
function eee(t) {
  t.name !== et && (this.options.value = t, this.update(), this.runLocalHooks("select", this.options.value));
}
function tee() {
  this.runLocalHooks("afterClose");
}
function nee() {
  this.openOptions();
}
function M_(t, e) {
  ree(t, e), e.add(t);
}
function ree(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function O_(t, e, n) {
  return e = iee(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function iee(t) {
  var e = oee(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function oee(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function A_(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
var I_ = /* @__PURE__ */ new WeakSet(), P_ = /* @__PURE__ */ new WeakSet();
class dv extends hh {
  constructor(e, n) {
    super(e, {
      id: n.id,
      stateless: !1
    }), M_(this, P_), M_(this, I_), O_(this, "name", ""), O_(this, "addSeparator", !1), this.name = n.name, this.addSeparator = n.addSeparator, this.elements.push(new Wc(this.hot, {
      menuContainer: n.menuContainer
    })), this.elements.push(new Rs(this.hot, {
      placeholder: bb
    })), this.elements.push(new Rs(this.hot, {
      placeholder: Rb
    })), this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   *
   * @private
   */
  registerHooks() {
    this.getSelectElement().addLocalHook("select", (e) => A_(this, I_, see).call(this, e)).addLocalHook("afterClose", () => this.runLocalHooks("afterClose")).addLocalHook("tabKeydown", (e) => this.runLocalHooks("selectTabKeydown", e)), H(this.getInputElements(), (e) => {
      e.addLocalHook("keydown", (n) => A_(this, P_, aee).call(this, n));
    });
  }
  /**
   * Set state of the component.
   *
   * @param {object} value State to restore.
   */
  setState(e) {
    if (this.reset(), !e)
      return;
    const n = er(e.command);
    n.name.startsWith(Qt) && (n.name = this.hot.getTranslatedPhrase(n.name)), this.getSelectElement().setValue(n), H(e.args, (r, i) => {
      if (i > n.inputsCount - 1)
        return !1;
      const o = this.getInputElement(i);
      o.setValue(r), o[n.inputsCount > i ? "show" : "hide"](), i || this.hot._registerTimeout(() => o.focus(), 10);
    });
  }
  /**
   * Export state of the component (get selected filter and filter arguments).
   *
   * @returns {object} Returns object where `command` key keeps used condition filter and `args` key its arguments.
   */
  getState() {
    const e = this.getSelectElement().getValue() || ga(En), n = [];
    return H(this.getInputElements(), (r, i) => {
      e.inputsCount > i && n.push(r.getValue());
    }), {
      command: e,
      args: n
    };
  }
  /**
   * Update state of component.
   *
   * @param {object} condition The condition object.
   * @param {object} condition.command The command object with condition name as `key` property.
   * @param {Array} condition.args An array of values to compare.
   * @param {number} column Physical column index.
   */
  updateState(e, n) {
    const r = ga(e ? e.name : En);
    this.state.setValueAtIndex(n, {
      command: r,
      args: e ? e.args : []
    }), e || H(this.getInputElements(), (i) => i.setValue(null));
  }
  /**
   * Get select element.
   *
   * @returns {SelectUI}
   */
  getSelectElement() {
    return this.elements.filter((e) => e instanceof Wc)[0];
  }
  /**
   * Get input element.
   *
   * @param {number} index Index an array of elements.
   * @returns {InputUI}
   */
  getInputElement() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    return this.getInputElements()[e];
  }
  /**
   * Get input elements.
   *
   * @returns {Array}
   */
  getInputElements() {
    return this.elements.filter((e) => e instanceof Rs);
  }
  /**
   * Get menu object descriptor.
   *
   * @returns {object}
   */
  getMenuItemDescriptor() {
    return {
      key: this.id,
      name: this.name,
      isCommand: !1,
      disableSelection: !0,
      hidden: () => this.isHidden(),
      renderer: (e, n, r, i, o, s) => {
        ce(n.parentNode, "htFiltersMenuCondition"), this.addSeparator && ce(n.parentNode, "border");
        const a = this.hot.rootDocument.createElement("div");
        return ce(a, "htFiltersMenuLabel"), a.textContent = s, n.appendChild(a), H(this.elements, (l) => n.appendChild(l.element)), n;
      }
    };
  }
  /**
   * Reset elements to their initial state.
   */
  reset() {
    const e = this.hot.getPlugin("filters").getSelectedColumn();
    let n = [ga(En)];
    if (e !== null) {
      const {
        visualIndex: r
      } = e;
      n = BJ(this.hot.getDataType(0, r, this.hot.countRows(), r));
    }
    H(this.getInputElements(), (r) => r.hide()), this.getSelectElement().setItems(n), super.reset(), this.getSelectElement().setValue(n[0]);
  }
}
function see(t) {
  H(this.getInputElements(), (e, n) => {
    e[t.inputsCount > n ? "show" : "hide"](), n === 0 && this.hot._registerTimeout(() => e.focus(), 10);
  }), this.runLocalHooks("change", t);
}
function aee(t) {
  ql(t.keyCode, "ESCAPE") && (this.runLocalHooks("cancel"), Kr(t));
}
function x_(t, e, n) {
  lee(t, e), e.set(t, n);
}
function lee(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function $u(t, e) {
  var n = hD(t, e, "get");
  return uee(t, n);
}
function uee(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function H_(t, e, n) {
  var r = hD(t, e, "set");
  return cee(t, r, n), n;
}
function hD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function cee(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var ol = /* @__PURE__ */ new WeakMap(), nw = /* @__PURE__ */ new WeakMap();
class Qf extends mi {
  static get DEFAULTS() {
    return er({
      type: "radio",
      tagName: "input",
      className: "htUIRadio",
      label: {}
    });
  }
  /**
   * The reference to the input element.
   *
   * @type {HTMLInputElement}
   */
  constructor(e, n) {
    super(e, ln(Qf.DEFAULTS, n)), x_(this, ol, {
      writable: !0,
      value: void 0
    }), x_(this, nw, {
      writable: !0,
      value: void 0
    });
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build();
    const e = this.hot.rootDocument.createElement("label");
    e.textContent = this.translateIfPossible(this.options.label.textContent), e.htmlFor = this.translateIfPossible(this.options.label.htmlFor), H_(this, nw, e), H_(this, ol, this._element.firstChild), $u(this, ol).checked = this.options.checked, this._element.appendChild(e), this.update();
  }
  /**
   * Update element.
   */
  update() {
    this.isBuilt() && ($u(this, nw).textContent = this.translateIfPossible(this.options.label.textContent));
  }
  /**
   * Check if radio button is checked.
   *
   * @returns {boolean}
   */
  isChecked() {
    return $u(this, ol).checked;
  }
  /**
   * Set input checked attribute.
   *
   * @param {boolean} value Set the component state.
   */
  setChecked() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
    this.isBuilt() && ($u(this, ol).checked = e);
  }
  /**
   * Focus element.
   */
  focus() {
    this.isBuilt() && $u(this, ol).focus();
  }
}
function hee(t, e) {
  dee(t, e), e.add(t);
}
function dee(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function fee(t, e, n) {
  return e = gee(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function gee(t) {
  var e = mee(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function mee(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function pee(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const D_ = 0;
var N_ = /* @__PURE__ */ new WeakSet();
class wee extends hh {
  constructor(e, n) {
    super(e, {
      id: n.id,
      stateless: !1
    }), hee(this, N_), fee(this, "name", ""), this.name = n.name, this.buildOperatorsElement();
  }
  /**
   * Get menu object descriptor.
   *
   * @returns {object}
   */
  getMenuItemDescriptor() {
    return {
      key: this.id,
      name: this.name,
      isCommand: !1,
      disableSelection: !0,
      hidden: () => this.isHidden(),
      renderer: (e, n) => (ce(n.parentNode, "htFiltersMenuOperators"), H(this.elements, (r) => n.appendChild(r.element)), n)
    };
  }
  /**
   * Add RadioInputUI elements to component.
   *
   * @private
   */
  buildOperatorsElement() {
    const e = [bs, Zf];
    H(e, (n) => {
      const r = new Qf(this.hot, {
        name: "operator",
        label: {
          htmlFor: n,
          textContent: HJ(n)
        },
        value: n,
        checked: n === e[D_],
        id: n
      });
      r.addLocalHook("change", (i) => pee(this, N_, Cee).call(this, i)), this.elements.push(r);
    });
  }
  /**
   * Set state of operators component to check radio input at specific `index`.
   *
   * @param {number} searchedIndex Index of radio input to check.
   */
  setChecked(e) {
    if (this.elements.length < e)
      throw Error(bt`Radio button with index ${e} doesn't exist.`);
    H(this.elements, (n, r) => {
      n.setChecked(r === e);
    });
  }
  /**
   * Get `id` of active operator.
   *
   * @returns {string}
   */
  getActiveOperationId() {
    const e = this.elements.find((n) => n instanceof Qf && n.isChecked());
    return e ? e.getValue() : bs;
  }
  /**
   * Export state of the component (get selected operator).
   *
   * @returns {string} Returns `id` of selected operator.
   */
  getState() {
    return this.getActiveOperationId();
  }
  /**
   * Set state of the component.
   *
   * @param {object} value State to restore.
   */
  setState(e) {
    this.reset(), e && this.getActiveOperationId() !== e && H(this.elements, (n) => {
      n.setChecked(n.getValue() === e);
    });
  }
  /**
   * Update state of component.
   *
   * @param {string} [operationId='conjunction'] Id of selected operation.
   * @param {number} column Physical column index.
   */
  updateState() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : bs, n = arguments.length > 1 ? arguments[1] : void 0, r = e;
    r === Jb && (r = Zf), this.state.setValueAtIndex(n, r);
  }
  /**
   * Reset elements to their initial state.
   */
  reset() {
    this.setChecked(D_);
  }
}
function Cee(t) {
  this.setState(t.target.value);
}
function vee(t, e, n) {
  See(t, e), e.set(t, n);
}
function See(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function rw(t, e) {
  var n = dD(t, e, "get");
  return yee(t, n);
}
function yee(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function bee(t, e, n) {
  var r = dD(t, e, "set");
  return Ree(t, r, n), n;
}
function dD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Ree(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var ku = /* @__PURE__ */ new WeakMap();
class Vc extends mi {
  static get DEFAULTS() {
    return er({
      href: "#",
      tagName: "a",
      tabIndex: -1,
      role: "button"
    });
  }
  /**
   * The reference to the link element.
   *
   * @type {HTMLLinkElement}
   */
  constructor(e, n) {
    super(e, ln(Vc.DEFAULTS, n)), vee(this, ku, {
      writable: !0,
      value: void 0
    });
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build(), bee(this, ku, this._element.firstChild);
  }
  /**
   * Update element.
   */
  update() {
    this.isBuilt() && (rw(this, ku).textContent = this.translateIfPossible(this.options.textContent));
  }
  /**
   * Focus element.
   */
  focus() {
    this.isBuilt() && rw(this, ku).focus();
  }
  /**
   * Activate the element.
   */
  activate() {
    rw(this, ku).click();
  }
}
function bd(t, e) {
  fD(t, e), e.add(t);
}
function sl(t, e, n) {
  fD(t, e), e.set(t, n);
}
function fD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Rd(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function Ue(t, e) {
  var n = gD(t, e, "get");
  return Eee(t, n);
}
function Eee(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function ni(t, e, n) {
  var r = gD(t, e, "set");
  return Tee(t, r, n), n;
}
function gD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Tee(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
const L_ = "multipleSelect.itemBox";
var ui = /* @__PURE__ */ new WeakMap(), Ft = /* @__PURE__ */ new WeakMap(), iw = /* @__PURE__ */ new WeakMap(), co = /* @__PURE__ */ new WeakMap(), Jo = /* @__PURE__ */ new WeakMap(), es = /* @__PURE__ */ new WeakMap(), $_ = /* @__PURE__ */ new WeakSet(), k_ = /* @__PURE__ */ new WeakSet(), F_ = /* @__PURE__ */ new WeakSet(), W_ = /* @__PURE__ */ new WeakSet();
class Bc extends mi {
  static get DEFAULTS() {
    return er({
      className: "htUIMultipleSelect",
      value: []
    });
  }
  /**
   * List of available select options.
   *
   * @type {Array}
   */
  constructor(e, n) {
    super(e, ln(Bc.DEFAULTS, n)), bd(this, W_), bd(this, F_), bd(this, k_), bd(this, $_), sl(this, ui, {
      writable: !0,
      value: []
    }), sl(this, Ft, {
      writable: !0,
      value: void 0
    }), sl(this, iw, {
      writable: !0,
      value: void 0
    }), sl(this, co, {
      writable: !0,
      value: void 0
    }), sl(this, Jo, {
      writable: !0,
      value: void 0
    }), sl(this, es, {
      writable: !0,
      value: void 0
    }), ni(this, co, new Rs(this.hot, {
      placeholder: yb,
      className: "htUIMultipleSelectSearch"
    })), ni(this, Jo, new Vc(this.hot, {
      textContent: wb,
      className: "htUISelectAll"
    })), ni(this, es, new Vc(this.hot, {
      textContent: Cb,
      className: "htUIClearAll"
    })), this.registerHooks();
  }
  /**
   * Gets the instance of the internal Handsontable that acts here as a listbox component.
   *
   * @returns {Handsontable}
   */
  getItemsBox() {
    return Ue(this, Ft);
  }
  /**
   * Register all necessary hooks.
   */
  registerHooks() {
    Ue(this, co).addLocalHook("keydown", (e) => Rd(this, k_, Mee).call(this, e)), Ue(this, co).addLocalHook("input", (e) => Rd(this, $_, _ee).call(this, e)), Ue(this, Jo).addLocalHook("click", (e) => Rd(this, F_, Oee).call(this, e)), Ue(this, es).addLocalHook("click", (e) => Rd(this, W_, Aee).call(this, e));
  }
  /**
   * Set available options.
   *
   * @param {Array} items Array of objects with `checked` and `label` property.
   */
  setItems(e) {
    ni(this, ui, e), Ue(this, Ft) && Ue(this, Ft).loadData(Ue(this, ui));
  }
  /**
   * Set a locale for the component.
   *
   * @param {string} locale Locale used for filter actions performed on data, ie. `en-US`.
   */
  setLocale(e) {
    ni(this, iw, e);
  }
  /**
   * Get a locale for the component.
   *
   * @returns {string}
   */
  getLocale() {
    return Ue(this, iw);
  }
  /**
   * Get all available options.
   *
   * @returns {Array}
   */
  getItems() {
    return [...Ue(this, ui)];
  }
  /**
   * Get element value.
   *
   * @returns {Array} Array of selected values.
   */
  getValue() {
    return Pee(Ue(this, ui));
  }
  /**
   * Gets the instance of the search input element.
   *
   * @returns {InputUI}
   */
  getSearchInputElement() {
    return Ue(this, co);
  }
  /**
   * Gets the instance of the "select all" link element.
   *
   * @returns {LinkUI}
   */
  getSelectAllElement() {
    return Ue(this, Jo);
  }
  /**
   * Gets the instance of the "clear" link element.
   *
   * @returns {LinkUI}
   */
  getClearAllElement() {
    return Ue(this, es);
  }
  /**
   * Check if all values listed in element are selected.
   *
   * @returns {boolean}
   */
  isSelectedAllValues() {
    return Ue(this, ui).length === this.getValue().length;
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build();
    const {
      rootDocument: e
    } = this.hot, n = e.createElement("div"), r = new mi(this.hot, {
      className: "htUISelectionControls",
      children: [Ue(this, Jo), Ue(this, es)]
    });
    this._element.appendChild(Ue(this, co).element), this._element.appendChild(r.element), this._element.appendChild(n);
    const i = (o) => {
      if (!this._element)
        return;
      Ue(this, Ft) && Ue(this, Ft).destroy(), ce(o, "htUIMultipleSelectHot"), ni(this, Ft, new this.hot.constructor(o, {
        data: Ue(this, ui),
        columns: [{
          data: "checked",
          type: "checkbox",
          label: {
            property: "visualValue",
            position: "after"
          }
        }],
        beforeRenderer: (l, u, c, d, g, p) => {
          l.title = p.instance.getDataAtRowProp(u, p.label.property);
        },
        afterListen: () => {
          this.runLocalHooks("focus", this);
        },
        beforeOnCellMouseUp: () => {
          Ue(this, Ft).listen();
        },
        maxCols: 1,
        autoWrapCol: !0,
        height: 110,
        // Workaround for #151.
        colWidths: () => Ue(this, Ft).container.scrollWidth - wn(e),
        copyPaste: !1,
        disableVisualSelection: "area",
        fillHandle: !1,
        fragmentSelection: "cell",
        tabMoves: {
          row: 1,
          col: 0
        },
        layoutDirection: this.hot.isRtl() ? "rtl" : "ltr"
      })), Ue(this, Ft).init();
      const a = Ue(this, Ft).getShortcutManager().getContext("grid");
      a.removeShortcutsByKeys(["Tab"]), a.removeShortcutsByKeys(["Shift", "Tab"]), a.addShortcut({
        keys: [["Escape"]],
        callback: (l) => {
          this.runLocalHooks("keydown", l, this);
        },
        group: L_
      }), a.addShortcut({
        keys: [["Tab"], ["Shift", "Tab"]],
        callback: (l) => {
          Ue(this, Ft).deselectCell(), this.runLocalHooks("keydown", l, this), this.runLocalHooks("listTabKeydown", l, this);
        },
        group: L_
      });
    };
    i(n), this.hot._registerTimeout(() => i(n), 100);
  }
  /**
   * Focus element.
   */
  focus() {
    this.isBuilt() && Ue(this, Ft).listen();
  }
  /**
   * Reset DOM structure.
   */
  reset() {
    Ue(this, co).reset(), Ue(this, Jo).reset(), Ue(this, es).reset();
  }
  /**
   * Update DOM structure.
   */
  update() {
    this.isBuilt() && (Ue(this, Ft).loadData(Iee(Ue(this, ui), this.options.value)), super.update());
  }
  /**
   * Destroy instance.
   */
  destroy() {
    Ue(this, Ft) && Ue(this, Ft).destroy(), Ue(this, co).destroy(), Ue(this, es).destroy(), Ue(this, Jo).destroy(), ni(this, co, null), ni(this, es, null), ni(this, Jo, null), ni(this, Ft, null), ni(this, ui, null), super.destroy();
  }
}
function _ee(t) {
  const e = t.target.value.toLocaleLowerCase(this.getLocale());
  let n;
  e === "" ? n = [...Ue(this, ui)] : n = Tr(Ue(this, ui), (r) => `${r.value}`.toLocaleLowerCase(this.getLocale()).indexOf(e) >= 0), Ue(this, Ft).loadData(n);
}
function Mee(t) {
  this.runLocalHooks("keydown", t, this), CS(ql, t.keyCode)("ARROW_DOWN") && (t.preventDefault(), Kr(t), Ue(this, Ft).listen(), Ue(this, Ft).selectCell(0, 0));
}
function Oee(t) {
  const e = [];
  t.preventDefault(), H(Ue(this, Ft).getSourceData(), (n, r) => {
    n.checked = !0, e.push(ZS(n, r)[0]);
  }), Ue(this, Ft).setSourceDataAtCell(e);
}
function Aee(t) {
  const e = [];
  t.preventDefault(), H(Ue(this, Ft).getSourceData(), (n, r) => {
    n.checked = !1, e.push(ZS(n, r)[0]);
  }), Ue(this, Ft).setSourceDataAtCell(e);
}
function Iee(t, e) {
  const n = dh(e);
  return qe(t, (r) => (r.checked = n(r.value), r));
}
function Pee(t) {
  const e = [];
  return H(t, (n) => {
    n.checked && e.push(n.value);
  }), e;
}
function xee(t, e) {
  Hee(t, e), e.add(t);
}
function Hee(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Dee(t, e, n) {
  return e = Nee(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Nee(t) {
  var e = Lee(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Lee(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function $ee(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
var V_ = /* @__PURE__ */ new WeakSet();
class kee extends hh {
  constructor(e, n) {
    super(e, {
      id: n.id,
      stateless: !1
    }), xee(this, V_), Dee(this, "name", ""), this.name = n.name, this.elements.push(new Bc(this.hot)), this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   *
   * @private
   */
  registerHooks() {
    this.getMultipleSelectElement().addLocalHook("keydown", (e) => $ee(this, V_, Fee).call(this, e)).addLocalHook("listTabKeydown", (e) => this.runLocalHooks("listTabKeydown", e));
  }
  /**
   * Gets the list of elements from which the component is built.
   *
   * @returns {BaseUI[]}
   */
  getElements() {
    const e = this.getMultipleSelectElement();
    return [e.getSearchInputElement(), e.getSelectAllElement(), e.getClearAllElement(), this.getMultipleSelectElement()];
  }
  /**
   * Set state of the component.
   *
   * @param {object} value The component value.
   */
  setState(e) {
    if (this.reset(), e && e.command.key === ma) {
      const n = this.getMultipleSelectElement();
      n.setItems(e.itemsSnapshot), n.setValue(e.args[0]), n.setLocale(e.locale);
    }
  }
  /**
   * Export state of the component (get selected filter and filter arguments).
   *
   * @returns {object} Returns object where `command` key keeps used condition filter and `args` key its arguments.
   */
  getState() {
    const e = this.getMultipleSelectElement(), n = e.getItems();
    return {
      command: {
        key: e.isSelectedAllValues() || !n.length ? En : ma
      },
      args: [e.getValue()],
      itemsSnapshot: n
    };
  }
  /**
   * Update state of component.
   *
   * @param {object} stateInfo Information about state containing stack of edited column,
   * stack of dependent conditions, data factory and optional condition arguments change. It's described by object containing keys:
   * `editedConditionStack`, `dependentConditionStacks`, `visibleDataFactory` and `conditionArgsChange`.
   */
  updateState(e) {
    const n = (r, i, o, s, a) => {
      const [l] = Tr(i, (d) => d.name === ma), u = {}, c = this.hot.getTranslatedPhrase(Vf);
      if (l) {
        const d = hv(qe(s(r, a), (E) => E.value));
        o && (l.args[0] = o);
        const g = [], p = S_(d, l.args[0], c, (E) => {
          E.checked && g.push(E.value);
        }), C = e.editedConditionStack.column;
        u.locale = this.hot.getCellMeta(0, C).locale, u.args = [g], u.command = ga(ma), u.itemsSnapshot = p;
      } else
        u.args = [], u.command = ga(En);
      this.state.setValueAtIndex(r, u);
    };
    n(e.editedConditionStack.column, e.editedConditionStack.conditions, e.conditionArgsChange, e.filteredRowsFactory), e.dependentConditionStacks.length && n(e.dependentConditionStacks[0].column, e.dependentConditionStacks[0].conditions, e.conditionArgsChange, e.filteredRowsFactory, e.editedConditionStack);
  }
  /**
   * Get multiple select element.
   *
   * @returns {MultipleSelectUI}
   */
  getMultipleSelectElement() {
    return this.elements.filter((e) => e instanceof Bc)[0];
  }
  /**
   * Get object descriptor for menu item entry.
   *
   * @returns {object}
   */
  getMenuItemDescriptor() {
    return {
      key: this.id,
      name: this.name,
      isCommand: !1,
      disableSelection: !0,
      hidden: () => this.isHidden(),
      renderer: (e, n, r, i, o, s) => {
        ce(n.parentNode, "htFiltersMenuValue");
        const a = this.hot.rootDocument.createElement("div");
        return ce(a, "htFiltersMenuLabel"), a.textContent = s, n.appendChild(a), H(this.elements, (l) => n.appendChild(l.element)), n;
      }
    };
  }
  /**
   * Reset elements to their initial state.
   */
  reset() {
    const e = this.hot.getTranslatedPhrase(Vf), n = hv(this._getColumnVisibleValues()), r = S_(n, n, e);
    this.getMultipleSelectElement().setItems(r), super.reset(), this.getMultipleSelectElement().setValue(n);
    const i = this.hot.getPlugin("filters").getSelectedColumn();
    i !== null && this.getMultipleSelectElement().setLocale(this.hot.getCellMeta(0, i.visualIndex).locale);
  }
  /**
   * Get data for currently selected column.
   *
   * @returns {Array}
   * @private
   */
  _getColumnVisibleValues() {
    const e = this.hot.getPlugin("filters").getSelectedColumn();
    return e === null ? [] : qe(this.hot.getDataAtCol(e.visualIndex), (n) => iD(n));
  }
}
function Fee(t) {
  ql(t.keyCode, "ESCAPE") && (this.runLocalHooks("cancel"), Kr(t));
}
var mD;
function Wee(t, e) {
  Vee(t, e), e.add(t);
}
function Vee(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Bee(t, e, n) {
  return e = Uee(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Uee(t) {
  var e = Yee(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Yee(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Gee(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
var B_ = /* @__PURE__ */ new WeakSet();
class Uc extends hh {
  static get BUTTON_OK() {
    return "ok";
  }
  static get BUTTON_CANCEL() {
    return "cancel";
  }
  constructor(e, n) {
    super(e, {
      id: n.id,
      stateless: !0
    }), Wee(this, B_), Bee(this, "name", ""), this.name = n.name, this.elements.push(new Rs(this.hot, {
      type: "button",
      value: vb,
      className: "htUIButton htUIButtonOK",
      identifier: Uc.BUTTON_OK
    })), this.elements.push(new Rs(this.hot, {
      type: "button",
      value: Sb,
      className: "htUIButton htUIButtonCancel",
      identifier: Uc.BUTTON_CANCEL
    })), this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   *
   * @private
   */
  registerHooks() {
    H(this.elements, (e) => {
      e.addLocalHook("click", (n, r) => Gee(this, B_, zee).call(this, n, r));
    });
  }
  /**
   * Get menu object descriptor.
   *
   * @returns {object}
   */
  getMenuItemDescriptor() {
    return {
      key: this.id,
      name: this.name,
      isCommand: !1,
      disableSelection: !0,
      hidden: () => this.isHidden(),
      renderer: (e, n) => (ce(n.parentNode, "htFiltersMenuActionBar"), H(this.elements, (r) => n.appendChild(r.element)), n)
    };
  }
  /**
   * Fire accept event.
   */
  accept() {
    this.runLocalHooks("accept");
  }
  /**
   * Fire cancel event.
   */
  cancel() {
    this.runLocalHooks("cancel");
  }
}
mD = Uc;
function zee(t, e) {
  e.options.identifier === mD.BUTTON_OK ? this.accept() : this.cancel();
}
function ow(t, e, n) {
  return e = jee(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function jee(t) {
  var e = Kee(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Kee(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const U_ = "ConditionCollection.filteringStates";
class pD {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    ow(this, "hot", void 0), ow(this, "isMapRegistrable", void 0), ow(this, "filteringStates", new jg()), this.hot = e, this.isMapRegistrable = n, this.isMapRegistrable === !0 ? this.hot.columnIndexMapper.registerMap(U_, this.filteringStates) : this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());
  }
  /**
   * Check if condition collection is empty (so no needed to filter data).
   *
   * @returns {boolean}
   */
  isEmpty() {
    return this.getFilteredColumns().length === 0;
  }
  /**
   * Check if value is matched to the criteria of conditions chain.
   *
   * @param {object} value Object with `value` and `meta` keys.
   * @param {number} column The physical column index.
   * @returns {boolean}
   */
  isMatch(e, n) {
    var r;
    const i = this.filteringStates.getValueAtIndex(n), o = (r = i == null ? void 0 : i.conditions) !== null && r !== void 0 ? r : [], s = i == null ? void 0 : i.operation;
    return this.isMatchInConditions(o, e, s);
  }
  /**
   * Check if the value is matches the conditions.
   *
   * @param {Array} conditions List of conditions.
   * @param {object} value Object with `value` and `meta` keys.
   * @param {string} [operationType='conjunction'] Type of conditions operation.
   * @returns {boolean}
   */
  isMatchInConditions(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : bs;
    return e.length ? xJ(r)(e, n) : !0;
  }
  /**
   * Add condition to the collection.
   *
   * @param {number} column The physical column index.
   * @param {object} conditionDefinition Object with keys:
   *  * `command` Object, Command object with condition name as `key` property.
   *  * `args` Array, Condition arguments.
   * @param {string} [operation='conjunction'] Type of conditions operation.
   * @param {number} [position] Position to which condition will be added. When argument is undefined
   * the condition will be processed as the last condition.
   * @fires ConditionCollection#beforeAdd
   * @fires ConditionCollection#afterAdd
   */
  addCondition(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : bs, i = arguments.length > 3 ? arguments[3] : void 0;
    const o = this.hot.getCellMeta(0, e).locale, s = qe(n.args, (c) => typeof c == "string" ? c.toLocaleLowerCase(o) : c), a = n.name || n.command.key;
    this.runLocalHooks("beforeAdd", e);
    const l = this.getOperation(e);
    if (l) {
      if (l !== r)
        throw Error(bt`The column of index ${e} has been already applied with a \`${l}\`\x20
        filter operation. Use \`removeConditions\` to clear the current conditions and then add new ones.\x20
        Mind that you cannot mix different types of operations (for instance, if you use \`conjunction\`,\x20
        use it consequently for a particular column).`);
    } else if (It(Fc[r]))
      throw new Error(bt`Unexpected operation named \`${r}\`. Possible ones are\x20
        \`disjunction\` and \`conjunction\`.`);
    const u = this.getConditions(e);
    u.length === 0 ? this.filteringStates.setValueAtIndex(e, {
      operation: r,
      conditions: [{
        name: a,
        args: s,
        func: As(a, s)
      }]
    }, i) : u.push({
      name: a,
      args: s,
      func: As(a, s)
    }), this.runLocalHooks("afterAdd", e);
  }
  /**
   * Get all added conditions from the collection at specified column index.
   *
   * @param {number} column The physical column index.
   * @returns {Array} Returns conditions collection as an array.
   */
  getConditions(e) {
    var n, r;
    return (n = (r = this.filteringStates.getValueAtIndex(e)) === null || r === void 0 ? void 0 : r.conditions) !== null && n !== void 0 ? n : [];
  }
  /**
   * Get operation for particular column.
   *
   * @param {number} column The physical column index.
   * @returns {string|undefined}
   */
  getOperation(e) {
    var n;
    return (n = this.filteringStates.getValueAtIndex(e)) === null || n === void 0 ? void 0 : n.operation;
  }
  /**
   * Get all filtered physical columns in the order in which actions are performed.
   *
   * @returns {Array}
   */
  getFilteredColumns() {
    return this.filteringStates.getEntries().map((e) => {
      let [n] = e;
      return n;
    });
  }
  /**
   * Gets position in the filtering states stack for the specific column.
   *
   * @param {number} column The physical column index.
   * @returns {number} Returns -1 when the column doesn't exist in the stack.
   */
  getColumnStackPosition(e) {
    return this.getFilteredColumns().indexOf(e);
  }
  /**
   * Export all previously added conditions.
   *
   * @returns {Array}
   */
  exportAllConditions() {
    return nn(this.filteringStates.getEntries(), (e, n) => {
      let [r, {
        operation: i,
        conditions: o
      }] = n;
      return e.push({
        column: r,
        operation: i,
        conditions: qe(o, (s) => {
          let {
            name: a,
            args: l
          } = s;
          return {
            name: a,
            args: l
          };
        })
      }), e;
    }, []);
  }
  /**
   * Import conditions to the collection.
   *
   * @param {Array} conditions The collection of the conditions.
   */
  importAllConditions(e) {
    this.clean(), H(e, (n) => {
      H(n.conditions, (r) => this.addCondition(n.column, r));
    });
  }
  /**
   * Remove conditions at given column index.
   *
   * @param {number} column The physical column index.
   * @fires ConditionCollection#beforeRemove
   * @fires ConditionCollection#afterRemove
   */
  removeConditions(e) {
    this.runLocalHooks("beforeRemove", e), this.filteringStates.clearValue(e), this.runLocalHooks("afterRemove", e);
  }
  /**
   * Clean all conditions collection and reset order stack.
   *
   * @fires ConditionCollection#beforeClean
   * @fires ConditionCollection#afterClean
   */
  clean() {
    this.runLocalHooks("beforeClean"), this.filteringStates.clear(), this.runLocalHooks("afterClean");
  }
  /**
   * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally
   * check if condition exists under its name.
   *
   * @param {number} column The physical column index.
   * @param {string} [name] Condition name.
   * @returns {boolean}
   */
  hasConditions(e, n) {
    const r = this.getConditions(e);
    return n ? r.some((i) => i.name === n) : r.length > 0;
  }
  /**
   * Destroy object.
   */
  destroy() {
    this.isMapRegistrable && this.hot.columnIndexMapper.unregisterMap(U_), this.filteringStates = null, this.clearLocalHooks();
  }
}
_t(pD, pr);
const wD = pD;
function Y_(t, e, n) {
  return e = Xee(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Xee(t) {
  var e = qee(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function qee(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class Zee {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : () => [];
    Y_(this, "conditionCollection", void 0), Y_(this, "columnDataFactory", void 0), this.conditionCollection = e, this.columnDataFactory = n;
  }
  /**
   * Filter data based on the conditions collection.
   *
   * @returns {Array}
   */
  filter() {
    let e = [];
    return H(this.conditionCollection.getFilteredColumns(), (n, r) => {
      let i = this.columnDataFactory(n);
      r && (i = this._getIntersectData(i, e)), e = this.filterByColumn(n, i);
    }), e;
  }
  /**
   * Filter data based on specified physical column index.
   *
   * @param {number} column The physical column index.
   * @param {Array} [dataSource] Data source as array of objects with `value` and `meta` keys (e.g. `{value: 'foo', meta: {}}`).
   * @returns {Array} Returns filtered data.
   */
  filterByColumn(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    const r = [];
    return H(n, (i) => {
      i !== void 0 && this.conditionCollection.isMatch(i, e) && r.push(i);
    }), r;
  }
  /**
   * Intersect data.
   *
   * @private
   * @param {Array} data The data to intersect.
   * @param {Array} needles The collection intersected rows with the data.
   * @returns {Array}
   */
  _getIntersectData(e, n) {
    const r = [];
    return H(n, (i) => {
      const o = i.meta.visualRow;
      e[o] !== void 0 && (r[o] = e[o]);
    }), r;
  }
}
const CD = Zee;
function sw(t, e) {
  Qee(t, e), e.add(t);
}
function Qee(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Qs(t, e, n) {
  return e = Jee(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Jee(t) {
  var e = ete(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function ete(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function aw(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
var G_ = /* @__PURE__ */ new WeakSet(), z_ = /* @__PURE__ */ new WeakSet(), j_ = /* @__PURE__ */ new WeakSet();
class vD {
  constructor(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : () => [];
    sw(this, j_), sw(this, z_), sw(this, G_), Qs(this, "hot", void 0), Qs(this, "conditionCollection", void 0), Qs(this, "columnDataFactory", void 0), Qs(this, "changes", []), Qs(this, "grouping", !1), Qs(this, "latestEditedColumnPosition", -1), Qs(this, "latestOrderStack", []), this.hot = e, this.conditionCollection = n, this.columnDataFactory = r, this.conditionCollection.addLocalHook("beforeRemove", (i) => aw(this, G_, tte).call(this, i)), this.conditionCollection.addLocalHook("afterRemove", (i) => this.updateStatesAtColumn(i)), this.conditionCollection.addLocalHook("afterAdd", (i) => this.updateStatesAtColumn(i)), this.conditionCollection.addLocalHook("beforeClean", () => aw(this, z_, nte).call(this)), this.conditionCollection.addLocalHook("afterClean", () => aw(this, j_, rte).call(this));
  }
  /**
   * Enable grouping changes. Grouping is helpful in situations when a lot of conditions is added in one moment. Instead of
   * trigger `update` hook for every condition by adding/removing you can group this changes and call `flush` method to trigger
   * it once.
   */
  groupChanges() {
    this.grouping = !0;
  }
  /**
   * Flush all collected changes. This trigger `update` hook for every previously collected change from condition collection.
   */
  flush() {
    this.grouping = !1, H(this.changes, (e) => {
      this.updateStatesAtColumn(e);
    }), this.changes.length = 0;
  }
  /**
   * Update all related states which should be changed after invoking changes applied to current column.
   *
   * @param {number} column The column index.
   * @param {object} conditionArgsChange Object describing condition changes which can be handled by filters on `update` hook.
   * It contains keys `conditionKey` and `conditionValue` which refers to change specified key of condition to specified value
   * based on referred keys.
   */
  updateStatesAtColumn(e, n) {
    var r = this;
    if (this.grouping) {
      this.changes.indexOf(e) === -1 && this.changes.push(e);
      return;
    }
    const i = this.conditionCollection.exportAllConditions();
    let o = this.conditionCollection.getColumnStackPosition(e);
    o === -1 && (o = this.latestEditedColumnPosition);
    const s = i.slice(0, o), a = i.slice(o);
    a.length && a[0].column === e && a.shift();
    const l = lP(function(c, d) {
      let g = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      const p = new wD(r.hot, !1), C = [].concat(c, g);
      p.importAllConditions(C);
      const E = r.columnDataFactory(d);
      let I;
      p.isEmpty() ? I = E : I = new CD(p, (y) => r.columnDataFactory(y)).filter(), I = qe(I, (y) => y.meta.visualRow);
      const M = dh(I);
      return p.destroy(), Tr(E, (y) => M(y.meta.visualRow));
    })(s), u = [].concat(this.conditionCollection.getConditions(e));
    this.runLocalHooks("update", {
      editedConditionStack: {
        column: e,
        conditions: u
      },
      dependentConditionStacks: a,
      filteredRowsFactory: l,
      conditionArgsChange: n
    });
  }
  /**
   * Destroy instance.
   */
  destroy() {
    this.clearLocalHooks(), Ze(this, (e, n) => {
      this[n] = null;
    });
  }
}
function tte(t) {
  this.latestEditedColumnPosition = this.conditionCollection.getColumnStackPosition(t);
}
function nte() {
  this.latestOrderStack = this.conditionCollection.getFilteredColumns();
}
function rte() {
  H(this.latestOrderStack, (t) => {
    this.updateStatesAtColumn(t);
  });
}
_t(vD, pr);
const ite = vD;
function ote(t) {
  return DH({
    initialPage: 0,
    size: () => t.length,
    onItemSelect: (n, r) => {
      const i = t[n];
      if (i instanceof Bc)
        return r;
      if (i.element && !_s(i.element))
        return !1;
      i.focus();
    }
  });
}
const Fu = "filters";
function ste(t, e) {
  let n = -1;
  const r = ote(e), i = (l) => () => {
    t.isOpened() && t.getKeyboardShortcutsCtrl().listen(Fu), r.setCurrentPage(e.indexOf(l));
  };
  e.forEach((l) => {
    l instanceof mi && (l.addLocalHook("click", i(l)), l.addLocalHook("focus", i(l)), l.addLocalHook("afterClose", i(l)));
  }), t.addLocalHook("afterSelectionChange", (l) => {
    l.key.startsWith("filter_") || r.clear();
  });
  function o(l) {
    const u = t.getKeyboardShortcutsCtrl(), c = l.getKeyboardShortcutsCtrl();
    r.clear(), c.addCustomShortcuts([{
      keys: [["Tab"], ["Shift", "Tab"]],
      forwardToContext: u.getContext(Fu),
      callback: () => {
        l.isSubMenu() && l.close(), u.listen(Fu);
      }
    }]), !l.isSubMenu() && u.addCustomShortcuts([{
      keys: [["Tab"], ["Shift", "Tab"]],
      callback: (d) => {
        const g = t.getNavigator();
        g.getCurrentPage() > -1 && (n = g.getCurrentPage()), g.clear(), d.shiftKey ? r.toPreviousItem() : r.toNextItem();
      }
    }, {
      keys: [["Escape"]],
      callback: () => {
        t.close();
      }
    }, {
      keys: [["Enter"], ["Space"]],
      preventDefault: !1,
      callback: (d) => {
        const g = e[r.getCurrentPage()];
        g instanceof Wc && (g.openOptions(), d.preventDefault()), g instanceof Vc && (g.activate(), d.preventDefault()), g instanceof mi || d.preventDefault();
      }
    }], Fu);
  }
  t.addLocalHook("afterSubmenuOpen", o), t.addLocalHook("afterOpen", o);
  function s() {
    t.focus(), t.getKeyboardShortcutsCtrl().listen(Fu);
  }
  function a() {
    return n;
  }
  return {
    ...r,
    listen: s,
    getLastMenuPage: a
  };
}
function ho(t, e) {
  SD(t, e), e.add(t);
}
function ate(t, e, n) {
  SD(t, e), e.set(t, n);
}
function SD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Wu(t, e, n) {
  return e = lte(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function lte(t) {
  var e = ute(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function ute(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function cte(t, e, n) {
  var r = yD(t, e, "set");
  return hte(t, r, n), n;
}
function hte(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function Vu(t, e) {
  var n = yD(t, e, "get");
  return dte(t, n);
}
function yD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function dte(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function ri(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const fv = "filters", fte = 250, K_ = fv;
var Js = /* @__PURE__ */ new WeakMap(), X_ = /* @__PURE__ */ new WeakSet(), q_ = /* @__PURE__ */ new WeakSet(), Z_ = /* @__PURE__ */ new WeakSet(), Q_ = /* @__PURE__ */ new WeakSet(), lw = /* @__PURE__ */ new WeakSet(), J_ = /* @__PURE__ */ new WeakSet(), uw = /* @__PURE__ */ new WeakSet(), eM = /* @__PURE__ */ new WeakSet(), tM = /* @__PURE__ */ new WeakSet();
class gte extends gt {
  static get PLUGIN_KEY() {
    return fv;
  }
  static get PLUGIN_PRIORITY() {
    return fte;
  }
  static get PLUGIN_DEPS() {
    return ["plugin:DropdownMenu", "plugin:HiddenRows", "cell-type:checkbox"];
  }
  /**
   * Instance of {@link DropdownMenu}.
   *
   * @private
   * @type {DropdownMenu}
   */
  constructor(e) {
    super(e), ho(this, tM), ho(this, eM), ho(this, uw), ho(this, J_), ho(this, lw), ho(this, Q_), ho(this, Z_), ho(this, q_), ho(this, X_), Wu(this, "dropdownMenuPlugin", null), Wu(this, "conditionCollection", null), Wu(this, "conditionUpdateObserver", null), Wu(this, "components", /* @__PURE__ */ new Map([["filter_by_condition", null], ["filter_operators", null], ["filter_by_condition2", null], ["filter_by_value", null], ["filter_action_bar", null]])), Wu(this, "filtersRowsMap", null), ate(this, Js, {
      writable: !0,
      value: void 0
    }), this.hot.addHook("afterGetColHeader", (n, r) => ri(this, eM, Ste).call(this, n, r));
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link Filters#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[fv];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled)
      return;
    this.filtersRowsMap = this.hot.rowIndexMapper.registerMap(this.pluginName, new oh()), this.dropdownMenuPlugin = this.hot.getPlugin("dropdownMenu");
    const e = this.hot.getSettings().dropdownMenu, n = e && e.uiContainer || this.hot.rootDocument.body, r = (s) => (s.addLocalHook("accept", () => ri(this, lw, nM).call(this, "accept")), s.addLocalHook("cancel", () => ri(this, lw, nM).call(this, "cancel")), s.addLocalHook("change", (a) => ri(this, J_, vte).call(this, s, a)), s), i = () => `${this.hot.getTranslatedPhrase(gb)}:`, o = () => `${this.hot.getTranslatedPhrase(mb)}:`;
    if (!this.components.get("filter_by_condition")) {
      const s = new dv(this.hot, {
        id: "filter_by_condition",
        name: i,
        addSeparator: !1,
        menuContainer: n
      });
      s.addLocalHook("afterClose", () => ri(this, uw, rM).call(this)), this.components.set("filter_by_condition", r(s));
    }
    if (this.components.get("filter_operators") || this.components.set("filter_operators", new wee(this.hot, {
      id: "filter_operators",
      name: "Operators"
    })), !this.components.get("filter_by_condition2")) {
      const s = new dv(this.hot, {
        id: "filter_by_condition2",
        name: "",
        addSeparator: !0,
        menuContainer: n
      });
      s.addLocalHook("afterClose", () => ri(this, uw, rM).call(this)), this.components.set("filter_by_condition2", r(s));
    }
    if (this.components.get("filter_by_value") || this.components.set("filter_by_value", r(new kee(this.hot, {
      id: "filter_by_value",
      name: o
    }))), this.components.get("filter_action_bar") || this.components.set("filter_action_bar", r(new Uc(this.hot, {
      id: "filter_action_bar",
      name: "Action bar"
    }))), this.conditionCollection || (this.conditionCollection = new wD(this.hot)), this.conditionUpdateObserver || (this.conditionUpdateObserver = new ite(this.hot, this.conditionCollection, (s) => this.getDataMapAtColumn(s)), this.conditionUpdateObserver.addLocalHook("update", (s) => ri(this, tM, yte).call(this, s))), this.components.forEach((s) => s.show()), this.addHook("afterDropdownMenuDefaultOptions", (s) => ri(this, Q_, Cte).call(this, s)), this.addHook("afterDropdownMenuShow", () => ri(this, q_, pte).call(this)), this.addHook("afterDropdownMenuHide", () => ri(this, Z_, wte).call(this)), this.addHook("afterChange", (s) => ri(this, X_, mte).call(this, s)), this.hot.getSettings().dropdownMenu && this.dropdownMenuPlugin && (this.dropdownMenuPlugin.disablePlugin(), this.dropdownMenuPlugin.enablePlugin()), !Vu(this, Js) && this.dropdownMenuPlugin.enabled) {
      const s = this.dropdownMenuPlugin.menu, a = [
        // A fake menu item that once focused allows escaping from the focus navigation (using Tab keys)
        // to the menu navigation using arrow keys.
        {
          focus: () => {
            const u = s.getNavigator(), c = Vu(this, Js).getLastMenuPage();
            s.focus(), c > 0 ? u.setCurrentPage(c) : u.toFirstItem();
          }
        },
        ...Array.from(this.components).map((u) => {
          let [, c] = u;
          return c.getElements();
        }).flat()
      ];
      cte(this, Js, ste(s, a));
      const l = (u) => {
        Vu(this, Js).listen(), u.preventDefault(), ql(u.keyCode, "TAB") && (u.shiftKey ? Vu(this, Js).toPreviousItem() : Vu(this, Js).toNextItem());
      };
      this.components.get("filter_by_value").addLocalHook("listTabKeydown", l), this.components.get("filter_by_condition").addLocalHook("selectTabKeydown", l);
    }
    this.registerShortcuts(), super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    if (this.enabled) {
      var e;
      (e = this.dropdownMenuPlugin) !== null && e !== void 0 && e.enabled && this.dropdownMenuPlugin.menu.clearLocalHooks(), this.components.forEach((n, r) => {
        n.destroy(), this.components.set(r, null);
      }), this.conditionCollection.destroy(), this.conditionCollection = null, this.hot.rowIndexMapper.unregisterMap(this.pluginName);
    }
    this.unregisterShortcuts(), super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for clearing the filters.
   *
   * @private
   */
  registerShortcuts() {
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Alt", "A"]],
      stopPropagation: !0,
      callback: () => {
        const e = this.hot.getSelected();
        this.clearConditions(), this.filter(), e && this.hot.selectCells(e);
      },
      group: K_
    });
  }
  /**
   * Unregister shortcuts responsible for clearing the filters.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(K_);
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @memberof Filters#
   * @function addCondition
   * @description
   * Adds condition to the conditions collection at specified column index.
   *
   * Possible predefined conditions:
   *  * `begins_with` - Begins with
   *  * `between` - Between
   *  * `by_value` - By value
   *  * `contains` - Contains
   *  * `date_after` - After a date
   *  * `date_before` - Before a date
   *  * `date_today` - Today
   *  * `date_tomorrow` - Tomorrow
   *  * `date_yesterday` - Yesterday
   *  * `empty` - Empty
   *  * `ends_with` - Ends with
   *  * `eq` - Equal
   *  * `gt` - Greater than
   *  * `gte` - Greater than or equal
   *  * `lt` - Less than
   *  * `lte` - Less than or equal
   *  * `none` - None (no filter)
   *  * `not_between` - Not between
   *  * `not_contains` - Not contains
   *  * `not_empty` - Not empty
   *  * `neq` - Not equal.
   *
   * Possible operations on collection of conditions:
   *  * `conjunction` - [**Conjunction**](https://en.wikipedia.org/wiki/Logical_conjunction) on conditions collection (by default), i.e. for such operation: <br/> c1 AND c2 AND c3 AND c4 ... AND cn === TRUE, where c1 ... cn are conditions.
   *  * `disjunction` - [**Disjunction**](https://en.wikipedia.org/wiki/Logical_disjunction) on conditions collection, i.e. for such operation: <br/> c1 OR c2 OR c3 OR c4 ... OR cn === TRUE, where c1, c2, c3, c4 ... cn are conditions.
   *  * `disjunctionWithExtraCondition` - **Disjunction** on first `n - 1`\* conditions from collection with an extra requirement computed from the last condition, i.e. for such operation: <br/> c1 OR c2 OR c3 OR c4 ... OR cn-1 AND cn === TRUE, where c1, c2, c3, c4 ... cn are conditions.
   *
   * \* when `n` is collection size; it's used i.e. for one operation introduced from UI (when choosing from filter's drop-down menu two conditions with OR operator between them, mixed with choosing values from the multiple choice select)
   *
   * **Note**: Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, use it consequently for a particular column).
   *
   * @example
   * ::: only-for javascript
   * ```js
   * const container = document.getElementById('example');
   * const hot = new Handsontable(container, {
   *   data: getData(),
   *   filters: true
   * });
   *
   * // access to filters plugin instance
   * const filtersPlugin = hot.getPlugin('filters');
   *
   * // add filter "Greater than" 95 to column at index 1
   * filtersPlugin.addCondition(1, 'gt', [95]);
   * filtersPlugin.filter();
   *
   * // add filter "By value" to column at index 1
   * // in this case all value's that don't match will be filtered.
   * filtersPlugin.addCondition(1, 'by_value', [['ing', 'ed', 'as', 'on']]);
   * filtersPlugin.filter();
   *
   * // add filter "Begins with" with value "de" AND "Not contains" with value "ing"
   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'conjunction');
   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'conjunction');
   * filtersPlugin.filter();
   *
   * // add filter "Begins with" with value "de" OR "Not contains" with value "ing"
   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'disjunction');
   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'disjunction');
   * filtersPlugin.filter();
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * const hotRef = useRef(null);
   *
   * ...
   *
   * <HotTable
   *   ref={hotRef}
   *   data={getData()}
   *   filters={true}
   * />
   *
   * // access to filters plugin instance
   * const hot = hotRef.current.hotInstance;
   * const filtersPlugin = hot.getPlugin('filters');
   *
   * // add filter "Greater than" 95 to column at index 1
   * filtersPlugin.addCondition(1, 'gt', [95]);
   * filtersPlugin.filter();
   *
   * // add filter "By value" to column at index 1
   * // in this case all value's that don't match will be filtered.
   * filtersPlugin.addCondition(1, 'by_value', [['ing', 'ed', 'as', 'on']]);
   * filtersPlugin.filter();
   *
   * // add filter "Begins with" with value "de" AND "Not contains" with value "ing"
   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'conjunction');
   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'conjunction');
   * filtersPlugin.filter();
   *
   * // add filter "Begins with" with value "de" OR "Not contains" with value "ing"
   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'disjunction');
   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'disjunction');
   * filtersPlugin.filter();
   * ```
   * :::
   *
   * @param {number} column Visual column index.
   * @param {string} name Condition short name.
   * @param {Array} args Condition arguments.
   * @param {string} [operationId=conjunction] `id` of operation which is performed on the column.
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  addCondition(e, n, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : bs;
    const o = this.hot.toPhysicalColumn(e);
    this.conditionCollection.addCondition(o, {
      command: {
        key: n
      },
      args: r
    }, i);
  }
  /**
   * Removes conditions at specified column index.
   *
   * @param {number} column Visual column index.
   */
  removeConditions(e) {
    const n = this.hot.toPhysicalColumn(e);
    this.conditionCollection.removeConditions(n);
  }
  /**
   * Clears all conditions previously added to the collection for the specified column index or, if the column index
   * was not passed, clear the conditions for all columns.
   *
   * @param {number} [column] Visual column index.
   */
  clearConditions(e) {
    if (e === void 0)
      this.conditionCollection.clean();
    else {
      const n = this.hot.toPhysicalColumn(e);
      this.conditionCollection.removeConditions(n);
    }
  }
  /**
   * Filters data based on added filter conditions.
   *
   * @fires Hooks#beforeFilter
   * @fires Hooks#afterFilter
   */
  filter() {
    const {
      navigableHeaders: e
    } = this.hot.getSettings(), n = this._createDataFilter(), r = !this.conditionCollection.isEmpty();
    let i = [];
    const o = this.conditionCollection.exportAllConditions();
    if (this.hot.runHooks("beforeFilter", o) !== !1)
      if (r) {
        const a = [];
        this.hot.batchExecution(() => {
          this.filtersRowsMap.clear(), i = qe(n.filter(), (u) => u.meta.visualRow);
          const l = dh(i);
          xe(this.hot.countSourceRows() - 1, (u) => {
            l(u) || a.push(u);
          }), H(a, (u) => {
            this.filtersRowsMap.setValueAtIndex(u, !0);
          });
        }, !0), !e && !i.length && this.hot.deselectCell();
      } else
        this.filtersRowsMap.clear();
    this.hot.runHooks("afterFilter", o), this.hot.view.adjustElementsSize(!0), this.hot.render(), this.hot.selection.isSelected() && this.hot.selectCell(e ? -1 : 0, this.hot.getSelectedRangeLast().highlight.col);
  }
  /**
   * Gets last selected column index.
   *
   * @returns {{visualIndex: number, physicalIndex: number} | null} Returns `null` when a column is
   * not selected. Otherwise, returns an object with `visualIndex` and `physicalIndex` properties containing
   * the index of the column.
   */
  getSelectedColumn() {
    var e;
    const n = (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
    return n ? {
      visualIndex: n.col,
      physicalIndex: this.hot.toPhysicalColumn(n.col)
    } : null;
  }
  /**
   * Returns handsontable source data with cell meta based on current selection.
   *
   * @param {number} [column] The physical column index. By default column index accept the value of the selected column.
   * @returns {Array} Returns array of objects where keys as row index.
   */
  getDataMapAtColumn(e) {
    const n = this.hot.toVisualColumn(e), r = [];
    return H(this.hot.getSourceDataAtCol(n), (i, o) => {
      var s;
      const {
        row: a,
        col: l,
        visualCol: u,
        visualRow: c,
        type: d,
        instance: g,
        dateFormat: p,
        locale: C
      } = this.hot.getCellMeta(o, n), E = (s = this.hot.getDataAtCell(this.hot.toVisualRow(o), n)) !== null && s !== void 0 ? s : i;
      r.push({
        meta: {
          row: a,
          col: l,
          visualCol: u,
          visualRow: c,
          type: d,
          instance: g,
          dateFormat: p,
          locale: C
        },
        value: iD(E)
      });
    }), r;
  }
  /**
   * Update the condition of ValueComponent, based on the handled changes.
   *
   * @private
   * @param {number} columnIndex Column index of handled ValueComponent condition.
   */
  updateValueComponentCondition(e) {
    const n = this.hot.getDataAtCol(e), r = hv(n);
    this.conditionUpdateObserver.updateStatesAtColumn(e, r);
  }
  /**
   * Restores components to its saved state.
   *
   * @private
   * @param {Array} components List of components.
   */
  restoreComponents(e) {
    var n;
    const r = (n = this.getSelectedColumn()) === null || n === void 0 ? void 0 : n.physicalIndex;
    e.forEach((i) => {
      i.isHidden() || i.restoreState(r);
    }), this.updateDependentComponentsVisibility();
  }
  /**
   * Get an operation, based on the number and types of arguments (where arguments are states of components).
   *
   * @param {string} suggestedOperation Operation which was chosen by user from UI.
   * @param {object} byConditionState1 State of first condition component.
   * @param {object} byConditionState2 State of second condition component.
   * @param {object} byValueState State of value component.
   * @private
   * @returns {string}
   */
  getOperationBasedOnArguments(e, n, r, i) {
    let o = e;
    return o === Zf && n.command.key !== En && r.command.key !== En && i.command.key !== En ? o = Jb : i.command.key !== En && (n.command.key === En || r.command.key === En) && (o = bs), o;
  }
  /**
   * Listen to the keyboard input on document body and forward events to instance of Handsontable
   * created by DropdownMenu plugin.
   *
   * @private
   */
  setListeningDropdownMenu() {
    this.dropdownMenuPlugin && this.dropdownMenuPlugin.setListening();
  }
  /**
   * Updates visibility of some of the components, based on the state of the parent component.
   *
   * @private
   */
  updateDependentComponentsVisibility() {
    const e = this.components.get("filter_by_condition"), {
      command: n
    } = e.getState(), r = [this.components.get("filter_by_condition2"), this.components.get("filter_operators")];
    n.showOperators ? this.showComponents(...r) : this.hideComponents(...r);
  }
  /**
   * Creates DataFilter instance based on condition collection.
   *
   * @private
   * @param {ConditionCollection} conditionCollection Condition collection object.
   * @returns {DataFilter}
   */
  _createDataFilter() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.conditionCollection;
    return new CD(e, (n) => this.getDataMapAtColumn(n));
  }
  /**
   * Returns indexes of passed components inside list of `dropdownMenu` items.
   *
   * @private
   * @param {...BaseComponent} components List of components.
   * @returns {Array}
   */
  getIndexesOfComponents() {
    const e = [];
    if (!this.dropdownMenuPlugin)
      return e;
    const n = this.dropdownMenuPlugin.menu;
    for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
      i[o] = arguments[o];
    return H(i, (s) => {
      H(n.menuItems, (a, l) => {
        a.key === s.getMenuItemDescriptor().key && e.push(l);
      });
    }), e;
  }
  /**
   * Changes visibility of component.
   *
   * @private
   * @param {boolean} visible Determine if components should be visible.
   * @param {...BaseComponent} components List of components.
   */
  changeComponentsVisibility() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
    if (!this.dropdownMenuPlugin)
      return;
    const r = this.dropdownMenuPlugin.menu.hotMenu, i = r.getPlugin("hiddenRows");
    for (var o = arguments.length, s = new Array(o > 1 ? o - 1 : 0), a = 1; a < o; a++)
      s[a - 1] = arguments[a];
    const l = this.getIndexesOfComponents(...s);
    e ? i.showRows(l) : i.hideRows(l), r.render();
  }
  /**
   * Hides components of filters `dropdownMenu`.
   *
   * @private
   * @param {...BaseComponent} components List of components.
   */
  hideComponents() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    this.changeComponentsVisibility(!1, ...n);
  }
  /**
   * Shows components of filters `dropdownMenu`.
   *
   * @private
   * @param {...BaseComponent} components List of components.
   */
  showComponents() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    this.changeComponentsVisibility(!0, ...n);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.enabled && (this.components.forEach((e, n) => {
      e !== null && (e.destroy(), this.components.set(n, null));
    }), this.conditionCollection.destroy(), this.conditionUpdateObserver.destroy(), this.hot.rowIndexMapper.unregisterMap(this.pluginName)), super.destroy();
  }
}
function mte(t) {
  t && H(t, (e) => {
    const [, n] = e, r = this.hot.propToCol(n);
    this.conditionCollection.hasConditions(r) && this.updateValueComponentCondition(r);
  });
}
function pte() {
  this.restoreComponents(Array.from(this.components.values()));
}
function wte() {
  this.components.get("filter_by_condition").getSelectElement().closeOptions(), this.components.get("filter_by_condition2").getSelectElement().closeOptions();
}
function Cte(t) {
  t.items.push({
    name: et
  }), this.components.forEach((e) => {
    t.items.push(e.getMenuItemDescriptor());
  });
}
function nM(t) {
  var e;
  if (t === "accept") {
    const r = this.getSelectedColumn();
    if (r === null) {
      var n;
      (n = this.dropdownMenuPlugin) === null || n === void 0 || n.close();
      return;
    }
    const {
      physicalIndex: i
    } = r, o = this.components.get("filter_by_condition").getState(), s = this.components.get("filter_by_condition2").getState(), a = this.components.get("filter_by_value").getState(), l = this.getOperationBasedOnArguments(this.components.get("filter_operators").getActiveOperationId(), o, s, a);
    this.conditionUpdateObserver.groupChanges();
    let u = this.conditionCollection.getColumnStackPosition(i);
    u === -1 && (u = void 0), this.conditionCollection.removeConditions(i), o.command.key !== En && (this.conditionCollection.addCondition(i, o, l, u), s.command.key !== En && this.conditionCollection.addCondition(i, s, l, u)), a.command.key !== En && this.conditionCollection.addCondition(i, a, l, u), this.conditionUpdateObserver.flush(), this.components.forEach((c) => c.saveState(i)), this.filtersRowsMap.clear(), this.filter();
  }
  (e = this.dropdownMenuPlugin) === null || e === void 0 || e.close();
}
function vte(t, e) {
  this.updateDependentComponentsVisibility(), t.constructor === dv && !e.inputsCount && this.setListeningDropdownMenu();
}
function rM() {
  this.setListeningDropdownMenu();
}
function Ste(t, e) {
  const n = this.hot.toPhysicalColumn(t);
  this.enabled && this.conditionCollection.hasConditions(n) ? ce(e, "htFiltersActive") : Ye(e, "htFiltersActive");
}
function yte(t) {
  var e;
  if (!((e = this.dropdownMenuPlugin) !== null && e !== void 0 && e.enabled))
    return;
  const {
    editedConditionStack: {
      conditions: n,
      column: r
    }
  } = t, i = n.filter((s) => s.name === ma), o = n.filter((s) => s.name !== ma);
  if (i.length >= 2 || o.length >= 3)
    Pt(bt`The filter conditions have been applied properly, but couldn’t be displayed visually.\x20
        The overall amount of conditions exceed the capability of the dropdown menu.\x20
        For more details see the documentation.`);
  else {
    const s = this.conditionCollection.getOperation(r);
    this.components.get("filter_by_condition").updateState(o[0], r), this.components.get("filter_by_condition2").updateState(o[1], r), this.components.get("filter_operators").updateState(s, r), this.components.get("filter_by_value").updateState(t);
  }
}
const bD = "internal-use-in-handsontable", gv = {
  licenseKey: bD,
  useArrayArithmetic: !0,
  useColumnIndex: !1,
  useStats: !1,
  evaluateNullToZero: !0,
  precisionEpsilon: 1e-13,
  precisionRounding: 14,
  smartRounding: !0,
  leapYear1900: !1,
  nullDate: {
    year: 1899,
    month: 12,
    day: 30
  },
  nullYear: 30,
  dateFormats: ["DD/MM/YYYY", "DD/MM/YY"],
  timeFormats: ["hh:mm", "hh:mm:ss.sss"],
  matchWholeCell: !0,
  useRegularExpressions: !1,
  useWildcards: !0,
  functionArgSeparator: ",",
  thousandSeparator: "",
  decimalSeparator: ".",
  language: "enGB"
};
function RD(t) {
  var e;
  return {
    maxColumns: t.maxColumns,
    maxRows: t.maxRows,
    language: (e = t[$n]) === null || e === void 0 || (e = e.language) === null || e === void 0 ? void 0 : e.langCode
  };
}
function ED(t) {
  return Object.keys(t).reduce((e, n) => (n !== "hyperformula" && (e[n] = t[n]), e), {});
}
function bte(t) {
  var e;
  const n = t[$n], r = ED(n != null && (e = n.engine) !== null && e !== void 0 && e.hyperformula ? n.engine : {}), i = RD(t);
  return {
    ...gv,
    ...r,
    ...i
  };
}
function Rte(t) {
  var e;
  const n = t[$n], r = ED(n != null && (e = n.engine) !== null && e !== void 0 && e.hyperformula ? n.engine : {}), i = RD(t);
  return {
    ...r,
    ...i
  };
}
function Ete(t, e) {
  return Object.keys(e).some((n) => e[n] !== void 0 && e[n] !== t[n]);
}
function dm() {
  const t = "engine_relationship", e = yi($n);
  return e.hasItem(t) || e.register(t, /* @__PURE__ */ new Map()), e.getItem(t);
}
function eR() {
  const t = "shared_engine_usage", e = yi($n);
  return e.hasItem(t) || e.register(t, /* @__PURE__ */ new Map()), e.getItem(t);
}
function Tte(t) {
  const e = t.getSettings(), n = e[$n], r = n == null ? void 0 : n.engine;
  if (n === !0 || It(r))
    return null;
  if (typeof r.hyperformula == "function" || typeof r == "function") {
    var i;
    return _te((i = r.hyperformula) !== null && i !== void 0 ? i : r, e, t);
  } else if (typeof r == "object" && It(r.hyperformula)) {
    const o = dm(), s = eR().get(r);
    return o.has(r) || o.set(r, []), o.get(r).push(t), s && s.push(t.guid), r.getConfig().licenseKey || r.updateConfig({
      licenseKey: bD
    }), (r.getConfig().leapYear1900 !== gv.leapYear1900 || Fg(r.getConfig().nullDate, gv.nullDate) === !1) && Pt(bt`If you use HyperFormula with Handsontable, keep the default \`leapYear1900\` and \`nullDate\` 
      settings. Otherwise, HyperFormula's dates may not sync correctly with Handsontable's dates.`), r;
  }
  return null;
}
function _te(t, e, n) {
  const r = e[$n], i = bte(e), o = dm(), s = eR();
  Mte(t, r.functions), Ote(t, r.language);
  const a = t.buildEmpty(i);
  return o.set(a, [n]), s.set(a, [n.guid]), Ate(a, r.namedExpressions), a.on("sheetAdded", () => {
    a.rebuildAndRecalculate();
  }), a.on("sheetRemoved", () => {
    a.rebuildAndRecalculate();
  }), a;
}
function iM(t) {
  var e;
  const n = dm(), r = n.size === 0 ? [] : Array.from((e = n.get(t)) !== null && e !== void 0 ? e : []);
  return new Map(r.map((i) => [i.getPlugin("formulas").sheetId, i]));
}
function oM(t, e) {
  if (t) {
    const n = dm(), r = n.get(t), i = eR(), o = i.get(t);
    r && r.includes(e) && (r.splice(r.indexOf(e), 1), r.length === 0 && n.delete(t)), o && o.includes(e.guid) && (o.splice(o.indexOf(e.guid), 1), o.length === 0 && (i.delete(t), t.destroy()));
  }
}
function Mte(t, e) {
  e && e.forEach((n) => {
    const {
      name: r,
      plugin: i,
      translations: o
    } = n;
    try {
      t.registerFunction(r, i, o);
    } catch (s) {
      Pt(s.message);
    }
  });
}
function Ote(t, e) {
  if (e) {
    const {
      langCode: n
    } = e;
    try {
      t.registerLanguage(n, e);
    } catch (r) {
      Pt(r.message);
    }
  }
}
function Ate(t, e) {
  e && (t.suspendEvaluation(), e.forEach((n) => {
    const {
      name: r,
      expression: i,
      scope: o,
      options: s
    } = n;
    try {
      t.addNamedExpression(r, i, o, s);
    } catch (a) {
      Pt(a.message);
    }
  }), t.resumeEvaluation());
}
function Ite(t, e) {
  return (It(e) || !t.doesSheetExist(e)) && (e = t.addSheet(e)), e;
}
const TD = "DD/MM/YYYY";
function _D(t) {
  return typeof t == "string" && t.charAt(0) === "'" && t.charAt(1) === "=";
}
function Pte(t) {
  return _D(t) ? t.substr(1) : t;
}
function xte(t) {
  return typeof t == "string" && t.startsWith("=");
}
function tR(t, e) {
  return typeof t == "string" && e === "date";
}
function MD(t, e) {
  return le(t, e, !0).isValid();
}
function OD(t, e) {
  return le(t, e, !0).format(TD);
}
function Hte(t, e) {
  return le(t, TD, !0).format(e);
}
function AD(t, e) {
  const r = new Date(Date.UTC(0, 0, t + -1));
  return le(r).format(e);
}
function ea(t, e, n) {
  Dte(t, e), e.set(t, n);
}
function Dte(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Dt(t, e) {
  var n = ID(t, e, "get");
  return Nte(t, n);
}
function Nte(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function ts(t, e, n) {
  var r = ID(t, e, "set");
  return Lte(t, r, n), n;
}
function ID(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Lte(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var Bu = /* @__PURE__ */ new WeakMap(), ns = /* @__PURE__ */ new WeakMap(), wr = /* @__PURE__ */ new WeakMap(), Ed = /* @__PURE__ */ new WeakMap(), cw = /* @__PURE__ */ new WeakMap(), hw = /* @__PURE__ */ new WeakMap(), Td = /* @__PURE__ */ new WeakMap();
class $te {
  constructor(e, n, r) {
    ea(this, Bu, {
      writable: !0,
      value: void 0
    }), ea(this, ns, {
      writable: !0,
      value: void 0
    }), ea(this, wr, {
      writable: !0,
      value: void 0
    }), ea(this, Ed, {
      writable: !0,
      value: []
    }), ea(this, cw, {
      writable: !0,
      value: []
    }), ea(this, hw, {
      writable: !0,
      value: void 0
    }), ea(this, Td, {
      writable: !0,
      value: []
    }), ts(this, Bu, e), ts(this, ns, n), ts(this, wr, r);
  }
  /**
   * Sets removed HF indexes (it should be done right before performing move on HOT).
   *
   * @param {Array<number>} removedIndexes List of removed physical indexes.
   * @returns {Array<number>} List of removed visual indexes.
   */
  setRemovedHfIndexes(e) {
    return ts(this, Td, e.map((n) => {
      const r = Dt(this, ns).getVisualFromPhysicalIndex(n);
      return this.getHfIndexFromVisualIndex(r);
    })), Dt(this, Td);
  }
  /**
   * Gets removed HF indexes (right before performing removal on HOT).
   *
   * @returns {Array<number>} List of removed HF indexes.
   */
  getRemovedHfIndexes() {
    return Dt(this, Td);
  }
  /**
   * Gets corresponding HyperFormula index for particular visual index. It's respecting the idea that HF's engine
   * is fed also with trimmed indexes (business requirements for formula result calculation also for trimmed elements).
   *
   * @param {number} visualIndex Visual index.
   * @returns {number}
   */
  getHfIndexFromVisualIndex(e) {
    const n = Dt(this, ns).getIndexesSequence(), r = Dt(this, ns).getNotTrimmedIndexes();
    return n.indexOf(r[e]);
  }
  /**
   * Synchronizes moves done on HOT to HF engine (based on previously calculated positions).
   *
   * @private
   * @param {Array<{from: number, to: number}>} moves Calculated HF's move positions.
   */
  syncMoves(e) {
    const r = `move${Fn(Dt(this, Bu))}s`;
    Dt(this, wr).getEngine().batch(() => {
      e.forEach((i) => {
        const o = i.from !== i.to, s = i.from + 1 !== i.to;
        o && s && Dt(this, wr).getEngine()[r](Dt(this, wr).getSheetId(), i.from, 1, i.to);
      });
    });
  }
  /**
   * Stores information about performed HOT moves for purpose of calculating where to move HF elements.
   *
   * @param {Array<number>} movedVisualIndexes Sequence of moved visual indexes for certain axis.
   * @param {number} visualFinalIndex Final visual place where to move HOT indexes.
   * @param {boolean} movePossible Indicates if it's possible to move HOT indexes to the desired position.
   */
  storeMovesInformation(e, n, r) {
    r !== !1 && (ts(this, cw, e.map((i) => this.getHfIndexFromVisualIndex(i))), ts(this, hw, this.getHfIndexFromVisualIndex(n)));
  }
  /**
   * Gets first position where to move element (respecting the fact that some element will be sooner or later
   * taken out of the dataset in order to move them).
   *
   * @param {Array<number>} movedHfIndexes Sequence of moved HF indexes for certain axis.
   * @param {number} finalHfIndex Final HF place where to move rows.
   * @returns {number} HF's index informing where to move the first element.
   * @private
   */
  getMoveLine(e, n) {
    const r = Dt(this, ns).getNumberOfIndexes(), i = Array.from(Array(r).keys()).filter((s) => e.includes(s) === !1);
    if (n === 0) {
      var o;
      return (o = i[n]) !== null && o !== void 0 ? o : 0;
    }
    return i[n - 1] + 1;
  }
  /**
   * Gets initially calculated HF's move positions.
   *
   * @private
   * @param {Array<number>} movedHfIndexes Sequence of moved HF indexes for certain axis.
   * @param {number} finalHfIndex Final HF place where to move rows.
   * @returns {Array<{from: number, to: number}>} Initially calculated HF's move positions.
   */
  getInitiallyCalculatedMoves(e, n) {
    let r = this.getMoveLine(e, n);
    const i = [];
    return e.forEach((o) => {
      const s = {
        from: o,
        to: r
      };
      i.forEach((a) => {
        const l = a.from > a.to, u = a.to <= s.from;
        a.from > s.from && u && l && (s.from += 1);
      }), s.from >= r && (r += 1), i.push(s);
    }), i;
  }
  /**
   * Gets finally calculated HF's move positions (after adjusting).
   *
   * @private
   * @param {Array<{from: number, to: number}>} moves Initially calculated HF's move positions.
   * @returns {Array<{from: number, to: number}>} Finally calculated HF's move positions (after adjusting).
   */
  adjustedCalculatedMoves(e) {
    return e.forEach((n, r) => {
      e.slice(r + 1).forEach((o) => {
        const s = o.from < o.to;
        o.from > n.from && s && (o.from -= 1);
      });
    }), e;
  }
  /**
   * Calculating where to move HF elements and performing already calculated moves.
   *
   * @param {boolean} movePossible Indicates if it was possible to move HOT indexes to the desired position.
   * @param {boolean} orderChanged Indicates if order of HOT indexes was changed by move.
   */
  calculateAndSyncMoves(e, n) {
    if (Dt(this, wr).isPerformingUndoRedo() || e === !1 || n === !1)
      return;
    const r = this.adjustedCalculatedMoves(this.getInitiallyCalculatedMoves(Dt(this, cw), Dt(this, hw)));
    Dt(this, wr).getSheetId() === null ? Dt(this, wr).getPostponeAction(() => this.syncMoves(r)) : this.syncMoves(r);
  }
  /**
   * Gets callback for hook triggered after performing change of indexes order.
   *
   * @returns {Function}
   */
  getIndexesChangeSyncMethod() {
    const e = `set${Fn(Dt(this, Bu))}Order`;
    return (n) => {
      if (Dt(this, wr).isPerformingUndoRedo())
        return;
      const r = Dt(this, ns).getIndexesSequence();
      if (n === "update") {
        const i = Dt(this, Ed).map((l) => r.indexOf(l)), o = Dt(this, wr).getEngine().getSheetDimensions(Dt(this, wr).getSheetId());
        let s;
        Dt(this, Bu) === "row" ? s = o.height : s = o.width;
        const a = i.length;
        for (let l = a; l < s; l += 1)
          i.push(l);
        Dt(this, wr).getEngine()[e](Dt(this, wr).getSheetId(), i);
      }
      ts(this, Ed, r);
    };
  }
  /**
   * Initialize the AxisSyncer.
   */
  init() {
    ts(this, Ed, Dt(this, ns).getIndexesSequence());
  }
}
const sM = $te;
function ta(t, e, n) {
  kte(t, e), e.set(t, n);
}
function kte(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function fo(t, e) {
  var n = PD(t, e, "get");
  return Fte(t, n);
}
function Fte(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function na(t, e, n) {
  var r = PD(t, e, "set");
  return Wte(t, r, n), n;
}
function PD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Wte(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var _d = /* @__PURE__ */ new WeakMap(), Md = /* @__PURE__ */ new WeakMap(), dw = /* @__PURE__ */ new WeakMap(), fw = /* @__PURE__ */ new WeakMap(), gw = /* @__PURE__ */ new WeakMap(), mw = /* @__PURE__ */ new WeakMap(), pw = /* @__PURE__ */ new WeakMap();
class Vte {
  constructor(e, n, r) {
    ta(this, _d, {
      writable: !0,
      value: void 0
    }), ta(this, Md, {
      writable: !0,
      value: void 0
    }), ta(this, dw, {
      writable: !0,
      value: void 0
    }), ta(this, fw, {
      writable: !0,
      value: !1
    }), ta(this, gw, {
      writable: !0,
      value: !1
    }), ta(this, mw, {
      writable: !0,
      value: null
    }), ta(this, pw, {
      writable: !0,
      value: null
    }), na(this, _d, new sM("row", e, this)), na(this, Md, new sM("column", n, this)), na(this, dw, r);
  }
  /**
   * Gets index synchronizer for a particular axis.
   *
   * @param {'row'|'column'} indexType Type of indexes.
   * @returns {AxisSyncer}
   */
  getForAxis(e) {
    return e === "row" ? fo(this, _d) : fo(this, Md);
  }
  /**
   * Sets flag informing whether an undo action is already performed (we don't execute synchronization in such case).
   *
   * @param {boolean} flagValue Boolean value for the flag.
   */
  setPerformUndo(e) {
    na(this, fw, e);
  }
  /**
   * Sets flag informing whether a redo action is already performed (we don't execute synchronization in such case).
   *
   * @param {boolean} flagValue Boolean value for the flag.
   */
  setPerformRedo(e) {
    na(this, gw, e);
  }
  /**
   * Gets information whether redo or undo action is already performed (we don't execute synchronization in such case).
   *
   * @private
   * @returns {boolean}
   */
  isPerformingUndoRedo() {
    return fo(this, fw) || fo(this, gw);
  }
  /**
   * Gets HyperFormula's sheet id.
   *
   * @returns {string|null}
   */
  getSheetId() {
    return fo(this, pw);
  }
  /**
   * Gets engine instance that will be used for handled instance of Handsontable.
   *
   * @type {HyperFormula|null}
   */
  getEngine() {
    return fo(this, mw);
  }
  /**
   * Gets method which will postpone execution of some action (needed when synchronization endpoint isn't setup yet).
   *
   * @returns {Function}
   */
  getPostponeAction() {
    return fo(this, dw);
  }
  /**
   * Setups a synchronization endpoint.
   *
   * @param {HyperFormula|null} engine The HF's engine instance which will be synced.
   * @param {string|null} sheetId HyperFormula's sheet name.
   */
  setupSyncEndpoint(e, n) {
    na(this, mw, e), na(this, pw, n), fo(this, _d).init(), fo(this, Md).init();
  }
}
const Bte = Vte;
function kt(t, e) {
  xD(t, e), e.add(t);
}
function al(t, e, n) {
  return e = Ute(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Ute(t) {
  var e = Yte(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Yte(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function ww(t, e, n) {
  xD(t, e), e.set(t, n);
}
function xD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Is(t, e, n) {
  var r = HD(t, e, "set");
  return Gte(t, r, n), n;
}
function Gte(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function $l(t, e) {
  var n = HD(t, e, "get");
  return zte(t, n);
}
function HD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function zte(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function Ot(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const $n = "formulas", jte = ["maxRows", "maxColumns", "language"], Kte = 260;
_e.getSingleton().register("afterNamedExpressionAdded");
_e.getSingleton().register("afterNamedExpressionRemoved");
_e.getSingleton().register("afterSheetAdded");
_e.getSingleton().register("afterSheetRemoved");
_e.getSingleton().register("afterSheetRenamed");
_e.getSingleton().register("afterFormulasValuesUpdate");
const tu = (t) => t === "UndoRedo.undo" || t === "UndoRedo.redo" || t === "auto";
var $o = /* @__PURE__ */ new WeakMap(), nR = /* @__PURE__ */ new WeakMap(), Uu = /* @__PURE__ */ new WeakMap(), aM = /* @__PURE__ */ new WeakSet(), lM = /* @__PURE__ */ new WeakSet(), Cw = /* @__PURE__ */ new WeakSet(), uM = /* @__PURE__ */ new WeakSet(), vw = /* @__PURE__ */ new WeakSet(), cM = /* @__PURE__ */ new WeakSet(), hM = /* @__PURE__ */ new WeakSet(), Sw = /* @__PURE__ */ new WeakSet(), dM = /* @__PURE__ */ new WeakSet(), fM = /* @__PURE__ */ new WeakSet(), gM = /* @__PURE__ */ new WeakSet(), mM = /* @__PURE__ */ new WeakSet(), pM = /* @__PURE__ */ new WeakSet(), wM = /* @__PURE__ */ new WeakSet(), CM = /* @__PURE__ */ new WeakSet(), vM = /* @__PURE__ */ new WeakSet(), SM = /* @__PURE__ */ new WeakSet(), yM = /* @__PURE__ */ new WeakSet(), bM = /* @__PURE__ */ new WeakSet(), RM = /* @__PURE__ */ new WeakSet(), EM = /* @__PURE__ */ new WeakSet(), TM = /* @__PURE__ */ new WeakSet(), _M = /* @__PURE__ */ new WeakSet(), MM = /* @__PURE__ */ new WeakSet();
class Xte extends gt {
  constructor() {
    var e;
    super(...arguments), e = this, kt(this, MM), kt(this, _M), kt(this, TM), kt(this, EM), kt(this, RM), kt(this, bM), kt(this, yM), kt(this, SM), kt(this, vM), kt(this, CM), kt(this, wM), kt(this, pM), kt(this, mM), kt(this, gM), kt(this, fM), kt(this, dM), kt(this, Sw), kt(this, hM), kt(this, cM), kt(this, vw), kt(this, uM), kt(this, Cw), kt(this, lM), kt(this, aM), ww(this, $o, {
      writable: !0,
      value: !1
    }), ww(this, nR, {
      writable: !0,
      value: !1
    }), ww(this, Uu, {
      writable: !0,
      value: [["valuesUpdated", function() {
        for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
          r[i] = arguments[i];
        return Ot(e, bM, hne).call(e, ...r);
      }], ["namedExpressionAdded", function() {
        for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
          r[i] = arguments[i];
        return Ot(e, RM, dne).call(e, ...r);
      }], ["namedExpressionRemoved", function() {
        for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
          r[i] = arguments[i];
        return Ot(e, EM, fne).call(e, ...r);
      }], ["sheetAdded", function() {
        for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
          r[i] = arguments[i];
        return Ot(e, TM, gne).call(e, ...r);
      }], ["sheetRenamed", function() {
        for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
          r[i] = arguments[i];
        return Ot(e, _M, mne).call(e, ...r);
      }], ["sheetRemoved", function() {
        for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
          r[i] = arguments[i];
        return Ot(e, MM, pne).call(e, ...r);
      }]]
    }), al(this, "staticRegister", yi("formulas")), al(this, "engine", null), al(this, "sheetName", null), al(this, "indexSyncer", null), al(this, "rowAxisSyncer", null), al(this, "columnAxisSyncer", null);
  }
  static get PLUGIN_KEY() {
    return $n;
  }
  static get PLUGIN_PRIORITY() {
    return Kte;
  }
  static get SETTING_KEYS() {
    return [$n, ...jte];
  }
  /**
   * HyperFormula's sheet id.
   *
   * @type {number|null}
   */
  get sheetId() {
    return this.sheetName === null ? null : this.engine.getSheetId(this.sheetName);
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link Formulas#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[$n];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e, n = this;
    if (!this.enabled) {
      if (this.engine = (e = Tte(this.hot)) !== null && e !== void 0 ? e : this.engine, !this.engine) {
        Pt("Missing the required `engine` key in the Formulas settings. Please fill it with either an engine class or an engine instance.");
        return;
      }
      if (this.sheetName !== null && !this.engine.doesSheetExist(this.sheetName)) {
        const r = this.addSheet(this.sheetName, this.hot.getSourceDataArray());
        r !== !1 && (this.sheetName = r);
      }
      this.addHook("beforeLoadData", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, Cw, OM).call(n, ...i);
      }), this.addHook("afterLoadData", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, vw, AM).call(n, ...i);
      }), this.addHook("beforeUpdateData", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, Cw, OM).call(n, ...i);
      }), this.addHook("afterUpdateData", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, vw, AM).call(n, ...i);
      }), this.addHook("modifyData", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, cM, Jte).call(n, ...i);
      }), this.addHook("modifySourceData", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, hM, ene).call(n, ...i);
      }), this.addHook("beforeValidate", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, aM, qte).call(n, ...i);
      }), this.addHook("afterSetSourceDataAtCell", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, dM, tne).call(n, ...i);
      }), this.addHook("afterSetDataAtCell", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, Sw, IM).call(n, ...i);
      }), this.addHook("afterSetDataAtRowProp", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, Sw, IM).call(n, ...i);
      }), this.addHook("beforeCreateRow", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, fM, nne).call(n, ...i);
      }), this.addHook("beforeCreateCol", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, gM, rne).call(n, ...i);
      }), this.addHook("afterCreateRow", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, wM, sne).call(n, ...i);
      }), this.addHook("afterCreateCol", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, CM, ane).call(n, ...i);
      }), this.addHook("beforeRemoveRow", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, mM, ine).call(n, ...i);
      }), this.addHook("beforeRemoveCol", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, pM, one).call(n, ...i);
      }), this.addHook("afterRemoveRow", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, vM, lne).call(n, ...i);
      }), this.addHook("afterRemoveCol", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, SM, une).call(n, ...i);
      }), this.indexSyncer = new Bte(this.hot.rowIndexMapper, this.hot.columnIndexMapper, (r) => {
        this.hot.addHookOnce("init", () => {
          r();
        });
      }), this.rowAxisSyncer = this.indexSyncer.getForAxis("row"), this.columnAxisSyncer = this.indexSyncer.getForAxis("column"), this.hot.addHook("afterRowSequenceChange", this.rowAxisSyncer.getIndexesChangeSyncMethod()), this.hot.addHook("afterColumnSequenceChange", this.columnAxisSyncer.getIndexesChangeSyncMethod()), this.hot.addHook("beforeRowMove", (r, i, o, s) => {
        this.rowAxisSyncer.storeMovesInformation(r, i, s);
      }), this.hot.addHook("beforeColumnMove", (r, i, o, s) => {
        this.columnAxisSyncer.storeMovesInformation(r, i, s);
      }), this.hot.addHook("afterRowMove", (r, i, o, s, a) => {
        this.rowAxisSyncer.calculateAndSyncMoves(s, a);
      }), this.hot.addHook("afterColumnMove", (r, i, o, s, a) => {
        this.columnAxisSyncer.calculateAndSyncMoves(s, a);
      }), this.hot.addHook("beforeColumnFreeze", (r, i) => {
        this.columnAxisSyncer.storeMovesInformation([r], this.hot.getSettings().fixedColumnsStart, i);
      }), this.hot.addHook("afterColumnFreeze", (r, i) => {
        this.columnAxisSyncer.calculateAndSyncMoves(i, i);
      }), this.hot.addHook("beforeColumnUnfreeze", (r, i) => {
        this.columnAxisSyncer.storeMovesInformation([r], this.hot.getSettings().fixedColumnsStart - 1, i);
      }), this.hot.addHook("afterColumnUnfreeze", (r, i) => {
        this.columnAxisSyncer.calculateAndSyncMoves(i, i);
      }), this.addHook("afterCellMetaReset", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, uM, Qte).call(n, ...i);
      }), this.addHook("beforeUndo", () => {
        this.indexSyncer.setPerformUndo(!0), this.engine.undo();
      }), this.addHook("beforeRedo", () => {
        this.indexSyncer.setPerformRedo(!0), this.engine.redo();
      }), this.addHook("afterUndo", () => {
        this.indexSyncer.setPerformUndo(!1);
      }), this.addHook("afterUndo", () => {
        this.indexSyncer.setPerformRedo(!1);
      }), this.addHook("afterDetachChild", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, yM, cne).call(n, ...i);
      }), this.addHook("beforeAutofill", function() {
        for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
          i[o] = arguments[o];
        return Ot(n, lM, Zte).call(n, ...i);
      }), $l(this, Uu).forEach((r) => {
        let [i, o] = r;
        return this.engine.on(i, o);
      }), super.enablePlugin();
    }
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    $l(this, Uu).forEach((e) => {
      let [n, r] = e;
      return this.engine.off(n, r);
    }), oM(this.engine, this.hot), this.engine = null, super.disablePlugin();
  }
  /**
   * Triggered on `updateSettings`.
   *
   * @private
   * @param {object} newSettings New set of settings passed to the `updateSettings` method.
   */
  updatePlugin(e) {
    const n = Rte(this.hot.getSettings());
    Ete(this.engine.getConfig(), n) && this.engine.updateConfig(n);
    const r = this.hot.getSettings()[$n];
    if (Re(r) && Re(r.sheetName) && r.sheetName !== this.sheetName && this.switchSheet(r.sheetName), !e.data && this.sheetName === null) {
      const i = this.hot.getSettings()[$n].sheetName;
      i && this.engine.doesSheetExist(i) ? this.switchSheet(this.sheetName) : this.sheetName = this.addSheet(i ?? void 0, this.hot.getSourceDataArray());
    }
    super.updatePlugin(e);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    $l(this, Uu).forEach((e) => {
      var n;
      let [r, i] = e;
      return (n = this.engine) === null || n === void 0 ? void 0 : n.off(r, i);
    }), Is(this, Uu, null), oM(this.engine, this.hot), this.engine = null, super.destroy();
  }
  /**
   * Add a sheet to the shared HyperFormula instance.
   *
   * @param {string|null} [sheetName] The new sheet name. If not provided (or a null is passed), will be
   * auto-generated by HyperFormula.
   * @param {Array} [sheetData] Data passed to the shared HyperFormula instance. Has to be declared as an array of
   * arrays - array of objects is not supported in this scenario.
   * @returns {boolean|string} `false` if the data format is unusable or it is impossible to add a new sheet to the
   * engine, the created sheet name otherwise.
   */
  addSheet(e, n) {
    if (Re(n) && !mx(n))
      return Pt("The provided data should be an array of arrays."), !1;
    if (e != null && this.engine.doesSheetExist(e))
      return Pt("Sheet with the provided name already exists."), !1;
    try {
      const r = this.engine.addSheet(e ?? void 0);
      return n && this.engine.setSheetContent(this.engine.getSheetId(r), n), r;
    } catch (r) {
      return Pt(r.message), !1;
    }
  }
  /**
   * Switch the sheet used as data in the Handsontable instance (it loads the data from the shared HyperFormula
   * instance).
   *
   * @param {string} sheetName Sheet name used in the shared HyperFormula instance.
   */
  switchSheet(e) {
    if (!this.engine.doesSheetExist(e)) {
      ES(`The sheet named \`${e}\` does not exist, switch aborted.`);
      return;
    }
    this.sheetName = e;
    const n = this.engine.getSheetSerialized(this.sheetId);
    n.length > 0 && this.hot.loadData(n, `${Fn($n)}.switchSheet`);
  }
  /**
   * Get the cell type under specified visual coordinates.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {number} [sheet] The target sheet id, defaults to the current sheet.
   * @returns {string} Possible values: 'FORMULA' | 'VALUE' | 'ARRAYFORMULA' | 'EMPTY'.
   */
  getCellType(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.sheetId;
    const i = this.hot.toPhysicalRow(e), o = this.hot.toPhysicalColumn(n);
    return i !== null && o !== null ? this.engine.getCellType({
      sheet: r,
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(e),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(n)
    }) : "EMPTY";
  }
  /**
   * Returns `true` if under specified visual coordinates is formula.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {number} [sheet] The target sheet id, defaults to the current sheet.
   * @returns {boolean}
   */
  isFormulaCellType(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.sheetId;
    return this.engine.doesCellHaveFormula({
      sheet: r,
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(e),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(n)
    });
  }
  /**
   * Renders dependent sheets (handsontable instances) based on the changes - list of the
   * recalculated dependent cells.
   *
   * @private
   * @param {object[]} dependentCells The values and location of applied changes within HF engine.
   * @param {boolean} [renderSelf] `true` if it's supposed to render itself, `false` otherwise.
   */
  renderDependentSheets(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const r = /* @__PURE__ */ new Set();
    e.forEach((i) => {
      var o;
      const s = i == null || (o = i.address) === null || o === void 0 ? void 0 : o.sheet;
      s !== void 0 && (r.has(s) || r.add(s));
    }), iM(this.engine).forEach((i, o) => {
      if ((n || o !== this.sheetId) && r.has(o)) {
        var s;
        i.render(), (s = i.view) === null || s === void 0 || s.adjustElementsSize();
      }
    });
  }
  /**
   * Validates dependent cells based on the cells that are modified by the change.
   *
   * @private
   * @param {object[]} dependentCells The values and location of applied changes within HF engine.
   * @param {object[]} [changedCells] The values and location of applied changes by developer (through API or UI).
   */
  validateDependentCells(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    const r = (o) => {
      var s;
      const {
        row: a,
        col: l,
        sheet: u
      } = (s = o == null ? void 0 : o.address) !== null && s !== void 0 ? s : {};
      return Re(u) ? `${u}:${a}x${l}` : "";
    }, i = new Set(n.map((o) => r(o)));
    e.forEach((o) => {
      var s, a;
      const {
        row: l,
        col: u
      } = (s = o.address) !== null && s !== void 0 ? s : {};
      if (Re(l) === !1 || Re(u) === !1 || l >= this.hot.countRows() || u >= this.hot.countCols())
        return;
      const c = o == null || (a = o.address) === null || a === void 0 ? void 0 : a.sheet, d = r(o);
      if (c !== void 0 && !i.has(d)) {
        const g = iM(this.engine).get(c);
        if (!g)
          return;
        g.validateCell(g.getDataAtCell(l, u), g.getCellMeta(l, u), () => {
        });
      }
    });
  }
  /**
   * Sync a change from the change-related hooks with the engine.
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {Handsontable.CellValue} newValue New value.
   * @returns {Array} Array of changes exported from the engine.
   */
  syncChangeWithEngine(e, n, r) {
    const i = {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(e),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(n),
      sheet: this.sheetId
    };
    if (!this.engine.isItPossibleToSetCellContents(i)) {
      Pt(`Not possible to set cell data at ${JSON.stringify(i)}`);
      return;
    }
    const o = this.hot.getCellMeta(e, n);
    return tR(r, o.type) && (MD(r, o.dateFormat) ? r = OD(r, o.dateFormat) : xte(r) === !1 && (r = `'${r}`)), this.engine.setCellContents(i, r);
  }
}
function qte(t, e, n) {
  const r = this.hot.propToCol(n);
  if (this.isFormulaCellType(e, r)) {
    const i = {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(e),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(r),
      sheet: this.sheetId
    }, o = this.hot.getCellMeta(e, r);
    let s = this.engine.getCellValue(i);
    return o.type === "date" && Jn(s) && (s = AD(s, o.dateFormat)), typeof s == "object" && s !== null ? s.value : s;
  }
  return t;
}
function Zte(t, e, n) {
  const {
    row: r,
    col: i
  } = e.getTopStartCorner(), {
    row: o,
    col: s
  } = e.getBottomEndCorner(), {
    row: a,
    col: l
  } = n.getTopStartCorner(), {
    row: u,
    col: c
  } = n.getBottomEndCorner(), d = {
    start: {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(r),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(i),
      sheet: this.sheetId
    },
    end: {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(o),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(s),
      sheet: this.sheetId
    }
  }, g = {
    start: {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(a),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(l),
      sheet: this.sheetId
    },
    end: {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(u),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(c),
      sheet: this.sheetId
    }
  };
  if (this.engine.isItPossibleToSetCellContents(g) === !1)
    return !1;
  const p = this.engine.getFillRangeData(d, g), {
    row: C,
    col: E
  } = d.start, {
    row: I,
    col: M
  } = d.end, y = I - C + 1, $ = M - E + 1;
  for (let X = 0; X < p.length; X += 1)
    for (let G = 0; G < p[X].length; G += 1) {
      const q = p[X][G], re = X % y, v = G % $, S = this.hot.getCellMeta(re, v);
      tR(q, S.type) && (q.startsWith("'") ? p[X][G] = q.slice(1) : this.isFormulaCellType(re, v, this.sheetId) === !1 && (p[X][G] = Hte(q, S.dateFormat)));
    }
  return p;
}
function OM(t, e) {
  (arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "").includes(Fn($n)) || Is(this, nR, It(this.hot.getSettings().data));
}
function Qte() {
  const t = this.hot.getSourceDataArray();
  let e = !1;
  t.forEach((n, r) => {
    n.forEach((i, o) => {
      const s = this.hot.getCellMeta(r, o), a = s.dateFormat;
      tR(i, s.type) && (e = !0, MD(i, a) ? t[r][o] = OD(i, a) : this.isFormulaCellType(r, o) === !1 && (t[r][o] = `'${i}`));
    });
  }), e === !0 && (Is(this, $o, !0), this.engine.setSheetContent(this.sheetId, t), Is(this, $o, !1));
}
function AM(t, e) {
  if (!(arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "").includes(Fn($n)))
    if (this.sheetName = Ite(this.engine, this.hot.getSettings()[$n].sheetName), $l(this, nR))
      this.switchSheet(this.sheetName);
    else {
      const r = this.hot.getSourceDataArray();
      if (this.engine.isItPossibleToReplaceSheetContent(this.sheetId, r)) {
        Is(this, $o, !0);
        const i = this.engine.setSheetContent(this.sheetId, r);
        this.indexSyncer.setupSyncEndpoint(this.engine, this.sheetId), this.renderDependentSheets(i), Is(this, $o, !1);
      }
    }
}
function Jte(t, e, n, r) {
  if (r !== "get" || $l(this, $o) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName))
    return;
  const i = this.hot.toVisualRow(t);
  if (i === null || e === null)
    return;
  if (!this.isFormulaCellType(i, e) && this.getCellType(i, e) !== "ARRAY") {
    _D(n.value) && (n.value = Pte(n.value));
    return;
  }
  const s = {
    row: this.rowAxisSyncer.getHfIndexFromVisualIndex(i),
    col: this.columnAxisSyncer.getHfIndexFromVisualIndex(e),
    sheet: this.sheetId
  };
  let a = this.engine.getCellValue(s);
  const l = this.hot.getCellMeta(i, e);
  l.type === "date" && Jn(a) && (a = AD(a, l.dateFormat));
  const u = typeof a == "object" && a !== null ? a.value : a;
  n.value = u;
}
function ene(t, e, n, r) {
  if (r !== "get" || $l(this, $o) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName))
    return;
  const i = this.hot.toVisualRow(t), o = this.hot.propToCol(e);
  if (i === null || o === null || !this.isFormulaCellType(i, o) && this.getCellType(i, o) !== "ARRAY")
    return;
  const a = this.engine.getSheetDimensions(this.engine.getSheetId(this.sheetName));
  if (a.width === 0 && a.height === 0)
    return;
  const l = {
    row: this.rowAxisSyncer.getHfIndexFromVisualIndex(i),
    col: this.columnAxisSyncer.getHfIndexFromVisualIndex(o),
    sheet: this.sheetId
  };
  n.value = this.engine.getCellSerialized(l);
}
function IM(t, e) {
  if (tu(e))
    return;
  const n = [], r = [], i = this.engine.batch(() => {
    t.forEach((o) => {
      let [s, a, , l] = o;
      const u = this.hot.propToCol(a), c = this.hot.toPhysicalRow(s), d = this.hot.toPhysicalColumn(u), g = {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(s),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(u),
        sheet: this.sheetId
      };
      c !== null && d !== null ? this.syncChangeWithEngine(s, u, l) : n.push([s, u, l]), r.push({
        address: g
      });
    });
  });
  n.length && this.hot.addHookOnce("afterChange", () => {
    const o = this.engine.batch(() => {
      n.forEach((s) => {
        let [a, l, u] = s;
        this.syncChangeWithEngine(a, l, u);
      });
    });
    this.renderDependentSheets(o, !0);
  }), this.renderDependentSheets(i), this.validateDependentCells(i, r);
}
function tne(t, e) {
  if (tu(e))
    return;
  const n = [], r = [];
  t.forEach((i) => {
    let [o, s, , a] = i;
    const l = this.hot.propToCol(s);
    if (!Jn(l))
      return;
    const u = {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(o),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(l),
      sheet: this.sheetId
    };
    if (!this.engine.isItPossibleToSetCellContents(u)) {
      Pt(`Not possible to set source cell data at ${JSON.stringify(u)}`);
      return;
    }
    r.push({
      address: u
    }), n.push(...this.engine.setCellContents(u, a));
  }), this.renderDependentSheets(n), this.validateDependentCells(n, r);
}
function nne(t, e) {
  let n = this.rowAxisSyncer.getHfIndexFromVisualIndex(t);
  if (t >= this.hot.countRows() && (n = t), this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddRows(this.sheetId, [n, e]))
    return !1;
}
function rne(t, e) {
  let n = this.columnAxisSyncer.getHfIndexFromVisualIndex(t);
  if (t >= this.hot.countCols() && (n = t), this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddColumns(this.sheetId, [n, e]))
    return !1;
}
function ine(t, e, n) {
  return this.rowAxisSyncer.setRemovedHfIndexes(n).every((o) => this.engine.isItPossibleToRemoveRows(this.sheetId, [o, 1])) === !1 ? !1 : void 0;
}
function one(t, e, n) {
  return this.columnAxisSyncer.setRemovedHfIndexes(n).every((o) => this.engine.isItPossibleToRemoveColumns(this.sheetId, [o, 1])) === !1 ? !1 : void 0;
}
function sne(t, e, n) {
  if (tu(n))
    return;
  const r = this.engine.addRows(this.sheetId, [this.rowAxisSyncer.getHfIndexFromVisualIndex(t), e]);
  this.renderDependentSheets(r);
}
function ane(t, e, n) {
  if (tu(n))
    return;
  const r = this.engine.addColumns(this.sheetId, [this.columnAxisSyncer.getHfIndexFromVisualIndex(t), e]);
  this.renderDependentSheets(r);
}
function lne(t, e, n, r) {
  if (tu(r))
    return;
  const i = this.rowAxisSyncer.getRemovedHfIndexes().sort().reverse(), o = this.engine.batch(() => {
    i.forEach((s) => {
      this.engine.removeRows(this.sheetId, [s, 1]);
    });
  });
  this.renderDependentSheets(o);
}
function une(t, e, n, r) {
  if (tu(r))
    return;
  const i = this.columnAxisSyncer.getRemovedHfIndexes().sort().reverse(), o = this.engine.batch(() => {
    i.forEach((s) => {
      this.engine.removeColumns(this.sheetId, [s, 1]);
    });
  });
  this.renderDependentSheets(o);
}
function cne(t, e, n) {
  var r;
  Is(this, $o, !0);
  const i = this.hot.getSourceDataArray(n, 0, n + (((r = e.__children) === null || r === void 0 ? void 0 : r.length) || 0), this.hot.countSourceCols());
  Is(this, $o, !1), i.forEach((o, s) => {
    o.forEach((a, l) => {
      this.engine.setCellContents({
        col: l,
        row: n + s,
        sheet: this.sheetId
      }, [[a]]);
    });
  });
}
function hne(t) {
  this.hot.runHooks("afterFormulasValuesUpdate", t);
}
function dne(t, e) {
  this.hot.runHooks("afterNamedExpressionAdded", t, e);
}
function fne(t, e) {
  this.hot.runHooks("afterNamedExpressionRemoved", t, e);
}
function gne(t) {
  this.hot.runHooks("afterSheetAdded", t);
}
function mne(t, e) {
  this.hot.runHooks("afterSheetRenamed", t, e);
}
function pne(t, e) {
  this.hot.runHooks("afterSheetRemoved", t, e);
}
function wne(t) {
  return {
    key: "hidden_columns_hide",
    name() {
      const e = this.getSelectedLast();
      let n = 0;
      if (Array.isArray(e)) {
        const [, r, , i] = e;
        r - i !== 0 && (n = 1);
      }
      return this.getTranslatedPhrase(Gy, n);
    },
    callback() {
      const {
        from: e,
        to: n
      } = this.getSelectedRangeLast(), r = Math.max(Math.min(e.col, n.col), 0), i = Math.max(e.col, n.col), o = [];
      for (let l = r; l <= i; l += 1)
        o.push(l);
      t.hideColumns(o);
      const s = o[o.length - 1], a = this.columnIndexMapper.getNearestNotHiddenIndex(s, 1, !0);
      Number.isInteger(a) && a >= 0 ? this.selectColumns(a) : this.deselectCell(), this.render(), this.view.adjustElementsSize(!0);
    },
    disabled: !1,
    hidden() {
      return !(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner());
    }
  };
}
function Cne(t) {
  const e = [];
  return {
    key: "hidden_columns_show",
    name() {
      const n = e.length > 1 ? 1 : 0;
      return this.getTranslatedPhrase(zy, n);
    },
    callback() {
      var n, r;
      if (e.length === 0)
        return;
      let i = e[0], o = e[e.length - 1];
      i = (n = this.columnIndexMapper.getNearestNotHiddenIndex(i - 1, -1)) !== null && n !== void 0 ? n : 0, o = (r = this.columnIndexMapper.getNearestNotHiddenIndex(o + 1, 1)) !== null && r !== void 0 ? r : this.countCols() - 1, t.showColumns(e), this.render(), this.view.adjustElementsSize(!0), o - i + 1 === this.countCols() || this.selectColumns(i, o);
    },
    disabled: !1,
    hidden() {
      const n = qe(t.getHiddenColumns(), (d) => this.toPhysicalColumn(d));
      if (!(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner()) || n.length < 1)
        return !0;
      e.length = 0;
      const r = this.getSelectedRangeLast(), i = r.getTopStartCorner().col, o = r.getBottomEndCorner().col, s = this.columnIndexMapper, a = s.getRenderableFromVisualIndex(i), l = s.getRenderableFromVisualIndex(o), u = s.getNotTrimmedIndexes(), c = [];
      if (i !== o) {
        const d = o - i + 1, g = l - a + 1;
        if (d > g) {
          const p = u.slice(i, o + 1);
          c.push(...p.filter((C) => n.includes(C)));
        }
      } else if (a === 0 && a < i)
        c.push(...u.slice(0, i));
      else if (a === null)
        c.push(...u.slice(0, this.countCols()));
      else {
        const d = this.countCols() - 1, g = s.getRenderableFromVisualIndex(s.getNearestNotHiddenIndex(d, -1));
        l === g && d > o && c.push(...u.slice(o + 1));
      }
      return H(c, (d) => {
        e.push(this.toVisualColumn(d));
      }), e.length === 0;
    }
  };
}
function ll(t, e) {
  DD(t, e), e.add(t);
}
function PM(t, e, n) {
  DD(t, e), e.set(t, n);
}
function DD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ul(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function br(t, e) {
  var n = ND(t, e, "get");
  return vne(t, n);
}
function vne(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function Yu(t, e, n) {
  var r = ND(t, e, "set");
  return Sne(t, r, n), n;
}
function ND(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Sne(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
_e.getSingleton().register("beforeHideColumns");
_e.getSingleton().register("afterHideColumns");
_e.getSingleton().register("beforeUnhideColumns");
_e.getSingleton().register("afterUnhideColumns");
const yw = "hiddenColumns", yne = 310;
var zi = /* @__PURE__ */ new WeakMap(), Hi = /* @__PURE__ */ new WeakMap(), xM = /* @__PURE__ */ new WeakSet(), HM = /* @__PURE__ */ new WeakSet(), DM = /* @__PURE__ */ new WeakSet(), NM = /* @__PURE__ */ new WeakSet(), LM = /* @__PURE__ */ new WeakSet(), $M = /* @__PURE__ */ new WeakSet();
class bne extends gt {
  constructor() {
    super(...arguments), ll(this, $M), ll(this, LM), ll(this, NM), ll(this, DM), ll(this, HM), ll(this, xM), PM(this, zi, {
      writable: !0,
      value: {}
    }), PM(this, Hi, {
      writable: !0,
      value: null
    });
  }
  static get PLUGIN_KEY() {
    return yw;
  }
  static get PLUGIN_PRIORITY() {
    return yne;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link HiddenColumns#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[yw];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const n = this.hot.getSettings()[yw];
    Xe(n) && (Yu(this, zi, n), It(n.copyPasteEnabled) && (n.copyPasteEnabled = !0)), Yu(this, Hi, new zg()), br(this, Hi).addLocalHook("init", () => ul(this, $M, One).call(this)), this.hot.columnIndexMapper.registerMap(this.pluginName, br(this, Hi)), this.addHook("afterContextMenuDefaultOptions", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return ul(e, LM, Mne).call(e, ...i);
    }), this.addHook("afterGetCellMeta", (r, i, o) => ul(this, HM, Ene).call(this, r, i, o)), this.addHook("modifyColWidth", (r, i) => ul(this, xM, Rne).call(this, r, i)), this.addHook("afterGetColHeader", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return ul(e, NM, _ne).call(e, ...i);
    }), this.addHook("modifyCopyableRange", (r) => ul(this, DM, Tne).call(this, r)), super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`hiddenColumns`](@/api/options.md#hiddencolumns)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.columnIndexMapper.unregisterMap(this.pluginName), Yu(this, zi, {}), super.disablePlugin(), this.resetCellsMeta();
  }
  /**
   * Shows the provided columns.
   *
   * @param {number[]} columns Array of visual column indexes.
   */
  showColumns(e) {
    const n = this.getHiddenColumns(), r = this.isValidConfig(e);
    let i = n;
    const o = br(this, Hi).getValues().slice(), s = e.length > 0;
    if (r && s) {
      const l = e.map((u) => this.hot.toPhysicalColumn(u));
      H(l, (u) => {
        o[u] = !1;
      }), i = nn(o, (u, c, d) => (c && u.push(this.hot.toVisualColumn(d)), u), []);
    }
    this.hot.runHooks("beforeUnhideColumns", n, i, r && s) !== !1 && (r && s && br(this, Hi).setValues(o), this.hot.view.adjustElementsSize(), this.hot.runHooks("afterUnhideColumns", n, i, r && s, r && i.length < n.length));
  }
  /**
   * Shows a single column.
   *
   * @param {...number} column Visual column index.
   */
  showColumn() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    this.showColumns(n);
  }
  /**
   * Hides the columns provided in the array.
   *
   * @param {number[]} columns Array of visual column indexes.
   */
  hideColumns(e) {
    const n = this.getHiddenColumns(), r = this.isValidConfig(e);
    let i = n;
    r && (i = Array.from(new Set(n.concat(e)))), this.hot.runHooks("beforeHideColumns", n, i, r) !== !1 && (r && this.hot.batchExecution(() => {
      H(e, (s) => {
        br(this, Hi).setValueAtIndex(this.hot.toPhysicalColumn(s), !0);
      });
    }, !0), this.hot.runHooks("afterHideColumns", n, i, r, r && i.length > n.length));
  }
  /**
   * Hides a single column.
   *
   * @param {...number} column Visual column index.
   */
  hideColumn() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    this.hideColumns(n);
  }
  /**
   * Returns an array of visual indexes of hidden columns.
   *
   * @returns {number[]}
   */
  getHiddenColumns() {
    return qe(br(this, Hi).getHiddenIndexes(), (e) => this.hot.toVisualColumn(e));
  }
  /**
   * Checks if the provided column is hidden.
   *
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  isHidden(e) {
    return br(this, Hi).getValueAtIndex(this.hot.toPhysicalColumn(e)) || !1;
  }
  /**
   * Get if trim config is valid. Check whether all of the provided column indexes are within the bounds of the table.
   *
   * @param {Array} hiddenColumns List of hidden column indexes.
   * @returns {boolean}
   */
  isValidConfig(e) {
    const n = this.hot.countCols();
    return Array.isArray(e) && e.length > 0 ? e.every((r) => Number.isInteger(r) && r >= 0 && r < n) : !1;
  }
  /**
   * Reset all rendered cells meta.
   *
   * @private
   */
  resetCellsMeta() {
    H(this.hot.getCellsMeta(), (e) => {
      e && (e.skipColumnOnPaste = !1);
    });
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    Yu(this, zi, null), Yu(this, Hi, null), super.destroy();
  }
}
function Rne(t, e) {
  if (this.isHidden(e))
    return 0;
  if (br(this, zi).indicators && (this.isHidden(e + 1) || this.isHidden(e - 1)) && typeof t == "number" && this.hot.hasColHeaders())
    return t + 15;
}
function Ene(t, e, n) {
  if (br(this, zi).copyPasteEnabled === !1 && this.isHidden(e) && (n.skipColumnOnPaste = !0), this.isHidden(e - 1))
    n.className = n.className || "", n.className.indexOf("afterHiddenColumn") === -1 && (n.className += " afterHiddenColumn");
  else if (n.className) {
    const r = n.className.split(" ");
    if (r.length > 0) {
      const i = r.indexOf("afterHiddenColumn");
      i > -1 && r.splice(i, 1), n.className = r.join(" ");
    }
  }
}
function Tne(t) {
  if (br(this, zi).copyPasteEnabled)
    return t;
  const e = [], n = (r, i, o, s) => {
    e.push({
      startRow: r,
      endRow: i,
      startCol: o,
      endCol: s
    });
  };
  return H(t, (r) => {
    let i = !0, o = 0;
    xe(r.startCol, r.endCol, (s) => {
      this.isHidden(s) ? (i || n(r.startRow, r.endRow, o, s - 1), i = !0) : (i && (o = s), s === r.endCol && n(r.startRow, r.endRow, o, s), i = !1);
    });
  }), e;
}
function _ne(t, e) {
  if (!br(this, zi).indicators || t < 0)
    return;
  const n = [];
  t >= 1 && this.isHidden(t - 1) && n.push("afterHiddenColumn"), t < this.hot.countCols() - 1 && this.isHidden(t + 1) && n.push("beforeHiddenColumn"), ce(e, n);
}
function Mne(t) {
  t.items.push({
    name: et
  }, wne(this), Cne(this));
}
function One() {
  Array.isArray(br(this, zi).columns) && this.hideColumns(br(this, zi).columns);
}
function Ane(t) {
  return {
    key: "hidden_rows_hide",
    name() {
      const e = this.getSelectedLast();
      let n = 0;
      if (Array.isArray(e)) {
        const [r, , i] = e;
        r - i !== 0 && (n = 1);
      }
      return this.getTranslatedPhrase(jy, n);
    },
    callback() {
      const {
        from: e,
        to: n
      } = this.getSelectedRangeLast(), r = Math.max(Math.min(e.row, n.row), 0), i = Math.max(e.row, n.row), o = [];
      for (let l = r; l <= i; l += 1)
        o.push(l);
      t.hideRows(o);
      const s = o[o.length - 1], a = this.rowIndexMapper.getNearestNotHiddenIndex(s, 1, !0);
      Number.isInteger(a) && a >= 0 ? this.selectRows(a) : this.deselectCell(), this.render(), this.view.adjustElementsSize(!0);
    },
    disabled: !1,
    hidden() {
      return !(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner());
    }
  };
}
function Ine(t) {
  const e = [];
  return {
    key: "hidden_rows_show",
    name() {
      const n = e.length > 1 ? 1 : 0;
      return this.getTranslatedPhrase(Ky, n);
    },
    callback() {
      var n, r;
      if (e.length === 0)
        return;
      let i = e[0], o = e[e.length - 1];
      i = (n = this.rowIndexMapper.getNearestNotHiddenIndex(i - 1, -1)) !== null && n !== void 0 ? n : 0, o = (r = this.rowIndexMapper.getNearestNotHiddenIndex(o + 1, 1)) !== null && r !== void 0 ? r : this.countRows() - 1, t.showRows(e), this.render(), this.view.adjustElementsSize(!0), o - i + 1 === this.countRows() || this.selectRows(i, o);
    },
    disabled: !1,
    hidden() {
      const n = qe(t.getHiddenRows(), (d) => this.toPhysicalRow(d));
      if (!(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner()) || n.length < 1)
        return !0;
      e.length = 0;
      const r = this.getSelectedRangeLast(), i = r.getTopStartCorner().row, o = r.getBottomEndCorner().row, s = this.rowIndexMapper, a = s.getRenderableFromVisualIndex(i), l = s.getRenderableFromVisualIndex(o), u = s.getNotTrimmedIndexes(), c = [];
      if (i !== o) {
        const d = o - i + 1, g = l - a + 1;
        if (d > g) {
          const p = u.slice(i, o + 1);
          c.push(...p.filter((C) => n.includes(C)));
        }
      } else if (a === 0 && a < i)
        c.push(...u.slice(0, i));
      else if (a === null)
        c.push(...u.slice(0, this.countRows()));
      else {
        const d = this.countRows() - 1, g = s.getRenderableFromVisualIndex(s.getNearestNotHiddenIndex(d, -1));
        l === g && d > o && c.push(...u.slice(o + 1));
      }
      return H(c, (d) => {
        e.push(this.toVisualRow(d));
      }), e.length === 0;
    }
  };
}
function cl(t, e) {
  LD(t, e), e.add(t);
}
function kM(t, e, n) {
  LD(t, e), e.set(t, n);
}
function LD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function hl(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function Vr(t, e) {
  var n = $D(t, e, "get");
  return Pne(t, n);
}
function Pne(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function Gu(t, e, n) {
  var r = $D(t, e, "set");
  return xne(t, r, n), n;
}
function $D(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function xne(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
_e.getSingleton().register("beforeHideRows");
_e.getSingleton().register("afterHideRows");
_e.getSingleton().register("beforeUnhideRows");
_e.getSingleton().register("afterUnhideRows");
const bw = "hiddenRows", Hne = 320;
var Io = /* @__PURE__ */ new WeakMap(), Di = /* @__PURE__ */ new WeakMap(), FM = /* @__PURE__ */ new WeakSet(), WM = /* @__PURE__ */ new WeakSet(), VM = /* @__PURE__ */ new WeakSet(), BM = /* @__PURE__ */ new WeakSet(), UM = /* @__PURE__ */ new WeakSet(), YM = /* @__PURE__ */ new WeakSet();
class Dne extends gt {
  constructor() {
    super(...arguments), cl(this, YM), cl(this, UM), cl(this, BM), cl(this, VM), cl(this, WM), cl(this, FM), kM(this, Io, {
      writable: !0,
      value: {}
    }), kM(this, Di, {
      writable: !0,
      value: null
    });
  }
  static get PLUGIN_KEY() {
    return bw;
  }
  static get PLUGIN_PRIORITY() {
    return Hne;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link HiddenRows#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[bw];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const n = this.hot.getSettings()[bw];
    Xe(n) && (Gu(this, Io, n), It(n.copyPasteEnabled) && (n.copyPasteEnabled = !0)), Gu(this, Di, new zg()), Vr(this, Di).addLocalHook("init", () => hl(this, YM, Wne).call(this)), this.hot.rowIndexMapper.registerMap(this.pluginName, Vr(this, Di)), this.addHook("afterContextMenuDefaultOptions", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return hl(e, UM, Fne).call(e, ...i);
    }), this.addHook("afterGetCellMeta", (r, i, o) => hl(this, WM, Lne).call(this, r, i, o)), this.addHook("modifyRowHeight", (r, i) => hl(this, FM, Nne).call(this, r, i)), this.addHook("afterGetRowHeader", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return hl(e, BM, kne).call(e, ...i);
    }), this.addHook("modifyCopyableRange", (r) => hl(this, VM, $ne).call(this, r)), super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`hiddenRows`](@/api/options.md#hiddenrows)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.rowIndexMapper.unregisterMap(this.pluginName), Gu(this, Io, {}), super.disablePlugin(), this.resetCellsMeta();
  }
  /**
   * Shows the rows provided in the array.
   *
   * @param {number[]} rows Array of visual row indexes.
   */
  showRows(e) {
    const n = this.getHiddenRows(), r = this.isValidConfig(e);
    let i = n;
    const o = Vr(this, Di).getValues().slice(), s = e.length > 0;
    if (r && s) {
      const l = e.map((u) => this.hot.toPhysicalRow(u));
      H(l, (u) => {
        o[u] = !1;
      }), i = nn(o, (u, c, d) => (c && u.push(this.hot.toVisualRow(d)), u), []);
    }
    this.hot.runHooks("beforeUnhideRows", n, i, r && s) !== !1 && (r && s && Vr(this, Di).setValues(o), this.hot.runHooks("afterUnhideRows", n, i, r && s, r && i.length < n.length));
  }
  /**
   * Shows the row provided as row index (counting from 0).
   *
   * @param {...number} row Visual row index.
   */
  showRow() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    this.showRows(n);
  }
  /**
   * Hides the rows provided in the array.
   *
   * @param {number[]} rows Array of visual row indexes.
   */
  hideRows(e) {
    const n = this.getHiddenRows(), r = this.isValidConfig(e);
    let i = n;
    r && (i = Array.from(new Set(n.concat(e)))), this.hot.runHooks("beforeHideRows", n, i, r) !== !1 && (r && this.hot.batchExecution(() => {
      H(e, (s) => {
        Vr(this, Di).setValueAtIndex(this.hot.toPhysicalRow(s), !0);
      });
    }, !0), this.hot.runHooks("afterHideRows", n, i, r, r && i.length > n.length));
  }
  /**
   * Hides the row provided as row index (counting from 0).
   *
   * @param {...number} row Visual row index.
   */
  hideRow() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    this.hideRows(n);
  }
  /**
   * Returns an array of visual indexes of hidden rows.
   *
   * @returns {number[]}
   */
  getHiddenRows() {
    return qe(Vr(this, Di).getHiddenIndexes(), (e) => this.hot.toVisualRow(e));
  }
  /**
   * Checks if the provided row is hidden.
   *
   * @param {number} row Visual row index.
   * @returns {boolean}
   */
  isHidden(e) {
    return Vr(this, Di).getValueAtIndex(this.hot.toPhysicalRow(e)) || !1;
  }
  /**
   * Checks whether all of the provided row indexes are within the bounds of the table.
   *
   * @param {Array} hiddenRows List of hidden visual row indexes.
   * @returns {boolean}
   */
  isValidConfig(e) {
    const n = this.hot.countRows();
    return Array.isArray(e) && e.length > 0 ? e.every((r) => Number.isInteger(r) && r >= 0 && r < n) : !1;
  }
  /**
   * Resets all rendered cells meta.
   *
   * @private
   */
  resetCellsMeta() {
    H(this.hot.getCellsMeta(), (e) => {
      e && (e.skipRowOnPaste = !1);
    });
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    Gu(this, Io, null), Gu(this, Di, null), super.destroy();
  }
}
function Nne(t, e) {
  return this.isHidden(e) ? 0 : t;
}
function Lne(t, e, n) {
  if (Vr(this, Io).copyPasteEnabled === !1 && this.isHidden(t) && (n.skipRowOnPaste = !0), this.isHidden(t - 1))
    n.className = n.className || "", n.className.indexOf("afterHiddenRow") === -1 && (n.className += " afterHiddenRow");
  else if (n.className) {
    const r = n.className.split(" ");
    if (r.length > 0) {
      const i = r.indexOf("afterHiddenRow");
      i > -1 && r.splice(i, 1), n.className = r.join(" ");
    }
  }
}
function $ne(t) {
  if (Vr(this, Io).copyPasteEnabled)
    return t;
  const e = [], n = (r, i, o, s) => {
    e.push({
      startRow: r,
      endRow: i,
      startCol: o,
      endCol: s
    });
  };
  return H(t, (r) => {
    let i = !0, o = 0;
    xe(r.startRow, r.endRow, (s) => {
      this.isHidden(s) ? (i || n(o, s - 1, r.startCol, r.endCol), i = !0) : (i && (o = s), s === r.endRow && n(o, s, r.startCol, r.endCol), i = !1);
    });
  }), e;
}
function kne(t, e) {
  if (!Vr(this, Io).indicators || t < 0)
    return;
  const n = [];
  t >= 1 && this.isHidden(t - 1) && n.push("afterHiddenRow"), t < this.hot.countRows() - 1 && this.isHidden(t + 1) && n.push("beforeHiddenRow"), ce(e, n);
}
function Fne(t) {
  t.items.push({
    name: et
  }, Ane(this), Ine(this));
}
function Wne() {
  Array.isArray(Vr(this, Io).rows) && this.hideRows(Vr(this, Io).rows);
}
function Vne(t) {
  return {
    key: "freeze_column",
    name() {
      return this.getTranslatedPhrase(yy);
    },
    callback(e, n) {
      const [{
        start: {
          col: r
        }
      }] = n;
      t.freezeColumn(r), this.render(), this.view.adjustElementsSize(!0);
    },
    hidden() {
      const e = this.getSelectedRange();
      let n = !1;
      return (e === void 0 || e.length > 1 || e[0].from.col !== e[0].to.col || e[0].from.col <= this.getSettings().fixedColumnsStart - 1) && (n = !0), n;
    }
  };
}
function Bne(t) {
  return {
    key: "unfreeze_column",
    name() {
      return this.getTranslatedPhrase(by);
    },
    callback(e, n) {
      const [{
        start: {
          col: r
        }
      }] = n;
      t.unfreezeColumn(r), this.render(), this.view.adjustElementsSize(!0);
    },
    hidden() {
      const e = this.getSelectedRange();
      let n = !1;
      return (e === void 0 || e.length > 1 || e[0].from.col !== e[0].to.col || e[0].from.col >= this.getSettings().fixedColumnsStart) && (n = !0), n;
    }
  };
}
function GM(t, e) {
  kD(t, e), e.add(t);
}
function Une(t, e, n) {
  kD(t, e), e.set(t, n);
}
function kD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function mv(t, e) {
  var n = FD(t, e, "get");
  return Yne(t, n);
}
function Yne(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function Rw(t, e, n) {
  var r = FD(t, e, "set");
  return Gne(t, r, n), n;
}
function FD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Gne(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function zM(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
_e.getSingleton().register("beforeColumnFreeze");
_e.getSingleton().register("afterColumnFreeze");
_e.getSingleton().register("beforeColumnUnfreeze");
_e.getSingleton().register("afterColumnUnfreeze");
const jM = "manualColumnFreeze", zne = 110;
var ca = /* @__PURE__ */ new WeakMap(), KM = /* @__PURE__ */ new WeakSet(), XM = /* @__PURE__ */ new WeakSet();
class jne extends gt {
  constructor() {
    super(...arguments), GM(this, XM), GM(this, KM), Une(this, ca, {
      writable: !0,
      value: !1
    });
  }
  static get PLUGIN_KEY() {
    return jM;
  }
  static get PLUGIN_PRIORITY() {
    return zne;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualColumnFreeze#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[jM];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.addHook("afterContextMenuDefaultOptions", (e) => zM(this, KM, Kne).call(this, e)), this.addHook("beforeColumnMove", (e, n) => zM(this, XM, Xne).call(this, e, n)), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    Rw(this, ca, !1), super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualColumnFreeze`](@/api/options.md#manualcolumnfreeze)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Freezes the specified column (adds it to fixed columns).
   *
   * `freezeColumn()` doesn't re-render the table,
   * so you need to call the `render()` method afterward.
   *
   * @param {number} column Visual column index.
   */
  freezeColumn(e) {
    const n = this.hot.getSettings(), r = n.fixedColumnsStart < this.hot.countCols() && e > n.fixedColumnsStart - 1;
    mv(this, ca) || Rw(this, ca, !0), this.hot.runHooks("beforeColumnFreeze", e, r) !== !1 && (r && (this.hot.columnIndexMapper.moveIndexes(e, n.fixedColumnsStart), n._fixedColumnsStart += 1), this.hot.runHooks("afterColumnFreeze", e, r));
  }
  /**
   * Unfreezes the given column (remove it from fixed columns and bring to it's previous position).
   *
   * @param {number} column Visual column index.
   */
  unfreezeColumn(e) {
    const n = this.hot.getSettings(), r = n.fixedColumnsStart > 0 && e <= n.fixedColumnsStart - 1;
    mv(this, ca) || Rw(this, ca, !0), this.hot.runHooks("beforeColumnUnfreeze", e, r) !== !1 && (r && (n._fixedColumnsStart -= 1, this.hot.columnIndexMapper.moveIndexes(e, n.fixedColumnsStart)), this.hot.runHooks("afterColumnUnfreeze", e, r));
  }
}
function Kne(t) {
  t.items.push({
    name: "---------"
  }, Vne(this), Bne(this));
}
function Xne(t, e) {
  if (mv(this, ca)) {
    const n = this.hot.getSettings().fixedColumnsStart;
    if (e < n || t.some((r) => r < n))
      return !1;
  }
}
function Od(t, e, n) {
  return e = qne(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function qne(t) {
  var e = Zne(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Zne(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const Ew = 0, qM = 1, ZM = 2, dl = "px";
let Qne = class {
  constructor(e) {
    Od(this, "hot", void 0), Od(this, "_element", null), Od(this, "state", Ew), Od(this, "inlineProperty", void 0), this.hot = e, this.inlineProperty = e.isRtl() ? "right" : "left";
  }
  /**
   * Add created UI elements to table.
   *
   * @param {HTMLElement} wrapper Element which are parent for our UI element.
   */
  appendTo(e) {
    e.appendChild(this._element), this.state = ZM;
  }
  /**
   * Method for create UI element. Only create, without append to table.
   */
  build() {
    this.state === Ew && (this._element = this.hot.rootDocument.createElement("div"), this.state = qM);
  }
  /**
   * Method for remove UI element.
   */
  destroy() {
    this.isAppended() && this._element.parentElement.removeChild(this._element), this._element = null, this.state = Ew;
  }
  /**
   * Check if UI element are appended.
   *
   * @returns {boolean}
   */
  isAppended() {
    return this.state === ZM;
  }
  /**
   * Check if UI element are built.
   *
   * @returns {boolean}
   */
  isBuilt() {
    return this.state >= qM;
  }
  /**
   * Setter for position.
   *
   * @param {number} top New top position of the element.
   * @param {number} inlinePosition New left/right (depends on LTR/RTL document mode) position of the element.
   */
  setPosition(e, n) {
    Jn(e) && (this._element.style.top = e + dl), Jn(n) && (this._element.style[this.inlineProperty] = n + dl);
  }
  /**
   * Getter for the element position.
   *
   * @returns {object} Object contains left and top position of the element.
   */
  getPosition() {
    const e = this._element.style;
    return {
      top: e.top ? parseInt(e.top, 10) : 0,
      start: e[this.inlineProperty] ? parseInt(e[this.inlineProperty], 10) : 0
    };
  }
  /**
   * Setter for the element size.
   *
   * @param {number} width New width of the element.
   * @param {number} height New height of the element.
   */
  setSize(e, n) {
    Jn(e) && (this._element.style.width = e + dl), Jn(n) && (this._element.style.height = n + dl);
  }
  /**
   * Getter for the element position.
   *
   * @returns {object} Object contains height and width of the element.
   */
  getSize() {
    return {
      width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
      height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
    };
  }
  /**
   * Setter for the element offset. Offset means marginTop and marginLeft of the element.
   *
   * @param {number} top New margin top of the element.
   * @param {number} inlineOffset New margin left/right (depends on LTR/RTL document mode) of the element.
   */
  setOffset(e, n) {
    Jn(e) && (this._element.style.marginTop = e + dl), Jn(n) && (this._element.style[`margin${Fn(this.inlineProperty)}`] = n + dl);
  }
  /**
   * Getter for the element offset.
   *
   * @returns {object} Object contains top and left offset of the element.
   */
  getOffset() {
    const e = this._element.style, n = `margin${Fn(this.inlineProperty)}`;
    return {
      top: e.marginTop ? parseInt(e.marginTop, 10) : 0,
      start: e[n] ? parseInt(e[n], 10) : 0
    };
  }
};
const WD = Qne, Jne = "ht__manualColumnMove--backlight";
let ere = class extends WD {
  /**
   * Custom className on build process.
   */
  build() {
    super.build(), ce(this._element, Jne);
  }
};
const tre = ere, nre = "ht__manualColumnMove--guideline";
let rre = class extends WD {
  /**
   * Custom className on build process.
   */
  build() {
    super.build(), ce(this._element, nre);
  }
};
const ire = rre;
function fl(t, e) {
  VD(t, e), e.add(t);
}
function ii(t, e, n) {
  VD(t, e), e.set(t, n);
}
function VD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function fr(t, e, n) {
  var r = BD(t, e, "set");
  return ore(t, r, n), n;
}
function ore(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function Oe(t, e) {
  var n = BD(t, e, "get");
  return sre(t, n);
}
function BD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function sre(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function gl(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
_e.getSingleton().register("beforeColumnMove");
_e.getSingleton().register("afterColumnMove");
const Tw = "manualColumnMove", are = 120, QM = "ht__manualColumnMove", Jf = "show-ui", pv = "on-moving--columns", wv = "after-selection--columns";
var Zn = /* @__PURE__ */ new WeakMap(), cs = /* @__PURE__ */ new WeakMap(), Po = /* @__PURE__ */ new WeakMap(), ff = /* @__PURE__ */ new WeakMap(), ps = /* @__PURE__ */ new WeakMap(), qn = /* @__PURE__ */ new WeakMap(), Ad = /* @__PURE__ */ new WeakMap(), kr = /* @__PURE__ */ new WeakMap(), _l = /* @__PURE__ */ new WeakMap(), eg = /* @__PURE__ */ new WeakMap(), pc = /* @__PURE__ */ new WeakMap(), JM = /* @__PURE__ */ new WeakSet(), eO = /* @__PURE__ */ new WeakSet(), tO = /* @__PURE__ */ new WeakSet(), nO = /* @__PURE__ */ new WeakSet(), rO = /* @__PURE__ */ new WeakSet(), iO = /* @__PURE__ */ new WeakSet();
class lre extends gt {
  constructor() {
    super(...arguments), fl(this, iO), fl(this, rO), fl(this, nO), fl(this, tO), fl(this, eO), fl(this, JM), ii(this, Zn, {
      writable: !0,
      value: new tre(this.hot)
    }), ii(this, cs, {
      writable: !0,
      value: new ire(this.hot)
    }), ii(this, Po, {
      writable: !0,
      value: []
    }), ii(this, ff, {
      writable: !0,
      value: 0
    }), ii(this, ps, {
      writable: !0,
      value: !1
    }), ii(this, qn, {
      writable: !0,
      value: {}
    }), ii(this, Ad, {
      writable: !0,
      value: void 0
    }), ii(this, kr, {
      writable: !0,
      value: void 0
    }), ii(this, _l, {
      writable: !0,
      value: void 0
    }), ii(this, eg, {
      writable: !0,
      value: void 0
    }), ii(this, pc, {
      writable: !0,
      value: void 0
    });
  }
  static get PLUGIN_KEY() {
    return Tw;
  }
  static get PLUGIN_PRIORITY() {
    return are;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualColumnMove#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Tw];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.addHook("beforeOnCellMouseDown", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return gl(e, JM, ure).call(e, ...r);
    }), this.addHook("beforeOnCellMouseOver", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return gl(e, tO, hre).call(e, ...r);
    }), this.addHook("afterScrollVertically", () => gl(this, rO, fre).call(this)), this.addHook("afterLoadData", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return gl(e, iO, gre).call(e, ...r);
    }), this.buildPluginUI(), this.registerEvents(), ce(this.hot.rootElement, QM), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualColumnMove`](@/api/options.md#manualcolumnmove)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), this.moveBySettingsOrLoad(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    Ye(this.hot.rootElement, QM), this.unregisterEvents(), Oe(this, Zn).destroy(), Oe(this, cs).destroy(), super.disablePlugin();
  }
  /**
   * Moves a single column.
   *
   * @param {number} column Visual column index to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @fires Hooks#beforeColumnMove
   * @fires Hooks#afterColumnMove
   * @returns {boolean}
   */
  moveColumn(e, n) {
    return this.moveColumns([e], n);
  }
  /**
   * Moves a multiple columns.
   *
   * @param {Array} columns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @fires Hooks#beforeColumnMove
   * @fires Hooks#afterColumnMove
   * @returns {boolean}
   */
  moveColumns(e, n) {
    const r = Oe(this, Ad), i = this.isMovePossible(e, n), o = this.hot.runHooks("beforeColumnMove", e, n, r, i);
    if (fr(this, Ad, void 0), o === !1)
      return;
    i && this.hot.columnIndexMapper.moveIndexes(e, n);
    const s = i && this.isColumnOrderChanged(e, n);
    return this.hot.runHooks("afterColumnMove", e, n, r, i, s), s;
  }
  /**
   * Drag a single column to drop index position.
   *
   * @param {number} column Visual column index to be dragged.
   * @param {number} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements.
   * To check visualization of drop index please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @fires Hooks#beforeColumnMove
   * @fires Hooks#afterColumnMove
   * @returns {boolean}
   */
  dragColumn(e, n) {
    return this.dragColumns([e], n);
  }
  /**
   * Drag multiple columns to drop index position.
   *
   * @param {Array} columns Array of visual column indexes to be dragged.
   * @param {number} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements.
   * To check visualization of drop index please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @fires Hooks#beforeColumnMove
   * @fires Hooks#afterColumnMove
   * @returns {boolean}
   */
  dragColumns(e, n) {
    const r = this.countFinalIndex(e, n);
    return fr(this, Ad, n), this.moveColumns(e, r);
  }
  /**
   * Indicates if it's possible to move columns to the desired position. Some of the actions aren't
   * possible, i.e. You can’t move more than one element to the last position.
   *
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @returns {boolean}
   */
  isMovePossible(e, n) {
    const r = this.hot.columnIndexMapper.getNotTrimmedIndexesLength(), i = e.length + n > r, o = n < 0, s = e.some((l) => l < 0), a = e.some((l) => l >= r);
    return !(i || o || s || a);
  }
  /**
   * Indicates if order of columns was changed.
   *
   * @private
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @returns {boolean}
   */
  isColumnOrderChanged(e, n) {
    return e.some((r, i) => r - i !== n);
  }
  /**
   * Count the final column index from the drop index.
   *
   * @private
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} dropIndex Visual column index, being a drop index for the moved columns.
   * @returns {number} Visual column index, being a start index for the moved columns.
   */
  countFinalIndex(e, n) {
    const r = nn(e, (i, o) => (o < n && (i += 1), i), 0);
    return n - r;
  }
  /**
   * Gets the sum of the widths of columns in the provided range.
   *
   * @private
   * @param {number} fromColumn Visual column index.
   * @param {number} toColumn Visual column index.
   * @returns {number}
   */
  getColumnsWidth(e, n) {
    const r = this.hot.columnIndexMapper;
    let i = 0;
    for (let o = e; o <= n; o += 1) {
      const s = r.getRenderableFromVisualIndex(o);
      o < 0 ? i += this.hot.view._wt.wtViewport.getRowHeaderWidth() || 0 : s !== null && (i += this.hot.view._wt.wtTable.getStretchedColumnWidth(s) || 0);
    }
    return i;
  }
  /**
   * Loads initial settings when persistent state is saved or when plugin was initialized as an array.
   *
   * @private
   */
  moveBySettingsOrLoad() {
    const e = this.hot.getSettings()[Tw];
    if (Array.isArray(e))
      this.moveColumns(e, 0);
    else if (e !== void 0) {
      const n = this.persistentStateLoad();
      n.length && this.moveColumns(n, 0);
    }
  }
  /**
   * Checks if the provided column is in the fixedColumnsTop section.
   *
   * @private
   * @param {number} column Visual column index to check.
   * @returns {boolean}
   */
  isFixedColumnsStart(e) {
    return e < this.hot.getSettings().fixedColumnsStart;
  }
  /**
   * Saves the manual column positions to the persistent state (the {@link Options#persistentState} option has to be enabled).
   *
   * @private
   * @fires Hooks#persistentStateSave
   */
  persistentStateSave() {
    this.hot.runHooks("persistentStateSave", "manualColumnMove", this.hot.columnIndexMapper.getIndexesSequence());
  }
  /**
   * Loads the manual column positions from the persistent state (the {@link Options#persistentState} option has to be enabled).
   *
   * @private
   * @fires Hooks#persistentStateLoad
   * @returns {Array} Stored state.
   */
  persistentStateLoad() {
    const e = {};
    return this.hot.runHooks("persistentStateLoad", "manualColumnMove", e), e.value ? e.value : [];
  }
  /**
   * Prepares an array of indexes based on actual selection.
   *
   * @private
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array}
   */
  prepareColumnsToMoving(e, n) {
    const r = [];
    return xe(e, n, (i) => {
      r.push(i);
    }), r;
  }
  /**
   * Update the UI visual position.
   *
   * @private
   */
  refreshPositions() {
    const e = this.hot.view.getFirstFullyVisibleColumn();
    this.isFixedColumnsStart(Oe(this, kr)) && e > 0 && this.hot.scrollViewportTo({
      col: this.hot.columnIndexMapper.getNearestNotHiddenIndex(e - 1, -1)
    });
    const n = this.hot.view._wt.wtTable, r = this.hot.view._wt.wtOverlays.scrollableElement, i = typeof r.scrollX == "number" ? r.scrollX : r.scrollLeft;
    let o = this.hot.view.THEAD.offsetLeft + this.getColumnsWidth(0, Oe(this, kr) - 1);
    const s = n.hider.offsetWidth, a = n.TBODY.offsetLeft, l = Oe(this, Zn).getOffset().start, u = Oe(this, Zn).getSize().width;
    let c = 0, d = 0;
    if (this.hot.isRtl()) {
      const C = this.hot.rootWindow, E = yt(this.hot.rootElement), I = C.innerWidth - Oe(this, _l) - E;
      d = C.innerWidth - Oe(this, qn).eventPageX - I - (r.scrollX === void 0 ? i : 0);
    } else
      d = Oe(this, qn).eventPageX - (Oe(this, _l) - (r.scrollX === void 0 ? i : 0));
    if (Oe(this, eg) && (c = this.hot.view._wt.wtOverlays.inlineStartOverlay.clone.wtTable.getColumnHeader(-1).offsetWidth), this.isFixedColumnsStart(Oe(this, kr)) && (o += i), o += c, Oe(this, kr) < 0)
      Oe(this, pc) > 0 ? Oe(this, qn).col = 0 : Oe(this, qn).col = e > 0 ? e - 1 : e;
    else if (Oe(this, qn).TD.offsetWidth / 2 + o <= d) {
      const C = Oe(this, kr) >= Oe(this, ff) ? Oe(this, ff) - 1 : Oe(this, kr);
      Oe(this, qn).col = C + 1, o += Oe(this, qn).TD.offsetWidth;
    } else
      Oe(this, qn).col = Oe(this, kr);
    let g = d, p = o;
    d + u + l >= s ? g = s - u - l : d + l < a + c && (g = a + c + Math.abs(l)), o >= s - 1 ? p = s - 1 : p === 0 ? p = 1 : r.scrollX !== void 0 && Oe(this, kr) < Oe(this, pc) && (p -= Oe(this, _l) <= r.scrollX ? Oe(this, _l) : 0), Oe(this, Zn).setPosition(null, g), Oe(this, cs).setPosition(null, p);
  }
  /**
   * Binds the events used by the plugin.
   *
   * @private
   */
  registerEvents() {
    const {
      documentElement: e
    } = this.hot.rootDocument;
    this.eventManager.addEventListener(e, "mousemove", (n) => gl(this, eO, cre).call(this, n)), this.eventManager.addEventListener(e, "mouseup", () => gl(this, nO, dre).call(this));
  }
  /**
   * Unbinds the events used by the plugin.
   *
   * @private
   */
  unregisterEvents() {
    this.eventManager.clear();
  }
  /**
   * Builds the plugin's UI.
   *
   * @private
   */
  buildPluginUI() {
    Oe(this, Zn).build(), Oe(this, cs).build();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    Oe(this, Zn).destroy(), Oe(this, cs).destroy(), super.destroy();
  }
}
function ure(t, e, n, r) {
  const i = this.hot.view._wt.wtTable, o = this.hot.selection.isSelectedByColumnHeader(), s = this.hot.getSelectedRangeLast(), a = Ve(t.target, "sortAction");
  if (!s || !o || Oe(this, ps) || t.button !== 0 || a) {
    fr(this, ps, !1), Oe(this, Po).length = 0, Ye(this.hot.rootElement, [pv, Jf]);
    return;
  }
  const l = Oe(this, cs).isBuilt() && !Oe(this, cs).isAppended(), u = Oe(this, Zn).isBuilt() && !Oe(this, Zn).isAppended();
  l && u && (Oe(this, cs).appendTo(i.hider), Oe(this, Zn).appendTo(i.hider));
  const {
    from: c,
    to: d
  } = s, g = Math.min(c.col, d.col), p = Math.max(c.col, d.col);
  if (e.row < 0 && e.col >= g && e.col <= p) {
    r.column = !0, fr(this, ps, !0);
    const C = n.firstChild ? yP(t, n.firstChild).x : t.offsetX;
    Oe(this, qn).eventPageX = t.pageX, fr(this, kr, e.col), Oe(this, qn).TD = n, Oe(this, qn).col = e.col, fr(this, Po, this.prepareColumnsToMoving(g, p)), fr(this, eg, !!this.hot.getSettings().rowHeaders), fr(this, ff, this.hot.countCols()), fr(this, pc, this.hot.getSettings().fixedColumnsStart), fr(this, _l, an(this.hot.rootElement).left);
    const E = Oe(this, eg) ? -1 : 0, I = i.holder.scrollTop + i.getColumnHeaderHeight(0) + 1, M = e.col < Oe(this, pc), y = this.hot.view._wt.wtOverlays.inlineStartOverlay.getOverlayOffset(), $ = Math.abs(C - (this.hot.isRtl() ? n.offsetWidth : 0)), X = this.getColumnsWidth(g, e.col - 1) + $, G = this.getColumnsWidth(E, g - 1) + (M ? y : 0) + X;
    Oe(this, Zn).setPosition(I, G), Oe(this, Zn).setSize(this.getColumnsWidth(g, p), i.hider.offsetHeight - I), Oe(this, Zn).setOffset(null, -X), ce(this.hot.rootElement, pv);
  } else
    Ye(this.hot.rootElement, wv), fr(this, ps, !1), Oe(this, Po).length = 0;
}
function cre(t) {
  Oe(this, ps) && (Oe(this, qn).eventPageX = t.pageX, this.refreshPositions());
}
function hre(t, e, n, r) {
  !this.hot.getSelectedRangeLast() || !Oe(this, ps) || (Oe(this, Po).indexOf(e.col) > -1 ? Ye(this.hot.rootElement, Jf) : ce(this.hot.rootElement, Jf), r.row = !0, r.column = !0, r.cell = !0, fr(this, kr, e.col), Oe(this, qn).TD = n);
}
function dre() {
  const t = Oe(this, qn).col, e = Oe(this, Po).length;
  if (fr(this, kr, void 0), fr(this, ps, !1), Ye(this.hot.rootElement, [pv, Jf, wv]), this.hot.selection.isSelectedByColumnHeader() && ce(this.hot.rootElement, wv), e < 1 || t === void 0)
    return;
  const n = Oe(this, Po)[0], r = this.hot.toPhysicalColumn(n), i = this.dragColumns(Oe(this, Po), t);
  if (Oe(this, Po).length = 0, i === !0) {
    this.persistentStateSave(), this.hot.render(), this.hot.view.adjustElementsSize(!0);
    const o = this.hot.toVisualColumn(r), s = o + e - 1;
    this.hot.selectColumns(o, s);
  }
}
function fre() {
  const t = this.hot.view._wt.wtTable, e = t.getColumnHeaderHeight(0) + 1, n = t.holder.scrollTop, r = e + n;
  Oe(this, Zn).setPosition(r), Oe(this, Zn).setSize(null, t.hider.offsetHeight - r);
}
function gre() {
  this.moveBySettingsOrLoad();
}
function go(t, e) {
  UD(t, e), e.add(t);
}
function xn(t, e, n) {
  UD(t, e), e.set(t, n);
}
function UD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function mo(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function tn(t, e, n) {
  var r = YD(t, e, "set");
  return mre(t, r, n), n;
}
function mre(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function Se(t, e) {
  var n = YD(t, e, "get");
  return pre(t, n);
}
function YD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function pre(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
const tg = "manualColumnResize", wre = 130, oO = "manualColumnWidths";
var bo = /* @__PURE__ */ new WeakMap(), Id = /* @__PURE__ */ new WeakMap(), vr = /* @__PURE__ */ new WeakMap(), ng = /* @__PURE__ */ new WeakMap(), Yi = /* @__PURE__ */ new WeakMap(), Cre = /* @__PURE__ */ new WeakMap(), kl = /* @__PURE__ */ new WeakMap(), Pd = /* @__PURE__ */ new WeakMap(), lr = /* @__PURE__ */ new WeakMap(), Co = /* @__PURE__ */ new WeakMap(), Ra = /* @__PURE__ */ new WeakMap(), rg = /* @__PURE__ */ new WeakMap(), wc = /* @__PURE__ */ new WeakMap(), Cc = /* @__PURE__ */ new WeakMap(), yr = /* @__PURE__ */ new WeakMap(), vc = /* @__PURE__ */ new WeakMap(), sO = /* @__PURE__ */ new WeakSet(), aO = /* @__PURE__ */ new WeakSet(), lO = /* @__PURE__ */ new WeakSet(), uO = /* @__PURE__ */ new WeakSet(), cO = /* @__PURE__ */ new WeakSet(), hO = /* @__PURE__ */ new WeakSet(), dO = /* @__PURE__ */ new WeakSet(), fO = /* @__PURE__ */ new WeakSet(), gO = /* @__PURE__ */ new WeakSet();
class vre extends gt {
  static get PLUGIN_KEY() {
    return tg;
  }
  static get PLUGIN_PRIORITY() {
    return wre;
  }
  /**
   * @type {HTMLTableHeaderCellElement}
   */
  constructor(e) {
    super(e), go(this, gO), go(this, fO), go(this, dO), go(this, hO), go(this, cO), go(this, uO), go(this, lO), go(this, aO), go(this, sO), xn(this, bo, {
      writable: !0,
      value: null
    }), xn(this, Id, {
      writable: !0,
      value: null
    }), xn(this, vr, {
      writable: !0,
      value: []
    }), xn(this, ng, {
      writable: !0,
      value: null
    }), xn(this, Yi, {
      writable: !0,
      value: null
    }), xn(this, Cre, {
      writable: !0,
      value: null
    }), xn(this, kl, {
      writable: !0,
      value: null
    }), xn(this, Pd, {
      writable: !0,
      value: null
    }), xn(this, lr, {
      writable: !0,
      value: this.hot.rootDocument.createElement("DIV")
    }), xn(this, Co, {
      writable: !0,
      value: this.hot.rootDocument.createElement("DIV")
    }), xn(this, Ra, {
      writable: !0,
      value: null
    }), xn(this, rg, {
      writable: !0,
      value: !1
    }), xn(this, wc, {
      writable: !0,
      value: 0
    }), xn(this, Cc, {
      writable: !0,
      value: null
    }), xn(this, yr, {
      writable: !0,
      value: void 0
    }), xn(this, vc, {
      writable: !0,
      value: void 0
    }), ce(Se(this, lr), "manualColumnResizer"), ce(Se(this, Co), "manualColumnResizerGuide");
  }
  /**
   * @private
   * @returns {string}
   */
  get inlineDir() {
    return this.hot.isRtl() ? "right" : "left";
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualColumnResize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[tg];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (tn(this, yr, new Ps()), Se(this, yr).addLocalHook("init", () => mo(this, sO, Sre).call(this)), this.hot.columnIndexMapper.registerMap(this.pluginName, Se(this, yr)), this.addHook("modifyColWidth", (e, n) => mo(this, dO, _re).call(this, e, n)), this.addHook("beforeStretchingColumnWidth", (e, n) => mo(this, fO, Mre).call(this, e, n)), this.addHook("beforeColumnResize", (e, n, r) => mo(this, gO, Ore).call(this, e, n, r)), this.bindEvents(), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualColumnResize`](@/api/options.md#manualcolumnresize)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    tn(this, vc, Se(this, yr).getValues()), this.hot.columnIndexMapper.unregisterMap(this.pluginName), super.disablePlugin();
  }
  /**
   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
   *
   * @fires Hooks#persistentStateSave
   */
  saveManualColumnWidths() {
    this.hot.runHooks("persistentStateSave", oO, Se(this, yr).getValues());
  }
  /**
   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
   *
   * @returns {Array}
   * @fires Hooks#persistentStateLoad
   */
  loadManualColumnWidths() {
    const e = {};
    return this.hot.runHooks("persistentStateLoad", oO, e), e.value;
  }
  /**
   * Sets the new width for specified column index.
   *
   * @param {number} column Visual column index.
   * @param {number} width Column width (no less than 20px).
   * @returns {number} Returns new width.
   */
  setManualSize(e, n) {
    const r = Math.max(n, 20), i = this.hot.toPhysicalColumn(e);
    return Se(this, yr).setValueAtIndex(i, r), r;
  }
  /**
   * Clears the cache for the specified column index.
   *
   * @param {number} column Visual column index.
   */
  clearManualSize(e) {
    const n = this.hot.toPhysicalColumn(e);
    Se(this, yr).setValueAtIndex(n, null);
  }
  /**
   * Set the resize handle position.
   *
   * @private
   * @param {HTMLCellElement} TH TH HTML element.
   */
  setupHandlePosition(e) {
    if (!e.parentNode)
      return;
    tn(this, bo, e);
    const {
      _wt: n
    } = this.hot.view, r = n.wtTable.getCoords(Se(this, bo)), i = r.col;
    if (i < 0)
      return;
    const o = Bt(Se(this, bo)), s = Se(this, bo).getBoundingClientRect(), a = i < n.getSetting("fixedColumnsStart");
    let l;
    a && (l = n.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(Se(this, bo), r.row, r.col)), l || (l = n.wtOverlays.topOverlay.getRelativeCellPosition(Se(this, bo), r.row, r.col)), tn(this, Id, this.hot.columnIndexMapper.getVisualFromRenderableIndex(i)), tn(this, vr, []);
    const u = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByColumnHeader();
    if (this.hot.selection.isSelected() && u) {
      const c = this.hot.getSelectedRange();
      H(c, (d) => {
        const g = d.getTopStartCorner().col, p = d.getBottomEndCorner().col;
        xe(g, p, (C) => {
          Se(this, vr).includes(C) || Se(this, vr).push(C);
        });
      });
    }
    Se(this, vr).includes(Se(this, Id)) || tn(this, vr, [Se(this, Id)]), tn(this, Pd, l.start - 6), tn(this, kl, parseInt(s.width, 10)), Se(this, lr).style.top = `${l.top}px`, Se(this, lr).style[this.inlineDir] = `${Se(this, Pd) + Se(this, kl)}px`, Se(this, lr).style.height = `${o}px`, this.hot.rootElement.appendChild(Se(this, lr));
  }
  /**
   * Refresh the resize handle position.
   *
   * @private
   */
  refreshHandlePosition() {
    Se(this, lr).style[this.inlineDir] = `${Se(this, Pd) + Se(this, ng)}px`;
  }
  /**
   * Sets the resize guide position.
   *
   * @private
   */
  setupGuidePosition() {
    const e = parseInt(Bt(Se(this, lr)), 10), n = parseInt(Se(this, lr).style.top, 10) + e, r = parseInt(this.hot.view.maximumVisibleElementHeight(0), 10);
    ce(Se(this, lr), "active"), ce(Se(this, Co), "active"), Se(this, Co).style.top = `${n}px`, this.refreshGuidePosition(), Se(this, Co).style.height = `${r - e}px`, this.hot.rootElement.appendChild(Se(this, Co));
  }
  /**
   * Refresh the resize guide position.
   *
   * @private
   */
  refreshGuidePosition() {
    Se(this, Co).style[this.inlineDir] = Se(this, lr).style[this.inlineDir];
  }
  /**
   * Hides both the resize handle and resize guide.
   *
   * @private
   */
  hideHandleAndGuide() {
    Ye(Se(this, lr), "active"), Ye(Se(this, Co), "active");
  }
  /**
   * Checks if provided element is considered a column header.
   *
   * @private
   * @param {HTMLElement} element HTML element.
   * @returns {boolean}
   */
  checkIfColumnHeader(e) {
    return !!Es(e, ["THEAD"], this.hot.rootElement);
  }
  /**
   * Gets the TH element from the provided element.
   *
   * @private
   * @param {HTMLElement} element HTML element.
   * @returns {HTMLElement}
   */
  getClosestTHParent(e) {
    return e.tagName !== "TABLE" ? e.tagName === "TH" ? e : this.getClosestTHParent(e.parentNode) : null;
  }
  /**
   * Auto-size row after doubleclick - callback.
   *
   * @private
   * @fires Hooks#beforeColumnResize
   * @fires Hooks#afterColumnResize
   */
  afterMouseDownTimeout() {
    const e = () => {
      this.hot.forceFullRender = !0, this.hot.view.render(), this.hot.view.adjustElementsSize(!0);
    }, n = (r, i) => {
      const o = this.hot.runHooks("beforeColumnResize", Se(this, Yi), r, !0);
      o !== void 0 && tn(this, Yi, o), this.hot.getSettings().stretchH === "all" ? this.clearManualSize(r) : this.setManualSize(r, Se(this, Yi)), this.saveManualColumnWidths(), this.hot.runHooks("afterColumnResize", Se(this, Yi), r, !0), i && e();
    };
    Se(this, wc) >= 2 && (Se(this, vr).length > 1 ? (H(Se(this, vr), (i) => {
      n(i);
    }), e()) : H(Se(this, vr), (i) => {
      n(i, !0);
    })), tn(this, wc, 0), tn(this, Cc, null);
  }
  /**
   * Binds the mouse events.
   *
   * @private
   */
  bindEvents() {
    const {
      rootWindow: e,
      rootElement: n
    } = this.hot;
    this.eventManager.addEventListener(n, "mouseover", (r) => mo(this, aO, yre).call(this, r)), this.eventManager.addEventListener(n, "mousedown", (r) => mo(this, lO, bre).call(this, r)), this.eventManager.addEventListener(e, "mousemove", (r) => mo(this, uO, Rre).call(this, r)), this.eventManager.addEventListener(e, "mouseup", () => mo(this, cO, Ere).call(this)), this.eventManager.addEventListener(Se(this, lr), "contextmenu", () => mo(this, hO, Tre).call(this));
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
function Sre() {
  const t = this.hot.getSettings()[tg], e = this.loadManualColumnWidths();
  typeof e < "u" ? this.hot.batchExecution(() => {
    e.forEach((n, r) => {
      Se(this, yr).setValueAtIndex(r, n);
    });
  }, !0) : Array.isArray(t) ? (this.hot.batchExecution(() => {
    t.forEach((n, r) => {
      Se(this, yr).setValueAtIndex(r, n);
    });
  }, !0), tn(this, vc, t)) : t === !0 && Array.isArray(Se(this, vc)) && this.hot.batchExecution(() => {
    Se(this, vc).forEach((n, r) => {
      Se(this, yr).setValueAtIndex(r, n);
    });
  }, !0);
}
function yre(t) {
  if (!mS(t.target) && Se(this, rg) !== !0 && this.checkIfColumnHeader(t.target)) {
    const e = this.getClosestTHParent(t.target);
    if (!e)
      return;
    const n = e.getAttribute("colspan");
    e && (n === null || n === "1") && (Se(this, Ra) || this.setupHandlePosition(e));
  }
}
function bre(t) {
  Ve(t.target, "manualColumnResizer") && (this.setupHandlePosition(Se(this, bo)), this.setupGuidePosition(), tn(this, Ra, !0), Se(this, Cc) === null && (tn(this, Cc, setTimeout(() => this.afterMouseDownTimeout(), 500)), this.hot._registerTimeout(Se(this, Cc))), tn(this, wc, Se(this, wc) + 1), this.startX = t.pageX, tn(this, Yi, Se(this, kl)));
}
function Rre(t) {
  if (Se(this, Ra)) {
    const e = (t.pageX - this.startX) * this.hot.getDirectionFactor();
    tn(this, ng, Se(this, kl) + e), H(Se(this, vr), (n) => {
      tn(this, Yi, this.setManualSize(n, Se(this, ng)));
    }), this.refreshHandlePosition(), this.refreshGuidePosition();
  }
}
function Ere() {
  const t = () => {
    this.hot.forceFullRender = !0, this.hot.view.render(), this.hot.view.adjustElementsSize(!0);
  }, e = (n, r) => {
    this.hot.runHooks("beforeColumnResize", Se(this, Yi), n, !1), r && t(), this.saveManualColumnWidths(), this.hot.runHooks("afterColumnResize", Se(this, Yi), n, !1);
  };
  Se(this, Ra) && (this.hideHandleAndGuide(), tn(this, Ra, !1), Se(this, Yi) !== Se(this, kl) && (Se(this, vr).length > 1 ? (H(Se(this, vr), (r) => {
    e(r);
  }), t()) : H(Se(this, vr), (r) => {
    e(r, !0);
  })), this.setupHandlePosition(Se(this, bo)));
}
function Tre() {
  this.hideHandleAndGuide(), this.hot.rootElement.removeChild(Se(this, lr)), this.hot.rootElement.removeChild(Se(this, Co)), tn(this, Ra, !1), tn(this, rg, !0), this.hot._registerImmediate(() => {
    tn(this, rg, !1);
  });
}
function _re(t, e) {
  let n = t;
  if (this.enabled) {
    const r = this.hot.toPhysicalColumn(e), i = Se(this, yr).getValueAtIndex(r);
    this.hot.getSettings()[tg] && i && (n = i);
  }
  return n;
}
function Mre(t, e) {
  let n = Se(this, yr).getValueAtIndex(e);
  return n === null && (n = t), n;
}
function Ore() {
  this.hot.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();
}
function _w(t, e, n) {
  return e = Are(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Are(t) {
  var e = Ire(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Ire(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const Mw = 0, mO = 1, pO = 2, ml = "px";
let Pre = class {
  constructor(e) {
    _w(this, "hot", void 0), _w(this, "_element", null), _w(this, "state", Mw), this.hot = e;
  }
  /**
   * Add created UI elements to table.
   *
   * @param {HTMLElement} wrapper Element which are parent for our UI element.
   */
  appendTo(e) {
    e.appendChild(this._element), this.state = pO;
  }
  /**
   * Method for create UI element. Only create, without append to table.
   */
  build() {
    this.state === Mw && (this._element = this.hot.rootDocument.createElement("div"), this.state = mO);
  }
  /**
   * Method for remove UI element.
   */
  destroy() {
    this.isAppended() && this._element.parentElement.removeChild(this._element), this._element = null, this.state = Mw;
  }
  /**
   * Check if UI element are appended.
   *
   * @returns {boolean}
   */
  isAppended() {
    return this.state === pO;
  }
  /**
   * Check if UI element are built.
   *
   * @returns {boolean}
   */
  isBuilt() {
    return this.state >= mO;
  }
  /**
   * Setter for position.
   *
   * @param {number} top New top position of the element.
   * @param {number} left New left position of the element.
   */
  setPosition(e, n) {
    e !== void 0 && (this._element.style.top = e + ml), n !== void 0 && (this._element.style.left = n + ml);
  }
  /**
   * Getter for the element position.
   *
   * @returns {object} Object contains left and top position of the element.
   */
  getPosition() {
    return {
      top: this._element.style.top ? parseInt(this._element.style.top, 10) : 0,
      left: this._element.style.left ? parseInt(this._element.style.left, 10) : 0
    };
  }
  /**
   * Setter for the element size.
   *
   * @param {number} width New width of the element.
   * @param {number} height New height of the element.
   */
  setSize(e, n) {
    e && (this._element.style.width = e + ml), n && (this._element.style.height = n + ml);
  }
  /**
   * Getter for the element position.
   *
   * @returns {object} Object contains height and width of the element.
   */
  getSize() {
    return {
      width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
      height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
    };
  }
  /**
   * Setter for the element offset. Offset means marginTop and marginLeft of the element.
   *
   * @param {number} top New margin top of the element.
   * @param {number} left New margin left of the element.
   */
  setOffset(e, n) {
    e && (this._element.style.marginTop = e + ml), n && (this._element.style.marginLeft = n + ml);
  }
  /**
   * Getter for the element offset.
   *
   * @returns {object} Object contains top and left offset of the element.
   */
  getOffset() {
    return {
      top: this._element.style.marginTop ? parseInt(this._element.style.marginTop, 10) : 0,
      left: this._element.style.marginLeft ? parseInt(this._element.style.marginLeft, 10) : 0
    };
  }
};
const GD = Pre, xre = "ht__manualRowMove--backlight";
class Hre extends GD {
  /**
   * Custom className on build process.
   */
  build() {
    super.build(), ce(this._element, xre);
  }
}
const Dre = Hre, Nre = "ht__manualRowMove--guideline";
class Lre extends GD {
  /**
   * Custom className on build process.
   */
  build() {
    super.build(), ce(this._element, Nre);
  }
}
const $re = Lre;
function pl(t, e) {
  zD(t, e), e.add(t);
}
function wl(t, e, n) {
  zD(t, e), e.set(t, n);
}
function zD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function pa(t, e, n) {
  var r = jD(t, e, "set");
  return kre(t, r, n), n;
}
function kre(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function ze(t, e) {
  var n = jD(t, e, "get");
  return Fre(t, n);
}
function jD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Fre(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function Cl(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
_e.getSingleton().register("beforeRowMove");
_e.getSingleton().register("afterRowMove");
const Ow = "manualRowMove", Wre = 140, wO = "ht__manualRowMove", ig = "show-ui", Cv = "on-moving--rows", vv = "after-selection--rows";
var Qn = /* @__PURE__ */ new WeakMap(), hs = /* @__PURE__ */ new WeakMap(), xo = /* @__PURE__ */ new WeakMap(), ws = /* @__PURE__ */ new WeakMap(), gr = /* @__PURE__ */ new WeakMap(), xd = /* @__PURE__ */ new WeakMap(), CO = /* @__PURE__ */ new WeakSet(), vO = /* @__PURE__ */ new WeakSet(), SO = /* @__PURE__ */ new WeakSet(), yO = /* @__PURE__ */ new WeakSet(), bO = /* @__PURE__ */ new WeakSet(), RO = /* @__PURE__ */ new WeakSet();
class Vre extends gt {
  constructor() {
    super(...arguments), pl(this, RO), pl(this, bO), pl(this, yO), pl(this, SO), pl(this, vO), pl(this, CO), wl(this, Qn, {
      writable: !0,
      value: new Dre(this.hot)
    }), wl(this, hs, {
      writable: !0,
      value: new $re(this.hot)
    }), wl(this, xo, {
      writable: !0,
      value: []
    }), wl(this, ws, {
      writable: !0,
      value: void 0
    }), wl(this, gr, {
      writable: !0,
      value: {}
    }), wl(this, xd, {
      writable: !0,
      value: void 0
    });
  }
  static get PLUGIN_KEY() {
    return Ow;
  }
  static get PLUGIN_PRIORITY() {
    return Wre;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualRowMove#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Ow];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.addHook("beforeOnCellMouseDown", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Cl(e, CO, Bre).call(e, ...r);
    }), this.addHook("beforeOnCellMouseOver", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Cl(e, SO, Yre).call(e, ...r);
    }), this.addHook("afterScrollHorizontally", () => Cl(this, bO, zre).call(this)), this.addHook("afterLoadData", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Cl(e, RO, jre).call(e, ...r);
    }), this.buildPluginUI(), this.registerEvents(), ce(this.hot.rootElement, wO), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualRowMove`](@/api/options.md#manualrowmove)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), this.moveBySettingsOrLoad(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    Ye(this.hot.rootElement, wO), this.unregisterEvents(), ze(this, Qn).destroy(), ze(this, hs).destroy(), super.disablePlugin();
  }
  /**
   * Moves a single row.
   *
   * To see the outcome, rerender your grid by calling [`render()`](@/api/core.md#render).
   *
   * @param {number} row Visual row index to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @fires Hooks#beforeRowMove
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  moveRow(e, n) {
    return this.moveRows([e], n);
  }
  /**
   * Moves multiple rows.
   *
   * To see the outcome, rerender your grid by calling [`render()`](@/api/core.md#render).
   *
   * @param {Array} rows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @fires Hooks#beforeRowMove
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  moveRows(e, n) {
    const r = ze(this, xd), i = this.isMovePossible(e, n), o = this.hot.runHooks("beforeRowMove", e, n, r, i);
    if (pa(this, xd, void 0), o === !1)
      return;
    i && this.hot.rowIndexMapper.moveIndexes(e, n);
    const s = i && this.isRowOrderChanged(e, n);
    return this.hot.runHooks("afterRowMove", e, n, r, i, s), s;
  }
  /**
   * Drag a single row to drop index position.
   *
   * @param {number} row Visual row index to be dragged.
   * @param {number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements.
   * To check visualization of drop index please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @fires Hooks#beforeRowMove
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  dragRow(e, n) {
    return this.dragRows([e], n);
  }
  /**
   * Drag multiple rows to drop index position.
   *
   * @param {Array} rows Array of visual row indexes to be dragged.
   * @param {number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements.
   * To check visualization of drop index please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @fires Hooks#beforeRowMove
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  dragRows(e, n) {
    const r = this.countFinalIndex(e, n);
    return pa(this, xd, n), this.moveRows(e, r);
  }
  /**
   * Indicates if it's possible to move rows to the desired position. Some of the actions aren't possible, i.e. You can’t move more than one element to the last position.
   *
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @returns {boolean}
   */
  isMovePossible(e, n) {
    const r = this.hot.rowIndexMapper.getNotTrimmedIndexesLength(), i = e.length + n > r, o = n < 0, s = e.some((l) => l < 0), a = e.some((l) => l >= r);
    return !(i || o || s || a);
  }
  /**
   * Indicates if order of rows was changed.
   *
   * @private
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @returns {boolean}
   */
  isRowOrderChanged(e, n) {
    return e.some((r, i) => r - i !== n);
  }
  /**
   * Count the final row index from the drop index.
   *
   * @private
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} dropIndex Visual row index, being a drop index for the moved rows.
   * @returns {number} Visual row index, being a start index for the moved rows.
   */
  countFinalIndex(e, n) {
    const r = nn(e, (i, o) => (o < n && (i += 1), i), 0);
    return n - r;
  }
  /**
   * Gets the sum of the heights of rows in the provided range.
   *
   * @private
   * @param {number} fromRow Visual row index.
   * @param {number} toRow Visual row index.
   * @returns {number}
   */
  getRowsHeight(e, n) {
    const r = this.hot.rowIndexMapper;
    let i = 0;
    for (let o = e; o <= n; o++) {
      const s = r.getRenderableFromVisualIndex(o);
      s !== null && (i += this.hot.view._wt.wtTable.getRowHeight(s) || 23);
    }
    return i;
  }
  /**
   * Loads initial settings when persistent state is saved or when plugin was initialized as an array.
   *
   * @private
   */
  moveBySettingsOrLoad() {
    const e = this.hot.getSettings()[Ow];
    if (Array.isArray(e))
      this.moveRows(e, 0);
    else if (e !== void 0) {
      const n = this.persistentStateLoad();
      n.length && this.moveRows(n, 0);
    }
  }
  /**
   * Checks if the provided row is in the fixedRowsTop section.
   *
   * @private
   * @param {number} row Visual row index to check.
   * @returns {boolean}
   */
  isFixedRowTop(e) {
    return e < this.hot.getSettings().fixedRowsTop;
  }
  /**
   * Checks if the provided row is in the fixedRowsBottom section.
   *
   * @private
   * @param {number} row Visual row index to check.
   * @returns {boolean}
   */
  isFixedRowBottom(e) {
    return e > this.hot.countRows() - 1 - this.hot.getSettings().fixedRowsBottom;
  }
  /**
   * Saves the manual row positions to the persistent state (the {@link Options#persistentState} option has to be enabled).
   *
   * @private
   * @fires Hooks#persistentStateSave
   */
  persistentStateSave() {
    this.hot.runHooks("persistentStateSave", "manualRowMove", this.hot.rowIndexMapper.getIndexesSequence());
  }
  /**
   * Loads the manual row positions from the persistent state (the {@link Options#persistentState} option has to be enabled).
   *
   * @private
   * @fires Hooks#persistentStateLoad
   * @returns {Array} Stored state.
   */
  persistentStateLoad() {
    const e = {};
    return this.hot.runHooks("persistentStateLoad", "manualRowMove", e), e.value ? e.value : [];
  }
  /**
   * Prepares an array of indexes based on actual selection.
   *
   * @private
   * @returns {Array}
   */
  prepareRowsToMoving() {
    const e = this.hot.getSelectedRangeLast(), n = [];
    if (!e)
      return n;
    const {
      from: r,
      to: i
    } = e, o = Math.min(r.row, i.row), s = Math.max(r.row, i.row);
    return xe(o, s, (a) => {
      n.push(a);
    }), n;
  }
  /**
   * Update the UI visual position.
   *
   * @private
   */
  refreshPositions() {
    const e = ze(this, gr).coords, n = this.hot.view.getFirstFullyVisibleRow(), r = this.hot.view.getLastFullyVisibleRow(), i = this.hot.countRows();
    this.isFixedRowTop(e.row) && n > 0 && this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(n - 1, -1)), this.isFixedRowBottom(e.row) && r < i && this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(r + 1, 1), void 0, !0);
    const o = this.hot.view._wt.wtTable, s = ze(this, gr).TD, a = this.hot.rootElement, l = an(a), u = va(a), c = o.holder.scrollTop, d = this.hot.rootWindow !== u ? u.scrollTop : 0, g = l.top - d, p = ze(this, gr).eventPageY - g + c, C = o.hider.offsetHeight, E = o.TBODY.offsetTop, I = ze(this, Qn).getOffset().top, M = ze(this, Qn).getSize().height, y = s.offsetHeight / 2, $ = s.offsetHeight;
    let X = this.hot.view.THEAD.offsetHeight + this.getRowsHeight(0, e.row - 1);
    const G = p >= X + y;
    this.isFixedRowTop(e.row) && (X += this.hot.view._wt.wtOverlays.topOverlay.getOverlayOffset()), e.row < 0 ? ze(this, gr).row = n > 0 ? n - 1 : n : G ? (ze(this, gr).row = e.row + 1, X += e.row === 0 ? $ - 1 : $) : ze(this, gr).row = e.row;
    let q = p, re = X;
    p + M + I >= C ? q = C - M - I : p + I < E && (q = E + Math.abs(I)), X >= C - 1 && (re = C - 1), ze(this, Qn).setPosition(q), ze(this, hs).setPosition(re);
  }
  /**
   * Binds the events used by the plugin.
   *
   * @private
   */
  registerEvents() {
    const {
      documentElement: e
    } = this.hot.rootDocument;
    this.eventManager.addEventListener(e, "mousemove", (n) => Cl(this, vO, Ure).call(this, n)), this.eventManager.addEventListener(e, "mouseup", () => Cl(this, yO, Gre).call(this));
  }
  /**
   * Unbinds the events used by the plugin.
   *
   * @private
   */
  unregisterEvents() {
    this.eventManager.clear();
  }
  /**
   * Builds the plugin's UI.
   *
   * @private
   */
  buildPluginUI() {
    ze(this, Qn).build(), ze(this, hs).build();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    ze(this, Qn).destroy(), ze(this, hs).destroy(), super.destroy();
  }
}
function Bre(t, e, n, r) {
  const {
    wtTable: i,
    wtViewport: o
  } = this.hot.view._wt, s = this.hot.selection.isSelectedByRowHeader(), a = this.hot.getSelectedRangeLast();
  if (!a || !s || ze(this, ws) || t.button !== 0) {
    pa(this, ws, !1), ze(this, xo).length = 0, Ye(this.hot.rootElement, [Cv, ig]);
    return;
  }
  const l = ze(this, hs).isBuilt() && !ze(this, hs).isAppended(), u = ze(this, Qn).isBuilt() && !ze(this, Qn).isAppended();
  l && u && (ze(this, hs).appendTo(i.hider), ze(this, Qn).appendTo(i.hider));
  const {
    from: c,
    to: d
  } = a, g = Math.min(c.row, d.row), p = Math.max(c.row, d.row);
  if (e.col < 0 && e.row >= g && e.row <= p) {
    r.row = !0, pa(this, ws, !0), ze(this, gr).eventPageY = t.pageY, ze(this, gr).coords = e, ze(this, gr).TD = n, pa(this, xo, this.prepareRowsToMoving());
    const C = i.holder.scrollLeft + o.getRowHeaderWidth(), E = this.getRowsHeight(g, e.row - 1) + t.offsetY;
    ze(this, Qn).setPosition(null, C), ze(this, Qn).setSize(i.hider.offsetWidth - C, this.getRowsHeight(g, p)), ze(this, Qn).setOffset(-E, null), ce(this.hot.rootElement, Cv), this.refreshPositions();
  } else
    Ye(this.hot.rootElement, vv), pa(this, ws, !1), ze(this, xo).length = 0;
}
function Ure(t) {
  ze(this, ws) && (ze(this, gr).eventPageY = t.pageY, this.refreshPositions());
}
function Yre(t, e, n, r) {
  !this.hot.getSelectedRangeLast() || !ze(this, ws) || (ze(this, xo).indexOf(e.row) > -1 ? Ye(this.hot.rootElement, ig) : ce(this.hot.rootElement, ig), r.row = !0, r.column = !0, r.cell = !0, ze(this, gr).coords = e, ze(this, gr).TD = n);
}
function Gre() {
  const t = ze(this, gr).row, e = ze(this, xo).length;
  if (pa(this, ws, !1), Ye(this.hot.rootElement, [Cv, ig, vv]), this.hot.selection.isSelectedByRowHeader() && ce(this.hot.rootElement, vv), e < 1 || t === void 0)
    return;
  const n = ze(this, xo)[0], r = this.hot.toPhysicalRow(n), i = this.dragRows(ze(this, xo), t);
  if (ze(this, xo).length = 0, i === !0) {
    this.persistentStateSave(), this.hot.render(), this.hot.view.adjustElementsSize(!0);
    const o = this.hot.toVisualRow(r), s = o + e - 1;
    this.hot.selectRows(o, s);
  }
}
function zre() {
  const t = this.hot.view._wt.wtTable, e = this.hot.view._wt.wtViewport.getRowHeaderWidth(), n = t.holder.scrollLeft, r = e + n;
  ze(this, Qn).setPosition(null, r), ze(this, Qn).setSize(t.hider.offsetWidth - r);
}
function jre() {
  this.moveBySettingsOrLoad();
}
function ra(t, e) {
  KD(t, e), e.add(t);
}
function Hn(t, e, n) {
  KD(t, e), e.set(t, n);
}
function KD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ia(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
function Kt(t, e, n) {
  var r = XD(t, e, "set");
  return Kre(t, r, n), n;
}
function Kre(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function ve(t, e) {
  var n = XD(t, e, "get");
  return Xre(t, n);
}
function XD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Xre(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
const og = "manualRowResize", qre = 30, EO = "manualRowHeights";
var Fi = /* @__PURE__ */ new WeakMap(), Hd = /* @__PURE__ */ new WeakMap(), Sr = /* @__PURE__ */ new WeakMap(), sg = /* @__PURE__ */ new WeakMap(), ds = /* @__PURE__ */ new WeakMap(), rR = /* @__PURE__ */ new WeakMap(), Fl = /* @__PURE__ */ new WeakMap(), Dd = /* @__PURE__ */ new WeakMap(), Kn = /* @__PURE__ */ new WeakMap(), Li = /* @__PURE__ */ new WeakMap(), Ea = /* @__PURE__ */ new WeakMap(), ag = /* @__PURE__ */ new WeakMap(), Sc = /* @__PURE__ */ new WeakMap(), yc = /* @__PURE__ */ new WeakMap(), hi = /* @__PURE__ */ new WeakMap(), bc = /* @__PURE__ */ new WeakMap(), TO = /* @__PURE__ */ new WeakSet(), _O = /* @__PURE__ */ new WeakSet(), MO = /* @__PURE__ */ new WeakSet(), OO = /* @__PURE__ */ new WeakSet(), AO = /* @__PURE__ */ new WeakSet(), IO = /* @__PURE__ */ new WeakSet(), PO = /* @__PURE__ */ new WeakSet();
class Zre extends gt {
  static get PLUGIN_KEY() {
    return og;
  }
  static get PLUGIN_PRIORITY() {
    return qre;
  }
  /**
   * @type {HTMLTableCellElement}
   */
  constructor(e) {
    super(e), ra(this, PO), ra(this, IO), ra(this, AO), ra(this, OO), ra(this, MO), ra(this, _O), ra(this, TO), Hn(this, Fi, {
      writable: !0,
      value: null
    }), Hn(this, Hd, {
      writable: !0,
      value: null
    }), Hn(this, Sr, {
      writable: !0,
      value: []
    }), Hn(this, sg, {
      writable: !0,
      value: null
    }), Hn(this, ds, {
      writable: !0,
      value: null
    }), Hn(this, rR, {
      writable: !0,
      value: null
    }), Hn(this, Fl, {
      writable: !0,
      value: null
    }), Hn(this, Dd, {
      writable: !0,
      value: null
    }), Hn(this, Kn, {
      writable: !0,
      value: this.hot.rootDocument.createElement("DIV")
    }), Hn(this, Li, {
      writable: !0,
      value: this.hot.rootDocument.createElement("DIV")
    }), Hn(this, Ea, {
      writable: !0,
      value: !1
    }), Hn(this, ag, {
      writable: !0,
      value: !1
    }), Hn(this, Sc, {
      writable: !0,
      value: 0
    }), Hn(this, yc, {
      writable: !0,
      value: null
    }), Hn(this, hi, {
      writable: !0,
      value: void 0
    }), Hn(this, bc, {
      writable: !0,
      value: void 0
    }), ce(ve(this, Kn), "manualRowResizer"), ce(ve(this, Li), "manualRowResizerGuide");
  }
  /**
   * @private
   * @returns {string}
   */
  get inlineDir() {
    return this.hot.isRtl() ? "right" : "left";
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualRowResize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[og];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (Kt(this, hi, new Ps()), ve(this, hi).addLocalHook("init", () => ia(this, PO, iie).call(this)), this.hot.rowIndexMapper.registerMap(this.pluginName, ve(this, hi)), this.addHook("modifyRowHeight", (e, n) => ia(this, IO, rie).call(this, e, n)), this.bindEvents(), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualRowResize`](@/api/options.md#manualrowresize)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    Kt(this, bc, ve(this, hi).getValues()), this.hot.rowIndexMapper.unregisterMap(this.pluginName), super.disablePlugin();
  }
  /**
   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be
   * enabled).
   *
   * @fires Hooks#persistentStateSave
   */
  saveManualRowHeights() {
    this.hot.runHooks("persistentStateSave", EO, ve(this, hi).getValues());
  }
  /**
   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option
   * has be enabled).
   *
   * @returns {Array}
   * @fires Hooks#persistentStateLoad
   */
  loadManualRowHeights() {
    const e = {};
    return this.hot.runHooks("persistentStateLoad", EO, e), e.value;
  }
  /**
   * Sets the new height for specified row index.
   *
   * @param {number} row Visual row index.
   * @param {number} height Row height.
   * @returns {number} Returns new height.
   */
  setManualSize(e, n) {
    const r = this.hot.toPhysicalRow(e), i = Math.max(n, VP.DEFAULT_HEIGHT);
    return ve(this, hi).setValueAtIndex(r, i), i;
  }
  /**
   * Sets the resize handle position.
   *
   * @private
   * @param {HTMLCellElement} TH TH HTML element.
   */
  setupHandlePosition(e) {
    Kt(this, Fi, e);
    const {
      view: n
    } = this.hot, {
      _wt: r
    } = n, i = r.wtTable.getCoords(ve(this, Fi)), o = i.row;
    if (o < 0)
      return;
    const s = yt(ve(this, Fi)), a = ve(this, Fi).getBoundingClientRect(), l = o < r.getSetting("fixedRowsTop"), u = o >= n.countNotHiddenRowIndexes(0, 1) - r.getSetting("fixedRowsBottom");
    let c;
    l ? c = r.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(ve(this, Fi), i.row, i.col) : u && (c = r.wtOverlays.bottomInlineStartCornerOverlay.getRelativeCellPosition(ve(this, Fi), i.row, i.col)), c || (c = r.wtOverlays.inlineStartOverlay.getRelativeCellPosition(ve(this, Fi), i.row, i.col)), Kt(this, Hd, this.hot.rowIndexMapper.getVisualFromRenderableIndex(o)), Kt(this, Sr, []);
    const d = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByRowHeader();
    if (this.hot.selection.isSelected() && d) {
      const g = this.hot.getSelectedRange();
      H(g, (p) => {
        const C = p.getTopStartCorner().row, E = p.getBottomStartCorner().row;
        xe(C, E, (I) => {
          ve(this, Sr).includes(I) || ve(this, Sr).push(I);
        });
      });
    }
    ve(this, Sr).includes(ve(this, Hd)) || Kt(this, Sr, [ve(this, Hd)]), Kt(this, Dd, c.top - 6), Kt(this, Fl, parseInt(a.height, 10)), ve(this, Kn).style.top = `${ve(this, Dd) + ve(this, Fl)}px`, ve(this, Kn).style[this.inlineDir] = `${c.start}px`, ve(this, Kn).style.width = `${s}px`, this.hot.rootElement.appendChild(ve(this, Kn));
  }
  /**
   * Refresh the resize handle position.
   *
   * @private
   */
  refreshHandlePosition() {
    ve(this, Kn).style.top = `${ve(this, Dd) + ve(this, sg)}px`;
  }
  /**
   * Sets the resize guide position.
   *
   * @private
   */
  setupGuidePosition() {
    const e = parseInt(yt(ve(this, Kn)), 10), n = parseInt(ve(this, Kn).style[this.inlineDir], 10) + e, r = parseInt(this.hot.view.maximumVisibleElementWidth(0), 10);
    ce(ve(this, Kn), "active"), ce(ve(this, Li), "active"), ve(this, Li).style.top = ve(this, Kn).style.top, ve(this, Li).style[this.inlineDir] = `${n}px`, ve(this, Li).style.width = `${r - e}px`, this.hot.rootElement.appendChild(ve(this, Li));
  }
  /**
   * Refresh the resize guide position.
   *
   * @private
   */
  refreshGuidePosition() {
    ve(this, Li).style.top = ve(this, Kn).style.top;
  }
  /**
   * Hides both the resize handle and resize guide.
   *
   * @private
   */
  hideHandleAndGuide() {
    Ye(ve(this, Kn), "active"), Ye(ve(this, Li), "active");
  }
  /**
   * Checks if provided element is considered as a row header.
   *
   * @private
   * @param {HTMLElement} element HTML element.
   * @returns {boolean}
   */
  checkIfRowHeader(e) {
    var n;
    return Es(e, ["TH"], this.hot.rootElement) && ((n = e.parentNode) === null || n === void 0 || (n = n.parentNode) === null || n === void 0 ? void 0 : n.tagName) === "TBODY";
  }
  /**
   * Gets the TH element from the provided element.
   *
   * @private
   * @param {HTMLElement} element HTML element.
   * @returns {HTMLElement}
   */
  getClosestTHParent(e) {
    return e.tagName !== "TABLE" ? e.tagName === "TH" ? e : this.getClosestTHParent(e.parentNode) : null;
  }
  /**
   * Returns the actual height for the provided row index.
   *
   * @private
   * @param {number} row Visual row index.
   * @returns {number} Actual row height.
   */
  getActualRowHeight(e) {
    const n = this.hot.view._wt.wtTable.getRowHeight(e);
    return n !== void 0 && ve(this, ds) < n ? n : ve(this, ds);
  }
  /**
   * Auto-size row after doubleclick - callback.
   *
   * @private
   * @fires Hooks#beforeRowResize
   * @fires Hooks#afterRowResize
   */
  afterMouseDownTimeout() {
    const e = () => {
      this.hot.forceFullRender = !0, this.hot.view.render(), this.hot.view.adjustElementsSize(!0);
    }, n = (r, i) => {
      const o = this.hot.runHooks("beforeRowResize", this.getActualRowHeight(r), r, !0);
      o !== void 0 && Kt(this, ds, o), this.setManualSize(r, ve(this, ds)), this.hot.runHooks("afterRowResize", this.getActualRowHeight(r), r, !0), i && e();
    };
    ve(this, Sc) >= 2 && (ve(this, Sr).length > 1 ? (H(ve(this, Sr), (i) => {
      n(i);
    }), e()) : H(ve(this, Sr), (i) => {
      n(i, !0);
    })), Kt(this, Sc, 0), Kt(this, yc, null);
  }
  /**
   * Binds the mouse events.
   *
   * @private
   */
  bindEvents() {
    const {
      rootElement: e,
      rootWindow: n
    } = this.hot;
    this.eventManager.addEventListener(e, "mouseover", (r) => ia(this, TO, Qre).call(this, r)), this.eventManager.addEventListener(e, "mousedown", (r) => ia(this, _O, Jre).call(this, r)), this.eventManager.addEventListener(n, "mousemove", (r) => ia(this, MO, eie).call(this, r)), this.eventManager.addEventListener(n, "mouseup", () => ia(this, OO, tie).call(this)), this.eventManager.addEventListener(ve(this, Kn), "contextmenu", () => ia(this, AO, nie).call(this));
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
function Qre(t) {
  if (!mS(t.target) && ve(this, ag) !== !0 && this.checkIfRowHeader(t.target)) {
    const e = this.getClosestTHParent(t.target);
    e && (ve(this, Ea) || this.setupHandlePosition(e));
  }
}
function Jre(t) {
  Ve(t.target, "manualRowResizer") && (this.setupHandlePosition(ve(this, Fi)), this.setupGuidePosition(), Kt(this, Ea, !0), ve(this, yc) === null && (Kt(this, yc, setTimeout(() => this.afterMouseDownTimeout(), 500)), this.hot._registerTimeout(ve(this, yc))), Kt(this, Sc, ve(this, Sc) + 1), Kt(this, rR, t.pageY), Kt(this, ds, ve(this, Fl)));
}
function eie(t) {
  ve(this, Ea) && (Kt(this, sg, ve(this, Fl) + (t.pageY - ve(this, rR))), H(ve(this, Sr), (e) => {
    Kt(this, ds, this.setManualSize(e, ve(this, sg)));
  }), this.refreshHandlePosition(), this.refreshGuidePosition());
}
function tie() {
  const t = () => {
    this.hot.forceFullRender = !0, this.hot.view.render(), this.hot.view.adjustElementsSize(!0);
  }, e = (n, r) => {
    this.hot.runHooks("beforeRowResize", this.getActualRowHeight(n), n, !1), r && t(), this.saveManualRowHeights(), this.hot.runHooks("afterRowResize", this.getActualRowHeight(n), n, !1);
  };
  ve(this, Ea) && (this.hideHandleAndGuide(), Kt(this, Ea, !1), ve(this, ds) !== ve(this, Fl) && (ve(this, Sr).length > 1 ? (H(ve(this, Sr), (r) => {
    e(r);
  }), t()) : H(ve(this, Sr), (r) => {
    e(r, !0);
  })), this.setupHandlePosition(ve(this, Fi)));
}
function nie() {
  this.hideHandleAndGuide(), this.hot.rootElement.removeChild(ve(this, Kn)), this.hot.rootElement.removeChild(ve(this, Li)), Kt(this, Ea, !1), Kt(this, ag, !0), this.hot._registerImmediate(() => {
    Kt(this, ag, !1);
  });
}
function rie(t, e) {
  let n = t;
  if (this.enabled) {
    const r = this.hot.toPhysicalRow(e), i = ve(this, hi).getValueAtIndex(r);
    this.hot.getSettings()[og] && i && (n = i);
  }
  return n;
}
function iie() {
  const t = this.hot.getSettings()[og], e = this.loadManualRowHeights();
  this.hot.batchExecution(() => {
    typeof e < "u" ? e.forEach((n, r) => {
      ve(this, hi).setValueAtIndex(r, n);
    }) : Array.isArray(t) ? (t.forEach((n, r) => {
      ve(this, hi).setValueAtIndex(r, n);
    }), Kt(this, bc, t)) : t === !0 && Array.isArray(ve(this, bc)) && ve(this, bc).forEach((n, r) => {
      ve(this, hi).setValueAtIndex(r, n);
    });
  }, !0);
}
function oa(t, e, n) {
  return e = oie(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function oie(t) {
  var e = sie(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function sie(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class aie {
  constructor(e, n, r, i, o, s) {
    oa(this, "row", void 0), oa(this, "col", void 0), oa(this, "rowspan", void 0), oa(this, "colspan", void 0), oa(this, "removed", !1), oa(this, "cellCoordsFactory", void 0), oa(this, "cellRangeFactory", void 0), this.row = e, this.col = n, this.rowspan = r, this.colspan = i, this.cellCoordsFactory = o, this.cellRangeFactory = s;
  }
  /**
   * Get a warning message for when the declared merged cell data contains negative values.
   *
   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
   * @returns {string}
   */
  static NEGATIVE_VALUES_WARNING(e) {
    return bt`The merged cell declared with {row: ${e.row}, col: ${e.col},\x20
      rowspan: ${e.rowspan}, colspan: ${e.colspan}} contains negative values, which is\x20
      not supported. It will not be added to the collection.`;
  }
  /**
   * Get a warning message for when the declared merged cell data contains values exceeding the table limits.
   *
   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
   * @returns {string}
   */
  static IS_OUT_OF_BOUNDS_WARNING(e) {
    return bt`The merged cell declared at [${e.row}, ${e.col}] is positioned\x20
      (or positioned partially) outside of the table range. It was not added to the table, please fix your setup.`;
  }
  /**
   * Get a warning message for when the declared merged cell data represents a single cell.
   *
   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
   * @returns {string}
   */
  static IS_SINGLE_CELL(e) {
    return bt`The merged cell declared at [${e.row}, ${e.col}] has both "rowspan"\x20
      and "colspan" declared as "1", which makes it a single cell. It cannot be added to the collection.`;
  }
  /**
   * Get a warning message for when the declared merged cell data contains "colspan" or "rowspan", that equals 0.
   *
   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
   * @returns {string}
   */
  static ZERO_SPAN_WARNING(e) {
    return bt`The merged cell declared at [${e.row}, ${e.col}] has "rowspan"\x20
      or "colspan" declared as "0", which is not supported. It cannot be added to the collection.`;
  }
  /**
   * Check whether the values provided for a merged cell contain any negative values.
   *
   * @param {object} mergedCellInfo Object containing the `row`, `col`, `rowspan` and `colspan` properties.
   * @returns {boolean}
   */
  static containsNegativeValues(e) {
    return e.row < 0 || e.col < 0 || e.rowspan < 0 || e.colspan < 0;
  }
  /**
   * Check whether the provided merged cell information object represents a single cell.
   *
   * @private
   * @param {object} mergedCellInfo An object with `row`, `col`, `rowspan` and `colspan` properties.
   * @returns {boolean}
   */
  static isSingleCell(e) {
    return e.colspan === 1 && e.rowspan === 1;
  }
  /**
   * Check whether the provided merged cell information object contains a rowspan or colspan of 0.
   *
   * @private
   * @param {object} mergedCellInfo An object with `row`, `col`, `rowspan` and `colspan` properties.
   * @returns {boolean}
   */
  static containsZeroSpan(e) {
    return e.colspan === 0 || e.rowspan === 0;
  }
  /**
   * Check whether the provided merged cell object is to be declared out of bounds of the table.
   *
   * @param {object} mergeCell Object containing the `row`, `col`, `rowspan` and `colspan` properties.
   * @param {number} rowCount Number of rows in the table.
   * @param {number} columnCount Number of rows in the table.
   * @returns {boolean}
   */
  static isOutOfBounds(e, n, r) {
    return e.row < 0 || e.col < 0 || e.row >= n || e.row + e.rowspan - 1 >= n || e.col >= r || e.col + e.colspan - 1 >= r;
  }
  /**
   * Sanitize (prevent from going outside the boundaries) the merged cell.
   *
   * @param {Core} hotInstance The Handsontable instance.
   */
  normalize(e) {
    const n = e.countRows(), r = e.countCols();
    this.row < 0 ? this.row = 0 : this.row > n - 1 && (this.row = n - 1), this.col < 0 ? this.col = 0 : this.col > r - 1 && (this.col = r - 1), this.row + this.rowspan > n - 1 && (this.rowspan = n - this.row), this.col + this.colspan > r - 1 && (this.colspan = r - this.col);
  }
  /**
   * Returns `true` if the provided coordinates are inside the merged cell.
   *
   * @param {number} row The row index.
   * @param {number} column The column index.
   * @returns {boolean}
   */
  includes(e, n) {
    return this.row <= e && this.col <= n && this.row + this.rowspan - 1 >= e && this.col + this.colspan - 1 >= n;
  }
  /**
   * Returns `true` if the provided `column` property is within the column span of the merged cell.
   *
   * @param {number} column The column index.
   * @returns {boolean}
   */
  includesHorizontally(e) {
    return this.col <= e && this.col + this.colspan - 1 >= e;
  }
  /**
   * Returns `true` if the provided `row` property is within the row span of the merged cell.
   *
   * @param {number} row Row index.
   * @returns {boolean}
   */
  includesVertically(e) {
    return this.row <= e && this.row + this.rowspan - 1 >= e;
  }
  /**
   * Shift (and possibly resize, if needed) the merged cell.
   *
   * @param {Array} shiftVector 2-element array containing the information on the shifting in the `x` and `y` axis.
   * @param {number} indexOfChange Index of the preceding change.
   * @returns {boolean} Returns `false` if the whole merged cell was removed.
   */
  shift(e, n) {
    const r = e[0] || e[1], i = n + Math.abs(e[0] || e[1]) - 1, o = e[0] ? "colspan" : "rowspan", s = e[0] ? "col" : "row", a = Math.min(n, i), l = Math.max(n, i), u = this[s], c = this[s] + this[o] - 1;
    if (u >= n && (this[s] += r), r > 0)
      n <= c && n > u && (this[o] += r);
    else if (r < 0) {
      if (a <= u && l >= c)
        return this.removed = !0, !1;
      if (u >= a && u <= l) {
        const d = l - u + 1, g = Math.abs(r) - d;
        this[s] -= g + r, this[o] -= d;
      } else if (u <= a && c >= l)
        this[o] += r;
      else if (u <= a && c >= a && c < l) {
        const d = c - a + 1;
        this[o] -= d;
      }
    }
    return !0;
  }
  /**
   * Check if the second provided merged cell is "farther" in the provided direction.
   *
   * @param {MergedCellCoords} mergedCell The merged cell to check.
   * @param {string} direction Drag direction.
   * @returns {boolean|null} `true` if the second provided merged cell is "farther".
   */
  isFarther(e, n) {
    return e ? n === "down" ? e.row + e.rowspan - 1 < this.row + this.rowspan - 1 : n === "up" ? e.row > this.row : n === "right" ? e.col + e.colspan - 1 < this.col + this.colspan - 1 : n === "left" ? e.col > this.col : null : !0;
  }
  /**
   * Get the bottom row index of the merged cell.
   *
   * @returns {number}
   */
  getLastRow() {
    return this.row + this.rowspan - 1;
  }
  /**
   * Get the rightmost column index of the merged cell.
   *
   * @returns {number}
   */
  getLastColumn() {
    return this.col + this.colspan - 1;
  }
  /**
   * Get the range coordinates of the merged cell.
   *
   * @returns {CellRange}
   */
  getRange() {
    return this.cellRangeFactory(this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.getLastRow(), this.getLastColumn()));
  }
}
const Wi = aie;
function Sv(t, e, n, r) {
  e ? e.row === n && e.col === r ? (t.setAttribute("rowspan", e.rowspan.toString()), t.setAttribute("colspan", e.colspan.toString())) : (t.removeAttribute("rowspan"), t.removeAttribute("colspan"), t.style.display = "none") : (t.removeAttribute("rowspan"), t.removeAttribute("colspan"), t.style.display = "");
}
function Aw(t, e, n) {
  return e = lie(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function lie(t) {
  var e = uie(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function uie(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class iR {
  constructor(e) {
    Aw(this, "plugin", void 0), Aw(this, "mergedCells", []), Aw(this, "hot", void 0), this.plugin = e, this.hot = e.hot;
  }
  /**
   * Get a warning message for when the declared merged cell data overlaps already existing merged cells.
   *
   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
   * @returns {string}
   */
  static IS_OVERLAPPING_WARNING(e) {
    return bt`The merged cell declared at [${e.row}, ${e.col}], overlaps\x20
      with the other declared merged cell. The overlapping merged cell was not added to the table, please\x20
      fix your setup.`;
  }
  /**
   * Get a merged cell from the container, based on the provided arguments. You can provide either the "starting coordinates"
   * of a merged cell, or any coordinates from the body of the merged cell.
   *
   * @param {number} row Row index.
   * @param {number} column Column index.
   * @returns {MergedCellCoords|boolean} Returns a wanted merged cell on success and `false` on failure.
   */
  get(e, n) {
    const r = this.mergedCells;
    let i = !1;
    return H(r, (o) => o.row <= e && o.row + o.rowspan - 1 >= e && o.col <= n && o.col + o.colspan - 1 >= n ? (i = o, !1) : !0), i;
  }
  /**
   * Get a merged cell containing the provided range.
   *
   * @param {CellRange|object} range The range to search merged cells for.
   * @returns {MergedCellCoords|boolean}
   */
  getByRange(e) {
    const n = this.mergedCells;
    let r = !1;
    return H(n, (i) => i.row <= e.from.row && i.row + i.rowspan - 1 >= e.to.row && i.col <= e.from.col && i.col + i.colspan - 1 >= e.to.col ? (r = i, r) : !0), r;
  }
  /**
   * Get a merged cell contained in the provided range.
   *
   * @param {CellRange|object} range The range to search merged cells in.
   * @param {boolean} [countPartials=false] If set to `true`, all the merged cells overlapping the range will be taken into calculation.
   * @returns {Array|boolean} Array of found merged cells of `false` if none were found.
   */
  getWithinRange(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const r = this.mergedCells, i = [];
    let o = e;
    if (!o.includesRange) {
      const s = this.hot._createCellCoords(o.from.row, o.from.col), a = this.hot._createCellCoords(o.to.row, o.to.col);
      o = this.hot._createCellRange(s, s, a);
    }
    return H(r, (s) => {
      const a = this.hot._createCellCoords(s.row, s.col), l = this.hot._createCellCoords(s.row + s.rowspan - 1, s.col + s.colspan - 1), u = this.hot._createCellRange(a, a, l);
      n ? o.overlaps(u) && i.push(s) : o.includesRange(u) && i.push(s);
    }), i.length ? i : !1;
  }
  /**
   * Add a merged cell to the container.
   *
   * @param {object} mergedCellInfo The merged cell information object. Has to contain `row`, `col`, `colspan` and `rowspan` properties.
   * @returns {MergedCellCoords|boolean} Returns the new merged cell on success and `false` on failure.
   */
  add(e) {
    const n = this.mergedCells, r = e.row, i = e.col, o = e.rowspan, s = e.colspan, a = new Wi(r, i, o, s, this.hot._createCellCoords, this.hot._createCellRange), l = this.get(r, i), u = this.isOverlapping(a);
    return !l && !u ? (this.hot && a.normalize(this.hot), n.push(a), a) : (Pt(iR.IS_OVERLAPPING_WARNING(a)), !1);
  }
  /**
   * Remove a merged cell from the container. You can provide either the "starting coordinates"
   * of a merged cell, or any coordinates from the body of the merged cell.
   *
   * @param {number} row Row index.
   * @param {number} column Column index.
   * @returns {MergedCellCoords|boolean} Returns the removed merged cell on success and `false` on failure.
   */
  remove(e, n) {
    const r = this.mergedCells, i = this.get(e, n), o = i ? this.mergedCells.indexOf(i) : -1;
    return i && o !== -1 ? (r.splice(o, 1), i) : !1;
  }
  /**
   * Clear all the merged cells.
   */
  clear() {
    const e = this.mergedCells, n = [], r = [];
    H(e, (i) => {
      const o = this.hot.getCell(i.row, i.col);
      o && n.push([o, this.get(i.row, i.col), i.row, i.col]);
    }), this.mergedCells.length = 0, H(n, (i, o) => {
      xe(0, i.rowspan - 1, (s) => {
        xe(0, i.colspan - 1, (a) => {
          if (a !== 0 || s !== 0) {
            const l = this.hot.getCell(i.row + s, i.col + a);
            l && r.push([l, null, null, null]);
          }
        });
      }), n[o][1] = null;
    }), H(n, (i) => {
      Sv(...i);
    }), H(r, (i) => {
      Sv(...i);
    });
  }
  /**
   * Check if the provided merged cell overlaps with the others in the container.
   *
   * @param {MergedCellCoords} mergedCell The merged cell to check against all others in the container.
   * @returns {boolean} `true` if the provided merged cell overlaps with the others, `false` otherwise.
   */
  isOverlapping(e) {
    const n = this.hot._createCellRange(this.hot._createCellCoords(0, 0), this.hot._createCellCoords(e.row, e.col), this.hot._createCellCoords(e.row + e.rowspan - 1, e.col + e.colspan - 1));
    let r = !1;
    return H(this.mergedCells, (i) => this.hot._createCellRange(this.hot._createCellCoords(0, 0), this.hot._createCellCoords(i.row, i.col), this.hot._createCellCoords(i.row + i.rowspan - 1, i.col + i.colspan - 1)).overlaps(n) ? (r = !0, !1) : !0), r;
  }
  /**
   * Check whether the provided row/col coordinates direct to a first not hidden cell within merge area.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  isFirstRenderableMergedCell(e, n) {
    const r = this.get(e, n);
    return r && this.hot.rowIndexMapper.getNearestNotHiddenIndex(r.row, 1) === e && this.hot.columnIndexMapper.getNearestNotHiddenIndex(r.col, 1) === n;
  }
  /**
   * Get the first renderable coords of the merged cell at the provided coordinates.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @returns {CellCoords} A `CellCoords` object with the coordinates to the first renderable cell within the
   *                        merged cell.
   */
  getFirstRenderableCoords(e, n) {
    const r = this.get(e, n);
    if (!r || this.isFirstRenderableMergedCell(e, n))
      return this.hot._createCellCoords(e, n);
    const i = this.hot.rowIndexMapper.getNearestNotHiddenIndex(r.row, 1), o = this.hot.columnIndexMapper.getNearestNotHiddenIndex(r.col, 1);
    return this.hot._createCellCoords(i, o);
  }
  /**
   * Shift the merged cell in the direction and by an offset defined in the arguments.
   *
   * @param {string} direction `right`, `left`, `up` or `down`.
   * @param {number} index Index where the change, which caused the shifting took place.
   * @param {number} count Number of rows/columns added/removed in the preceding action.
   */
  shiftCollections(e, n, r) {
    const i = [0, 0];
    switch (e) {
      case "right":
        i[0] += r;
        break;
      case "left":
        i[0] -= r;
        break;
      case "down":
        i[1] += r;
        break;
      case "up":
        i[1] -= r;
        break;
    }
    H(this.mergedCells, (o) => {
      o.shift(i, n);
    }), Nf(this.mergedCells.length - 1, 0, (o) => {
      const s = this.mergedCells[o];
      s && s.removed && this.mergedCells.splice(this.mergedCells.indexOf(s), 1);
    });
  }
}
const cie = iR;
function Iw(t, e, n) {
  return e = hie(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function hie(t) {
  var e = die(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function die(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class fie {
  constructor(e) {
    Iw(this, "plugin", void 0), Iw(this, "mergedCellsCollection", void 0), Iw(this, "currentFillData", null), this.plugin = e, this.mergedCellsCollection = this.plugin.mergedCellsCollection;
  }
  /**
   * Correct the provided selection area, so it's not selecting only a part of a merged cell.
   *
   * @param {Array} selectionArea The selection to correct.
   */
  correctSelectionAreaSize(e) {
    if (e[0] === e[2] && e[1] === e[3]) {
      const n = this.mergedCellsCollection.get(e[0], e[1]);
      n && (e[2] = e[0] + n.rowspan - 1, e[3] = e[1] + n.colspan - 1);
    }
  }
  /**
   * Get the direction of the autofill process.
   *
   * @param {Array} selectionArea The selection area.
   * @param {Array} finalArea The final area (base + drag).
   * @returns {string} `up`, `down`, `left` or `right`.
   */
  getDirection(e, n) {
    let r = null;
    return n[0] === e[0] && n[1] === e[1] && n[3] === e[3] ? r = "down" : n[2] === e[2] && n[1] === e[1] && n[3] === e[3] ? r = "up" : n[1] === e[1] && n[2] === e[2] ? r = "right" : r = "left", r;
  }
  /**
   * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.
   *
   * @param {Array} baseArea The base selected area.
   * @param {Array} dragArea The drag area.
   * @param {string} dragDirection The autofill drag direction.
   * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.
   * @returns {Array} The new drag area.
   */
  snapDragArea(e, n, r, i) {
    const o = n.slice(0), s = this.getAutofillSize(e, n, r), [a, l, u, c] = e, g = ["up", "down"].indexOf(r) > -1 ? u - a + 1 : c - l + 1, p = Math.floor(s / g) * g, C = s - p, E = this.getFarthestCollection(e, n, r, i);
    if (E) {
      if (r === "down") {
        const I = E.row + E.rowspan - a - C;
        o[2] + I >= this.plugin.hot.countRows() ? o[2] -= C : o[2] += C ? I : 0;
      } else if (r === "right") {
        const I = E.col + E.colspan - l - C;
        o[3] + I >= this.plugin.hot.countCols() ? o[3] -= C : o[3] += C ? I : 0;
      } else if (r === "up") {
        const I = u - C - E.row + 1;
        o[0] + I < 0 ? o[0] += C : o[0] -= C ? I : 0;
      } else if (r === "left") {
        const I = c - C - E.col + 1;
        o[1] + I < 0 ? o[1] += C : o[1] -= C ? I : 0;
      }
    }
    return this.updateCurrentFillCache({
      baseArea: e,
      dragDirection: r,
      foundMergedCells: i,
      fillSize: s,
      dragArea: o,
      cycleLength: g
    }), o;
  }
  /**
   * Update the current fill cache with the provided object.
   *
   * @private
   * @param {object} updateObject The current filled object cache.
   */
  updateCurrentFillCache(e) {
    this.currentFillData || (this.currentFillData = {}), ln(this.currentFillData, e);
  }
  /**
   * Get the "length" of the drag area.
   *
   * @private
   * @param {Array} baseArea The base selection area.
   * @param {Array} dragArea The drag area (containing the base area).
   * @param {string} direction The drag direction.
   * @returns {number|null} The "length" (height or width, depending on the direction) of the drag.
   */
  getAutofillSize(e, n, r) {
    const [i, o, s, a] = e, [l, u, c, d] = n;
    switch (r) {
      case "up":
        return i - l;
      case "down":
        return c - s;
      case "left":
        return o - u;
      case "right":
        return d - a;
      default:
        return null;
    }
  }
  /**
   * Trim the default drag area (containing the selection area) to the drag-only area.
   *
   * @private
   * @param {Array} baseArea The base selection area.
   * @param {Array} dragArea The base selection area extended by the drag area.
   * @param {string} direction Drag direction.
   * @returns {Array|null} Array representing the drag area coordinates.
   */
  getDragArea(e, n, r) {
    const [i, o, s, a] = e, [l, u, c, d] = n;
    switch (r) {
      case "up":
        return [l, u, i - 1, a];
      case "down":
        return [s + 1, o, c, a];
      case "left":
        return [l, u, s, o - 1];
      case "right":
        return [i, a + 1, c, d];
      default:
        return null;
    }
  }
  /**
   * Get the to-be-farthest merged cell in the newly filled area.
   *
   * @private
   * @param {Array} baseArea The base selection area.
   * @param {Array} dragArea The drag area (containing the base area).
   * @param {string} direction The drag direction.
   * @param {Array} mergedCellArray Array of the merged cells found in the base area.
   * @returns {MergedCellCoords|null}
   */
  getFarthestCollection(e, n, r, i) {
    const [o, s, a, l] = e, u = ["up", "down"].indexOf(r) > -1, c = u ? a : l, d = u ? o : s, g = this.getAutofillSize(e, n, r), p = u ? a - o + 1 : l - s + 1, C = Math.floor(g / p) * p, E = g - C;
    let I = null, M = null, y = null;
    switch (r) {
      case "up":
        I = "includesVertically", y = c - E + 1;
        break;
      case "left":
        I = "includesHorizontally", y = c - E + 1;
        break;
      case "down":
        I = "includesVertically", y = d + E - 1;
        break;
      case "right":
        I = "includesHorizontally", y = d + E - 1;
        break;
    }
    return H(i, ($) => {
      $[I](y) && $.isFarther(M, r) && (M = $);
    }), M;
  }
  /**
   * Recreate the merged cells after the autofill process.
   *
   * @param {Array} changes Changes made.
   */
  recreateAfterDataPopulation(e) {
    if (!this.currentFillData)
      return;
    const n = this.getRangeFromChanges(e), r = this.currentFillData.foundMergedCells, i = this.currentFillData.dragDirection, o = (u, c) => {
      switch (i) {
        case "up":
          return u.row - c >= n.from.row;
        case "down":
          return u.row + u.rowspan - 1 + c <= n.to.row;
        case "left":
          return u.col - c >= n.from.column;
        case "right":
          return u.col + u.colspan - 1 + c <= n.to.column;
        default:
          return null;
      }
    };
    let s = 0, a = null, l = 1;
    do
      for (let u = 0; u < r.length; u += 1) {
        if (a = r[u], s = l * this.currentFillData.cycleLength, o(a, s))
          switch (i) {
            case "up":
              this.plugin.mergedCellsCollection.add({
                row: a.row - s,
                rowspan: a.rowspan,
                col: a.col,
                colspan: a.colspan
              });
              break;
            case "down":
              this.plugin.mergedCellsCollection.add({
                row: a.row + s,
                rowspan: a.rowspan,
                col: a.col,
                colspan: a.colspan
              });
              break;
            case "left":
              this.plugin.mergedCellsCollection.add({
                row: a.row,
                rowspan: a.rowspan,
                col: a.col - s,
                colspan: a.colspan
              });
              break;
            case "right":
              this.plugin.mergedCellsCollection.add({
                row: a.row,
                rowspan: a.rowspan,
                col: a.col + s,
                colspan: a.colspan
              });
              break;
          }
        u === r.length - 1 && (l += 1);
      }
    while (o(a, s));
    this.currentFillData = null, this.plugin.hot.render(), r.length > 0 && this.plugin.ifChromeForceRepaint();
  }
  /**
   * Get the drag range from the changes made.
   *
   * @private
   * @param {Array} changes The changes made.
   * @returns {object} Object with `from` and `to` properties, both containing `row` and `column` keys.
   */
  getRangeFromChanges(e) {
    const n = {
      min: null,
      max: null
    }, r = {
      min: null,
      max: null
    };
    return H(e, (i) => {
      const o = i[0], s = this.plugin.hot.propToCol(i[1]);
      (n.min === null || o < n.min) && (n.min = o), (n.max === null || o > n.max) && (n.max = o), (r.min === null || s < r.min) && (r.min = s), (r.max === null || s > r.max) && (r.max = s);
    }), {
      from: {
        row: n.min,
        column: r.min
      },
      to: {
        row: n.max,
        column: r.max
      }
    };
  }
  /**
   * Check if the drag area contains any merged cells.
   *
   * @param {Array} baseArea The base selection area.
   * @param {Array} fullArea The base area extended by the drag area.
   * @param {string} direction Drag direction.
   * @returns {boolean}
   */
  dragAreaOverlapsCollections(e, n, r) {
    const i = this.getDragArea(e, n, r), [o, s, a, l] = i, u = this.plugin.hot._createCellCoords(o, s), c = this.plugin.hot._createCellCoords(a, l), d = this.plugin.hot._createCellRange(u, u, c);
    return !!this.mergedCellsCollection.getWithinRange(d, !0);
  }
}
const gie = fie;
function Pw(t, e, n) {
  return e = mie(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function mie(t) {
  var e = pie(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function pie(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class wie {
  constructor(e) {
    Pw(this, "plugin", void 0), Pw(this, "hot", void 0), Pw(this, "fullySelectedMergedCellClassName", "fullySelectedMergedCell"), this.plugin = e, this.hot = e.hot;
  }
  /**
   * "Snap" the delta value according to defined merged cells. (In other words, compensate the rowspan -
   * e.g. Going up with `delta.row = -1` over a merged cell with `rowspan = 3`, `delta.row` should change to `-3`.).
   *
   * @param {object} delta The delta object containing `row` and `col` properties.
   * @param {CellRange} selectionRange The selection range.
   * @param {object} mergedCell A merged cell object.
   */
  snapDelta(e, n, r) {
    const i = n.to, o = i.row + e.row, s = i.col + e.col;
    e.row ? this.jumpOverMergedCell(e, r, o) : e.col && this.jumpOverMergedCell(e, r, s);
  }
  /**
   * "Jump" over the merged cell (compensate for the indexes within the merged cell to get past it).
   *
   * @private
   * @param {object} delta The delta object.
   * @param {MergedCellCoords} mergedCell The merge cell object.
   * @param {number} newIndex New row/column index, created with the delta.
   */
  jumpOverMergedCell(e, n, r) {
    let i = e.row || e.col, o = null, s = null, a = null;
    e.row ? (o = n.includesVertically(r), s = n.row, a = n.getLastRow()) : e.col && (o = n.includesHorizontally(r), s = n.col, a = n.getLastColumn()), i !== 0 && (i > 0 ? o && r !== s && (i += a - r + 1) : o && r !== a && (i -= r - s + 1), e.row ? e.row = i : e.col && (e.col = i));
  }
  /**
   * Get a selection range with `to` property incremented by the provided delta.
   *
   * @param {CellRange} oldSelectionRange The base selection range.
   * @param {object} delta The delta object with `row` and `col` properties.
   * @returns {CellRange} A new `CellRange` object.
   */
  getUpdatedSelectionRange(e, n) {
    return this.hot._createCellRange(e.highlight, e.from, this.hot._createCellCoords(e.to.row + n.row, e.to.col + n.col));
  }
  /**
   * Generate an additional class name for the entirely-selected merged cells.
   *
   * @param {number} currentRow Visual row index of the currently processed cell.
   * @param {number} currentColumn Visual column index of the currently cell.
   * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.
   * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.
   * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently processed cell.
   */
  getSelectedMergedCellClassName(e, n, r, i) {
    const o = Math.min(r[0], r[2]), s = Math.min(r[1], r[3]), a = Math.max(r[0], r[2]), l = Math.max(r[1], r[3]);
    if (i === void 0 || !this.plugin.mergedCellsCollection.isFirstRenderableMergedCell(e, n))
      return;
    const c = this.plugin.mergedCellsCollection.get(e, n);
    if (!c)
      return;
    const d = c.getLastRow(), g = c.getLastColumn();
    if (o <= c.row && s <= c.col && a >= d && l >= g)
      return `${this.fullySelectedMergedCellClassName}-${i}`;
    if (this.plugin.selectionCalculations.isMergeCellFullySelected(c, this.plugin.hot.getSelectedRange()))
      return `${this.fullySelectedMergedCellClassName}-multiple`;
  }
  /**
   * Check if the provided merged cell is fully selected (by one or many layers of selection).
   *
   * @param {MergedCellCoords} mergedCell The merged cell to be processed.
   * @param {CellRange[]} selectionRangesArray Array of selection ranges.
   * @returns {boolean}
   */
  isMergeCellFullySelected(e, n) {
    const r = [];
    if (!n || !e)
      return !1;
    for (let i = 0; i < e.rowspan; i += 1)
      for (let o = 0; o < e.colspan; o += 1)
        r.push(this.hot._createCellCoords(e.row + i, e.col + o));
    for (let i = 0; i < r.length; i += 1) {
      const o = [];
      for (let s = 0; s < n.length; s += 1)
        o[s] = n[s].includes(r[i]);
      if (!o.includes(!0))
        return !1;
    }
    return !0;
  }
  /**
   * Generate an array of the entirely-selected merged cells' class names.
   *
   * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.
   */
  getSelectedMergedCellClassNameToRemove() {
    const e = [];
    for (let n = 0; n <= 7; n += 1)
      e.push(`${this.fullySelectedMergedCellClassName}-${n}`);
    return e.push(`${this.fullySelectedMergedCellClassName}-multiple`), e;
  }
}
const Cie = wie;
function vie(t) {
  return {
    key: "mergeCells",
    name() {
      const e = this.getSelectedLast();
      if (e) {
        const n = t.mergedCellsCollection.get(e[0], e[1]);
        if (n.row === e[0] && n.col === e[1] && n.row + n.rowspan - 1 === e[2] && n.col + n.colspan - 1 === e[3])
          return this.getTranslatedPhrase(Ey);
      }
      return this.getTranslatedPhrase(Ry);
    },
    callback() {
      t.toggleMergeOnSelection();
    },
    disabled() {
      const e = this.getSelectedLast();
      return e ? Wi.isSingleCell({
        row: e[0],
        col: e[1],
        rowspan: e[2] - e[0] + 1,
        colspan: e[3] - e[1] + 1
      }) || this.selection.isSelectedByCorner() : !0;
    },
    hidden: !1
  };
}
function en(t, e) {
  qD(t, e), e.add(t);
}
function Sie(t, e, n) {
  qD(t, e), e.set(t, n);
}
function qD(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function xw(t, e, n) {
  return e = yie(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function yie(t) {
  var e = bie(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function bie(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Hw(t, e, n) {
  var r = ZD(t, e, "set");
  return Rie(t, r, n), n;
}
function Rie(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function vl(t, e) {
  var n = ZD(t, e, "get");
  return Eie(t, n);
}
function ZD(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Eie(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function Yt(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
_e.getSingleton().register("beforeMergeCells");
_e.getSingleton().register("afterMergeCells");
_e.getSingleton().register("beforeUnmergeCells");
_e.getSingleton().register("afterUnmergeCells");
const Rc = "mergeCells", Tie = 150, xO = Rc;
var $i = /* @__PURE__ */ new WeakMap(), HO = /* @__PURE__ */ new WeakSet(), DO = /* @__PURE__ */ new WeakSet(), NO = /* @__PURE__ */ new WeakSet(), LO = /* @__PURE__ */ new WeakSet(), $O = /* @__PURE__ */ new WeakSet(), kO = /* @__PURE__ */ new WeakSet(), FO = /* @__PURE__ */ new WeakSet(), Dw = /* @__PURE__ */ new WeakSet(), WO = /* @__PURE__ */ new WeakSet(), VO = /* @__PURE__ */ new WeakSet(), BO = /* @__PURE__ */ new WeakSet(), UO = /* @__PURE__ */ new WeakSet(), YO = /* @__PURE__ */ new WeakSet(), GO = /* @__PURE__ */ new WeakSet(), zO = /* @__PURE__ */ new WeakSet(), jO = /* @__PURE__ */ new WeakSet(), KO = /* @__PURE__ */ new WeakSet(), XO = /* @__PURE__ */ new WeakSet(), qO = /* @__PURE__ */ new WeakSet(), ZO = /* @__PURE__ */ new WeakSet(), QO = /* @__PURE__ */ new WeakSet(), JO = /* @__PURE__ */ new WeakSet();
class _ie extends gt {
  constructor() {
    super(...arguments), en(this, JO), en(this, QO), en(this, ZO), en(this, qO), en(this, XO), en(this, KO), en(this, jO), en(this, zO), en(this, GO), en(this, YO), en(this, UO), en(this, BO), en(this, VO), en(this, WO), en(this, Dw), en(this, FO), en(this, kO), en(this, $O), en(this, LO), en(this, NO), en(this, DO), en(this, HO), xw(this, "mergedCellsCollection", null), xw(this, "autofillCalculations", null), xw(this, "selectionCalculations", null), Sie(this, $i, {
      writable: !0,
      value: null
    });
  }
  static get PLUGIN_KEY() {
    return Rc;
  }
  static get PLUGIN_PRIORITY() {
    return Tie;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link MergeCells#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Rc];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.mergedCellsCollection = new cie(this), this.autofillCalculations = new gie(this), this.selectionCalculations = new Cie(this), this.addHook("afterInit", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, HO, Mie).call(e, ...r);
    }), this.addHook("modifyTransformStart", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, NO, Aie).call(e, ...r);
    }), this.addHook("afterModifyTransformStart", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, ZO, Gie).call(e, ...r);
    }), this.addHook("modifyTransformEnd", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, LO, Iie).call(e, ...r);
    }), this.addHook("modifyGetCellCoords", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, $O, Pie).call(e, ...r);
    }), this.addHook("beforeSetRangeStart", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, Dw, eA).call(e, ...r);
    }), this.addHook("beforeSetRangeStartOnly", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, Dw, eA).call(e, ...r);
    }), this.addHook("beforeSetRangeEnd", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, WO, Die).call(e, ...r);
    }), this.addHook("afterIsMultipleSelection", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, DO, Oie).call(e, ...r);
    }), this.addHook("afterRenderer", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, FO, Hie).call(e, ...r);
    }), this.addHook("afterContextMenuDefaultOptions", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, kO, xie).call(e, ...r);
    }), this.addHook("afterGetCellMeta", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, VO, Nie).call(e, ...r);
    }), this.addHook("afterViewportRowCalculatorOverride", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, BO, Lie).call(e, ...r);
    }), this.addHook("afterViewportColumnCalculatorOverride", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, UO, $ie).call(e, ...r);
    }), this.addHook("modifyAutofillRange", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, YO, kie).call(e, ...r);
    }), this.addHook("afterCreateCol", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, GO, Fie).call(e, ...r);
    }), this.addHook("afterRemoveCol", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, zO, Wie).call(e, ...r);
    }), this.addHook("afterCreateRow", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, jO, Vie).call(e, ...r);
    }), this.addHook("afterRemoveRow", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, KO, Bie).call(e, ...r);
    }), this.addHook("afterChange", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, XO, Uie).call(e, ...r);
    }), this.addHook("beforeDrawBorders", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, qO, Yie).call(e, ...r);
    }), this.addHook("afterDrawSelection", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, QO, zie).call(e, ...r);
    }), this.addHook("beforeRemoveCellClassNames", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return Yt(e, JO, jie).call(e, ...r);
    }), this.addHook("beforeUndoStackChange", (n, r) => {
      if (r === "MergeCells")
        return !1;
    }), this.registerShortcuts(), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.clearCollections(), this.unregisterShortcuts(), this.hot.render(), super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the
   * following configuration options:
   *  - [`mergeCells`](@/api/options.md#mergecells)
   */
  updatePlugin() {
    const e = this.hot.getSettings()[Rc];
    this.disablePlugin(), this.enablePlugin(), this.generateFromSettings(e), super.updatePlugin();
  }
  /**
   * If the browser is recognized as Chrome, force an additional repaint to prevent showing the effects of a Chrome bug.
   *
   * Issue described in https://github.com/handsontable/dev-handsontable/issues/521.
   *
   * @private
   */
  ifChromeForceRepaint() {
    if (!vS())
      return;
    const e = [];
    let n = [];
    this.mergedCellsCollection.mergedCells.forEach((r) => {
      const {
        row: i,
        rowspan: o
      } = r;
      for (let s = i + 1; s < i + o; s++)
        n.push(s);
    }), n = [...new Set(n)], n.forEach((r) => {
      const i = this.hot.rowIndexMapper.getRenderableFromVisualIndex(r);
      this.hot.view._wt.wtOverlays.getOverlays(!0).map((o) => (o == null ? void 0 : o.name) === "master" ? o : o.clone.wtTable).forEach((o) => {
        const s = o.getRow(i);
        s && (s.style.background = Wl(s, "backgroundColor").replace(")", ", 0.99)"), e.push(s));
      });
    }), this.hot._registerTimeout(() => {
      e.forEach((r) => {
        r.style.background = Wl(r, "backgroundColor").replace(", 0.99)", ")");
      });
    }, 1);
  }
  /**
   * Validates a single setting object, represented by a single merged cell information object.
   *
   * @private
   * @param {object} setting An object with `row`, `col`, `rowspan` and `colspan` properties.
   * @returns {boolean}
   */
  validateSetting(e) {
    let n = !0;
    return e ? (Wi.containsNegativeValues(e) ? (Pt(Wi.NEGATIVE_VALUES_WARNING(e)), n = !1) : Wi.isOutOfBounds(e, this.hot.countRows(), this.hot.countCols()) ? (Pt(Wi.IS_OUT_OF_BOUNDS_WARNING(e)), n = !1) : Wi.isSingleCell(e) ? (Pt(Wi.IS_SINGLE_CELL(e)), n = !1) : Wi.containsZeroSpan(e) && (Pt(Wi.ZERO_SPAN_WARNING(e)), n = !1), n) : !1;
  }
  /**
   * Generates the merged cells from the settings provided to the plugin.
   *
   * @private
   * @param {Array|boolean} settings The settings provided to the plugin.
   */
  generateFromSettings(e) {
    if (Array.isArray(e)) {
      const n = [];
      if (H(e, (r) => {
        if (!this.validateSetting(r))
          return;
        const i = this.hot._createCellCoords(r.row, r.col), o = this.hot._createCellCoords(r.row + r.rowspan - 1, r.col + r.colspan - 1), s = this.hot._createCellRange(i, i, o);
        this.mergeRange(s, !0, !0), xe(r.row, r.row + r.rowspan - 1, (a) => {
          xe(r.col, r.col + r.colspan - 1, (l) => {
            a === r.row && l === r.col || n.push([a, l, null]);
          });
        });
      }), n.length === 0)
        return;
      this.hot.setDataAtCell(n);
    }
  }
  /**
   * Clears the merged cells from the merged cell container.
   */
  clearCollections() {
    this.mergedCellsCollection.clear();
  }
  /**
   * Returns `true` if a range is mergeable.
   *
   * @private
   * @param {object} newMergedCellInfo Merged cell information object to test.
   * @param {boolean} [auto=false] `true` if triggered at initialization.
   * @returns {boolean}
   */
  canMergeRange(e) {
    return (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1) ? !0 : this.validateSetting(e);
  }
  /**
   * Merge or unmerge, based on last selected range.
   *
   * @private
   */
  toggleMergeOnSelection() {
    const e = this.hot.getSelectedRangeLast();
    if (!e)
      return;
    e.setDirection(this.hot.isRtl() ? "NE-SW" : "NW-SE");
    const {
      from: n,
      to: r
    } = e;
    this.toggleMerge(e), this.hot.selectCell(n.row, n.col, r.row, r.col, !1);
  }
  /**
   * Merges the selection provided as a cell range.
   *
   * @param {CellRange} [cellRange] Selection cell range.
   */
  mergeSelection() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.hot.getSelectedRangeLast();
    if (!e)
      return;
    e.setDirection(this.hot.isRtl() ? "NE-SW" : "NW-SE");
    const {
      from: n,
      to: r
    } = e;
    this.unmergeRange(e, !0), this.mergeRange(e), this.hot.selectCell(n.row, n.col, r.row, r.col, !1);
  }
  /**
   * Unmerges the selection provided as a cell range.
   *
   * @param {CellRange} [cellRange] Selection cell range.
   */
  unmergeSelection() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.hot.getSelectedRangeLast();
    if (!e)
      return;
    const {
      from: n,
      to: r
    } = e;
    this.unmergeRange(e, !0), this.hot.selectCell(n.row, n.col, r.row, r.col, !1);
  }
  /**
   * Merges cells in the provided cell range.
   *
   * @private
   * @param {CellRange} cellRange Cell range to merge.
   * @param {boolean} [auto=false] `true` if is called automatically, e.g. At initialization.
   * @param {boolean} [preventPopulation=false] `true`, if the method should not run `populateFromArray` at the end,
   *   but rather return its arguments.
   * @returns {Array|boolean} Returns an array of [row, column, dataUnderCollection] if preventPopulation is set to
   *   true. If the the merging process went successful, it returns `true`, otherwise - `false`.
   * @fires Hooks#beforeMergeCells
   * @fires Hooks#afterMergeCells
   */
  mergeRange(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const i = e.getTopStartCorner(), o = e.getBottomEndCorner(), s = {
      row: i.row,
      col: i.col,
      rowspan: o.row - i.row + 1,
      colspan: o.col - i.col + 1
    }, a = [];
    let l = null;
    return this.canMergeRange(s, n) ? (this.hot.runHooks("beforeMergeCells", e, n), xe(0, s.rowspan - 1, (c) => {
      xe(0, s.colspan - 1, (d) => {
        let g = null;
        a[c] || (a[c] = []), c === 0 && d === 0 ? g = this.hot.getSourceDataAtCell(this.hot.toPhysicalRow(s.row), this.hot.toPhysicalColumn(s.col)) : this.hot.setCellMeta(s.row + c, s.col + d, "hidden", !0), a[c][d] = g;
      });
    }), this.hot.setCellMeta(s.row, s.col, "spanned", !0), this.mergedCellsCollection.add(s) ? (r ? l = [s.row, s.col, a] : this.hot.populateFromArray(s.row, s.col, a, void 0, void 0, this.pluginName), n || this.ifChromeForceRepaint(), this.hot.runHooks("afterMergeCells", e, s, n), l) : !0) : !1;
  }
  /**
   * Unmerges the selection provided as a cell range. If no cell range is provided, it uses the current selection.
   *
   * @private
   * @param {CellRange} cellRange Selection cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   *
   * @fires Hooks#beforeUnmergeCells
   * @fires Hooks#afterUnmergeCells
   */
  unmergeRange(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const r = this.mergedCellsCollection.getWithinRange(e);
    r && (this.hot.runHooks("beforeUnmergeCells", e, n), H(r, (i) => {
      this.mergedCellsCollection.remove(i.row, i.col), xe(0, i.rowspan - 1, (o) => {
        xe(0, i.colspan - 1, (s) => {
          this.hot.removeCellMeta(i.row + o, i.col + s, "hidden"), this.hot.removeCellMeta(i.row + o, i.col + s, "copyable");
        });
      }), this.hot.removeCellMeta(i.row, i.col, "spanned");
    }), this.hot.runHooks("afterUnmergeCells", e, n), this.hot.render());
  }
  /**
   * Merges or unmerges, based on the cell range provided as `cellRange`.
   *
   * @private
   * @param {CellRange} cellRange The cell range to merge or unmerged.
   */
  toggleMerge(e) {
    const n = this.mergedCellsCollection.get(e.from.row, e.from.col);
    n.row === e.from.row && n.col === e.from.col && n.row + n.rowspan - 1 === e.to.row && n.col + n.colspan - 1 === e.to.col ? this.unmergeRange(e) : this.mergeSelection(e);
  }
  /**
   * Merges the specified range.
   *
   * @param {number} startRow Start row of the merged cell.
   * @param {number} startColumn Start column of the merged cell.
   * @param {number} endRow End row of the merged cell.
   * @param {number} endColumn End column of the merged cell.
   * @fires Hooks#beforeMergeCells
   * @fires Hooks#afterMergeCells
   */
  merge(e, n, r, i) {
    const o = this.hot._createCellCoords(e, n), s = this.hot._createCellCoords(r, i);
    this.mergeRange(this.hot._createCellRange(o, o, s));
  }
  /**
   * Unmerges the merged cell in the provided range.
   *
   * @param {number} startRow Start row of the merged cell.
   * @param {number} startColumn Start column of the merged cell.
   * @param {number} endRow End row of the merged cell.
   * @param {number} endColumn End column of the merged cell.
   * @fires Hooks#beforeUnmergeCells
   * @fires Hooks#afterUnmergeCells
   */
  unmerge(e, n, r, i) {
    const o = this.hot._createCellCoords(e, n), s = this.hot._createCellCoords(r, i);
    this.unmergeRange(this.hot._createCellRange(o, o, s));
  }
  /**
   * Register shortcuts responsible for toggling a merge.
   *
   * @private
   */
  registerShortcuts() {
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Control", "m"]],
      callback: () => {
        const r = this.hot.getSelectedRangeLast();
        r && !r.isSingleHeader() && (this.toggleMerge(r), this.hot.render());
      },
      runOnlyIf: (r) => !r.altKey,
      // right ALT in some systems triggers ALT+CTRL
      group: xO
    });
  }
  /**
   * Unregister shortcuts responsible for toggling a merge.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(xO);
  }
  /**
   * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.
   *
   * @private
   * @param {object} calc The row calculator object.
   * @param {number} nrOfColumns Number of visual columns.
   */
  modifyViewportRowStart(e, n) {
    const r = this.hot.rowIndexMapper, i = r.getVisualFromRenderableIndex(e.startRow);
    for (let o = 0; o < n; o += 1) {
      const s = this.mergedCellsCollection.get(i, o);
      if (Xe(s)) {
        const a = r.getRenderableFromVisualIndex(r.getNearestNotHiddenIndex(s.row, 1));
        if (a < e.startRow) {
          e.startRow = a, this.modifyViewportRowStart(e, n);
          return;
        }
      }
    }
  }
  /**
   *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.
   *
   * @private
   * @param {object} calc The row calculator object.
   * @param {number} nrOfColumns Number of visual columns.
   */
  modifyViewportRowEnd(e, n) {
    const r = this.hot.rowIndexMapper, i = r.getVisualFromRenderableIndex(e.endRow);
    for (let o = 0; o < n; o += 1) {
      const s = this.mergedCellsCollection.get(i, o);
      if (Xe(s)) {
        const a = s.row + s.rowspan - 1, l = r.getRenderableFromVisualIndex(r.getNearestNotHiddenIndex(a, -1));
        if (l > e.endRow) {
          e.endRow = l, this.modifyViewportRowEnd(e, n);
          return;
        }
      }
    }
  }
  /**
   * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.
   *
   * @private
   * @param {object} calc The column calculator object.
   * @param {number} nrOfRows Number of visual rows.
   */
  modifyViewportColumnStart(e, n) {
    const r = this.hot.columnIndexMapper, i = r.getVisualFromRenderableIndex(e.startColumn);
    for (let o = 0; o < n; o += 1) {
      const s = this.mergedCellsCollection.get(o, i);
      if (Xe(s)) {
        const a = r.getRenderableFromVisualIndex(r.getNearestNotHiddenIndex(s.col, 1));
        if (a < e.startColumn) {
          e.startColumn = a, this.modifyViewportColumnStart(e, n);
          return;
        }
      }
    }
  }
  /**
   *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.
   *
   * @private
   * @param {object} calc The column calculator object.
   * @param {number} nrOfRows Number of visual rows.
   */
  modifyViewportColumnEnd(e, n) {
    const r = this.hot.columnIndexMapper, i = r.getVisualFromRenderableIndex(e.endColumn);
    for (let o = 0; o < n; o += 1) {
      const s = this.mergedCellsCollection.get(o, i);
      if (Xe(s)) {
        const a = s.col + s.colspan - 1, l = r.getRenderableFromVisualIndex(r.getNearestNotHiddenIndex(a, -1));
        if (l > e.endColumn) {
          e.endColumn = l, this.modifyViewportColumnEnd(e, n);
          return;
        }
      }
    }
  }
  /**
   * Translates merged cell coordinates to renderable indexes.
   *
   * @private
   * @param {number} parentRow Visual row index.
   * @param {number} rowspan Rowspan which describes shift which will be applied to parent row
   *                         to calculate renderable index which points to the most bottom
   *                         index position. Pass rowspan as `0` to calculate the most top
   *                         index position.
   * @param {number} parentColumn Visual column index.
   * @param {number} colspan Colspan which describes shift which will be applied to parent column
   *                         to calculate renderable index which points to the most right
   *                         index position. Pass colspan as `0` to calculate the most left
   *                         index position.
   * @returns {number[]}
   */
  translateMergedCellToRenderable(e, n, r, i) {
    const {
      rowIndexMapper: o,
      columnIndexMapper: s
    } = this.hot;
    let a, l;
    n === 0 ? a = o.getNearestNotHiddenIndex(e, 1) : a = o.getNearestNotHiddenIndex(e + n - 1, -1), i === 0 ? l = s.getNearestNotHiddenIndex(r, 1) : l = s.getNearestNotHiddenIndex(r + i - 1, -1);
    const u = e >= 0 ? o.getRenderableFromVisualIndex(a) : e, c = r >= 0 ? s.getRenderableFromVisualIndex(l) : r;
    return [u, c];
  }
}
function Mie() {
  this.generateFromSettings(this.hot.getSettings()[Rc]), this.hot.render();
}
function Oie(t) {
  if (t) {
    const e = this.mergedCellsCollection.mergedCells, n = this.hot.getSelectedRangeLast();
    for (let r = 0; r < e.length; r += 1)
      if (n.from.row === e[r].row && n.from.col === e[r].col && n.to.row === e[r].row + e[r].rowspan - 1 && n.to.col === e[r].col + e[r].colspan - 1)
        return !1;
  }
  return t;
}
function Aie(t) {
  const e = this.hot.getSelectedRangeLast();
  let n = {
    row: t.row,
    col: t.col
  }, r = null;
  const i = this.hot._createCellCoords(e.highlight.row, e.highlight.col), o = this.mergedCellsCollection.get(i.row, i.col);
  if (vl(this, $i) || Hw(this, $i, this.hot._createCellCoords(null, null)), o) {
    const a = this.hot._createCellCoords(o.row, o.col), l = this.hot._createCellCoords(o.row + o.rowspan - 1, o.col + o.colspan - 1);
    this.hot._createCellRange(a, a, l).includes(vl(this, $i)) || Hw(this, $i, this.hot._createCellCoords(null, null)), n.row = vl(this, $i).row ? vl(this, $i).row - i.row : n.row, n.col = vl(this, $i).col ? vl(this, $i).col - i.col : n.col, t.row > 0 ? n.row = o.row + o.rowspan - 1 - i.row + t.row : t.row < 0 && (n.row = i.row - o.row + t.row), t.col > 0 ? n.col = o.col + o.colspan - 1 - i.col + t.col : t.col < 0 && (n.col = i.col - o.col + t.col);
  }
  r = this.hot._createCellCoords(e.highlight.row + n.row, e.highlight.col + n.col);
  const s = this.mergedCellsCollection.get(r.row, r.col);
  if (s) {
    const a = this.mergedCellsCollection.getFirstRenderableCoords(s.row, s.col);
    Hw(this, $i, r), n = {
      row: a.row - i.row,
      col: a.col - i.col
    };
  }
  n.row !== 0 && (t.row = n.row), n.col !== 0 && (t.col = n.col);
}
function Iie(t) {
  const e = this.hot.getSelectedRangeLast(), n = er(t), r = this.selectionCalculations.getUpdatedSelectionRange(e, t);
  let i = er(n);
  const o = this.mergedCellsCollection.getWithinRange(r, !0);
  do
    i = er(n), this.selectionCalculations.getUpdatedSelectionRange(e, n), H(o, (s) => {
      this.selectionCalculations.snapDelta(n, e, s);
    });
  while (n.row !== i.row || n.col !== i.col);
  t.row = n.row, t.col = n.col;
}
function Pie(t, e) {
  if (t < 0 || e < 0)
    return;
  const n = this.mergedCellsCollection.get(t, e);
  if (!n)
    return;
  const {
    row: r,
    col: i,
    colspan: o,
    rowspan: s
  } = n;
  return [
    // Most top-left merged cell coords.
    r,
    i,
    // Most bottom-right merged cell coords.
    r + s - 1,
    i + o - 1
  ];
}
function xie(t) {
  t.items.push({
    name: "---------"
  }, vie(this));
}
function Hie(t, e, n) {
  const r = this.mergedCellsCollection.get(e, n), i = Xe(r) ? er(r) : void 0;
  if (Xe(i)) {
    const {
      rowIndexMapper: o,
      columnIndexMapper: s
    } = this.hot, {
      row: a,
      col: l,
      colspan: u,
      rowspan: c
    } = i, [d, g] = this.translateMergedCellToRenderable(a, c, l, u), p = o.getRenderableFromVisualIndex(e), C = s.getRenderableFromVisualIndex(n), E = d - p + 1, I = g - C + 1;
    i.row = o.getNearestNotHiddenIndex(i.row, 1), i.col = s.getNearestNotHiddenIndex(i.col, 1), i.rowspan = Math.min(i.rowspan, E), i.colspan = Math.min(i.colspan, I);
  }
  Sv(t, i, e, n);
}
function eA(t) {
  if (this.mergedCellsCollection.isFirstRenderableMergedCell(t.row, t.col)) {
    const e = this.mergedCellsCollection.get(t.row, t.col);
    [t.row, t.col] = [e.row, e.col];
  }
}
function Die(t) {
  const e = this.hot.getSelectedRangeLast();
  e.highlight = this.hot._createCellCoords(e.highlight.row, e.highlight.col), e.to = t;
  let n = !1;
  if (!(this.hot.selection.isSelectedByColumnHeader() || this.hot.selection.isSelectedByRowHeader()))
    do {
      n = !1;
      for (let r = 0; r < this.mergedCellsCollection.mergedCells.length; r += 1) {
        const o = this.mergedCellsCollection.mergedCells[r].getRange();
        e.expandByRange(o) && (t.row = e.to.row, t.col = e.to.col, n = !0);
      }
    } while (n);
}
function Nie(t, e, n) {
  const r = this.mergedCellsCollection.get(t, e);
  r && (r.row !== t || r.col !== e ? n.copyable = !1 : (n.rowspan = r.rowspan, n.colspan = r.colspan));
}
function Lie(t) {
  const e = this.hot.countCols();
  this.modifyViewportRowStart(t, e), this.modifyViewportRowEnd(t, e);
}
function $ie(t) {
  const e = this.hot.countRows();
  this.modifyViewportColumnStart(t, e), this.modifyViewportColumnEnd(t, e);
}
function kie(t, e) {
  this.autofillCalculations.correctSelectionAreaSize(e);
  const n = this.autofillCalculations.getDirection(e, t);
  let r = t;
  if (this.autofillCalculations.dragAreaOverlapsCollections(e, r, n))
    return r = e, r;
  const i = this.mergedCellsCollection.getWithinRange({
    from: {
      row: e[0],
      col: e[1]
    },
    to: {
      row: e[2],
      col: e[3]
    }
  });
  return i && (r = this.autofillCalculations.snapDragArea(e, r, n, i)), r;
}
function Fie(t, e) {
  this.mergedCellsCollection.shiftCollections("right", t, e);
}
function Wie(t, e) {
  this.mergedCellsCollection.shiftCollections("left", t, e);
}
function Vie(t, e, n) {
  n !== "auto" && this.mergedCellsCollection.shiftCollections("down", t, e);
}
function Bie(t, e) {
  this.mergedCellsCollection.shiftCollections("up", t, e);
}
function Uie(t, e) {
  e === "Autofill.fill" && this.autofillCalculations.recreateAfterDataPopulation(t);
}
function Yie(t, e) {
  if (e && e === "area") {
    const n = this.hot.getSelectedRangeLast(), r = this.mergedCellsCollection.getWithinRange(n);
    H(r, (i) => {
      n.getBottomEndCorner().row === i.getLastRow() && n.getBottomEndCorner().col === i.getLastColumn() && (t[2] = i.row, t[3] = i.col);
    });
  }
}
function Gie(t, e, n) {
  if (!this.enabled)
    return;
  const r = this.mergedCellsCollection.get(t.row, t.col);
  if (!r)
    return;
  const i = e > 0, o = e < 0, s = n < 0, a = n > 0, l = r.row + r.rowspan - 1 === this.hot.countRows() - 1, u = r.row === 0, c = r.col + r.colspan - 1 === this.hot.countCols() - 1, d = r.col === 0;
  (i && l || o && u || a && c || s && d) && (t.row = r.row, t.col = r.col);
}
function zie(t, e, n, r) {
  if (n)
    return this.selectionCalculations.getSelectedMergedCellClassName(t, e, n, r);
}
function jie() {
  return this.selectionCalculations.getSelectedMergedCellClassNameToRemove();
}
function Kie(t, e) {
  return function(n, r) {
    const [, ...i] = n, [, ...o] = r;
    return function s(a) {
      const l = t[a], u = e[a], c = i[a], d = o[a], g = u.multiColumnSorting, C = (g.compareFunctionFactory ? g.compareFunctionFactory : EH(u.type))(l, u, g)(c, d);
      if (C === ji) {
        const E = a + 1;
        if (typeof e[E] < "u")
          return s(E);
      }
      return C;
    }(0);
  };
}
function tA() {
  Pt(bt`Plugins \`columnSorting\` and \`multiColumnSorting\` should not be enabled simultaneously. 
    Only \`multiColumnSorting\` will work.`);
}
const QD = "sort";
function Xie(t, e, n) {
  const r = [];
  return n === !1 || t.isColumnSorted(e) && t.getNumberOfSortedColumns() > 1 && r.push(`${QD}-${t.getIndexOfColumnInSortQueue(e) + 1}`), r;
}
function qie(t) {
  const e = t.className.split(" "), n = new RegExp(`^${QD}-[0-9]{1,2}$`);
  return e.filter((r) => n.test(r));
}
function Zie(t, e, n) {
  return e = Qie(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Qie(t) {
  var e = Jie(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Jie(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const lg = "multiColumnSorting", eoe = 170, nA = "columnSorting", rA = lg;
RH(lg, Kie);
class toe extends TH {
  constructor() {
    super(...arguments), Zie(this, "pluginKey", lg);
  }
  static get PLUGIN_KEY() {
    return lg;
  }
  static get PLUGIN_PRIORITY() {
    return eoe;
  }
  /**
   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link MultiColumnSorting#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return super.isEnabled();
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    !this.enabled && this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[nA] && tA(), super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for toggling column sorting functionality.
   *
   * @private
   */
  registerShortcuts() {
    super.registerShortcuts(), this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Shift", "Enter"]],
      callback: () => {
        const {
          highlight: e
        } = this.hot.getSelectedRangeLast();
        e.row === -1 && e.col >= 0 && this.sort(this.getNextSortConfig(e.col, jf));
      },
      runOnlyIf: () => {
        var e;
        const n = (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
        return n && this.hot.selection.isCellVisible(n) && n.isHeader();
      },
      group: rA
    });
  }
  /**
   * Unregister shortcuts responsible for toggling column sorting functionality.
   *
   * @private
   */
  unregisterShortcuts() {
    super.unregisterShortcuts(), this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(rA);
  }
  /**
   * Sorts the table by chosen columns and orders.
   *
   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   *
   * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.
   *
   * @example
   * ```js
   * // sort ascending first visual column
   * hot.getPlugin('multiColumnSorting').sort({ column: 0, sortOrder: 'asc' });
   *
   * // sort first two visual column in the defined sequence
   * hot.getPlugin('multiColumnSorting').sort([{
   *   column: 1, sortOrder: 'asc'
   * }, {
   *   column: 0, sortOrder: 'desc'
   * }]);
   * ```
   *
   * @fires Hooks#beforeColumnSort
   * @fires Hooks#afterColumnSort
   */
  sort(e) {
    super.sort(e);
  }
  /**
   * Clear the sort performed on the table.
   */
  clearSort() {
    super.clearSort();
  }
  /**
   * Checks if the table is sorted (any column have to be sorted).
   *
   * @returns {boolean}
   */
  isSorted() {
    return super.isSorted();
  }
  /**
   * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.
   *
   * @param {number} [column] Visual column index.
   * @returns {undefined|object|Array}
   */
  getSortConfig(e) {
    return super.getSortConfig(e);
  }
  /**
   * @description
   * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.
   * Note: Please keep in mind that this method doesn't re-render the table.
   *
   * @example
   * ```js
   * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {
   *   const columnSortPlugin = this.getPlugin('multiColumnSorting');
   *
   *   columnSortPlugin.setSortConfig(destinationSortConfigs);
   *
   *   // const newData = ... // Calculated data set, ie. from an AJAX call.
   *
   *   this.loadData(newData); // Load new data set and re-render the table.
   *
   *   return false; // The blockade for the default sort action.
   * }
   * ```
   *
   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   */
  setSortConfig(e) {
    super.setSortConfig(e);
  }
  /**
   * Get normalized sort configs.
   *
   * @private
   * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   * @returns {Array}
   */
  getNormalizedSortConfigs() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    return Array.isArray(e) ? e : [e];
  }
  /**
   * Update header classes.
   *
   * @private
   * @param {HTMLElement} headerSpanElement Header span element.
   * @param {...*} args Extra arguments for helpers.
   */
  updateHeaderClasses(e) {
    for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++)
      r[i - 1] = arguments[i];
    super.updateHeaderClasses(e, ...r), Ye(e, qie(e)), this.enabled !== !1 && ce(e, Xie(...r));
  }
  /**
   * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called
   * for `updateSettings` in specific situations.
   *
   * @private
   * @param {object} newSettings New settings object.
   */
  onUpdateSettings(e) {
    this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[nA] && tA(), super.onUpdateSettings(e);
  }
  /**
   * Callback for the `onAfterOnCellMouseDown` hook.
   *
   * @private
   * @param {Event} event Event which are provided by hook.
   * @param {CellCoords} coords Visual coords of the selected cell.
   */
  onAfterOnCellMouseDown(e, n) {
    Gb(n.row, n.col, e) !== !1 && this.wasClickableHeaderClicked(e, n.col) && (this.hot.getShortcutManager().isCtrlPressed() ? (this.hot.deselectCell(), this.hot.selectColumns(n.col), this.sort(this.getNextSortConfig(n.col, jf))) : this.sort(this.getColumnNextConfig(n.col)));
  }
}
function iA(t, e, n) {
  return e = noe(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function noe(t) {
  var e = roe(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function roe(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const ioe = "multipleSelectionHandles", ooe = 160;
class soe extends gt {
  constructor() {
    super(...arguments), iA(this, "dragged", []), iA(this, "lastSetCell", null);
  }
  static get PLUGIN_KEY() {
    return ioe;
  }
  static get PLUGIN_PRIORITY() {
    return ooe;
  }
  /**
   * Check if the plugin is enabled in the handsontable settings.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return Mo();
  }
  /**
   * Enable plugin for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.registerListeners(), super.enablePlugin());
  }
  /**
   * Bind the touch events.
   *
   * @private
   */
  registerListeners() {
    const e = this, {
      rootElement: n
    } = this.hot;
    function r(i) {
      if (e.dragged.length === 1)
        return e.dragged.splice(0, e.dragged.length), !0;
      const o = e.dragged.indexOf(i);
      if (o === -1)
        return !1;
      o === 0 ? e.dragged = e.dragged.slice(0, 1) : o === 1 && (e.dragged = e.dragged.slice(-1));
    }
    this.eventManager.addEventListener(n, "touchstart", (i) => {
      let o;
      if (Ve(i.target, "topSelectionHandle-HitArea"))
        return o = e.hot.getSelectedRangeLast(), e.dragged.push("top"), e.touchStartRange = {
          width: o.getWidth(),
          height: o.getHeight(),
          direction: o.getDirection()
        }, i.preventDefault(), !1;
      if (Ve(i.target, "bottomSelectionHandle-HitArea"))
        return o = e.hot.getSelectedRangeLast(), e.dragged.push("bottom"), e.touchStartRange = {
          width: o.getWidth(),
          height: o.getHeight(),
          direction: o.getDirection()
        }, i.preventDefault(), !1;
    }), this.eventManager.addEventListener(n, "touchend", (i) => {
      if (Ve(i.target, "topSelectionHandle-HitArea"))
        return r.call(e, "top"), e.touchStartRange = void 0, i.preventDefault(), !1;
      if (Ve(i.target, "bottomSelectionHandle-HitArea"))
        return r.call(e, "bottom"), e.touchStartRange = void 0, i.preventDefault(), !1;
    }), this.eventManager.addEventListener(n, "touchmove", (i) => {
      const {
        rootDocument: o
      } = this.hot;
      let s, a, l, u, c, d;
      if (e.dragged.length === 0)
        return;
      const g = o.elementFromPoint(i.touches[0].clientX, i.touches[0].clientY);
      !g || g === e.lastSetCell || ((g.nodeName === "TD" || g.nodeName === "TH") && (s = e.hot.getCoords(g), s.col === -1 && (s.col = 0), a = e.hot.getSelectedRangeLast(), l = a.getWidth(), u = a.getHeight(), c = a.getDirection(), l === 1 && u === 1 && e.hot.selection.setRangeEnd(s), d = e.getCurrentRangeCoords(a, s, e.touchStartRange.direction, c, e.dragged[0]), d.start !== null && e.hot.selection.setRangeStart(d.start), e.hot.selection.setRangeEnd(d.end), e.lastSetCell = g), i.preventDefault());
    });
  }
  getCurrentRangeCoords(e, n, r, i, o) {
    const s = e.getTopStartCorner(), a = e.getBottomEndCorner(), l = e.getBottomStartCorner(), u = e.getTopEndCorner();
    let c = {
      start: null,
      end: null
    };
    switch (r) {
      case "NE-SW":
        switch (i) {
          case "NE-SW":
          case "NW-SE":
            o === "top" ? c = {
              start: this.hot._createCellCoords(n.row, e.highlight.col),
              end: this.hot._createCellCoords(l.row, n.col)
            } : c = {
              start: this.hot._createCellCoords(e.highlight.row, n.col),
              end: this.hot._createCellCoords(n.row, s.col)
            };
            break;
          case "SE-NW":
            o === "bottom" && (c = {
              start: this.hot._createCellCoords(a.row, n.col),
              end: this.hot._createCellCoords(n.row, s.col)
            });
            break;
        }
        break;
      case "NW-SE":
        switch (i) {
          case "NE-SW":
            o === "top" ? c = {
              start: n,
              end: l
            } : c.end = n;
            break;
          case "NW-SE":
            o === "top" ? c = {
              start: n,
              end: a
            } : c.end = n;
            break;
          case "SE-NW":
            o === "top" ? c = {
              start: n,
              end: s
            } : c.end = n;
            break;
          case "SW-NE":
            o === "top" ? c = {
              start: n,
              end: u
            } : c.end = n;
            break;
        }
        break;
      case "SW-NE":
        switch (i) {
          case "NW-SE":
            o === "bottom" ? c = {
              start: this.hot._createCellCoords(n.row, s.col),
              end: this.hot._createCellCoords(l.row, n.col)
            } : c = {
              start: this.hot._createCellCoords(s.row, n.col),
              end: this.hot._createCellCoords(n.row, a.col)
            };
            break;
          case "SW-NE":
            o === "top" ? c = {
              start: this.hot._createCellCoords(e.highlight.row, n.col),
              end: this.hot._createCellCoords(n.row, a.col)
            } : c = {
              start: this.hot._createCellCoords(n.row, s.col),
              end: this.hot._createCellCoords(s.row, n.col)
            };
            break;
          case "SE-NW":
            o === "bottom" ? c = {
              start: this.hot._createCellCoords(n.row, u.col),
              end: this.hot._createCellCoords(s.row, n.col)
            } : o === "top" && (c = {
              start: l,
              end: n
            });
            break;
        }
        break;
      case "SE-NW":
        switch (i) {
          case "NW-SE":
          case "NE-SW":
          case "SW-NE":
            o === "top" && (c.end = n);
            break;
          case "SE-NW":
            o === "top" ? c.end = n : c = {
              start: n,
              end: s
            };
            break;
        }
        break;
    }
    return c;
  }
  /**
   * Check if user is currently dragging the handle.
   *
   * @returns {boolean} Dragging state.
   */
  isDragged() {
    return this.dragged.length > 0;
  }
}
function yv() {
  let {
    label: t = "",
    colspan: e = 1,
    origColspan: n = 1,
    collapsible: r = !1,
    crossHiddenColumns: i = [],
    isCollapsed: o = !1,
    isHidden: s = !1,
    isRoot: a = !1,
    isPlaceholder: l = !1
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return {
    label: t,
    colspan: e,
    origColspan: n,
    collapsible: r,
    isCollapsed: o,
    crossHiddenColumns: i,
    isHidden: s,
    isRoot: a,
    isPlaceholder: l
  };
}
function JD() {
  return {
    label: "",
    isPlaceholder: !0
  };
}
function aoe(t) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1 / 0;
  const n = [];
  if (e === 0)
    return n;
  H(t, (i) => {
    const o = [];
    let s = 0;
    n.push(o), H(i, (a) => {
      const l = yv();
      if (Xe(a)) {
        const {
          label: c,
          colspan: d
        } = a;
        l.label = Zt(c), typeof d == "number" && d > 1 && (l.colspan = d, l.origColspan = d);
      } else
        l.label = Zt(a);
      s += l.origColspan;
      let u = !1;
      if (s >= e && (l.colspan = l.origColspan - (s - e), l.origColspan = l.colspan, u = !0), o.push(l), l.colspan > 1)
        for (let c = 0; c < l.colspan - 1; c++)
          o.push(JD());
      return !u;
    });
  });
  const r = Math.max(...qe(n, (i) => i.length));
  return H(n, (i) => {
    if (i.length < r) {
      const o = qe(new Array(r - i.length), () => yv());
      i.splice(i.length, 0, ...o);
    }
  }), n;
}
function Nw(t, e, n) {
  loe(t, e), e.set(t, n);
}
function loe(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function oi(t, e) {
  var n = eN(t, e, "get");
  return uoe(t, n);
}
function uoe(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function zu(t, e, n) {
  var r = eN(t, e, "set");
  return coe(t, r, n), n;
}
function eN(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function coe(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
const oA = ["label", "collapsible"];
var po = /* @__PURE__ */ new WeakMap(), sa = /* @__PURE__ */ new WeakMap(), Lw = /* @__PURE__ */ new WeakMap();
class hoe {
  constructor() {
    Nw(this, po, {
      writable: !0,
      value: []
    }), Nw(this, sa, {
      writable: !0,
      value: 0
    }), Nw(this, Lw, {
      writable: !0,
      value: 1 / 0
    });
  }
  /**
   * Sets columns limit to the source settings will be trimmed. All headers which
   * overlap the column limit will be reduced to keep the structure solid.
   *
   * @param {number} columnsCount The number of columns to limit to.
   */
  setColumnsLimit(e) {
    zu(this, Lw, e);
  }
  /**
   * Sets a new nested header configuration.
   *
   * @param {Array[]} [nestedHeadersSettings=[]] The user-defined nested headers settings.
   */
  setData() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    zu(this, po, aoe(e, oi(this, Lw))), zu(this, sa, oi(this, po).length);
  }
  /**
   * Gets normalized source settings.
   *
   * @returns {Array[]}
   */
  getData() {
    return oi(this, po);
  }
  /**
   * Merges settings with current source settings.
   *
   * @param {object[]} additionalSettings An array of objects with `row`, `col` and additional
   *                                      properties to merge with current source settings.
   */
  mergeWith(e) {
    H(e, (n) => {
      let {
        row: r,
        col: i,
        ...o
      } = n;
      const s = this.getHeaderSettings(r, i);
      s !== null && ln(s, o, oA);
    });
  }
  /**
   * Maps the current state with a callback. For each source settings the callback function
   * is called. If the function returns value that value is merged with the source settings.
   *
   * @param {Function} callback A function that is called for every header settings.
   *                            Each time the callback is called, the returned value extends
   *                            header settings.
   */
  map(e) {
    H(oi(this, po), (n) => {
      H(n, (r) => {
        const i = e({
          ...r
        });
        Xe(i) && ln(r, i, oA);
      });
    });
  }
  /**
   * Gets source column header settings for a specified header. The returned
   * object contains information about the header label, its colspan length,
   * or if it is hidden in the header renderers.
   *
   * @param {number} headerLevel Header level (0 = most distant to the table).
   * @param {number} columnIndex A visual column index.
   * @returns {object|null}
   */
  getHeaderSettings(e, n) {
    var r;
    if (e >= oi(this, sa) || e < 0)
      return null;
    const i = oi(this, po)[e];
    return n >= i.length ? null : (r = i[n]) !== null && r !== void 0 ? r : null;
  }
  /**
   * Gets source of column headers settings for specified headers. If the retrieved column
   * settings overlap the range "box" determined by "columnIndex" and "columnsLength"
   * the exception will be thrown.
   *
   * @param {number} headerLevel Header level (0 = most distant to the table).
   * @param {number} columnIndex A visual column index from which the settings will be extracted.
   * @param {number} [columnsLength=1] The number of columns involved in the extraction of settings.
   * @returns {object}
   */
  getHeadersSettings(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    const i = [];
    if (e >= oi(this, sa) || e < 0)
      return i;
    const o = oi(this, po)[e];
    let s = 0;
    for (let a = n; a < o.length; a++) {
      const l = o[a];
      if (l.isPlaceholder)
        throw new Error("The first column settings cannot overlap the other header layers");
      if (s += l.colspan, i.push(l), l.colspan > 1 && (a += l.colspan - 1), s === r)
        break;
      if (s > r)
        throw new Error("The last column settings cannot overlap the other header layers");
    }
    return i;
  }
  /**
   * Gets a total number of headers levels.
   *
   * @returns {number}
   */
  getLayersCount() {
    return oi(this, sa);
  }
  /**
   * Gets a total number of columns count.
   *
   * @returns {number}
   */
  getColumnsCount() {
    return oi(this, sa) > 0 ? oi(this, po)[0].length : 0;
  }
  /**
   * Clears the data.
   */
  clear() {
    zu(this, po, []), zu(this, sa, 0);
  }
}
function $w(t, e, n) {
  return e = doe(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function doe(t) {
  var e = foe(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function foe(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
const tN = "DF-pre-order";
function nN(t, e) {
  let n = t.call(e, this);
  for (let r = 0; r < this.childs.length; r++) {
    if (n === !1)
      return !1;
    n = nN.call(this.childs[r], t, e);
  }
  return n;
}
const goe = "DF-post-order";
function rN(t, e) {
  for (let n = 0; n < this.childs.length; n++)
    if (rN.call(this.childs[n], t, e) === !1)
      return !1;
  return t.call(e, this);
}
const iN = "BF";
function moe(t, e) {
  const n = [this];
  function r() {
    if (n.length === 0)
      return;
    const i = n.shift();
    n.push(...i.childs), t.call(e, i) !== !1 && r();
  }
  r();
}
const poe = iN, sA = /* @__PURE__ */ new Map([[tN, nN], [goe, rN], [iN, moe]]);
class ug {
  constructor(e) {
    $w(this, "data", {}), $w(this, "parent", null), $w(this, "childs", []), this.data = e;
  }
  /**
   * Adds a node to tree leaves. Added node is linked with the parent node through "parent" property.
   *
   * @param {TreeNode} node A TreeNode to add.
   */
  addChild(e) {
    e.parent = this, this.childs.push(e);
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @memberof TreeNode#
   * @function cloneTree
   *
   * Clones a tree structure deeply.
   *
   * For example, for giving a tree structure:
   *      .--(B1)--.
   *   .-(C1)   .-(C2)-.----.
   *  (D1)     (D2)   (D3) (D4)
   *
   * Cloning a tree starting from C2 node creates a mirrored tree structure.
   *     .-(C2')-.-----.
   *    (D2')   (D3') (D4')
   *
   * The cloned tree can be safely modified without affecting the original structure.
   * After modification, the clone can be merged with a tree using the "replaceTreeWith" method.
   *
   * @param {TreeNode} [nodeTree=this] A TreeNode to clone.
   * @returns {TreeNode}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  cloneTree() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this;
    const n = new ug({
      ...e.data
    });
    for (let r = 0; r < e.childs.length; r++)
      n.addChild(this.cloneTree(e.childs[r]));
    return n;
  }
  /**
   * Replaces the current node with a passed tree structure.
   *
   * @param {TreeNode} nodeTree A TreeNode to replace with.
   */
  replaceTreeWith(e) {
    this.data = {
      ...e.data
    }, this.childs = [];
    for (let n = 0; n < e.childs.length; n++)
      this.addChild(e.childs[n]);
  }
  /**
   * Traverses the tree structure through node childs. The walk down traversing supports
   * a three different strategies.
   *  - Depth-first pre-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR));
   *  - Depth-first post-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Post-order_(NLR));
   *  - Breadth-first traversal strategy (https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search_/_level_order).
   *
   * @param {Function} callback The callback function which will be called for each node.
   * @param {string} [traversalStrategy=DEFAULT_TRAVERSAL_STRATEGY] Traversing strategy.
   */
  walkDown(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : poe;
    if (!sA.has(n))
      throw new Error(`Traversal strategy "${n}" does not exist`);
    sA.get(n).call(this, e, this);
  }
  /**
   * Traverses the tree structure through node parents.
   *
   * @param {Function} callback The callback function which will be called for each node.
   */
  walkUp(e) {
    const n = this, r = (i) => {
      e.call(n, i) !== !1 && i.parent !== null && r(i.parent);
    };
    r(this);
  }
}
function kw(t, e, n) {
  woe(t, e), e.set(t, n);
}
function woe(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function jn(t, e) {
  var n = oN(t, e, "get");
  return Coe(t, n);
}
function Coe(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function voe(t, e, n) {
  var r = oN(t, e, "set");
  return Soe(t, r, n), n;
}
function oN(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Soe(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
var Sl = /* @__PURE__ */ new WeakMap(), aa = /* @__PURE__ */ new WeakMap(), yl = /* @__PURE__ */ new WeakMap();
class yoe {
  constructor(e) {
    kw(this, Sl, {
      writable: !0,
      value: /* @__PURE__ */ new Map()
    }), kw(this, aa, {
      writable: !0,
      value: /* @__PURE__ */ new Map()
    }), kw(this, yl, {
      writable: !0,
      value: null
    }), voe(this, yl, e);
  }
  /**
   * Gets an array of the all root nodes.
   *
   * @returns {TreeNode[]}
   */
  getRoots() {
    return Array.from(jn(this, Sl).values());
  }
  /**
   * Gets a root node by specified visual column index.
   *
   * @param {number} columnIndex A visual column index.
   * @returns {TreeNode|undefined}
   */
  getRootByColumn(e) {
    let n;
    return jn(this, aa).has(e) && (n = jn(this, Sl).get(jn(this, aa).get(e))), n;
  }
  /**
   * Gets a tree node by its position in the grid settings.
   *
   * @param {number} headerLevel Header level index (there is support only for positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {TreeNode|undefined}
   */
  getNode(e, n) {
    const r = this.getRootByColumn(n);
    if (!r)
      return;
    const i = n - jn(this, aa).get(n);
    let o = 0, s;
    return r.walkDown((a) => {
      const {
        data: {
          origColspan: l,
          headerLevel: u
        }
      } = a;
      if (e === u) {
        if (i >= o && i <= o + l - 1)
          return s = a, s.data.isRoot = n === s.data.columnIndex, !1;
        o += l;
      }
    }), s;
  }
  /**
   * Builds (or rebuilds if called again) root nodes indexes.
   */
  rebuildTreeIndex() {
    let e = 0;
    jn(this, aa).clear(), H(jn(this, Sl), (n) => {
      let [, {
        data: {
          colspan: r
        }
      }] = n;
      for (let i = e; i < e + r; i++)
        jn(this, aa).set(i, e);
      e += r;
    });
  }
  /**
   * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built
   * from the previous call.
   */
  buildTree() {
    this.clear();
    const e = jn(this, yl).getColumnsCount();
    let n = 0;
    for (; n < e; ) {
      const r = jn(this, yl).getHeaderSettings(0, n), i = new ug();
      jn(this, Sl).set(n, i), this.buildLeaves(i, n, 0, r.origColspan), n += r.origColspan;
    }
    this.rebuildTreeIndex();
  }
  /**
   * Builds leaves for specified tree node.
   *
   * @param {TreeNode} parentNode A node to which the leaves applies.
   * @param {number} columnIndex A visual column index.
   * @param {number} headerLevel Currently processed header level.
   * @param {number} [extractionLength=1] Determines column extraction length for node children.
   */
  buildLeaves(e, n, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    const o = jn(this, yl).getHeadersSettings(r, n, i);
    r += 1, H(o, (s) => {
      const a = {
        ...s,
        /**
         * The header level (tree node depth level).
         *
         * @type {number}
         */
        headerLevel: r - 1,
        /**
         * A visual column index.
         *
         * @type {number}
         */
        columnIndex: n
      };
      let l;
      r === 1 ? (e.data = a, l = e) : (l = new ug(a), e.addChild(l)), r < jn(this, yl).getLayersCount() && this.buildLeaves(l, n, r, s.origColspan), n += s.origColspan;
    });
  }
  /**
   * Clears the tree to the initial state.
   */
  clear() {
    jn(this, Sl).clear(), jn(this, aa).clear();
  }
}
function sN(t, e) {
  t.walkDown((n) => {
    let {
      data: r,
      childs: i
    } = n;
    if (!r.isHidden && (e(r.columnIndex), i.length === 0))
      for (let o = 1; o < r.colspan; o++)
        e(r.columnIndex + o);
  });
}
function cg(t, e) {
  let {
    childs: n
  } = t;
  if (n.length !== 0)
    return n[0].data[e];
}
function hg(t) {
  return cg(t, "origColspan") === t.data.origColspan;
}
function oR(t) {
  const {
    data: e,
    childs: n
  } = t;
  if (!e.isCollapsed || e.isHidden || e.origColspan <= 1)
    return {
      rollbackModification: () => {
      },
      affectedColumns: [],
      colspanCompensation: 0
    };
  if (hg(t))
    return oR(n[0]);
  e.isCollapsed = !1;
  const i = n.slice(1), o = /* @__PURE__ */ new Set();
  let s = 0;
  if (i.length > 0)
    H(i, (a) => {
      a.replaceTreeWith(a.data.clonedTree), a.data.clonedTree = null;
      const l = a.data;
      s += l.colspan, sN(a, (u) => {
        o.add(u);
      });
    });
  else {
    const {
      colspan: a,
      origColspan: l,
      columnIndex: u
    } = e;
    s = l - a;
    for (let c = 1; c < l; c++)
      o.add(u + c);
  }
  return t.walkUp((a) => {
    const {
      data: l
    } = a;
    l.colspan += s, l.colspan >= l.origColspan ? (l.colspan = l.origColspan, l.isCollapsed = !1) : hg(a) && (l.isCollapsed = cg(a, "isCollapsed"));
  }), {
    rollbackModification: () => sR(t),
    affectedColumns: Array.from(o),
    colspanCompensation: s
  };
}
function sR(t) {
  var e;
  const {
    data: n,
    childs: r
  } = t;
  if (n.isCollapsed || n.isHidden || n.origColspan <= 1)
    return {
      rollbackModification: () => {
      },
      affectedColumns: [],
      colspanCompensation: 0
    };
  if (hg(t))
    return sR(r[0]);
  n.isCollapsed = !0;
  const o = r.slice(1), s = /* @__PURE__ */ new Set();
  if (o.length > 0)
    H(o, (l) => {
      sN(l, (u) => {
        s.add(u);
      }), l.data.clonedTree = l.cloneTree(), l.walkDown((u) => {
        let {
          data: c
        } = u;
        c.isHidden = !0;
      });
    });
  else {
    const {
      origColspan: l,
      columnIndex: u
    } = n;
    for (let c = 1; c < l; c++) {
      const d = u + c;
      s.add(d);
    }
  }
  const a = n.colspan - ((e = cg(t, "colspan")) !== null && e !== void 0 ? e : 1);
  return t.walkUp((l) => {
    const {
      data: u
    } = l;
    u.colspan -= a, u.colspan <= 1 ? (u.colspan = 1, u.isCollapsed = !0) : hg(l) && (u.isCollapsed = cg(l, "isCollapsed"));
  }), {
    rollbackModification: () => oR(t),
    affectedColumns: Array.from(s),
    colspanCompensation: a
  };
}
function boe(t, e) {
  if (!Number.isInteger(e))
    throw new Error("The passed gridColumnIndex argument has invalid type.");
  if (t.childs.length > 0)
    throw new Error(bt`The passed node is not the last node on the tree. Only for\x20
the last node, the hide column modification can be applied.`);
  const {
    crossHiddenColumns: n
  } = t.data;
  if (n.includes(e))
    return;
  let r = !1;
  t.walkUp((i) => {
    const {
      data: {
        collapsible: o
      }
    } = i;
    if (o)
      return r = !0, !1;
  }), !r && t.walkUp((i) => {
    const {
      data: o
    } = i;
    o.crossHiddenColumns.push(e), o.colspan > 1 ? o.colspan -= 1 : o.isHidden = !0;
  });
}
function Roe(t, e) {
  if (!Number.isInteger(e))
    throw new Error("The passed gridColumnIndex argument has invalid type.");
  if (t.childs.length > 0)
    throw new Error(bt`The passed node is not the last node on the tree. Only for\x20
the last node, the show column modification can be applied.`);
  const {
    crossHiddenColumns: n
  } = t.data;
  if (!n.includes(e))
    return;
  let r = !1;
  t.walkUp((i) => {
    const {
      data: {
        collapsible: o
      }
    } = i;
    if (o)
      return r = !0, !1;
  }), !r && t.walkUp((i) => {
    const {
      data: o
    } = i;
    o.crossHiddenColumns.splice(o.crossHiddenColumns.indexOf(e), 1), !o.isHidden && o.colspan < o.origColspan && (o.colspan += 1), o.isHidden = !1;
  });
}
const aA = /* @__PURE__ */ new Map([["collapse", sR], ["expand", oR], ["hide-column", boe], ["show-column", Roe]]);
function Eoe(t, e, n) {
  if (!aA.has(t))
    throw new Error(`The node modifier action ("${t}") does not exist.`);
  return aA.get(t)(e, n);
}
function Nd(t) {
  const e = [];
  return H(t, (n) => {
    n.walkDown((r) => {
      const i = r.data, {
        origColspan: o,
        columnIndex: s,
        headerLevel: a,
        crossHiddenColumns: l
      } = i, u = _oe(e, a);
      let c = !1;
      for (let d = s; d < s + o; d++)
        if (l.includes(d) || c)
          u.push(JD());
        else {
          const p = Toe(i);
          p.isRoot = !0, u.push(p), c = !0;
        }
    });
  }), e;
}
function Toe(t) {
  const {
    crossHiddenColumns: e,
    ...n
  } = yv(t);
  return n;
}
function _oe(t, e) {
  let n;
  return Array.isArray(t[e]) ? n = t[e] : (n = [], t[e] = n), n;
}
function Fw(t, e, n) {
  Moe(t, e), e.set(t, n);
}
function Moe(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ju(t, e, n) {
  var r = aN(t, e, "set");
  return Ooe(t, r, n), n;
}
function Ooe(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function Gt(t, e) {
  var n = aN(t, e, "get");
  return Aoe(t, n);
}
function aN(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Aoe(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
var Ni = /* @__PURE__ */ new WeakMap(), or = /* @__PURE__ */ new WeakMap(), la = /* @__PURE__ */ new WeakMap();
class Ioe {
  constructor() {
    Fw(this, Ni, {
      writable: !0,
      value: new hoe()
    }), Fw(this, or, {
      writable: !0,
      value: new yoe(Gt(this, Ni))
    }), Fw(this, la, {
      writable: !0,
      value: [[]]
    });
  }
  /**
   * Sets a new state for the nested headers plugin based on settings passed
   * directly to the plugin.
   *
   * @param {Array[]} nestedHeadersSettings The user-defined settings.
   * @returns {boolean} Returns `true` if the settings are processed correctly, `false` otherwise.
   */
  setState(e) {
    Gt(this, Ni).setData(e);
    let n = !1;
    try {
      Gt(this, or).buildTree();
    } catch {
      Gt(this, or).clear(), Gt(this, Ni).clear(), n = !0;
    }
    return ju(this, la, Nd(Gt(this, or).getRoots())), n;
  }
  /**
   * Sets columns limit to the state will be trimmed. All headers (colspans) which
   * overlap the column limit will be reduced to keep the structure solid.
   *
   * @param {number} columnsCount The number of columns to limit to.
   */
  setColumnsLimit(e) {
    Gt(this, Ni).setColumnsLimit(e);
  }
  /**
   * Merges settings with current plugin state.
   *
   * By default only foreign keys are merged with source state and passed to the tree. But only
   * known keys are exported to matrix.
   *
   * @param {object[]} settings An array of objects to merge with the current source settings.
   *                            It is a requirement that every object has `row` and `col` properties
   *                            which points to the specific header settings object.
   */
  mergeStateWith(e) {
    const n = qe(e, (r) => {
      let {
        row: i,
        ...o
      } = r;
      return {
        row: i < 0 ? this.rowCoordsToLevel(i) : i,
        ...o
      };
    });
    Gt(this, Ni).mergeWith(n), Gt(this, or).buildTree(), ju(this, la, Nd(Gt(this, or).getRoots()));
  }
  /**
   * Maps the current state with a callback. For each header settings the callback function
   * is called. If the function returns value that value is merged with the state.
   *
   * By default only foreign keys are merged with source state and passed to the tree. But only
   * known keys are exported to matrix.
   *
   * @param {Function} callback A function that is called for every header source settings.
   *                            Each time the callback is called, the returned value extends
   *                            header settings.
   */
  mapState(e) {
    Gt(this, Ni).map(e), Gt(this, or).buildTree(), ju(this, la, Nd(Gt(this, or).getRoots()));
  }
  /**
   * Maps the current tree nodes with a callback. For each node the callback function
   * is called. If the function returns value that value is added to returned array.
   *
   * @param {Function} callback A function that is called for every tree node.
   *                            Each time the callback is called, the returned value is
   *                            added to returned array.
   * @returns {Array}
   */
  mapNodes(e) {
    return nn(Gt(this, or).getRoots(), (n, r) => (r.walkDown((i) => {
      const o = e(i.data);
      o !== void 0 && n.push(o);
    }), n), []);
  }
  /**
   * Triggers an action (e.g. "collapse") from the NodeModifiers module. The module
   * modifies a tree structure in such a way as to obtain the correct structure consistent with the
   * called action.
   *
   * @param {string} action An action name to trigger.
   * @param {number} headerLevel Header level index (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {object|undefined}
   */
  triggerNodeModification(e, n, r) {
    n < 0 && (n = this.rowCoordsToLevel(n));
    const i = Gt(this, or).getNode(n, r);
    let o;
    return i && (o = Eoe(e, i, r), ju(this, la, Nd(Gt(this, or).getRoots()))), o;
  }
  /**
   * Triggers an action (e.g. "hide-column") from the NodeModifiers module. The action is
   * triggered starting from the lowest header. The module modifies a tree structure in
   * such a way as to obtain the correct structure consistent with the called action.
   *
   * @param {string} action An action name to trigger.
   * @param {number} columnIndex A visual column index.
   * @returns {object|undefined}
   */
  triggerColumnModification(e, n) {
    return this.triggerNodeModification(e, -1, n);
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @memberof StateManager#
   * @function rowCoordsToLevel
   *
   * Translates row coordinates into header level. The row coordinates counts from -1 to -N
   * and describes headers counting from most closest to most distant from the table.
   * The header levels are counted from 0 to N where 0 describes most distant header
   * from the table.
   *
   *  Row coords             Header level
   *           +--------------+
   *       -3  │ A1 │ A1      │  0
   *           +--------------+
   *       -2  │ B1 │ B2 │ B3 │  1
   *           +--------------+
   *       -1  │ C1 │ C2 │ C3 │  2
   *           +==============+
   *           │    │    │    │
   *           +--------------+
   *           │    │    │    │
   *
   * @param {number} rowIndex A visual row index.
   * @returns {number|null} Returns unsigned number.
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  rowCoordsToLevel(e) {
    if (e >= 0)
      return null;
    const n = e + Math.max(this.getLayersCount(), 1);
    return n < 0 ? null : n;
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @memberof StateManager#
   * @function levelToRowCoords
   *
   * Translates header level into row coordinates. The row coordinates counts from -1 to -N
   * and describes headers counting from most closest to most distant from the table.
   * The header levels are counted from 0 to N where 0 describes most distant header
   * from the table.
   *
   *  Header level            Row coords
   *           +--------------+
   *        0  │ A1 │ A1      │  -3
   *           +--------------+
   *        1  │ B1 │ B2 │ B3 │  -2
   *           +--------------+
   *        2  │ C1 │ C2 │ C3 │  -1
   *           +==============+
   *           │    │    │    │
   *           +--------------+
   *           │    │    │    │
   *
   * @param {number} headerLevel Header level index.
   * @returns {number} Returns negative number.
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  levelToRowCoords(e) {
    if (e < 0)
      return null;
    const n = e - Math.max(this.getLayersCount(), 1);
    return n >= 0 ? null : n;
  }
  /**
   * Gets column header settings for a specified column and header index. The returned object contains
   * all information necessary for header renderers. It contains header label, colspan length, or hidden
   * flag.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {object|null}
   */
  getHeaderSettings(e, n) {
    var r, i;
    return e < 0 && (e = this.rowCoordsToLevel(e)), e === null || e >= this.getLayersCount() ? null : (r = (i = Gt(this, la)[e]) === null || i === void 0 ? void 0 : i[n]) !== null && r !== void 0 ? r : null;
  }
  /**
   * Gets tree data that is connected to the column header. The returned object contains all information
   * necessary for modifying tree structure (column collapsing, hiding, etc.). It contains a header
   * label, colspan length, or visual column index that indicates which column index the node is rendered from.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {object|null}
   */
  getHeaderTreeNodeData(e, n) {
    const r = this.getHeaderTreeNode(e, n);
    return r ? {
      ...r.data
    } : null;
  }
  /**
   * Gets tree node that is connected to the column header.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {TreeNode|null}
   */
  getHeaderTreeNode(e, n) {
    if (e < 0 && (e = this.rowCoordsToLevel(e)), e === null || e >= this.getLayersCount())
      return null;
    const r = Gt(this, or).getNode(e, n);
    return r || null;
  }
  /**
   * Finds the most top header level of the column header that is rendered entirely within
   * the passed visual columns range. If multiple columns headers are found within the range the
   * most top header level value will be returned.
   *
   * @param {number} columnIndexFrom A visual column index.
   * @param {number} [columnIndexTo] A visual column index.
   * @returns {number} Returns a header level in format -1 to -N.
   */
  findTopMostEntireHeaderLevel(e) {
    var n;
    let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e;
    const i = r - e + 1;
    let o = !1, s = null;
    for (let a = e; a <= r; a++) {
      const l = Gt(this, or).getRootByColumn(a);
      if (!l)
        break;
      o = !0, l.walkDown((u) => {
        const {
          columnIndex: c,
          headerLevel: d,
          origColspan: g,
          isHidden: p
        } = u.data;
        p || g <= i && c >= e && c + g - 1 <= r && (s === null || d < s) && (s = d);
      }, tN);
    }
    return o && s === null ? -1 : this.levelToRowCoords((n = s) !== null && n !== void 0 ? n : 0);
  }
  /**
   * The method is helpful in cases where the column index targets in-between currently
   * collapsed column. In that case, the method returns the left-most column index
   * where the nested header begins.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {number}
   */
  findLeftMostColumnIndex(e, n) {
    var r;
    const {
      isRoot: i
    } = (r = this.getHeaderSettings(e, n)) !== null && r !== void 0 ? r : {
      isRoot: !0
    };
    if (i)
      return n;
    let o = n - 1;
    for (; o >= 0; ) {
      var s;
      const {
        isRoot: a
      } = (s = this.getHeaderSettings(e, o)) !== null && s !== void 0 ? s : {
        isRoot: !0
      };
      if (a)
        break;
      o -= 1;
    }
    return o;
  }
  /**
   * The method is helpful in cases where the column index targets in-between currently
   * collapsed column. In that case, the method returns the right-most column index
   * where the nested header ends.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {number}
   */
  findRightMostColumnIndex(e, n) {
    var r;
    const {
      isRoot: i,
      origColspan: o
    } = (r = this.getHeaderSettings(e, n)) !== null && r !== void 0 ? r : {
      isRoot: !0,
      origColspan: 1
    };
    if (i)
      return n + o - 1;
    let s = n + 1;
    for (; s < this.getColumnsCount(); ) {
      var a;
      const {
        isRoot: l
      } = (a = this.getHeaderSettings(e, s)) !== null && a !== void 0 ? a : {
        isRoot: !0
      };
      if (l)
        break;
      s += 1;
    }
    return s - 1;
  }
  /**
   * Gets a total number of headers levels.
   *
   * @returns {number}
   */
  getLayersCount() {
    return Gt(this, Ni).getLayersCount();
  }
  /**
   * Gets a total number of columns count.
   *
   * @returns {number}
   */
  getColumnsCount() {
    return Gt(this, Ni).getColumnsCount();
  }
  /**
   * Clears the column state manager to the initial state.
   */
  clear() {
    ju(this, la, []), Gt(this, Ni).clear(), Gt(this, or).clear();
  }
}
function Ku(t, e, n) {
  return e = Poe(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Poe(t) {
  var e = xoe(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function xoe(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class Hoe {
  constructor(e, n) {
    Ku(this, "hot", void 0), Ku(this, "nestedHeaderSettingsGetter", void 0), Ku(this, "layersCount", 0), Ku(this, "container", void 0), Ku(this, "widthsMap", void 0), this.hot = e, this.nestedHeaderSettingsGetter = n, this.widthsMap = this.hot.columnIndexMapper.createAndRegisterIndexMap("nestedHeaders.widthsMap", "physicalIndexToValue");
  }
  /**
   * Sets the number of nested headers layers count.
   *
   * @param {number} layersCount Total number of headers levels.
   * @returns {GhostTable}
   */
  setLayersCount(e) {
    return this.layersCount = e, this;
  }
  /**
   * Gets the column width based on the visual column index.
   *
   * @param {number} visualColumn Visual column index.
   * @returns {number|null}
   */
  getWidth(e) {
    return this.widthsMap.getValueAtIndex(this.hot.toPhysicalColumn(e));
  }
  /**
   * Build cache of the headers widths.
   */
  buildWidthsMap() {
    this.container = this.hot.rootDocument.createElement("div"), this.container.classList.add("handsontable", "htGhostTable", "htAutoSize"), this._buildGhostTable(this.container), this.hot.rootDocument.body.appendChild(this.container);
    const e = this.container.querySelectorAll("tr:last-of-type th"), n = e.length;
    this.widthsMap.clear();
    for (let r = 0; r < n; r++) {
      const i = this.hot.columnIndexMapper.getVisualFromRenderableIndex(r), o = this.hot.toPhysicalColumn(i);
      this.widthsMap.setValueAtIndex(o, e[r].offsetWidth);
    }
    this.container.parentNode.removeChild(this.container), this.container = null;
  }
  /**
   * Build temporary table for getting minimal columns widths.
   *
   * @private
   * @param {HTMLElement} container The element where the DOM nodes are injected.
   */
  _buildGhostTable(e) {
    const {
      rootDocument: n,
      columnIndexMapper: r
    } = this.hot, i = n.createDocumentFragment(), o = n.createElement("table"), s = !!this.hot.getSettings().dropdownMenu, a = r.getRenderableIndexesLength();
    for (let l = 0; l < this.layersCount; l++) {
      const u = n.createElement("tr");
      for (let c = 0; c < a; c++) {
        let d = r.getVisualFromRenderableIndex(c);
        d === null && (d = c);
        const g = n.createElement("th"), p = this.nestedHeaderSettingsGetter(l, d);
        if (p && (!p.isPlaceholder || p.isHidden)) {
          let C = p.label;
          s && (C += '<button class="changeType"></button>'), Pa(g, C), g.colSpan = p.colspan, u.appendChild(g);
        }
      }
      o.appendChild(u);
    }
    i.appendChild(o), e.appendChild(i);
  }
  /**
   * Clear the widths cache.
   */
  clear() {
    this.widthsMap.clear(), this.container = null;
  }
}
const Doe = Hoe;
function bn(t, e) {
  lN(t, e), e.add(t);
}
function lA(t, e, n) {
  return e = Noe(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Noe(t) {
  var e = Loe(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Loe(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Ld(t, e, n) {
  lN(t, e), e.set(t, n);
}
function lN(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function wa(t, e, n) {
  var r = uN(t, e, "set");
  return $oe(t, r, n), n;
}
function $oe(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function ct(t, e) {
  var n = uN(t, e, "get");
  return koe(t, n);
}
function uN(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function koe(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function dn(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const uA = "nestedHeaders", Foe = 280;
var St = /* @__PURE__ */ new WeakMap(), rs = /* @__PURE__ */ new WeakMap(), Ec = /* @__PURE__ */ new WeakMap(), fm = /* @__PURE__ */ new WeakMap(), $d = /* @__PURE__ */ new WeakSet(), cA = /* @__PURE__ */ new WeakSet(), hA = /* @__PURE__ */ new WeakSet(), dA = /* @__PURE__ */ new WeakSet(), fA = /* @__PURE__ */ new WeakSet(), gA = /* @__PURE__ */ new WeakSet(), mA = /* @__PURE__ */ new WeakSet(), pA = /* @__PURE__ */ new WeakSet(), wA = /* @__PURE__ */ new WeakSet(), CA = /* @__PURE__ */ new WeakSet(), vA = /* @__PURE__ */ new WeakSet(), SA = /* @__PURE__ */ new WeakSet(), yA = /* @__PURE__ */ new WeakSet(), bA = /* @__PURE__ */ new WeakSet(), RA = /* @__PURE__ */ new WeakSet(), EA = /* @__PURE__ */ new WeakSet(), TA = /* @__PURE__ */ new WeakSet(), _A = /* @__PURE__ */ new WeakSet();
class Woe extends gt {
  constructor() {
    super(...arguments), bn(this, _A), bn(this, TA), bn(this, EA), bn(this, RA), bn(this, bA), bn(this, yA), bn(this, SA), bn(this, vA), bn(this, CA), bn(this, wA), bn(this, pA), bn(this, mA), bn(this, gA), bn(this, fA), bn(this, dA), bn(this, hA), bn(this, cA), bn(this, $d), Ld(this, St, {
      writable: !0,
      value: new Ioe()
    }), Ld(this, rs, {
      writable: !0,
      value: null
    }), Ld(this, Ec, {
      writable: !0,
      value: null
    }), Ld(this, fm, {
      writable: !0,
      value: !1
    }), lA(this, "ghostTable", new Doe(this.hot, (e, n) => this.getHeaderSettings(e, n))), lA(this, "detectedOverlappedHeaders", !1);
  }
  static get PLUGIN_KEY() {
    return uA;
  }
  static get PLUGIN_PRIORITY() {
    return Foe;
  }
  /**
   * Check if plugin is enabled.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[uA];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const {
      nestedHeaders: n
    } = this.hot.getSettings();
    (!Array.isArray(n) || !Array.isArray(n[0])) && Pt(bt`Your Nested Headers plugin configuration is invalid. The settings has to be\x20
                        passed as an array of arrays e.q. [['A1', { label: 'A2', colspan: 2 }]]`), this.addHook("init", () => dn(this, TA, nse).call(this)), this.addHook("afterLoadData", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, _A, rse).call(e, ...i);
    }), this.addHook("beforeOnCellMouseDown", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, fA, Yoe).call(e, ...i);
    }), this.addHook("afterOnCellMouseDown", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, gA, Goe).call(e, ...i);
    }), this.addHook("beforeOnCellMouseOver", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, mA, zoe).call(e, ...i);
    }), this.addHook("beforeOnCellMouseUp", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, pA, joe).call(e, ...i);
    }), this.addHook("beforeSelectionHighlightSet", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, wA, Koe).call(e, ...i);
    }), this.addHook("modifyTransformStart", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, CA, Xoe).call(e, ...i);
    }), this.addHook("afterSelection", () => dn(this, $d, Ww).call(this)), this.addHook("beforeViewportScrollHorizontally", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, cA, Voe).call(e, ...i);
    }), this.addHook("afterGetColumnHeaderRenderers", (r) => dn(this, SA, Zoe).call(this, r)), this.addHook("modifyColWidth", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, bA, Joe).call(e, ...i);
    }), this.addHook("modifyColumnHeaderValue", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, RA, ese).call(e, ...i);
    }), this.addHook("beforeHighlightingColumnHeader", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, hA, Boe).call(e, ...i);
    }), this.addHook("beforeCopy", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, dA, Uoe).call(e, ...i);
    }), this.addHook("beforeSelectColumns", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, vA, qoe).call(e, ...i);
    }), this.addHook("afterViewportColumnCalculatorOverride", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, yA, Qoe).call(e, ...i);
    }), this.addHook("modifyFocusedElement", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return dn(e, EA, tse).call(e, ...i);
    }), this.hot.columnIndexMapper.addLocalHook("cacheUpdated", () => dn(this, $d, Ww).call(this)), this.hot.rowIndexMapper.addLocalHook("cacheUpdated", () => dn(this, $d, Ww).call(this)), super.enablePlugin(), this.updatePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`nestedHeaders`](@/api/options.md#nestedheaders)
   */
  updatePlugin() {
    if (!this.hot.view)
      return;
    const {
      nestedHeaders: e
    } = this.hot.getSettings();
    ct(this, St).setColumnsLimit(this.hot.countCols()), Array.isArray(e) && (this.detectedOverlappedHeaders = ct(this, St).setState(e)), this.detectedOverlappedHeaders && Pt(bt`Your Nested Headers plugin setup contains overlapping headers. This kind of configuration\x20
                        is currently not supported.`), this.enabled && this.hot.columnIndexMapper.hidingMapsCollection.getMergedValues().forEach((n, r) => {
      const i = n === !0 ? "hide-column" : "show-column";
      ct(this, St).triggerColumnModification(i, r);
    }), !ct(this, rs) && this.enabled && wa(this, rs, this.hot.columnIndexMapper.createChangesObserver("hiding").subscribe((n) => {
      n.forEach((r) => {
        let {
          op: i,
          index: o,
          newValue: s
        } = r;
        if (i === "replace") {
          const a = s === !0 ? "hide-column" : "show-column";
          ct(this, St).triggerColumnModification(a, o);
        }
      }), this.ghostTable.buildWidthsMap();
    })), this.ghostTable.setLayersCount(this.getLayersCount()).buildWidthsMap(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.clearColspans(), ct(this, St).clear(), ct(this, rs).unsubscribe(), wa(this, rs, null), this.ghostTable.clear(), super.disablePlugin();
  }
  /**
   * Returns an instance of the internal state manager of the plugin.
   *
   * @private
   * @returns {StateManager}
   */
  getStateManager() {
    return ct(this, St);
  }
  /**
   * Gets a total number of headers levels.
   *
   * @private
   * @returns {number}
   */
  getLayersCount() {
    return ct(this, St).getLayersCount();
  }
  /**
   * Gets column settings for a specified header. The returned object contains
   * information about the header label, its colspan length, or if it is hidden
   * in the header renderers.
   *
   * @private
   * @param {number} headerLevel Header level (0 = most distant to the table).
   * @param {number} columnIndex A visual column index.
   * @returns {object}
   */
  getHeaderSettings(e, n) {
    return ct(this, St).getHeaderSettings(e, n);
  }
  /**
   * Clear the colspans remaining after plugin usage.
   *
   * @private
   */
  clearColspans() {
    if (!this.hot.view)
      return;
    const {
      _wt: e
    } = this.hot.view, n = e.getSetting("columnHeaders").length, r = e.wtTable.THEAD, i = e.wtOverlays.topOverlay.clone.wtTable.THEAD, o = e.wtOverlays.topInlineStartCornerOverlay ? e.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;
    for (let s = 0; s < n; s++) {
      const a = r.childNodes[s];
      if (!a)
        break;
      const l = i.childNodes[s], u = o ? o.childNodes[s] : null;
      for (let c = 0, d = a.childNodes.length; c < d; c++)
        a.childNodes[c].removeAttribute("colspan"), Ye(a.childNodes[c], "hiddenHeader"), l && l.childNodes[c] && (l.childNodes[c].removeAttribute("colspan"), Ye(l.childNodes[c], "hiddenHeader")), o && u && u.childNodes[c] && (u.childNodes[c].removeAttribute("colspan"), Ye(u.childNodes[c], "hiddenHeader"));
    }
  }
  /**
   * Generates the appropriate header renderer for a header row.
   *
   * @private
   * @param {number} headerLevel The index of header level counting from the top (positive
   *                             values counting from 0 to N).
   * @returns {Function}
   * @fires Hooks#afterGetColHeader
   */
  headerRendererFactory(e) {
    var n = this;
    const r = this.hot.view._wt.getSetting("fixedColumnsStart");
    return (i, o) => {
      var s;
      const {
        columnIndexMapper: a,
        view: l
      } = this.hot;
      let u = a.getVisualFromRenderableIndex(i);
      u === null && (u = i), o.removeAttribute("colspan"), Ye(o, "hiddenHeader");
      const {
        colspan: c,
        isHidden: d,
        isPlaceholder: g
      } = (s = ct(this, St).getHeaderSettings(e, u)) !== null && s !== void 0 ? s : {
        label: ""
      };
      if (g || d)
        ce(o, "hiddenHeader");
      else if (c > 1) {
        var p, C;
        const {
          wtOverlays: E
        } = l._wt, I = (p = E.topInlineStartCornerOverlay) === null || p === void 0 ? void 0 : p.clone.wtTable.THEAD.contains(o), M = (C = E.inlineStartOverlay) === null || C === void 0 ? void 0 : C.clone.wtTable.THEAD.contains(o), y = I || M ? Math.min(c, r - i) : c;
        y > 1 && o.setAttribute("colspan", y);
      }
      this.hot.view.appendColHeader(u, o, function() {
        return n.getColumnHeaderValue(...arguments);
      }, e);
    };
  }
  /**
   * Returns the column header value for specified column and header level index.
   *
   * @private
   * @param {number} visualColumnIndex Visual column index.
   * @param {number} headerLevel The index of header level. The header level accepts positive (0 to N)
   *                             and negative (-1 to -N) values. For positive values, 0 points to the
   *                             top most header, and for negative direction, -1 points to the most bottom
   *                             header (the header closest to the cells).
   * @returns {string} Returns the column header value to update.
   */
  getColumnHeaderValue(e, n) {
    var r;
    const {
      isHidden: i,
      isPlaceholder: o
    } = (r = ct(this, St).getHeaderSettings(n, e)) !== null && r !== void 0 ? r : {};
    return o || i ? "" : this.hot.getColHeader(e, n);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    wa(this, St, null), ct(this, rs) !== null && (ct(this, rs).unsubscribe(), wa(this, rs, null)), super.destroy();
  }
  /**
   * Gets the tree data that belongs to the column headers pointed by the passed coordinates.
   *
   * @private
   * @param {CellCoords} coords The CellCoords instance.
   * @returns {object|undefined}
   */
  _getHeaderTreeNodeDataByCoords(e) {
    if (!(e.row >= 0 || e.col < 0))
      return ct(this, St).getHeaderTreeNodeData(e.row, e.col);
  }
}
function Ww() {
  var t;
  const e = (t = this.hot) === null || t === void 0 ? void 0 : t.getSelectedRangeLast();
  if (!e)
    return;
  const {
    highlight: n
  } = e;
  if (n.isHeader() && n.col >= 0) {
    const i = ct(this, St).findLeftMostColumnIndex(n.row, n.col), o = this.hot.selection.highlight.getFocus();
    o.visualCellRange.highlight.col = i, o.visualCellRange.from.col = i, o.visualCellRange.to.col = i, o.commit();
  }
}
function Voe(t) {
  const e = this.hot.getSelectedRangeLast();
  if (!e)
    return t;
  const {
    highlight: n
  } = e;
  if (!(n.isHeader() && n.col >= 0))
    return t;
  const i = this.hot.view.getFirstFullyVisibleColumn(), o = this.hot.view.getLastFullyVisibleColumn(), s = ct(this, St).findLeftMostColumnIndex(n.row, n.col), a = ct(this, St).findRightMostColumnIndex(n.row, n.col);
  return s < i && a > o ? t : s < i ? s : a;
}
function Boe(t, e, n) {
  const r = ct(this, St).getHeaderTreeNodeData(e, t);
  if (!r)
    return t;
  const {
    columnCursor: i,
    selectionType: o,
    selectionWidth: s
  } = n, {
    isRoot: a,
    colspan: l
  } = ct(this, St).getHeaderSettings(e, t);
  if (o === BS) {
    if (!a)
      return r.columnIndex;
  } else if (o === rx && (l > s - i || !a))
    return null;
  return t;
}
function Uoe(t, e, n) {
  let {
    columnHeadersCount: r
  } = n;
  if (r !== 0)
    for (let o = 0; o < e.length; o++) {
      const {
        startRow: s,
        startCol: a,
        endRow: l,
        endCol: u
      } = e[o], c = l - s + 1, d = a - u + 1;
      if (s >= 0 || d === 1)
        break;
      for (let g = a; g <= u; g++)
        for (let p = s; p <= l; p++) {
          var i;
          const C = c + p, E = g - a;
          if (E === 0)
            continue;
          ((i = ct(this, St).getHeaderTreeNodeData(p, g)) === null || i === void 0 ? void 0 : i.isRoot) === !1 && (t[C][E] = "");
        }
    }
}
function Yoe(t, e, n, r) {
  this._getHeaderTreeNodeDataByCoords(e) && (r.column = !0);
}
function Goe(t, e) {
  const n = this._getHeaderTreeNodeDataByCoords(e);
  if (!n)
    return;
  wa(this, Ec, e.clone()), wa(this, fm, !0);
  const {
    selection: r
  } = this.hot, i = r.isSelected() ? r.getSelectedRange().current() : null, o = [], {
    columnIndex: s,
    origColspan: a
  } = n, l = !r.inInSelection(e);
  t.shiftKey && i ? e.col < i.from.col ? o.push(i.getTopEndCorner().col, s, e.row) : e.col > i.from.col ? o.push(i.getTopStartCorner().col, s + a - 1, e.row) : o.push(s, s + a - 1, e.row) : (Vg(t) || Ms(t) && l) && o.push(s, s + a - 1, e.row), r.selectColumns(...o);
}
function zoe(t, e, n, r) {
  if (!this.hot.view.isMouseDown())
    return;
  const i = this._getHeaderTreeNodeDataByCoords(e);
  if (!i)
    return;
  const {
    columnIndex: o,
    origColspan: s
  } = i, a = this.hot.getSelectedRangeLast(), l = a.getTopStartCorner(), u = a.getBottomEndCorner(), {
    from: c
  } = a;
  r.column = !0, r.cell = !0;
  const d = [], g = mr(e.row, -1 / 0, -1);
  e.col < c.col ? d.push(u.col, o, g) : e.col > c.col ? d.push(l.col, o + s - 1, g) : d.push(o, o + s - 1, g), this.hot.selection.selectColumns(...d);
}
function joe() {
  wa(this, fm, !1);
}
function Koe() {
  const {
    navigableHeaders: t
  } = this.hot.getSettings();
  if (!this.hot.view.isMouseDown() || !ct(this, fm) || !t)
    return;
  const e = this.hot.getSelectedRangeLast(), n = e.getTopStartCorner().col, r = e.getBottomEndCorner().col, {
    columnIndex: i,
    origColspan: o
  } = ct(this, St).getHeaderTreeNodeData(ct(this, Ec).row, ct(this, Ec).col);
  if (e.setHighlight(ct(this, Ec)), o > e.getWidth() || i < n || i + o - 1 > r) {
    const s = ct(this, St).findTopMostEntireHeaderLevel(mr(n, i, i + o - 1), mr(r, i, i + o - 1));
    e.highlight.row = s, e.highlight.col = e.from.col;
  }
}
function Xoe(t) {
  const {
    highlight: e
  } = this.hot.getSelectedRangeLast(), n = this.hot._createCellCoords(e.row + t.row, e.col + t.col);
  if (!(n.isHeader() && n.col >= 0))
    return;
  const i = ct(this, St).findLeftMostColumnIndex(n.row, n.col), o = ct(this, St).findRightMostColumnIndex(n.row, n.col);
  if (t.col < 0) {
    const s = e.col >= i && e.col <= o ? i - 1 : o, a = this.hot.columnIndexMapper.getNearestNotHiddenIndex(s, -1);
    a === null ? t.col = -this.hot.view.countRenderableColumnsInRange(0, e.col) : t.col = -Math.max(this.hot.view.countRenderableColumnsInRange(a, e.col) - 1, 1);
  } else if (t.col > 0) {
    const s = e.col >= i && e.col <= o ? o + 1 : i, a = this.hot.columnIndexMapper.getNearestNotHiddenIndex(s, 1);
    a === null ? t.col = this.hot.view.countRenderableColumnsInRange(e.col, this.hot.countCols()) : t.col = Math.max(this.hot.view.countRenderableColumnsInRange(e.col, a) - 1, 1);
  }
}
function qoe(t, e) {
  const n = t.row, r = this._getHeaderTreeNodeDataByCoords({
    row: n,
    col: t.col
  }), i = this._getHeaderTreeNodeDataByCoords({
    row: n,
    col: e.col
  });
  e.col < t.col ? (r && (t.col = r.columnIndex + r.origColspan - 1), i && (e.col = i.columnIndex)) : e.col >= t.col && (r && (t.col = r.columnIndex), i && (e.col = i.columnIndex + i.origColspan - 1));
}
function Zoe(t) {
  t.length = 0;
  for (let e = 0; e < ct(this, St).getLayersCount(); e++)
    t.push(this.headerRendererFactory(e));
}
function Qoe(t) {
  const e = ct(this, St).getLayersCount();
  let n = t.startColumn, r = !!e;
  for (let i = 0; i < e; i++) {
    const o = ct(this, St).findLeftMostColumnIndex(i, t.startColumn), s = this.hot.columnIndexMapper.getRenderableFromVisualIndex(o);
    if (o >= 0 && (r = !1), Jn(s) && s < t.startColumn) {
      n = s;
      break;
    }
  }
  t.startColumn = r ? ct(this, St).getHeaderTreeNodeData(0, n).columnIndex : n;
}
function Joe(t, e) {
  const n = this.ghostTable.getWidth(e);
  return t > n ? t : n;
}
function ese(t, e, n) {
  var r;
  const {
    label: i
  } = (r = ct(this, St).getHeaderTreeNodeData(n, e)) !== null && r !== void 0 ? r : {
    label: ""
  };
  return i;
}
function tse(t, e) {
  if (t < 0)
    return this.hot.getCell(t, ct(this, St).findLeftMostColumnIndex(t, e), !0);
}
function nse() {
  this.updatePlugin();
}
function rse(t, e) {
  e || this.updatePlugin();
}
function Xu(t, e, n) {
  return e = ise(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function ise(t) {
  var e = ose(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function ose(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class sse {
  constructor(e, n) {
    Xu(this, "hot", void 0), Xu(this, "data", null), Xu(this, "plugin", void 0), Xu(this, "parentReference", /* @__PURE__ */ new WeakMap()), Xu(this, "cache", {
      levels: [],
      levelCount: 0,
      rows: [],
      nodeInfo: /* @__PURE__ */ new WeakMap()
    }), this.hot = n, this.plugin = e;
  }
  /**
   * Set the data for the manager.
   *
   * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.
   */
  setData(e) {
    this.data = e;
  }
  /**
   * Get the data cached in the manager.
   *
   * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}
   */
  getData() {
    return this.data;
  }
  /**
   * Load the "raw" source data, without NestedRows' modifications.
   *
   * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}
   */
  getRawSourceData() {
    let e = null;
    return this.plugin.disableCoreAPIModifiers(), e = this.hot.getSourceData(), this.plugin.enableCoreAPIModifiers(), e;
  }
  /**
   * Update the Data Manager with new data and refresh cache.
   *
   * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.
   */
  updateWithData(e) {
    this.setData(e), this.rewriteCache();
  }
  /**
   * Rewrite the nested structure cache.
   *
   * @private
   */
  rewriteCache() {
    this.cache = {
      levels: [],
      levelCount: 0,
      rows: [],
      nodeInfo: /* @__PURE__ */ new WeakMap()
    }, xe(0, this.data.length - 1, (e) => {
      this.cacheNode(this.data[e], 0, null);
    });
  }
  /**
   * Cache a data node.
   *
   * @private
   * @param {object} node Node to cache.
   * @param {number} level Level of the node.
   * @param {object} parent Parent of the node.
   */
  cacheNode(e, n, r) {
    this.cache.levels[n] || (this.cache.levels[n] = [], this.cache.levelCount += 1), this.cache.levels[n].push(e), this.cache.rows.push(e), this.cache.nodeInfo.set(e, {
      parent: r,
      row: this.cache.rows.length - 1,
      level: n
    }), this.hasChildren(e) && H(e.__children, (i) => {
      this.cacheNode(i, n + 1, e);
    });
  }
  /**
   * Get the date for the provided visual row number.
   *
   * @param {number} row Row index.
   * @returns {object}
   */
  getDataObject(e) {
    return e == null ? null : this.cache.rows[e];
  }
  /**
   * Read the row tree in search for a specific row index or row object.
   *
   * @private
   * @param {object} parent The initial parent object.
   * @param {number} readCount Number of read nodes.
   * @param {number} neededIndex The row index we search for.
   * @param {object} neededObject The row object we search for.
   * @returns {number|object}
   */
  readTreeNodes(e, n, r, i) {
    let o = !1, s = n;
    if (isNaN(s) && s.end)
      return s;
    let a = e;
    return a || (a = {
      __children: this.data
    }, o = !0, s -= 1), r != null && s === r ? {
      result: a,
      end: !0
    } : i != null && a === i ? {
      result: s,
      end: !0
    } : (s += 1, a.__children && H(a.__children, (l) => {
      if (this.parentReference.set(l, o ? null : a), s = this.readTreeNodes(l, s, r, i), isNaN(s) && s.end)
        return !1;
    }), s);
  }
  /**
   * Mock a parent node.
   *
   * @private
   * @returns {*}
   */
  mockParent() {
    const e = this.mockNode();
    return e.__children = this.data, e;
  }
  /**
   * Mock a data node.
   *
   * @private
   * @returns {{}}
   */
  mockNode() {
    const e = {};
    return Ze(this.data[0], (n, r) => {
      e[r] = null;
    }), e;
  }
  /**
   * Get the row index for the provided row object.
   *
   * @param {object} rowObj The row object.
   * @returns {number} Row index.
   */
  getRowIndex(e) {
    return e == null ? null : this.cache.nodeInfo.get(e).row;
  }
  /**
   * Get the index of the provided row index/row object within its parent.
   *
   * @param {number|object} row Row index / row object.
   * @returns {number}
   */
  getRowIndexWithinParent(e) {
    let n = null;
    isNaN(e) ? n = e : n = this.getDataObject(e);
    const r = this.getRowParent(e);
    return r == null ? this.data.indexOf(n) : r.__children.indexOf(n);
  }
  /**
   * Count all rows (including all parents and children).
   *
   * @returns {number}
   */
  countAllRows() {
    const e = {
      __children: this.data
    };
    return this.countChildren(e);
  }
  /**
   * Count children of the provided parent.
   *
   * @param {object|number} parent Parent node.
   * @returns {number} Children count.
   */
  countChildren(e) {
    let n = 0, r = e;
    return isNaN(r) || (r = this.getDataObject(r)), !r || !r.__children ? 0 : (H(r.__children, (i) => {
      n += 1, i.__children && (n += this.countChildren(i));
    }), n);
  }
  /**
   * Get the parent of the row at the provided index.
   *
   * @param {number|object} row Physical row index.
   * @returns {object}
   */
  getRowParent(e) {
    let n;
    return isNaN(e) ? n = e : n = this.getDataObject(e), this.getRowObjectParent(n);
  }
  /**
   * Get the parent of the provided row object.
   *
   * @private
   * @param {object} rowObject The row object (tree node).
   * @returns {object|null}
   */
  getRowObjectParent(e) {
    return !e || typeof e != "object" ? null : this.cache.nodeInfo.get(e).parent;
  }
  /**
   * Get the nesting level for the row with the provided row index.
   *
   * @param {number} row Row index.
   * @returns {number|null} Row level or null, when row doesn't exist.
   */
  getRowLevel(e) {
    let n = null;
    return isNaN(e) ? n = e : n = this.getDataObject(e), n ? this.getRowObjectLevel(n) : null;
  }
  /**
   * Get the nesting level for the row with the provided row index.
   *
   * @private
   * @param {object} rowObject Row object.
   * @returns {number} Row level.
   */
  getRowObjectLevel(e) {
    return e == null ? null : this.cache.nodeInfo.get(e).level;
  }
  /**
   * Check if the provided row/row element has children.
   *
   * @param {number|object} row Row number or row element.
   * @returns {boolean}
   */
  hasChildren(e) {
    let n = e;
    return isNaN(n) || (n = this.getDataObject(n)), !!(n.__children && n.__children.length);
  }
  /**
   * Returns `true` if the row at the provided index has a parent.
   *
   * @param {number} index Row index.
   * @returns {boolean} `true` if the row at the provided index has a parent, `false` otherwise.
   */
  isChild(e) {
    return this.getRowParent(e) !== null;
  }
  /**
   * Get child at a provided index from the parent element.
   *
   * @param {object} parent The parent row object.
   * @param {number} index Index of the child element to be retrieved.
   * @returns {object|null} The child element or `null` if the child doesn't exist.
   */
  getChild(e, n) {
    var r;
    return ((r = e.__children) === null || r === void 0 ? void 0 : r[n]) || null;
  }
  /**
   * Return `true` of the row at the provided index is located at the topmost level.
   *
   * @param {number} index Row index.
   * @returns {boolean} `true` of the row at the provided index is located at the topmost level, `false` otherwise.
   */
  isRowHighestLevel(e) {
    return !this.isChild(e);
  }
  /**
   * Return `true` if the provided row index / row object represents a parent in the nested structure.
   *
   * @param {number|object} row Row index / row object.
   * @returns {boolean} `true` if the row is a parent, `false` otherwise.
   */
  isParent(e) {
    var n;
    let r = e;
    return isNaN(r) || (r = this.getDataObject(r)), r && !!r.__children && ((n = r.__children) === null || n === void 0 ? void 0 : n.length) !== 0;
  }
  /**
   * Add a child to the provided parent. It's optional to add a row object as the "element".
   *
   * @param {object} parent The parent row object.
   * @param {object} [element] The element to add as a child.
   */
  addChild(e, n) {
    let r = n;
    this.hot.runHooks("beforeAddChild", e, r);
    let i = null;
    e && (i = this.getRowIndex(e)), this.hot.runHooks("beforeCreateRow", i + this.countChildren(e) + 1, 1);
    let o = e;
    e || (o = this.mockParent()), o.__children || (o.__children = []), r || (r = this.mockNode()), o.__children.push(r), this.rewriteCache();
    const s = this.getRowIndex(r);
    this.hot.rowIndexMapper.insertIndexes(s, 1), this.hot.runHooks("afterCreateRow", s, 1), this.hot.runHooks("afterAddChild", e, r);
  }
  /**
   * Add a child node to the provided parent at a specified index.
   *
   * @param {object} parent Parent node.
   * @param {number} index Index to insert the child element at.
   * @param {object} [element] Element (node) to insert.
   */
  addChildAtIndex(e, n, r) {
    let i = r, o;
    if (i || (i = this.mockNode()), this.hot.runHooks("beforeAddChild", e, i, n), e) {
      const a = this.getRowIndex(e) + n + 1;
      this.hot.runHooks("beforeCreateRow", a, 1), e.__children.splice(n, null, i), this.rewriteCache(), this.plugin.disableCoreAPIModifiers(), this.hot.setSourceDataAtCell(this.getRowIndexWithinParent(e), "__children", e.__children, "NestedRows.addChildAtIndex"), this.hot.rowIndexMapper.insertIndexes(a, 1), this.plugin.enableCoreAPIModifiers(), this.hot.runHooks("afterCreateRow", a, 1), o = a;
    } else
      this.plugin.disableCoreAPIModifiers(), this.hot.alter("insert_row_above", n, 1, "NestedRows.addChildAtIndex"), this.plugin.enableCoreAPIModifiers(), o = this.getRowIndex(this.data[n]);
    i = this.getDataObject(o), this.hot.runHooks("afterAddChild", e, i, n);
  }
  /**
   * Add a sibling element at the specified index.
   *
   * @param {number} index New element sibling's index.
   * @param {('above'|'below')} where Direction in which the sibling is to be created.
   */
  addSibling(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "below";
    const r = this.translateTrimmedRow(e), i = this.getRowParent(r), o = this.getRowIndexWithinParent(r);
    switch (n) {
      case "below":
        this.addChildAtIndex(i, o + 1, null);
        break;
      case "above":
        this.addChildAtIndex(i, o, null);
        break;
    }
  }
  /**
   * Detach the provided element from its parent and add it right after it.
   *
   * @param {object|Array} elements Row object or an array of selected coordinates.
   * @param {boolean} [forceRender=true] If true (default), it triggers render after finished.
   */
  detachFromParent(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, r = null;
    const i = [];
    Array.isArray(e) ? (xe(e[0], e[2], (g) => {
      const p = this.translateTrimmedRow(g);
      i.push(this.getDataObject(p));
    }), xe(0, i.length - 2, (g) => {
      this.detachFromParent(i[g], !1);
    }), r = i[i.length - 1]) : r = e;
    const o = this.getRowIndex(r), s = this.countChildren(r), a = this.getRowIndexWithinParent(r), l = this.getRowParent(r), u = this.getRowParent(l), c = this.getRowIndex(u);
    let d = null;
    if (this.hot.runHooks("beforeDetachChild", l, r), a != null) {
      const g = Array.from(new Array(o + s + 1).keys()).splice(-1 * (s + 1));
      if (this.hot.runHooks("beforeRemoveRow", o, s + 1, g, this.plugin.pluginName), l.__children.splice(a, 1), this.rewriteCache(), this.hot.runHooks("afterRemoveRow", o, s + 1, g, this.plugin.pluginName), u) {
        d = c + this.countChildren(u);
        const p = this.getChild(u, this.countChildren(u) - 1), C = this.getRowIndex(p);
        this.hot.runHooks("beforeCreateRow", C + 1, s + 1, this.plugin.pluginName), u.__children.push(r);
      } else
        d = this.hot.countRows() + 1, this.hot.runHooks("beforeCreateRow", d - 2, s + 1, this.plugin.pluginName), this.data.push(r);
    }
    this.rewriteCache(), this.hot.runHooks("afterCreateRow", d - 2, s + 1, this.plugin.pluginName), this.hot.runHooks("afterDetachChild", l, r, this.getRowIndex(r)), n && this.hot.render();
  }
  /**
   * Filter the data by the `logicRows` array.
   *
   * @private
   * @param {number} index Index of the first row to remove.
   * @param {number} amount Number of elements to remove.
   * @param {Array} logicRows Array of indexes to remove.
   */
  filterData(e, n, r) {
    const i = [];
    H(r, (o) => {
      i.push(this.getDataObject(o));
    }), H(i, (o) => {
      const s = this.getRowIndexWithinParent(o), a = this.getRowParent(o);
      a === null ? this.data.splice(s, 1) : a.__children.splice(s, 1);
    }), this.rewriteCache();
  }
  /**
   * Used to splice the source data. Needed to properly modify the nested structure, which wouldn't work with the
   * default script.
   *
   * @private
   * @param {number} index Physical index of the element at the splice beginning.
   * @param {number} amount Number of elements to be removed.
   * @param {object[]} elements Array of row objects to add.
   */
  spliceData(e, n, r) {
    const i = this.getDataObject(e - 1);
    let o = null, s = e;
    i && i.__children && i.__children.length === 0 ? (o = i, s = 0) : e < this.countAllRows() && (o = this.getRowParent(e), s = this.getRowIndexWithinParent(e)), o ? r ? o.__children.splice(s, n, ...r) : o.__children.splice(s, n) : r ? this.data.splice(s, n, ...r) : this.data.splice(s, n), this.rewriteCache();
  }
  /**
   * Update the `__children` key of the upmost parent of the provided row object.
   *
   * @private
   * @param {object} rowElement Row object.
   */
  syncRowWithRawSource(e) {
    let n = e, r = null;
    do
      r = this.getRowParent(r), r !== null && (n = r);
    while (r !== null);
    this.plugin.disableCoreAPIModifiers(), this.hot.setSourceDataAtCell(this.getRowIndex(n), "__children", n.__children, "NestedRows.syncRowWithRawSource"), this.plugin.enableCoreAPIModifiers();
  }
  /* eslint-disable jsdoc/require-param */
  /**
   * Move a single row.
   *
   * @param {number} fromIndex Index of the row to be moved.
   * @param {number} toIndex Index of the destination.
   * @param {boolean} moveToCollapsed `true` if moving a row to a collapsed parent.
   * @param {boolean} moveToLastChild `true` if moving a row to be a last child of the new parent.
   */
  /* eslint-enable jsdoc/require-param */
  moveRow(e, n, r, i) {
    const o = n === this.hot.countRows(), s = this.getRowParent(e), a = this.getRowIndexWithinParent(e), l = s.__children.slice(a, a + 1), u = e > n;
    let c = o ? this.getRowParent(n - 1) : this.getRowParent(n);
    c == null && (c = this.getRowParent(n - 1)), c == null && (c = this.getDataObject(n - 1)), c ? c.__children || (c.__children = []) : (c = this.getDataObject(n), c.__children = []);
    const d = o || r || i ? c.__children.length : this.getRowIndexWithinParent(n), g = s === c;
    c.__children.splice(d, 0, l[0]), s.__children.splice(a + (u && g ? 1 : 0), 1), this.syncRowWithRawSource(s), g || this.syncRowWithRawSource(c);
  }
  /**
   * Translate the visual row index to the physical index, taking into consideration the state of collapsed rows.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number}
   */
  translateTrimmedRow(e) {
    return this.plugin.collapsingUI ? this.plugin.collapsingUI.translateTrimmedRow(e) : e;
  }
  /**
   * Translate the physical row index to the visual index, taking into consideration the state of collapsed rows.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number}
   */
  untranslateTrimmedRow(e) {
    return this.plugin.collapsingUI ? this.plugin.collapsingUI.untranslateTrimmedRow(e) : e;
  }
}
const ase = sse;
function MA(t, e, n) {
  return e = lse(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function lse(t) {
  var e = use(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function use(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class cse {
  constructor(e, n) {
    MA(this, "hot", void 0), MA(this, "plugin", void 0), this.hot = n, this.plugin = e;
  }
}
const aR = cse;
class Ro extends aR {
  /**
   * CSS classes used in the row headers.
   *
   * @type {object}
   */
  static get CSS_CLASSES() {
    return {
      indicatorContainer: "ht_nestingLevels",
      parent: "ht_nestingParent",
      indicator: "ht_nestingLevel",
      emptyIndicator: "ht_nestingLevel_empty",
      button: "ht_nestingButton",
      expandButton: "ht_nestingExpand",
      collapseButton: "ht_nestingCollapse"
    };
  }
  constructor(e, n) {
    super(e, n), this.dataManager = this.plugin.dataManager, this.collapsingUI = this.plugin.collapsingUI, this.rowHeaderWidthCache = null;
  }
  /**
   * Append nesting indicators and buttons to the row headers.
   *
   * @private
   * @param {number} row Row index.
   * @param {HTMLElement} TH TH 3element.
   */
  appendLevelIndicators(e, n) {
    const r = this.hot.toPhysicalRow(e), i = this.dataManager.getRowLevel(r), o = this.dataManager.getDataObject(r), s = n.getElementsByTagName("DIV")[0], a = s.querySelector("span.rowHeader"), l = s.querySelectorAll('[class^="ht_nesting"]'), u = this.hot.getSettings().ariaTags;
    if (H(l, (c) => {
      c && s.removeChild(c);
    }), ce(n, Ro.CSS_CLASSES.indicatorContainer), i) {
      const {
        rootDocument: c
      } = this.hot, d = a.cloneNode(!0);
      s.innerHTML = "", xe(0, i - 1, () => {
        const g = c.createElement("SPAN");
        ce(g, Ro.CSS_CLASSES.emptyIndicator), s.appendChild(g);
      }), s.appendChild(d);
    }
    if (this.dataManager.hasChildren(o)) {
      const c = this.hot.rootDocument.createElement("DIV");
      u && Ne(c, [Vo()]), ce(n, Ro.CSS_CLASSES.parent), this.collapsingUI.areChildrenCollapsed(r) ? (ce(c, `${Ro.CSS_CLASSES.button} ${Ro.CSS_CLASSES.expandButton}`), u && Ne(n, [Ur(!1)])) : (ce(c, `${Ro.CSS_CLASSES.button} ${Ro.CSS_CLASSES.collapseButton}`), u && Ne(n, [Ur(!0)])), s.appendChild(c);
    }
  }
  /**
   * Update the row header width according to number of levels in the dataset.
   *
   * @private
   * @param {number} deepestLevel Cached deepest level of nesting.
   */
  updateRowHeaderWidth(e) {
    let n = e;
    n || (n = this.dataManager.cache.levelCount), this.rowHeaderWidthCache = Math.max(50, 11 + 10 * n + 25), this.hot.render();
  }
}
const cN = Ro;
class hse extends aR {
  constructor(e, n) {
    var r;
    super(e, n), r = this, this.dataManager = this.plugin.dataManager, this.collapsedRows = [], this.collapsedRowsStash = {
      stash: function() {
        let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
        r.lastCollapsedRows = r.collapsedRows.slice(0), r.expandMultipleChildren(r.lastCollapsedRows, i);
      },
      shiftStash: function(i, o) {
        let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
        o == null && (o = 1 / 0), H(r.lastCollapsedRows, (a, l) => {
          a >= i && a < o && (r.lastCollapsedRows[l] = a + s);
        });
      },
      applyStash: function() {
        let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
        r.collapseMultipleChildren(r.lastCollapsedRows, i), r.lastCollapsedRows = void 0;
      },
      trimStash: (i, o) => {
        xe(i, i + o - 1, (s) => {
          const a = this.lastCollapsedRows.indexOf(s);
          a > -1 && this.lastCollapsedRows.splice(a, 1);
        });
      }
    };
  }
  /**
   * Collapse the children of the row passed as an argument.
   *
   * @param {number|object} row The parent row.
   * @param {boolean} [forceRender=true] Whether to render the table after the function ends.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   * @returns {Array}
   */
  collapseChildren(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    const i = [];
    let o = null, s = null, a = null;
    return isNaN(e) ? (o = e, s = this.dataManager.getRowIndex(o)) : (o = this.dataManager.getDataObject(e), s = e), this.dataManager.hasChildren(o) && H(o.__children, (l) => {
      i.push(this.dataManager.getRowIndex(l));
    }), a = this.collapseRows(i, !0, !1), r && this.trimRows(a), n && this.renderAndAdjust(), this.collapsedRows.indexOf(s) === -1 && this.collapsedRows.push(s), a;
  }
  /**
   * Collapse multiple children.
   *
   * @param {Array} rows Rows to collapse (including their children).
   * @param {boolean} [forceRender=true] `true` if the table should be rendered after finishing the function.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   */
  collapseMultipleChildren(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    const i = [];
    H(e, (o) => {
      i.push(...this.collapseChildren(o, !1, !1));
    }), r && this.trimRows(i), n && this.renderAndAdjust();
  }
  /**
   * Collapse a single row.
   *
   * @param {number} rowIndex Index of the row to collapse.
   * @param {boolean} [recursive=true] `true` if it should collapse the row's children.
   */
  collapseRow(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    this.collapseRows([e], n);
  }
  /**
   * Collapse multiple rows.
   *
   * @param {Array} rowIndexes Array of row indexes to collapse.
   * @param {boolean} [recursive=true] `true` if it should collapse the rows' children.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   * @returns {Array} Rows prepared for trimming (or trimmed, if doTrimming == true).
   */
  collapseRows(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const i = [];
    return H(e, (o) => {
      i.push(o), n && this.collapseChildRows(o, i);
    }), r && this.trimRows(i), i;
  }
  /**
   * Collapse child rows of the row at the provided index.
   *
   * @param {number} parentIndex Index of the parent node.
   * @param {Array} [rowsToTrim=[]] Array of rows to trim. Defaults to an empty array.
   * @param {boolean} [recursive] `true` if the collapsing process should be recursive.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   */
  collapseChildRows(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
    if (this.dataManager.hasChildren(e)) {
      const i = this.dataManager.getDataObject(e);
      H(i.__children, (o) => {
        const s = this.dataManager.getRowIndex(o);
        n.push(s), this.collapseChildRows(s, n);
      });
    }
    r && this.trimRows(n);
  }
  /**
   * Expand a single row.
   *
   * @param {number} rowIndex Index of the row to expand.
   * @param {boolean} [recursive=true] `true` if it should expand the row's children recursively.
   */
  expandRow(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    this.expandRows([e], n);
  }
  /**
   * Expand multiple rows.
   *
   * @param {Array} rowIndexes Array of indexes of the rows to expand.
   * @param {boolean} [recursive=true] `true` if it should expand the rows' children recursively.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   * @returns {Array} Array of row indexes to be untrimmed.
   */
  expandRows(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const i = [];
    return H(e, (o) => {
      i.push(o), n && this.expandChildRows(o, i);
    }), r && this.untrimRows(i), i;
  }
  /**
   * Expand child rows of the provided index.
   *
   * @param {number} parentIndex Index of the parent row.
   * @param {Array} [rowsToUntrim=[]] Array of the rows to be untrimmed.
   * @param {boolean} [recursive] `true` if it should expand the rows' children recursively.
   * @param {boolean} [doTrimming=false] I determine whether collapsing should envolve trimming rows.
   */
  expandChildRows(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
    if (this.dataManager.hasChildren(e)) {
      const i = this.dataManager.getDataObject(e);
      H(i.__children, (o) => {
        if (!this.isAnyParentCollapsed(o)) {
          const s = this.dataManager.getRowIndex(o);
          n.push(s), this.expandChildRows(s, n);
        }
      });
    }
    r && this.untrimRows(n);
  }
  /**
   * Expand the children of the row passed as an argument.
   *
   * @param {number|object} row Parent row.
   * @param {boolean} [forceRender=true] Whether to render the table after the function ends.
   * @param {boolean} [doTrimming=true] If set to `true`, the trimming will be applied when the function finishes.
   * @returns {number[]}
   */
  expandChildren(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    const i = [];
    let o = null, s = null, a = null;
    return isNaN(e) ? (o = e, s = this.dataManager.getRowIndex(e)) : (o = this.dataManager.getDataObject(e), s = e), this.collapsedRows.splice(this.collapsedRows.indexOf(s), 1), this.dataManager.hasChildren(o) && H(o.__children, (l) => {
      const u = this.dataManager.getRowIndex(l);
      i.push(u);
    }), a = this.expandRows(i, !0, !1), r && this.untrimRows(a), n && this.renderAndAdjust(), a;
  }
  /**
   * Expand multiple rows' children.
   *
   * @param {Array} rows Array of rows which children are about to be expanded.
   * @param {boolean} [forceRender=true] `true` if the table should render after finishing the function.
   * @param {boolean} [doTrimming=true] `true` if the rows should be untrimmed after finishing the function.
   */
  expandMultipleChildren(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    const i = [];
    H(e, (o) => {
      i.push(...this.expandChildren(o, !1, !1));
    }), r && this.untrimRows(i), n && this.renderAndAdjust();
  }
  /**
   * Collapse all collapsable rows.
   */
  collapseAll() {
    const e = this.dataManager.getData(), n = [];
    H(e, (r) => {
      this.dataManager.hasChildren(r) && n.push(r);
    }), this.collapseMultipleChildren(n), this.renderAndAdjust();
  }
  /**
   * Expand all collapsable rows.
   */
  expandAll() {
    const e = this.dataManager.getData(), n = [];
    H(e, (r) => {
      this.dataManager.hasChildren(r) && n.push(r);
    }), this.expandMultipleChildren(n), this.renderAndAdjust();
  }
  /**
   * Trim rows.
   *
   * @param {Array} rows Physical row indexes.
   */
  trimRows(e) {
    this.hot.batchExecution(() => {
      H(e, (n) => {
        this.plugin.collapsedRowsMap.setValueAtIndex(n, !0);
      });
    }, !0);
  }
  /**
   * Untrim rows.
   *
   * @param {Array} rows Physical row indexes.
   */
  untrimRows(e) {
    this.hot.batchExecution(() => {
      H(e, (n) => {
        this.plugin.collapsedRowsMap.setValueAtIndex(n, !1);
      });
    }, !0);
  }
  /**
   * Check if all child rows are collapsed.
   *
   * @private
   * @param {number|object|null} row The parent row. `null` for the top level.
   * @returns {boolean}
   */
  areChildrenCollapsed(e) {
    let n = isNaN(e) ? e : this.dataManager.getDataObject(e), r = !0;
    return n === null && (n = {
      __children: this.dataManager.data
    }), this.dataManager.hasChildren(n) && H(n.__children, (i) => {
      const o = this.dataManager.getRowIndex(i);
      if (!this.plugin.collapsedRowsMap.getValueAtIndex(o))
        return r = !1, !1;
    }), r;
  }
  /**
   * Check if any of the row object parents are collapsed.
   *
   * @private
   * @param {object} rowObj Row object.
   * @returns {boolean}
   */
  isAnyParentCollapsed(e) {
    let n = e;
    for (; n !== null; ) {
      n = this.dataManager.getRowParent(n);
      const r = this.dataManager.getRowIndex(n);
      if (this.collapsedRows.indexOf(r) > -1)
        return !0;
    }
    return !1;
  }
  /**
   * Toggle collapsed state. Callback for the `beforeOnCellMousedown` hook.
   *
   * @private
   * @param {MouseEvent} event `mousedown` event.
   * @param {object} coords Coordinates of the clicked cell/header.
   */
  toggleState(e, n) {
    if (n.col >= 0)
      return;
    const r = this.translateTrimmedRow(n.row);
    Ve(e.target, cN.CSS_CLASSES.button) && (this.areChildrenCollapsed(r) ? this.expandChildren(r) : this.collapseChildren(r), Kr(e));
  }
  /**
   * Translate visual row after trimming to physical base row index.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number} Base row index.
   */
  translateTrimmedRow(e) {
    return this.hot.toPhysicalRow(e);
  }
  /**
   * Translate physical row after trimming to visual base row index.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number} Base row index.
   */
  untranslateTrimmedRow(e) {
    return this.hot.toVisualRow(e);
  }
  /**
   * Helper function to render the table and call the `adjustElementsSize` method.
   *
   * @private
   */
  renderAndAdjust() {
    this.hot.render(), this.hot.view.adjustElementsSize();
  }
}
const dse = hse;
function fse(t, e, n) {
  gse(t, e), e.set(t, n);
}
function gse(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function mse(t, e, n) {
  return e = pse(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function pse(t) {
  var e = wse(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function wse(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Cse(t, e) {
  var n = vse(t, e, "get");
  return Sse(t, n);
}
function vse(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Sse(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
var OA = /* @__PURE__ */ new WeakMap();
class yse extends aR {
  constructor() {
    super(...arguments), mse(this, "dataManager", this.plugin.dataManager), fse(this, OA, {
      writable: !0,
      value: {
        row_above: (e, n) => {
          const r = n[n.length - 1];
          this.dataManager.addSibling(r.start.row, "above");
        },
        row_below: (e, n) => {
          const r = n[n.length - 1];
          this.dataManager.addSibling(r.start.row, "below");
        }
      }
    });
  }
  /**
   * Append options to the context menu. (Propagated from the `afterContextMenuDefaultOptions` hook callback)
   * f.
   *
   * @private
   * @param {object} defaultOptions Default context menu options.
   * @returns {*}
   */
  appendOptions(e) {
    const n = [{
      key: "add_child",
      name() {
        return this.getTranslatedPhrase(Uy);
      },
      callback: () => {
        const r = this.dataManager.translateTrimmedRow(this.hot.getSelectedLast()[0]), i = this.dataManager.getDataObject(r);
        this.dataManager.addChild(i);
      },
      disabled: () => {
        const r = this.hot.getSelectedLast();
        return !r || r[0] < 0 || this.hot.selection.isSelectedByColumnHeader() || this.hot.countRows() >= this.hot.getSettings().maxRows;
      }
    }, {
      key: "detach_from_parent",
      name() {
        return this.getTranslatedPhrase(Yy);
      },
      callback: () => {
        this.dataManager.detachFromParent(this.hot.getSelectedLast());
      },
      disabled: () => {
        const r = this.hot.getSelectedLast(), i = this.dataManager.translateTrimmedRow(r[0]);
        return !this.dataManager.getRowParent(i) || !r || r[0] < 0 || this.hot.selection.isSelectedByColumnHeader() || this.hot.countRows() >= this.hot.getSettings().maxRows;
      }
    }, {
      name: "---------"
    }];
    return xe(0, e.items.length - 1, (r) => {
      if (r === 0)
        return H(n, (i, o) => {
          e.items.splice(r + o, 0, i);
        }), !1;
    }), this.modifyRowInsertingOptions(e);
  }
  /**
   * Modify how the row inserting options work.
   *
   * @private
   * @param {object} defaultOptions Default context menu items.
   * @returns {*}
   */
  modifyRowInsertingOptions(e) {
    return xe(0, e.items.length - 1, (n) => {
      const r = Cse(this, OA)[e.items[n].key];
      r != null && (e.items[n].callback = r);
    }), e;
  }
}
const bse = yse;
function kd(t, e, n) {
  return e = Rse(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Rse(t) {
  var e = Ese(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Ese(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class Tse {
  constructor(e) {
    kd(this, "plugin", void 0), kd(this, "hot", void 0), kd(this, "dataManager", void 0), kd(this, "collapsingUI", void 0), this.plugin = e, this.hot = e.hot, this.dataManager = e.dataManager, this.collapsingUI = e.collapsingUI;
  }
  /**
   * `beforeRowMove` hook callback.
   *
   * @param {Array} rows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements
   *   will be placed after the moving action. To check the visualization of the final index, please take a look at
   *   [documentation](@/guides/rows/row-moving.md).
   * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we
   *   are going to drop the moved elements. To check visualization of drop index please take a look at
   *   [documentation](@/guides/rows/row-moving.md).
   * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  onBeforeRowMove(e, n, r, i) {
    if (this.displayAPICompatibilityWarning({
      rows: e,
      finalIndex: n,
      dropIndex: r,
      movePossible: i
    }))
      return !1;
    this.movedToCollapsed = !1;
    const s = r === this.hot.countRows(), a = s ? this.hot.countSourceRows() : this.dataManager.translateTrimmedRow(r);
    let l = !0;
    const u = e.map((C) => {
      if (!l)
        return !1;
      const E = this.dataManager.translateTrimmedRow(C);
      return l = this.shouldAllowMoving(E, a), E;
    }), c = u.indexOf(a) === -1;
    if (!l || !c)
      return !1;
    const d = this.getBaseParent(u), g = this.getTargetParent(s, a), p = d === g;
    return this.movedToCollapsed = this.collapsingUI.areChildrenCollapsed(g), this.collapsingUI.collapsedRowsStash.stash(), this.shiftCollapsibleParentsLocations(u, a, p), this.moveRows(u, a, g), this.dataManager.rewriteCache(), this.moveCellsMeta(u, a), this.collapsingUI.collapsedRowsStash.applyStash(!1), this.hot.runHooks("afterRowMove", e, n, r, i, i && this.isRowOrderChanged(e, n)), this.hot.render(), this.selectCells(e, r), !1;
  }
  /**
   * Display a `dragRows`/`moveRows` method compatibility warning if needed.
   *
   * @param {object} beforeMoveRowHookArgs A set of arguments from the `beforeMoveRow` hook.
   * @returns {boolean} `true` if is a result of an improper usage of the moving API.
   */
  displayAPICompatibilityWarning(e) {
    const {
      rows: n,
      finalIndex: r,
      dropIndex: i,
      movePossible: o
    } = e;
    let s = !1;
    return It(i) && (Pt(bt`Since version 8.0.0 of the Handsontable the 'moveRows' method isn't used for moving rows\x20
      when the NestedRows plugin is enabled. Please use the 'dragRows' method instead.`), this.hot.runHooks("afterRowMove", n, r, i, o, !1), s = !0), s;
  }
  /**
   * Check if the moving action should be allowed.
   *
   * @param {number} physicalRowIndex Physical start row index.
   * @param {number} physicalDropIndex Physical drop index.
   * @returns {boolean} `true` if it should continue with the moving action.
   */
  shouldAllowMoving(e, n) {
    return !(this.dataManager.isParent(e) || this.dataManager.isRowHighestLevel(e) || e === n || n === 0);
  }
  /**
   * Get the base row parent.
   *
   * @param {number} physicalStartIndexes Physical start row index.
   * @returns {object|null} The base row parent.
   */
  getBaseParent(e) {
    return this.dataManager.getRowParent(e[0]);
  }
  /**
   * Get the target row parent.
   *
   * @param {boolean} dropToLastRow `true` if the row is moved to the last row of the table.
   * @param {number} physicalDropIndex Physical drop row index.
   * @returns {object|null} The target row parent.
   */
  getTargetParent(e, n) {
    let r = this.dataManager.getRowParent(e ? n - 1 : n);
    return r == null && (r = this.dataManager.getRowParent(n - 1)), r;
  }
  /**
   * Shift the cached collapsible rows position according to the move action.
   *
   * @param {number[]} physicalStartIndexes Physical start row indexes.
   * @param {number} physicalDropIndex Physical drop index.
   * @param {boolean} sameParent `true` if the row's being moved between siblings of the same parent.
   */
  shiftCollapsibleParentsLocations(e, n, r) {
    r || (Math.max(...e) <= n ? this.collapsingUI.collapsedRowsStash.shiftStash(e[0], n, -1 * e.length) : this.collapsingUI.collapsedRowsStash.shiftStash(n, e[0], e.length));
  }
  /**
   * Move the rows at the provided coordinates.
   *
   * @param {number[]} physicalStartIndexes Physical indexes of the rows about to be moved.
   * @param {number} physicalDropIndex Physical drop index.
   * @param {object} targetParent Parent of the destination row.
   */
  moveRows(e, n, r) {
    const i = n === this.dataManager.getRowIndex(r) + this.dataManager.countChildren(r) + 1;
    this.hot.batchRender(() => {
      e.forEach((o) => {
        this.dataManager.moveRow(o, n, this.movedToCollapsed, i);
      });
    });
  }
  /**
   * Move the cell meta for multiple rows.
   *
   * @param {number[]} baseIndexes Array of indexes for the rows being moved.
   * @param {number} targetIndex Index of the destination of the move.
   */
  moveCellsMeta(e, n) {
    const r = [], i = Math.max(...e) < n;
    e.forEach((o) => {
      r.push(this.hot.getCellMetaAtRow(o));
    }), this.hot.spliceCellsMeta(e[0], e.length), this.hot.spliceCellsMeta(n - (i ? r.length : 0), 0, ...r);
  }
  /**
   * Select cells after the move.
   *
   * @param {Array} rows Array of visual row indexes to be moved.
   * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we
   *   are going to drop the moved elements. To check visualization of drop index please take a look at
   *   [documentation](@/guides/rows/row-moving.md).
   */
  selectCells(e, n) {
    const r = e.length;
    let i = 0, o = 0, s = null, a = null;
    if (this.movedToCollapsed) {
      let l = null;
      e[r - 1] < n ? l = this.dataManager.translateTrimmedRow(n - r) : l = this.dataManager.translateTrimmedRow(n);
      const u = this.dataManager.getRowParent(l === null ? this.hot.countSourceRows() - 1 : l - 1), c = this.dataManager.getRowIndex(u);
      i = this.dataManager.untranslateTrimmedRow(c), o = i;
    } else
      e[r - 1] < n ? (o = n - 1, i = o - r + 1) : (i = n, o = i + r - 1);
    s = this.hot.selection, a = this.hot.countCols() - 1, s.setRangeStart(this.hot._createCellCoords(i, 0)), s.setRangeEnd(this.hot._createCellCoords(o, a), !0);
  }
  // TODO: Reimplementation of function which is inside the `ManualRowMove` plugin.
  /**
   * Indicates if order of rows was changed.
   *
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements
   *   will be placed after the moving action. To check the visualization of the final index, please take a look at
   *   [documentation](@/guides/rows/row-moving.md).
   * @returns {boolean}
   */
  isRowOrderChanged(e, n) {
    return e.some((r, i) => r - i !== n);
  }
}
function Dn(t, e) {
  hN(t, e), e.add(t);
}
function AA(t, e, n) {
  hN(t, e), e.set(t, n);
}
function hN(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Vw(t, e, n) {
  return e = _se(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function _se(t) {
  var e = Mse(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Mse(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function gf(t, e) {
  var n = dN(t, e, "get");
  return Ose(t, n);
}
function Ose(t, e) {
  return e.get ? e.get.call(t) : e.value;
}
function dg(t, e, n) {
  var r = dN(t, e, "set");
  return Ase(t, r, n), n;
}
function dN(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to " + n + " private field on non-instance");
  return e.get(t);
}
function Ase(t, e, n) {
  if (e.set)
    e.set.call(t, n);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = n;
  }
}
function An(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const fg = "nestedRows", Ise = 300, IA = fg, Pse = "The Nested Rows plugin requires an Array of Objects as a dataset to be provided. The plugin has been disabled.";
var gm = /* @__PURE__ */ new WeakMap(), bl = /* @__PURE__ */ new WeakMap(), PA = /* @__PURE__ */ new WeakSet(), xA = /* @__PURE__ */ new WeakSet(), HA = /* @__PURE__ */ new WeakSet(), DA = /* @__PURE__ */ new WeakSet(), NA = /* @__PURE__ */ new WeakSet(), LA = /* @__PURE__ */ new WeakSet(), $A = /* @__PURE__ */ new WeakSet(), kA = /* @__PURE__ */ new WeakSet(), FA = /* @__PURE__ */ new WeakSet(), WA = /* @__PURE__ */ new WeakSet(), VA = /* @__PURE__ */ new WeakSet(), BA = /* @__PURE__ */ new WeakSet(), UA = /* @__PURE__ */ new WeakSet(), YA = /* @__PURE__ */ new WeakSet(), GA = /* @__PURE__ */ new WeakSet(), Bw = /* @__PURE__ */ new WeakSet();
class xse extends gt {
  constructor() {
    super(...arguments), Dn(this, Bw), Dn(this, GA), Dn(this, YA), Dn(this, UA), Dn(this, BA), Dn(this, VA), Dn(this, WA), Dn(this, FA), Dn(this, kA), Dn(this, $A), Dn(this, LA), Dn(this, NA), Dn(this, DA), Dn(this, HA), Dn(this, xA), Dn(this, PA), Vw(this, "dataManager", null), Vw(this, "headersUI", null), Vw(this, "collapsedRowsMap", null), AA(this, gm, {
      writable: !0,
      value: !1
    }), AA(this, bl, {
      writable: !0,
      value: !1
    });
  }
  static get PLUGIN_KEY() {
    return fg;
  }
  static get PLUGIN_PRIORITY() {
    return Ise;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link NestedRows#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[fg];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.collapsedRowsMap = this.hot.rowIndexMapper.registerMap("nestedRows", new oh()), this.dataManager = new ase(this, this.hot), this.collapsingUI = new dse(this, this.hot), this.headersUI = new cN(this, this.hot), this.contextMenuUI = new bse(this, this.hot), this.rowMoveController = new Tse(this), this.addHook("afterInit", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, YA, zse).call(e, ...r);
    }), this.addHook("beforeViewRender", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, GA, jse).call(e, ...r);
    }), this.addHook("modifyRowData", function() {
      return e.onModifyRowData(...arguments);
    }), this.addHook("modifySourceLength", function() {
      return e.onModifySourceLength(...arguments);
    }), this.addHook("beforeDataSplice", function() {
      return e.onBeforeDataSplice(...arguments);
    }), this.addHook("filterData", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, HA, Nse).call(e, ...r);
    }), this.addHook("afterContextMenuDefaultOptions", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, DA, Lse).call(e, ...r);
    }), this.addHook("afterGetRowHeader", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, NA, $se).call(e, ...r);
    }), this.addHook("beforeOnCellMouseDown", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, xA, Dse).call(e, ...r);
    }), this.addHook("beforeRemoveRow", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, kA, Wse).call(e, ...r);
    }), this.addHook("afterRemoveRow", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, $A, Fse).call(e, ...r);
    }), this.addHook("beforeAddChild", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, FA, Vse).call(e, ...r);
    }), this.addHook("afterAddChild", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, WA, Bse).call(e, ...r);
    }), this.addHook("beforeDetachChild", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, VA, Use).call(e, ...r);
    }), this.addHook("afterDetachChild", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, BA, Yse).call(e, ...r);
    }), this.addHook("modifyRowHeaderWidth", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, LA, kse).call(e, ...r);
    }), this.addHook("afterCreateRow", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, UA, Gse).call(e, ...r);
    }), this.addHook("beforeRowMove", function() {
      for (var n = arguments.length, r = new Array(n), i = 0; i < n; i++)
        r[i] = arguments[i];
      return An(e, PA, Hse).call(e, ...r);
    }), this.addHook("beforeLoadData", (n) => An(this, Bw, zA).call(this, n)), this.addHook("beforeUpdateData", (n) => An(this, Bw, zA).call(this, n)), this.registerShortcuts(), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.rowIndexMapper.unregisterMap("nestedRows"), this.unregisterShortcuts(), super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`nestedRows`](@/api/options.md#nestedrows)
   */
  updatePlugin() {
    this.disablePlugin();
    const e = this.dataManager.getData();
    this.enablePlugin(), this.dataManager.updateWithData(e), super.updatePlugin();
  }
  /**
   * Register shortcuts responsible for toggling collapsible columns.
   *
   * @private
   */
  registerShortcuts() {
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Enter"]],
      callback: () => {
        const {
          highlight: e
        } = this.hot.getSelectedRangeLast();
        if (e.col === -1 && e.row >= 0) {
          const n = this.collapsingUI.translateTrimmedRow(e.row);
          this.collapsingUI.areChildrenCollapsed(n) ? this.collapsingUI.expandChildren(n) : this.collapsingUI.collapseChildren(n);
        }
      },
      runOnlyIf: () => {
        var e;
        const n = (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
        return n && this.hot.selection.isCellVisible(n) && n.isHeader();
      },
      group: IA
    });
  }
  /**
   * Unregister shortcuts responsible for toggling collapsible columns.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(IA);
  }
  /**
   * Enable the modify hook skipping flag - allows retrieving the data from Handsontable without this plugin's
   * modifications.
   *
   * @private
   */
  disableCoreAPIModifiers() {
    dg(this, bl, !0);
  }
  /**
   * Disable the modify hook skipping flag.
   *
   * @private
   */
  enableCoreAPIModifiers() {
    dg(this, bl, !1);
  }
  /**
   * The modifyRowData hook callback.
   *
   * @private
   * @param {number} row Visual row index.
   * @returns {boolean}
   */
  onModifyRowData(e) {
    if (!gf(this, bl))
      return this.dataManager.getDataObject(e);
  }
  /**
   * Modify the source data length to match the length of the nested structure.
   *
   * @private
   * @returns {number}
   */
  onModifySourceLength() {
    if (!gf(this, bl))
      return this.dataManager.countAllRows();
  }
  /**
   * @private
   * @param {number} index The index where the data was spliced.
   * @param {number} amount An amount of items to remove.
   * @param {object} element An element to add.
   * @returns {boolean}
   */
  onBeforeDataSplice(e, n, r) {
    return gf(this, bl) || this.dataManager.isRowHighestLevel(e) ? !0 : (this.dataManager.spliceData(e, n, r), !1);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
function Hse(t, e, n, r) {
  return this.rowMoveController.onBeforeRowMove(t, e, n, r);
}
function Dse(t, e, n) {
  this.collapsingUI.toggleState(t, e, n);
}
function Nse(t, e, n) {
  return this.collapsingUI.collapsedRowsStash.stash(), this.collapsingUI.collapsedRowsStash.trimStash(n[0], e), this.collapsingUI.collapsedRowsStash.shiftStash(n[0], null, -1 * e), this.dataManager.filterData(t, e, n), dg(this, gm, !0), this.dataManager.getData().slice();
}
function Lse(t) {
  return this.contextMenuUI.appendOptions(t);
}
function $se(t, e) {
  this.headersUI.appendLevelIndicators(t, e);
}
function kse(t) {
  return Math.max(this.headersUI.rowHeaderWidthCache, t);
}
function Fse(t, e, n, r) {
  r !== this.pluginName && this.hot._registerTimeout(() => {
    dg(this, gm, !1), this.headersUI.updateRowHeaderWidth(), this.collapsingUI.collapsedRowsStash.applyStash();
  });
}
function Wse(t, e, n) {
  const r = Array.from(n.reduce((i, o) => {
    if (this.dataManager.isParent(o)) {
      const s = this.dataManager.getDataObject(o).__children;
      return i.add(o), Array.isArray(s) && s.forEach((a) => i.add(this.dataManager.getRowIndex(a))), i;
    }
    return i.add(o);
  }, /* @__PURE__ */ new Set()));
  n.length = 0, n.push(...r);
}
function Vse() {
  this.collapsingUI.collapsedRowsStash.stash();
}
function Bse(t, e) {
  this.collapsingUI.collapsedRowsStash.shiftStash(this.dataManager.getRowIndex(e)), this.collapsingUI.collapsedRowsStash.applyStash(), this.headersUI.updateRowHeaderWidth();
}
function Use() {
  this.collapsingUI.collapsedRowsStash.stash();
}
function Yse(t, e, n) {
  this.collapsingUI.collapsedRowsStash.shiftStash(n, null, -1), this.collapsingUI.collapsedRowsStash.applyStash(), this.headersUI.updateRowHeaderWidth();
}
function Gse() {
  this.dataManager.rewriteCache();
}
function zse() {
  this.headersUI.updateRowHeaderWidth();
}
function jse(t, e) {
  gf(this, gm) && (e.skipRender = !0);
}
function zA(t) {
  if (!px(t)) {
    ES(Pse), this.hot.getSettings()[fg] = !1, this.disablePlugin();
    return;
  }
  this.dataManager.setData(t), this.dataManager.rewriteCache();
}
function Uw(t, e, n) {
  return e = Kse(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Kse(t) {
  var e = Xse(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Xse(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
class qse {
  // eslint-disable-next-line no-restricted-globals
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
    Uw(this, "rootWindow", void 0), Uw(this, "prefix", void 0), Uw(this, "savedKeys", []), this.rootWindow = n, this.prefix = e, this.loadSavedKeys();
  }
  /**
   * Save data to localStorage.
   *
   * @param {string} key Key string.
   * @param {Mixed} value Value to save.
   */
  saveValue(e, n) {
    this.rootWindow.localStorage.setItem(`${this.prefix}_${e}`, JSON.stringify(n)), this.savedKeys.indexOf(e) === -1 && (this.savedKeys.push(e), this.saveSavedKeys());
  }
  /**
   * Load data from localStorage.
   *
   * @param {string} key Key string.
   * @param {object} defaultValue Object containing the loaded data.
   *
   * @returns {object|undefined}
   */
  loadValue(e, n) {
    const r = typeof e > "u" ? n : e, i = this.rootWindow.localStorage.getItem(`${this.prefix}_${r}`);
    return i === null ? void 0 : JSON.parse(i);
  }
  /**
   * Reset given data from localStorage.
   *
   * @param {string} key Key string.
   */
  reset(e) {
    this.rootWindow.localStorage.removeItem(`${this.prefix}_${e}`);
  }
  /**
   * Reset all data from localStorage.
   *
   */
  resetAll() {
    H(this.savedKeys, (e, n) => {
      this.rootWindow.localStorage.removeItem(`${this.prefix}_${this.savedKeys[n]}`);
    }), this.clearSavedKeys();
  }
  /**
   * Load and save all keys from localStorage.
   *
   * @private
   */
  loadSavedKeys() {
    const e = this.rootWindow.localStorage.getItem(`${this.prefix}__persistentStateKeys`), n = typeof e == "string" ? JSON.parse(e) : void 0;
    this.savedKeys = n || [];
  }
  /**
   * Save saved key in localStorage.
   *
   * @private
   */
  saveSavedKeys() {
    this.rootWindow.localStorage.setItem(`${this.prefix}__persistentStateKeys`, JSON.stringify(this.savedKeys));
  }
  /**
   * Clear saved key from localStorage.
   *
   * @private
   */
  clearSavedKeys() {
    this.savedKeys.length = 0, this.saveSavedKeys();
  }
}
const Zse = qse;
function Qse(t, e, n) {
  return e = Jse(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Jse(t) {
  var e = eae(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function eae(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
_e.getSingleton().register("persistentStateSave");
_e.getSingleton().register("persistentStateLoad");
_e.getSingleton().register("persistentStateReset");
const jA = "persistentState", tae = 0;
class nae extends gt {
  constructor() {
    super(...arguments), Qse(this, "storage", void 0);
  }
  static get PLUGIN_KEY() {
    return jA;
  }
  static get PLUGIN_PRIORITY() {
    return tae;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link PersistentState#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[jA];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.storage || (this.storage = new Zse(this.hot.rootElement.id, this.hot.rootWindow)), this.addHook("persistentStateSave", (e, n) => this.saveValue(e, n)), this.addHook("persistentStateLoad", (e, n) => this.loadValue(e, n)), this.addHook("persistentStateReset", () => this.resetValue()), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.storage = void 0, super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`persistentState`](@/api/options.md#persistentstate)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Loads the value from local storage.
   *
   * @param {string} key Storage key.
   * @param {object} saveTo Saved value from local storage.
   */
  loadValue(e, n) {
    n.value = this.storage.loadValue(e);
  }
  /**
   * Saves the data to local storage.
   *
   * @param {string} key Storage key.
   * @param {Mixed} value Value to save.
   */
  saveValue(e, n) {
    this.storage.saveValue(e, n);
  }
  /**
   * Resets the data or all data from local storage.
   *
   * @param {string} key [optional] Storage key.
   */
  resetValue(e) {
    typeof e > "u" ? this.storage.resetAll() : this.storage.reset(e);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
function rae(t, e) {
  iae(t, e), e.add(t);
}
function iae(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Yw(t, e, n) {
  return e = oae(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function oae(t) {
  var e = sae(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function sae(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function KA(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const Gw = "search", aae = 190, lae = "htSearchResult", uae = function(t, e, n, r, i) {
  t.getCellMeta(e, n).isSearchResult = i;
}, cae = function(t, e, n) {
  return It(t) || t === null || !t.toLocaleLowerCase || t.length === 0 || It(e) || e === null ? !1 : e.toString().toLocaleLowerCase(n.locale).indexOf(t.toLocaleLowerCase(n.locale)) !== -1;
};
var zw = /* @__PURE__ */ new WeakSet();
class hae extends gt {
  constructor() {
    super(...arguments), rae(this, zw), Yw(this, "callback", uae), Yw(this, "queryMethod", cae), Yw(this, "searchResultClass", lae);
  }
  static get PLUGIN_KEY() {
    return Gw;
  }
  static get PLUGIN_PRIORITY() {
    return aae;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[Gw];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const n = this.hot.getSettings()[Gw];
    this.updatePluginSettings(n), this.addHook("beforeRenderer", function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return KA(e, zw, XA).call(e, ...i);
    }), super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    var e = this;
    const n = function() {
      for (var r = arguments.length, i = new Array(r), o = 0; o < r; o++)
        i[o] = arguments[o];
      return KA(e, zw, XA).call(e, ...i);
    };
    this.hot.addHook("beforeRenderer", n), this.hot.addHookOnce("afterViewRender", () => {
      this.hot.removeHook("beforeRenderer", n);
    }), super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`search`](@/api/options.md#search)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Makes the query.
   *
   * @param {string} queryStr Value to be search.
   * @param {Function} [callback] Callback function performed on cells with values which matches to the searched query.
   * @param {Function} [queryMethod] Query function responsible for determining whether a query matches the value stored in a cell.
   * @returns {object[]} Return an array of objects with `row`, `col`, `data` properties or empty array.
   */
  query(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getCallback(), r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.getQueryMethod();
    const i = this.hot.countRows(), o = this.hot.countCols(), s = [], a = this.hot;
    return xe(0, i - 1, (l) => {
      xe(0, o - 1, (u) => {
        const c = this.hot.getDataAtCell(l, u), d = this.hot.getCellMeta(l, u), g = d.search.callback || n, C = (d.search.queryMethod || r)(e, c, d);
        if (C) {
          const E = {
            row: l,
            col: u,
            data: c
          };
          s.push(E);
        }
        g && g(a, l, u, c, C);
      });
    }), s;
  }
  /**
   * Gets the callback function.
   *
   * @returns {Function} Return the callback function.
   */
  getCallback() {
    return this.callback;
  }
  /**
   * Sets the callback function. This function will be called during querying for each cell.
   *
   * @param {Function} newCallback A callback function.
   */
  setCallback(e) {
    this.callback = e;
  }
  /**
   * Gets the query method function.
   *
   * @returns {Function} Return the query method.
   */
  getQueryMethod() {
    return this.queryMethod;
  }
  /**
   * Sets the query method function. The function is responsible for determining whether a query matches the value stored in a cell.
   *
   * @param {Function} newQueryMethod A function with specific match logic.
   */
  setQueryMethod(e) {
    this.queryMethod = e;
  }
  /**
   * Gets search result cells class name.
   *
   * @returns {string} Return the cell class name.
   */
  getSearchResultClass() {
    return this.searchResultClass;
  }
  /**
   * Sets search result cells class name. This class name will be added to each cell that belongs to the searched query.
   *
   * @param {string} newElementClass CSS class name.
   */
  setSearchResultClass(e) {
    this.searchResultClass = e;
  }
  /**
   * Updates the settings of the plugin.
   *
   * @param {object} searchSettings The plugin settings, taken from Handsontable configuration.
   * @private
   */
  updatePluginSettings(e) {
    Xe(e) && (e.searchResultClass && this.setSearchResultClass(e.searchResultClass), e.queryMethod && this.setQueryMethod(e.queryMethod), e.callback && this.setCallback(e.callback));
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
function XA(t, e, n, r, i, o) {
  const s = o.className || [];
  let a = [];
  typeof s == "string" ? a = s.split(" ") : a.push(...s), this.isEnabled() && o.isSearchResult ? a.includes(this.searchResultClass) || a.push(`${this.searchResultClass}`) : a.includes(this.searchResultClass) && a.splice(a.indexOf(this.searchResultClass), 1), o.className = a.join(" ");
}
function jw(t, e) {
  dae(t, e), e.add(t);
}
function dae(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Fd(t, e, n) {
  return e = fae(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function fae(t) {
  var e = gae(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function gae(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function Kw(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const mae = "touchScroll", pae = 200;
var qA = /* @__PURE__ */ new WeakSet(), ZA = /* @__PURE__ */ new WeakSet(), QA = /* @__PURE__ */ new WeakSet();
class wae extends gt {
  constructor() {
    super(...arguments), jw(this, QA), jw(this, ZA), jw(this, qA), Fd(this, "scrollbars", []), Fd(this, "clones", []), Fd(this, "lockedCollection", !1), Fd(this, "freezeOverlays", !1);
  }
  static get PLUGIN_KEY() {
    return mae;
  }
  static get PLUGIN_PRIORITY() {
    return pae;
  }
  static get SETTING_KEYS() {
    return !0;
  }
  /**
   * Check if plugin is enabled.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return NS();
  }
  /**
   * Enable the plugin.
   */
  enablePlugin() {
    this.enabled || (this.addHook("afterViewRender", () => Kw(this, qA, Cae).call(this)), this.registerEvents(), super.enablePlugin());
  }
  /**
   * Updates the plugin to use the latest options you have specified.
   */
  updatePlugin() {
    this.lockedCollection = !1, super.updatePlugin();
  }
  /**
   * Disable plugin for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
  }
  /**
   * Register all necessary events.
   *
   * @private
   */
  registerEvents() {
    this.addHook("beforeTouchScroll", () => Kw(this, ZA, vae).call(this)), this.addHook("afterMomentumScroll", () => Kw(this, QA, Sae).call(this));
  }
}
function Cae() {
  if (this.lockedCollection)
    return;
  const {
    topOverlay: t,
    bottomOverlay: e,
    inlineStartOverlay: n,
    topInlineStartCornerOverlay: r,
    bottomInlineStartCornerOverlay: i
  } = this.hot.view._wt.wtOverlays;
  this.lockedCollection = !0, this.scrollbars.length = 0, this.scrollbars.push(t), e.clone && this.scrollbars.push(e), this.scrollbars.push(n), r && this.scrollbars.push(r), i && i.clone && this.scrollbars.push(i), this.clones = [], t.needFullRender && this.clones.push(t.clone.wtTable.holder.parentNode), e.needFullRender && this.clones.push(e.clone.wtTable.holder.parentNode), n.needFullRender && this.clones.push(n.clone.wtTable.holder.parentNode), r && this.clones.push(r.clone.wtTable.holder.parentNode), i && i.clone && this.clones.push(i.clone.wtTable.holder.parentNode);
}
function vae() {
  this.freezeOverlays = !0, H(this.clones, (t) => {
    ce(t, "hide-tween");
  });
}
function Sae() {
  this.freezeOverlays = !1, H(this.clones, (t) => {
    Ye(t, "hide-tween"), ce(t, "show-tween");
  }), this.hot._registerTimeout(() => {
    H(this.clones, (t) => {
      Ye(t, "show-tween");
    });
  }, 400), H(this.scrollbars, (t) => {
    t.refresh(), t.resetFixedPosition();
  }), this.hot.view._wt.wtOverlays.syncScrollWithMaster();
}
function yae(t, e) {
  bae(t, e), e.add(t);
}
function bae(t, e) {
  if (e.has(t))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Rae(t, e, n) {
  return e = Eae(e), e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
}
function Eae(t) {
  var e = Tae(t, "string");
  return typeof e == "symbol" ? e : String(e);
}
function Tae(t, e) {
  if (typeof t != "object" || t === null)
    return t;
  var n = t[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(t, e || "default");
    if (typeof r != "object")
      return r;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(t);
}
function _ae(t, e, n) {
  if (!e.has(t))
    throw new TypeError("attempted to get private field on non-instance");
  return n;
}
const mf = "trimRows", Mae = 330;
var JA = /* @__PURE__ */ new WeakSet();
class Oae extends gt {
  constructor() {
    super(...arguments), yae(this, JA), Rae(this, "trimmedRowsMap", null);
  }
  static get PLUGIN_KEY() {
    return mf;
  }
  static get PLUGIN_PRIORITY() {
    return Mae;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[mf];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.trimmedRowsMap = this.hot.rowIndexMapper.registerMap("trimRows", new oh()), this.trimmedRowsMap.addLocalHook("init", () => _ae(this, JA, Aae).call(this)), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`trimRows`](@/api/options.md#trimrows)
   */
  updatePlugin() {
    const e = this.hot.getSettings()[mf];
    Array.isArray(e) && this.hot.batchExecution(() => {
      this.trimmedRowsMap.clear(), H(e, (n) => {
        this.trimmedRowsMap.setValueAtIndex(n, !0);
      });
    }, !0), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.rowIndexMapper.unregisterMap("trimRows"), super.disablePlugin();
  }
  /**
   * Get list of trimmed rows.
   *
   * @returns {Array} Physical rows.
   */
  getTrimmedRows() {
    return this.trimmedRowsMap.getTrimmedIndexes();
  }
  /**
   * Trims the rows provided in the array.
   *
   * @param {number[]} rows Array of physical row indexes.
   * @fires Hooks#beforeTrimRow
   * @fires Hooks#afterTrimRow
   */
  trimRows(e) {
    const n = this.getTrimmedRows(), r = this.isValidConfig(e);
    let i = n;
    r && (i = Array.from(new Set(n.concat(e)))), this.hot.runHooks("beforeTrimRow", n, i, r) !== !1 && (r && this.hot.batchExecution(() => {
      H(e, (s) => {
        this.trimmedRowsMap.setValueAtIndex(s, !0);
      });
    }, !0), this.hot.runHooks("afterTrimRow", n, i, r, r && i.length > n.length));
  }
  /**
   * Trims the row provided as a physical row index (counting from 0).
   *
   * @param {...number} row Physical row index.
   */
  trimRow() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    this.trimRows(n);
  }
  /**
   * Untrims the rows provided in the array.
   *
   * @param {number[]} rows Array of physical row indexes.
   * @fires Hooks#beforeUntrimRow
   * @fires Hooks#afterUntrimRow
   */
  untrimRows(e) {
    const n = this.getTrimmedRows(), r = this.isValidConfig(e);
    let i = n;
    const o = this.trimmedRowsMap.getValues().slice(), s = e.length > 0;
    r && s && (H(e, (l) => {
      o[l] = !1;
    }), i = nn(o, (l, u, c) => (u && l.push(c), l), [])), this.hot.runHooks("beforeUntrimRow", n, i, r && s) !== !1 && (r && s && this.trimmedRowsMap.setValues(o), this.hot.runHooks("afterUntrimRow", n, i, r && s, r && i.length < n.length));
  }
  /**
   * Untrims the row provided as a physical row index (counting from 0).
   *
   * @param {...number} row Physical row index.
   */
  untrimRow() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    this.untrimRows(n);
  }
  /**
   * Checks if given row is hidden.
   *
   * @param {number} physicalRow Physical row index.
   * @returns {boolean}
   */
  isTrimmed(e) {
    return this.trimmedRowsMap.getValueAtIndex(e) || !1;
  }
  /**
   * Untrims all trimmed rows.
   */
  untrimAll() {
    this.untrimRows(this.getTrimmedRows());
  }
  /**
   * Get if trim config is valid. Check whether all of the provided physical row indexes are within source data.
   *
   * @param {Array} trimmedRows List of physical row indexes.
   * @returns {boolean}
   */
  isValidConfig(e) {
    const n = this.hot.countSourceRows();
    return e.every((r) => Number.isInteger(r) && r >= 0 && r < n);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
function Aae() {
  const t = this.hot.getSettings()[mf];
  Array.isArray(t) && this.hot.batchExecution(() => {
    H(t, (e) => {
      this.trimmedRowsMap.setValueAtIndex(e, !0);
    });
  }, !0);
}
const fN = "undoRedo", Iae = "undoRedo";
function Te(t) {
  const e = this;
  this.instance = t, this.doneActions = [], this.undoneActions = [], this.ignoreNewActions = !1, this.enabled = !1, t.addHook("afterChange", function(n, r) {
    const i = n && n.length;
    if (!i || !n.find((a) => {
      const [, , l, u] = a;
      return l !== u;
    }))
      return;
    const s = () => {
      const a = n.reduce((u, c) => (u.push([...c]), u), []);
      H(a, (u) => {
        u[1] = t.propToCol(u[1]);
      });
      const l = i > 1 ? this.getSelected() : [[a[0][0], a[0][1]]];
      return new Te.ChangeAction(a, l);
    };
    e.done(s, r);
  }), t.addHook("afterCreateRow", (n, r, i) => {
    e.done(() => new Te.CreateRowAction(n, r), i);
  }), t.addHook("beforeRemoveRow", (n, r, i, o) => {
    const s = () => {
      const a = t.toPhysicalRow(n), l = Wn(e.instance.getSourceData(a, 0, a + r - 1, e.instance.countSourceCols() - 1));
      return new Te.RemoveRowAction(a, l, t.getSettings().fixedRowsBottom, t.getSettings().fixedRowsTop, t.rowIndexMapper.getIndexesSequence());
    };
    e.done(s, o);
  }), t.addHook("afterCreateCol", (n, r, i) => {
    e.done(() => new Te.CreateColumnAction(n, r), i);
  }), t.addHook("beforeRemoveCol", (n, r, i, o) => {
    const s = () => {
      const a = e.instance.getSourceDataArray(), l = (e.instance.countCols() + n) % e.instance.countCols(), u = [], c = [], d = [];
      xe(a.length - 1, (C) => {
        const E = [], I = a[C];
        xe(l, l + (r - 1), (M) => {
          E.push(I[t.toPhysicalColumn(M)]);
        }), u.push(E);
      }), xe(r - 1, (C) => {
        d.push(t.toPhysicalColumn(l + C));
      }), Array.isArray(t.getSettings().colHeaders) && xe(r - 1, (C) => {
        c.push(t.getSettings().colHeaders[t.toPhysicalColumn(l + C)] || null);
      });
      const g = t.columnIndexMapper.getIndexesSequence(), p = t.rowIndexMapper.getIndexesSequence();
      return new Te.RemoveColumnAction(l, d, u, c, g, p, t.getSettings().fixedColumnsStart);
    };
    e.done(s, o);
  }), t.addHook("beforeCellAlignment", (n, r, i, o) => {
    e.done(() => new Te.CellAlignmentAction(n, r, i, o));
  }), t.addHook("beforeFilter", (n) => {
    e.done(() => new Te.FiltersAction(n));
  }), t.addHook("beforeRowMove", (n, r) => {
    n !== !1 && e.done(() => new Te.RowMoveAction(n, r));
  }), t.addHook("beforeMergeCells", (n, r) => {
    r || e.done(() => new Te.MergeCellsAction(t, n));
  }), t.addHook("afterUnmergeCells", (n, r) => {
    r || e.done(() => new Te.UnmergeCellsAction(t, n));
  }), t.addHook("afterInit", () => {
    e.init();
  });
}
Te.prototype.done = function(t, e) {
  if (this.ignoreNewActions || e === "UndoRedo.undo" || e === "UndoRedo.redo" || e === "auto")
    return;
  const r = this.doneActions.slice();
  if (this.instance.runHooks("beforeUndoStackChange", r, e) === !1)
    return;
  const o = t(), s = this.undoneActions.slice();
  this.doneActions.push(o), this.instance.runHooks("afterUndoStackChange", r, this.doneActions.slice()), this.instance.runHooks("beforeRedoStackChange", s), this.undoneActions.length = 0, this.instance.runHooks("afterRedoStackChange", s, this.undoneActions.slice());
};
Te.prototype.undo = function() {
  if (this.isUndoAvailable()) {
    const t = this.doneActions.slice();
    this.instance.runHooks("beforeUndoStackChange", t);
    const e = this.doneActions.pop();
    this.instance.runHooks("afterUndoStackChange", t, this.doneActions.slice());
    const n = Wn(e);
    if (this.instance.runHooks("beforeUndo", n) === !1)
      return;
    this.ignoreNewActions = !0;
    const i = this, o = this.undoneActions.slice();
    this.instance.runHooks("beforeRedoStackChange", o), e.undo(this.instance, () => {
      i.ignoreNewActions = !1, i.undoneActions.push(e);
    }), this.instance.runHooks("afterRedoStackChange", o, this.undoneActions.slice()), this.instance.runHooks("afterUndo", n);
  }
};
Te.prototype.redo = function() {
  if (this.isRedoAvailable()) {
    const t = this.undoneActions.slice();
    this.instance.runHooks("beforeRedoStackChange", t);
    const e = this.undoneActions.pop();
    this.instance.runHooks("afterRedoStackChange", t, this.undoneActions.slice());
    const n = Wn(e);
    if (this.instance.runHooks("beforeRedo", n) === !1)
      return;
    this.ignoreNewActions = !0;
    const i = this, o = this.doneActions.slice();
    this.instance.runHooks("beforeUndoStackChange", o), e.redo(this.instance, () => {
      i.ignoreNewActions = !1, i.doneActions.push(e);
    }), this.instance.runHooks("afterUndoStackChange", o, this.doneActions.slice()), this.instance.runHooks("afterRedo", n);
  }
};
Te.prototype.isUndoAvailable = function() {
  return this.doneActions.length > 0;
};
Te.prototype.isRedoAvailable = function() {
  return this.undoneActions.length > 0;
};
Te.prototype.clear = function() {
  this.doneActions.length = 0, this.undoneActions.length = 0;
};
Te.prototype.isEnabled = function() {
  return this.enabled;
};
Te.prototype.enable = function() {
  if (this.isEnabled())
    return;
  const t = this.instance;
  this.enabled = !0, Hae(t), this.registerShortcuts(), t.addHook("afterChange", gN);
};
Te.prototype.disable = function() {
  if (!this.isEnabled())
    return;
  const t = this.instance;
  this.enabled = !1, Dae(t), this.unregisterShortcuts(), t.removeHook("afterChange", gN);
};
Te.prototype.destroy = function() {
  this.clear(), this.instance = null, this.doneActions = null, this.undoneActions = null;
};
Te.Action = function() {
};
Te.Action.prototype.undo = function() {
};
Te.Action.prototype.redo = function() {
};
Te.ChangeAction = function(t, e) {
  this.changes = t, this.selected = e, this.actionType = "change";
};
Bo(Te.ChangeAction, Te.Action);
Te.ChangeAction.prototype.undo = function(t, e) {
  const n = Wn(this.changes), r = t.countEmptyRows(!0), i = t.countEmptyCols(!0);
  for (let o = 0, s = n.length; o < s; o++)
    n[o].splice(3, 1);
  t.addHookOnce("afterChange", e), t.setDataAtCell(n, null, null, "UndoRedo.undo");
  for (let o = 0, s = n.length; o < s; o++) {
    const [a, l] = n[o];
    t.getSettings().minSpareRows && a + 1 + t.getSettings().minSpareRows === t.countRows() && r === t.getSettings().minSpareRows && (t.alter("remove_row", parseInt(a + 1, 10), t.getSettings().minSpareRows), t.undoRedo.doneActions.pop()), t.getSettings().minSpareCols && l + 1 + t.getSettings().minSpareCols === t.countCols() && i === t.getSettings().minSpareCols && (t.alter("remove_col", parseInt(l + 1, 10), t.getSettings().minSpareCols), t.undoRedo.doneActions.pop());
  }
  t.selectCells(this.selected, !1, !1);
};
Te.ChangeAction.prototype.redo = function(t, e) {
  const n = Wn(this.changes);
  for (let r = 0, i = n.length; r < i; r++)
    n[r].splice(2, 1);
  t.addHookOnce("afterChange", e), t.setDataAtCell(n, null, null, "UndoRedo.redo"), this.selected && t.selectCells(this.selected, !1, !1);
};
Te.CreateRowAction = function(t, e) {
  this.index = t, this.amount = e, this.actionType = "insert_row";
};
Bo(Te.CreateRowAction, Te.Action);
Te.CreateRowAction.prototype.undo = function(t, e) {
  const n = t.countRows(), r = t.getSettings().minSpareRows;
  this.index >= n && this.index - r < n && (this.index -= r), t.addHookOnce("afterRemoveRow", e), t.alter("remove_row", this.index, this.amount, "UndoRedo.undo");
};
Te.CreateRowAction.prototype.redo = function(t, e) {
  t.addHookOnce("afterCreateRow", e), t.alter("insert_row_above", this.index, this.amount, "UndoRedo.redo");
};
Te.RemoveRowAction = function(t, e, n, r, i) {
  this.index = t, this.data = e, this.actionType = "remove_row", this.fixedRowsBottom = n, this.fixedRowsTop = r, this.rowIndexesSequence = i;
};
Bo(Te.RemoveRowAction, Te.Action);
Te.RemoveRowAction.prototype.undo = function(t, e) {
  const n = t.getSettings(), r = [];
  n.fixedRowsBottom = this.fixedRowsBottom, n.fixedRowsTop = this.fixedRowsTop, this.data.forEach((i, o) => {
    Object.keys(i).forEach((s) => {
      const a = parseInt(s, 10);
      r.push([this.index + o, isNaN(a) ? s : a, i[s]]);
    });
  }), t.alter("insert_row_above", this.index, this.data.length, "UndoRedo.undo"), t.addHookOnce("afterViewRender", e), t.setSourceDataAtCell(r, null, null, "UndoRedo.undo"), t.rowIndexMapper.setIndexesSequence(this.rowIndexesSequence);
};
Te.RemoveRowAction.prototype.redo = function(t, e) {
  t.addHookOnce("afterRemoveRow", e), t.alter("remove_row", this.index, this.data.length, "UndoRedo.redo");
};
Te.CreateColumnAction = function(t, e) {
  this.index = t, this.amount = e, this.actionType = "insert_col";
};
Bo(Te.CreateColumnAction, Te.Action);
Te.CreateColumnAction.prototype.undo = function(t, e) {
  t.addHookOnce("afterRemoveCol", e), t.alter("remove_col", this.index, this.amount, "UndoRedo.undo");
};
Te.CreateColumnAction.prototype.redo = function(t, e) {
  t.addHookOnce("afterCreateCol", e), t.alter("insert_col_start", this.index, this.amount, "UndoRedo.redo");
};
Te.RemoveColumnAction = function(t, e, n, r, i, o, s) {
  this.index = t, this.indexes = e, this.data = n, this.amount = this.data[0].length, this.headers = r, this.columnPositions = i.slice(0), this.rowPositions = o.slice(0), this.actionType = "remove_col", this.fixedColumnsStart = s;
};
Bo(Te.RemoveColumnAction, Te.Action);
Te.RemoveColumnAction.prototype.undo = function(t, e) {
  const n = t.getSettings();
  n.fixedColumnsStart = this.fixedColumnsStart;
  const r = this.indexes.slice(0).sort(), i = (u, c, d) => d[this.indexes.indexOf(r[c])], o = this.data.length, s = [];
  for (let u = 0; u < o; u++)
    s.push(qe(this.data[u], i));
  const a = qe(this.headers, i), l = [];
  t.alter("insert_col_start", this.indexes[0], this.indexes.length, "UndoRedo.undo"), H(t.getSourceDataArray(), (u, c) => {
    H(r, (d, g) => {
      u[d] = s[c][g], l.push([c, d, u[d]]);
    });
  }), t.setSourceDataAtCell(l, void 0, void 0, "UndoRedo.undo"), typeof this.headers < "u" && H(a, (u, c) => {
    t.getSettings().colHeaders[r[c]] = u;
  }), t.batchExecution(() => {
    t.rowIndexMapper.setIndexesSequence(this.rowPositions), t.columnIndexMapper.setIndexesSequence(this.columnPositions);
  }, !0), t.addHookOnce("afterViewRender", e), t.render();
};
Te.RemoveColumnAction.prototype.redo = function(t, e) {
  t.addHookOnce("afterRemoveCol", e), t.alter("remove_col", this.index, this.amount, "UndoRedo.redo");
};
Te.CellAlignmentAction = function(t, e, n, r) {
  this.stateBefore = t, this.range = e, this.type = n, this.alignment = r;
};
Te.CellAlignmentAction.prototype.undo = function(t, e) {
  H(this.range, (n) => {
    n.forAll((r, i) => {
      r >= 0 && i >= 0 && t.setCellMeta(r, i, "className", this.stateBefore[r][i] || " htLeft");
    });
  }), t.addHookOnce("afterViewRender", e), t.render();
};
Te.CellAlignmentAction.prototype.redo = function(t, e) {
  ss(this.range, this.type, this.alignment, (n, r) => t.getCellMeta(n, r), (n, r, i, o) => t.setCellMeta(n, r, i, o)), t.addHookOnce("afterViewRender", e), t.render();
};
Te.FiltersAction = function(t) {
  this.conditionsStack = t, this.actionType = "filter";
};
Bo(Te.FiltersAction, Te.Action);
Te.FiltersAction.prototype.undo = function(t, e) {
  const n = t.getPlugin("filters");
  t.addHookOnce("afterViewRender", e), n.conditionCollection.importAllConditions(this.conditionsStack.slice(0, this.conditionsStack.length - 1)), n.filter();
};
Te.FiltersAction.prototype.redo = function(t, e) {
  const n = t.getPlugin("filters");
  t.addHookOnce("afterViewRender", e), n.conditionCollection.importAllConditions(this.conditionsStack), n.filter();
};
class Pae extends Te.Action {
  constructor(e, n) {
    super(), this.cellRange = n;
    const r = this.cellRange.getTopStartCorner(), i = this.cellRange.getBottomEndCorner();
    this.rangeData = e.getData(r.row, r.col, i.row, i.col);
  }
  undo(e, n) {
    const r = e.getPlugin("mergeCells");
    e.addHookOnce("afterViewRender", n), r.unmergeRange(this.cellRange, !0);
    const i = this.cellRange.getTopStartCorner();
    e.populateFromArray(i.row, i.col, this.rangeData, void 0, void 0, "MergeCells");
  }
  redo(e, n) {
    const r = e.getPlugin("mergeCells");
    e.addHookOnce("afterViewRender", n), r.mergeRange(this.cellRange);
  }
}
Te.MergeCellsAction = Pae;
class xae extends Te.Action {
  constructor(e, n) {
    super(), this.cellRange = n;
  }
  undo(e, n) {
    const r = e.getPlugin("mergeCells");
    e.addHookOnce("afterViewRender", n), r.mergeRange(this.cellRange, !0);
  }
  redo(e, n) {
    const r = e.getPlugin("mergeCells");
    e.addHookOnce("afterViewRender", n), r.unmergeRange(this.cellRange, !0), e.render();
  }
}
Te.UnmergeCellsAction = xae;
Te.RowMoveAction = function(t, e) {
  this.rows = t.slice(), this.finalIndex = e, this.actionType = "row_move";
};
Bo(Te.RowMoveAction, Te.Action);
Te.RowMoveAction.prototype.undo = function(t, e) {
  const n = t.getPlugin("manualRowMove"), r = [].concat(this.rows), i = r.filter((a) => a > this.finalIndex), o = r.filter((a) => a <= this.finalIndex), s = i.sort((a, l) => l - a).concat(o.sort((a, l) => a - l));
  t.addHookOnce("afterViewRender", e);
  for (let a = 0; a < s.length; a += 1) {
    const l = t.toVisualRow(s[a]);
    n.moveRow(l, s[a]);
  }
  t.render(), t.deselectCell(), t.selectRows(this.rows[0], this.rows[0] + this.rows.length - 1);
};
Te.RowMoveAction.prototype.redo = function(t, e) {
  const n = t.getPlugin("manualRowMove");
  t.addHookOnce("afterViewRender", e), n.moveRows(this.rows.slice(), this.finalIndex), t.render(), t.deselectCell(), t.selectRows(this.finalIndex, this.finalIndex + this.rows.length - 1);
};
Te.prototype.init = function() {
  const t = this.instance.getSettings().undo, e = typeof t > "u" || t;
  this.instance.undoRedo || (this.instance.undoRedo = this), e ? this.instance.undoRedo.enable() : this.instance.undoRedo.disable();
};
Te.prototype.registerShortcuts = function() {
  const e = this.instance.getShortcutManager().getContext("grid"), r = {
    runOnlyIf: (i) => !i.altKey,
    group: fN
  };
  e.addShortcuts([{
    keys: [["Control/Meta", "z"]],
    callback: () => {
      this.undo();
    }
  }, {
    keys: [["Control/Meta", "y"], ["Control/Meta", "Shift", "z"]],
    callback: () => {
      this.redo();
    }
  }], r);
};
Te.prototype.unregisterShortcuts = function() {
  this.instance.getShortcutManager().getContext("grid").removeShortcutsByGroup(fN);
};
function gN(t, e) {
  const n = this;
  if (e === "loadData")
    return n.undoRedo.clear();
}
function Hae(t) {
  t.undo = function() {
    return t.undoRedo.undo();
  }, t.redo = function() {
    return t.undoRedo.redo();
  }, t.isUndoAvailable = function() {
    return t.undoRedo.isUndoAvailable();
  }, t.isRedoAvailable = function() {
    return t.undoRedo.isRedoAvailable();
  }, t.clearUndo = function() {
    return t.undoRedo.clear();
  };
}
function Dae(t) {
  delete t.undo, delete t.redo, delete t.isUndoAvailable, delete t.isRedoAvailable, delete t.clearUndo;
}
const fh = _e.getSingleton();
fh.add("afterUpdateSettings", function() {
  var t;
  (t = this.getPlugin("undoRedo")) === null || t === void 0 || t.init();
});
fh.register("beforeUndo");
fh.register("afterUndo");
fh.register("beforeRedo");
fh.register("afterRedo");
Te.PLUGIN_KEY = Iae;
Te.SETTING_KEYS = !0;
function Nae() {
  dt(hc), dt(m8), dt(dc), dt(z8), dt(t7), dt(TH), dt(z7), dt(P5), dt(um), dt(tQ), dt(TQ), dt(HQ), dt(hm), dt(sJ), dt(gte), dt(Xte), dt(bne), dt(Dne), dt(jne), dt(lre), dt(vre), dt(Vre), dt(Zre), dt(_ie), dt(toe), dt(soe), dt(Woe), dt(xse), dt(nae), dt(hae), dt(wae), dt(Oae), dt(Te);
}
function Lae() {
  V6(), n9(), c9(), x9(), Nae();
}
function $ae(t) {
  const e = typeof window > "u" ? !1 : window.jQuery;
  e && (e.fn.handsontable = function(n) {
    const r = this.first();
    let i = r.data("handsontable");
    if (typeof n != "string") {
      const u = n || {};
      return i ? i.updateSettings(u) : (i = new t.Core(r[0], u), r.data("handsontable", i), i.init()), r;
    }
    let o;
    if (i)
      if (typeof i[n] < "u") {
        for (var s = arguments.length, a = new Array(s > 1 ? s - 1 : 0), l = 1; l < s; l++)
          a[l - 1] = arguments[l];
        o = i[n].call(i, ...a), n === "destroy" && r.removeData();
      } else
        throw new Error(`Handsontable do not provide action: ${n}`);
    return o;
  });
}
var Xw, qw, Zw, Qw, Jw;
Lae();
$ae(Be);
Be.__GhostTable = Ub;
Be._getListenersCounter = tz;
Be._getRegisteredMapsCounter = wX;
Be.EventManager = _r;
const kae = [AY, LG, rX, i9, xj, wG, HY, wz, HG, NY, FG, pz], Fae = [fG, WG];
Be.helper = {};
Be.dom = {};
H(kae, (t) => {
  H(Object.getOwnPropertyNames(t), (e) => {
    e.charAt(0) !== "_" && (Be.helper[e] = t[e]);
  });
});
H(Fae, (t) => {
  H(Object.getOwnPropertyNames(t), (e) => {
    e.charAt(0) !== "_" && (Be.dom[e] = t[e]);
  });
});
Be.cellTypes = (Xw = Be.cellTypes) !== null && Xw !== void 0 ? Xw : {};
H($q(), (t) => {
  Be.cellTypes[t] = Ab(t);
});
Be.cellTypes.registerCellType = $r;
Be.cellTypes.getCellType = Ab;
Be.editors = (qw = Be.editors) !== null && qw !== void 0 ? qw : {};
H(KG(), (t) => {
  Be.editors[`${Fn(t)}Editor`] = Hf(t);
});
Be.editors.registerEditor = hr;
Be.editors.getEditor = Hf;
Be.renderers = (Zw = Be.renderers) !== null && Zw !== void 0 ? Zw : {};
H(xz(), (t) => {
  const e = Lf(t);
  t === "base" && (Be.renderers.cellDecorator = e), Be.renderers[`${Fn(t)}Renderer`] = e;
});
Be.renderers.registerRenderer = ki;
Be.renderers.getRenderer = Lf;
Be.validators = (Qw = Be.validators) !== null && Qw !== void 0 ? Qw : {};
H(Nz(), (t) => {
  Be.validators[`${Fn(t)}Validator`] = AS(t);
});
Be.validators.registerValidator = Il;
Be.validators.getValidator = AS;
Be.plugins = (Jw = Be.plugins) !== null && Jw !== void 0 ? Jw : {};
H(OS(), (t) => {
  Be.plugins[t] = nh(t);
});
Be.plugins[`${Fn(gt.PLUGIN_KEY)}Plugin`] = gt;
Be.plugins.registerPlugin = dt;
Be.plugins.getPlugin = nh;
class Wae extends Be.editors.BaseEditor {
  init() {
    this.select = this.hot.rootDocument.createElement("div"), this.select.classList.add("htSelectEditor"), this.select.style.display = "none", this.hot.rootElement.appendChild(this.select);
  }
  prepare(e, n, r, i, o, s) {
    super.prepare(e, n, r, i, o, s), this.close(), this.row = e, this.col = n, this.originalValue = o, this.renderStyle = this.cellProperties.renderStyle, this.renderNode = this.cellProperties.renderNode, this.renderNode(null);
  }
  // onChange=(e,blClose)=> { 
  //   this._blClose=blClose
  //   this.hot.setDataAtCell(this.row, this.col, e)
  //   if(blClose){
  //     this.select.style.display = 'none';
  //   }
  // }
  getValue() {
    return this.select.value;
  }
  setValue(e) {
    this.select.value = e;
  }
  open() {
    const {
      top: e,
      start: n,
      width: r,
      height: i
    } = this.getEditedCellRect(), o = this.select.style;
    this.cellProperties.afterRenderEdit(this.row, this.col, this.originalValue, this.hot, this), this._opened = !0, this.renderNode(this.cellProperties.editorReactNode, {
      row: this.row,
      col: this.col,
      hot: this.hot,
      originalValue: this.originalValue
    }), o.height = `${i}px`, o.minWidth = `${r}px`, o.top = `${e}px`, o[this.hot.isRtl() ? "right" : "left"] = `${n}px`, o.margin = "0px", o.display = "", this.renderStyle(o);
  }
  focus() {
    this.select.focus();
  }
  close() {
    this.isClose && (this._opened = !1, this.select.style.display = "none", this.renderStyle(this.select.style), this.renderNode(null), delete this.isClose), typeof this.isClose > "u" && (this.select.style.display = "none", this.renderStyle && this.renderStyle(this.select.style));
  }
}
const Vae = pN({});
var Bae = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, eC = Math.ceil, Nr = Math.floor, ur = "[BigNumber Error] ", e1 = ur + "Number primitive has more than 15 significant digits: ", si = 1e14, Ke = 14, tC = 9007199254740991, nC = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], is = 1e7, Rn = 1e9;
function mN(t) {
  var e, n, r, i = y.prototype = { constructor: y, toString: null, valueOf: null }, o = new y(1), s = 20, a = 4, l = -7, u = 21, c = -1e7, d = 1e7, g = !1, p = 1, C = 0, E = {
    prefix: "",
    groupSize: 3,
    secondaryGroupSize: 0,
    groupSeparator: ",",
    decimalSeparator: ".",
    fractionGroupSize: 0,
    fractionGroupSeparator: " ",
    // non-breaking space
    suffix: ""
  }, I = "0123456789abcdefghijklmnopqrstuvwxyz", M = !0;
  function y(v, S) {
    var b, L, P, x, W, D, B, z, w = this;
    if (!(w instanceof y))
      return new y(v, S);
    if (S == null) {
      if (v && v._isBigNumber === !0) {
        w.s = v.s, !v.c || v.e > d ? w.c = w.e = null : v.e < c ? w.c = [w.e = 0] : (w.e = v.e, w.c = v.c.slice());
        return;
      }
      if ((D = typeof v == "number") && v * 0 == 0) {
        if (w.s = 1 / v < 0 ? (v = -v, -1) : 1, v === ~~v) {
          for (x = 0, W = v; W >= 10; W /= 10, x++)
            ;
          x > d ? w.c = w.e = null : (w.e = x, w.c = [v]);
          return;
        }
        z = String(v);
      } else {
        if (!Bae.test(z = String(v)))
          return r(w, z, D);
        w.s = z.charCodeAt(0) == 45 ? (z = z.slice(1), -1) : 1;
      }
      (x = z.indexOf(".")) > -1 && (z = z.replace(".", "")), (W = z.search(/e/i)) > 0 ? (x < 0 && (x = W), x += +z.slice(W + 1), z = z.substring(0, W)) : x < 0 && (x = z.length);
    } else {
      if (zt(S, 2, I.length, "Base"), S == 10 && M)
        return w = new y(v), q(w, s + w.e + 1, a);
      if (z = String(v), D = typeof v == "number") {
        if (v * 0 != 0)
          return r(w, z, D, S);
        if (w.s = 1 / v < 0 ? (z = z.slice(1), -1) : 1, y.DEBUG && z.replace(/^0\.0*|\./, "").length > 15)
          throw Error(e1 + v);
      } else
        w.s = z.charCodeAt(0) === 45 ? (z = z.slice(1), -1) : 1;
      for (b = I.slice(0, S), x = W = 0, B = z.length; W < B; W++)
        if (b.indexOf(L = z.charAt(W)) < 0) {
          if (L == ".") {
            if (W > x) {
              x = B;
              continue;
            }
          } else if (!P && (z == z.toUpperCase() && (z = z.toLowerCase()) || z == z.toLowerCase() && (z = z.toUpperCase()))) {
            P = !0, W = -1, x = 0;
            continue;
          }
          return r(w, String(v), D, S);
        }
      D = !1, z = n(z, S, 10, w.s), (x = z.indexOf(".")) > -1 ? z = z.replace(".", "") : x = z.length;
    }
    for (W = 0; z.charCodeAt(W) === 48; W++)
      ;
    for (B = z.length; z.charCodeAt(--B) === 48; )
      ;
    if (z = z.slice(W, ++B)) {
      if (B -= W, D && y.DEBUG && B > 15 && (v > tC || v !== Nr(v)))
        throw Error(e1 + w.s * v);
      if ((x = x - W - 1) > d)
        w.c = w.e = null;
      else if (x < c)
        w.c = [w.e = 0];
      else {
        if (w.e = x, w.c = [], W = (x + 1) % Ke, x < 0 && (W += Ke), W < B) {
          for (W && w.c.push(+z.slice(0, W)), B -= Ke; W < B; )
            w.c.push(+z.slice(W, W += Ke));
          W = Ke - (z = z.slice(W)).length;
        } else
          W -= B;
        for (; W--; z += "0")
          ;
        w.c.push(+z);
      }
    } else
      w.c = [w.e = 0];
  }
  y.clone = mN, y.ROUND_UP = 0, y.ROUND_DOWN = 1, y.ROUND_CEIL = 2, y.ROUND_FLOOR = 3, y.ROUND_HALF_UP = 4, y.ROUND_HALF_DOWN = 5, y.ROUND_HALF_EVEN = 6, y.ROUND_HALF_CEIL = 7, y.ROUND_HALF_FLOOR = 8, y.EUCLID = 9, y.config = y.set = function(v) {
    var S, b;
    if (v != null)
      if (typeof v == "object") {
        if (v.hasOwnProperty(S = "DECIMAL_PLACES") && (b = v[S], zt(b, 0, Rn, S), s = b), v.hasOwnProperty(S = "ROUNDING_MODE") && (b = v[S], zt(b, 0, 8, S), a = b), v.hasOwnProperty(S = "EXPONENTIAL_AT") && (b = v[S], b && b.pop ? (zt(b[0], -Rn, 0, S), zt(b[1], 0, Rn, S), l = b[0], u = b[1]) : (zt(b, -Rn, Rn, S), l = -(u = b < 0 ? -b : b))), v.hasOwnProperty(S = "RANGE"))
          if (b = v[S], b && b.pop)
            zt(b[0], -Rn, -1, S), zt(b[1], 1, Rn, S), c = b[0], d = b[1];
          else if (zt(b, -Rn, Rn, S), b)
            c = -(d = b < 0 ? -b : b);
          else
            throw Error(ur + S + " cannot be zero: " + b);
        if (v.hasOwnProperty(S = "CRYPTO"))
          if (b = v[S], b === !!b)
            if (b)
              if (typeof crypto < "u" && crypto && (crypto.getRandomValues || crypto.randomBytes))
                g = b;
              else
                throw g = !b, Error(ur + "crypto unavailable");
            else
              g = b;
          else
            throw Error(ur + S + " not true or false: " + b);
        if (v.hasOwnProperty(S = "MODULO_MODE") && (b = v[S], zt(b, 0, 9, S), p = b), v.hasOwnProperty(S = "POW_PRECISION") && (b = v[S], zt(b, 0, Rn, S), C = b), v.hasOwnProperty(S = "FORMAT"))
          if (b = v[S], typeof b == "object")
            E = b;
          else
            throw Error(ur + S + " not an object: " + b);
        if (v.hasOwnProperty(S = "ALPHABET"))
          if (b = v[S], typeof b == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(b))
            M = b.slice(0, 10) == "0123456789", I = b;
          else
            throw Error(ur + S + " invalid: " + b);
      } else
        throw Error(ur + "Object expected: " + v);
    return {
      DECIMAL_PLACES: s,
      ROUNDING_MODE: a,
      EXPONENTIAL_AT: [l, u],
      RANGE: [c, d],
      CRYPTO: g,
      MODULO_MODE: p,
      POW_PRECISION: C,
      FORMAT: E,
      ALPHABET: I
    };
  }, y.isBigNumber = function(v) {
    if (!v || v._isBigNumber !== !0)
      return !1;
    if (!y.DEBUG)
      return !0;
    var S, b, L = v.c, P = v.e, x = v.s;
    e:
      if ({}.toString.call(L) == "[object Array]") {
        if ((x === 1 || x === -1) && P >= -Rn && P <= Rn && P === Nr(P)) {
          if (L[0] === 0) {
            if (P === 0 && L.length === 1)
              return !0;
            break e;
          }
          if (S = (P + 1) % Ke, S < 1 && (S += Ke), String(L[0]).length == S) {
            for (S = 0; S < L.length; S++)
              if (b = L[S], b < 0 || b >= si || b !== Nr(b))
                break e;
            if (b !== 0)
              return !0;
          }
        }
      } else if (L === null && P === null && (x === null || x === 1 || x === -1))
        return !0;
    throw Error(ur + "Invalid BigNumber: " + v);
  }, y.maximum = y.max = function() {
    return X(arguments, -1);
  }, y.minimum = y.min = function() {
    return X(arguments, 1);
  }, y.random = function() {
    var v = 9007199254740992, S = Math.random() * v & 2097151 ? function() {
      return Nr(Math.random() * v);
    } : function() {
      return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
    };
    return function(b) {
      var L, P, x, W, D, B = 0, z = [], w = new y(o);
      if (b == null ? b = s : zt(b, 0, Rn), W = eC(b / Ke), g)
        if (crypto.getRandomValues) {
          for (L = crypto.getRandomValues(new Uint32Array(W *= 2)); B < W; )
            D = L[B] * 131072 + (L[B + 1] >>> 11), D >= 9e15 ? (P = crypto.getRandomValues(new Uint32Array(2)), L[B] = P[0], L[B + 1] = P[1]) : (z.push(D % 1e14), B += 2);
          B = W / 2;
        } else if (crypto.randomBytes) {
          for (L = crypto.randomBytes(W *= 7); B < W; )
            D = (L[B] & 31) * 281474976710656 + L[B + 1] * 1099511627776 + L[B + 2] * 4294967296 + L[B + 3] * 16777216 + (L[B + 4] << 16) + (L[B + 5] << 8) + L[B + 6], D >= 9e15 ? crypto.randomBytes(7).copy(L, B) : (z.push(D % 1e14), B += 7);
          B = W / 7;
        } else
          throw g = !1, Error(ur + "crypto unavailable");
      if (!g)
        for (; B < W; )
          D = S(), D < 9e15 && (z[B++] = D % 1e14);
      for (W = z[--B], b %= Ke, W && b && (D = nC[Ke - b], z[B] = Nr(W / D) * D); z[B] === 0; z.pop(), B--)
        ;
      if (B < 0)
        z = [x = 0];
      else {
        for (x = -1; z[0] === 0; z.splice(0, 1), x -= Ke)
          ;
        for (B = 1, D = z[0]; D >= 10; D /= 10, B++)
          ;
        B < Ke && (x -= Ke - B);
      }
      return w.e = x, w.c = z, w;
    };
  }(), y.sum = function() {
    for (var v = 1, S = arguments, b = new y(S[0]); v < S.length; )
      b = b.plus(S[v++]);
    return b;
  }, n = function() {
    var v = "0123456789";
    function S(b, L, P, x) {
      for (var W, D = [0], B, z = 0, w = b.length; z < w; ) {
        for (B = D.length; B--; D[B] *= L)
          ;
        for (D[0] += x.indexOf(b.charAt(z++)), W = 0; W < D.length; W++)
          D[W] > P - 1 && (D[W + 1] == null && (D[W + 1] = 0), D[W + 1] += D[W] / P | 0, D[W] %= P);
      }
      return D.reverse();
    }
    return function(b, L, P, x, W) {
      var D, B, z, w, h, f, m, T, O = b.indexOf("."), _ = s, Y = a;
      for (O >= 0 && (w = C, C = 0, b = b.replace(".", ""), T = new y(L), f = T.pow(b.length - O), C = w, T.c = S(
        wo(Dr(f.c), f.e, "0"),
        10,
        P,
        v
      ), T.e = T.c.length), m = S(b, L, P, W ? (D = I, v) : (D = v, I)), z = w = m.length; m[--w] == 0; m.pop())
        ;
      if (!m[0])
        return D.charAt(0);
      if (O < 0 ? --z : (f.c = m, f.e = z, f.s = x, f = e(f, T, _, Y, P), m = f.c, h = f.r, z = f.e), B = z + _ + 1, O = m[B], w = P / 2, h = h || B < 0 || m[B + 1] != null, h = Y < 4 ? (O != null || h) && (Y == 0 || Y == (f.s < 0 ? 3 : 2)) : O > w || O == w && (Y == 4 || h || Y == 6 && m[B - 1] & 1 || Y == (f.s < 0 ? 8 : 7)), B < 1 || !m[0])
        b = h ? wo(D.charAt(1), -_, D.charAt(0)) : D.charAt(0);
      else {
        if (m.length = B, h)
          for (--P; ++m[--B] > P; )
            m[B] = 0, B || (++z, m = [1].concat(m));
        for (w = m.length; !m[--w]; )
          ;
        for (O = 0, b = ""; O <= w; b += D.charAt(m[O++]))
          ;
        b = wo(b, z, D.charAt(0));
      }
      return b;
    };
  }(), e = function() {
    function v(L, P, x) {
      var W, D, B, z, w = 0, h = L.length, f = P % is, m = P / is | 0;
      for (L = L.slice(); h--; )
        B = L[h] % is, z = L[h] / is | 0, W = m * B + z * f, D = f * B + W % is * is + w, w = (D / x | 0) + (W / is | 0) + m * z, L[h] = D % x;
      return w && (L = [w].concat(L)), L;
    }
    function S(L, P, x, W) {
      var D, B;
      if (x != W)
        B = x > W ? 1 : -1;
      else
        for (D = B = 0; D < x; D++)
          if (L[D] != P[D]) {
            B = L[D] > P[D] ? 1 : -1;
            break;
          }
      return B;
    }
    function b(L, P, x, W) {
      for (var D = 0; x--; )
        L[x] -= D, D = L[x] < P[x] ? 1 : 0, L[x] = D * W + L[x] - P[x];
      for (; !L[0] && L.length > 1; L.splice(0, 1))
        ;
    }
    return function(L, P, x, W, D) {
      var B, z, w, h, f, m, T, O, _, Y, U, ie, se, oe, de, Ce, we, pe = L.s == P.s ? 1 : -1, ee = L.c, ye = P.c;
      if (!ee || !ee[0] || !ye || !ye[0])
        return new y(
          // Return NaN if either NaN, or both Infinity or 0.
          !L.s || !P.s || (ee ? ye && ee[0] == ye[0] : !ye) ? NaN : (
            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
            ee && ee[0] == 0 || !ye ? pe * 0 : pe / 0
          )
        );
      for (O = new y(pe), _ = O.c = [], z = L.e - P.e, pe = x + z + 1, D || (D = si, z = Lr(L.e / Ke) - Lr(P.e / Ke), pe = pe / Ke | 0), w = 0; ye[w] == (ee[w] || 0); w++)
        ;
      if (ye[w] > (ee[w] || 0) && z--, pe < 0)
        _.push(1), h = !0;
      else {
        for (oe = ee.length, Ce = ye.length, w = 0, pe += 2, f = Nr(D / (ye[0] + 1)), f > 1 && (ye = v(ye, f, D), ee = v(ee, f, D), Ce = ye.length, oe = ee.length), se = Ce, Y = ee.slice(0, Ce), U = Y.length; U < Ce; Y[U++] = 0)
          ;
        we = ye.slice(), we = [0].concat(we), de = ye[0], ye[1] >= D / 2 && de++;
        do {
          if (f = 0, B = S(ye, Y, Ce, U), B < 0) {
            if (ie = Y[0], Ce != U && (ie = ie * D + (Y[1] || 0)), f = Nr(ie / de), f > 1)
              for (f >= D && (f = D - 1), m = v(ye, f, D), T = m.length, U = Y.length; S(m, Y, T, U) == 1; )
                f--, b(m, Ce < T ? we : ye, T, D), T = m.length, B = 1;
            else
              f == 0 && (B = f = 1), m = ye.slice(), T = m.length;
            if (T < U && (m = [0].concat(m)), b(Y, m, U, D), U = Y.length, B == -1)
              for (; S(ye, Y, Ce, U) < 1; )
                f++, b(Y, Ce < U ? we : ye, U, D), U = Y.length;
          } else
            B === 0 && (f++, Y = [0]);
          _[w++] = f, Y[0] ? Y[U++] = ee[se] || 0 : (Y = [ee[se]], U = 1);
        } while ((se++ < oe || Y[0] != null) && pe--);
        h = Y[0] != null, _[0] || _.splice(0, 1);
      }
      if (D == si) {
        for (w = 1, pe = _[0]; pe >= 10; pe /= 10, w++)
          ;
        q(O, x + (O.e = w + z * Ke - 1) + 1, W, h);
      } else
        O.e = z, O.r = +h;
      return O;
    };
  }();
  function $(v, S, b, L) {
    var P, x, W, D, B;
    if (b == null ? b = a : zt(b, 0, 8), !v.c)
      return v.toString();
    if (P = v.c[0], W = v.e, S == null)
      B = Dr(v.c), B = L == 1 || L == 2 && (W <= l || W >= u) ? Vd(B, W) : wo(B, W, "0");
    else if (v = q(new y(v), S, b), x = v.e, B = Dr(v.c), D = B.length, L == 1 || L == 2 && (S <= x || x <= l)) {
      for (; D < S; B += "0", D++)
        ;
      B = Vd(B, x);
    } else if (S -= W, B = wo(B, x, "0"), x + 1 > D) {
      if (--S > 0)
        for (B += "."; S--; B += "0")
          ;
    } else if (S += x - D, S > 0)
      for (x + 1 == D && (B += "."); S--; B += "0")
        ;
    return v.s < 0 && P ? "-" + B : B;
  }
  function X(v, S) {
    for (var b, L, P = 1, x = new y(v[0]); P < v.length; P++)
      L = new y(v[P]), (!L.s || (b = ua(x, L)) === S || b === 0 && x.s === S) && (x = L);
    return x;
  }
  function G(v, S, b) {
    for (var L = 1, P = S.length; !S[--P]; S.pop())
      ;
    for (P = S[0]; P >= 10; P /= 10, L++)
      ;
    return (b = L + b * Ke - 1) > d ? v.c = v.e = null : b < c ? v.c = [v.e = 0] : (v.e = b, v.c = S), v;
  }
  r = function() {
    var v = /^(-?)0([xbo])(?=\w[\w.]*$)/i, S = /^([^.]+)\.$/, b = /^\.([^.]+)$/, L = /^-?(Infinity|NaN)$/, P = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
    return function(x, W, D, B) {
      var z, w = D ? W : W.replace(P, "");
      if (L.test(w))
        x.s = isNaN(w) ? null : w < 0 ? -1 : 1;
      else {
        if (!D && (w = w.replace(v, function(h, f, m) {
          return z = (m = m.toLowerCase()) == "x" ? 16 : m == "b" ? 2 : 8, !B || B == z ? f : h;
        }), B && (z = B, w = w.replace(S, "$1").replace(b, "0.$1")), W != w))
          return new y(w, z);
        if (y.DEBUG)
          throw Error(ur + "Not a" + (B ? " base " + B : "") + " number: " + W);
        x.s = null;
      }
      x.c = x.e = null;
    };
  }();
  function q(v, S, b, L) {
    var P, x, W, D, B, z, w, h = v.c, f = nC;
    if (h) {
      e: {
        for (P = 1, D = h[0]; D >= 10; D /= 10, P++)
          ;
        if (x = S - P, x < 0)
          x += Ke, W = S, B = h[z = 0], w = Nr(B / f[P - W - 1] % 10);
        else if (z = eC((x + 1) / Ke), z >= h.length)
          if (L) {
            for (; h.length <= z; h.push(0))
              ;
            B = w = 0, P = 1, x %= Ke, W = x - Ke + 1;
          } else
            break e;
        else {
          for (B = D = h[z], P = 1; D >= 10; D /= 10, P++)
            ;
          x %= Ke, W = x - Ke + P, w = W < 0 ? 0 : Nr(B / f[P - W - 1] % 10);
        }
        if (L = L || S < 0 || // Are there any non-zero digits after the rounding digit?
        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
        h[z + 1] != null || (W < 0 ? B : B % f[P - W - 1]), L = b < 4 ? (w || L) && (b == 0 || b == (v.s < 0 ? 3 : 2)) : w > 5 || w == 5 && (b == 4 || L || b == 6 && // Check whether the digit to the left of the rounding digit is odd.
        (x > 0 ? W > 0 ? B / f[P - W] : 0 : h[z - 1]) % 10 & 1 || b == (v.s < 0 ? 8 : 7)), S < 1 || !h[0])
          return h.length = 0, L ? (S -= v.e + 1, h[0] = f[(Ke - S % Ke) % Ke], v.e = -S || 0) : h[0] = v.e = 0, v;
        if (x == 0 ? (h.length = z, D = 1, z--) : (h.length = z + 1, D = f[Ke - x], h[z] = W > 0 ? Nr(B / f[P - W] % f[W]) * D : 0), L)
          for (; ; )
            if (z == 0) {
              for (x = 1, W = h[0]; W >= 10; W /= 10, x++)
                ;
              for (W = h[0] += D, D = 1; W >= 10; W /= 10, D++)
                ;
              x != D && (v.e++, h[0] == si && (h[0] = 1));
              break;
            } else {
              if (h[z] += D, h[z] != si)
                break;
              h[z--] = 0, D = 1;
            }
        for (x = h.length; h[--x] === 0; h.pop())
          ;
      }
      v.e > d ? v.c = v.e = null : v.e < c && (v.c = [v.e = 0]);
    }
    return v;
  }
  function re(v) {
    var S, b = v.e;
    return b === null ? v.toString() : (S = Dr(v.c), S = b <= l || b >= u ? Vd(S, b) : wo(S, b, "0"), v.s < 0 ? "-" + S : S);
  }
  return i.absoluteValue = i.abs = function() {
    var v = new y(this);
    return v.s < 0 && (v.s = 1), v;
  }, i.comparedTo = function(v, S) {
    return ua(this, new y(v, S));
  }, i.decimalPlaces = i.dp = function(v, S) {
    var b, L, P, x = this;
    if (v != null)
      return zt(v, 0, Rn), S == null ? S = a : zt(S, 0, 8), q(new y(x), v + x.e + 1, S);
    if (!(b = x.c))
      return null;
    if (L = ((P = b.length - 1) - Lr(this.e / Ke)) * Ke, P = b[P])
      for (; P % 10 == 0; P /= 10, L--)
        ;
    return L < 0 && (L = 0), L;
  }, i.dividedBy = i.div = function(v, S) {
    return e(this, new y(v, S), s, a);
  }, i.dividedToIntegerBy = i.idiv = function(v, S) {
    return e(this, new y(v, S), 0, 1);
  }, i.exponentiatedBy = i.pow = function(v, S) {
    var b, L, P, x, W, D, B, z, w, h = this;
    if (v = new y(v), v.c && !v.isInteger())
      throw Error(ur + "Exponent not an integer: " + re(v));
    if (S != null && (S = new y(S)), D = v.e > 14, !h.c || !h.c[0] || h.c[0] == 1 && !h.e && h.c.length == 1 || !v.c || !v.c[0])
      return w = new y(Math.pow(+re(h), D ? v.s * (2 - Wd(v)) : +re(v))), S ? w.mod(S) : w;
    if (B = v.s < 0, S) {
      if (S.c ? !S.c[0] : !S.s)
        return new y(NaN);
      L = !B && h.isInteger() && S.isInteger(), L && (h = h.mod(S));
    } else {
      if (v.e > 9 && (h.e > 0 || h.e < -1 || (h.e == 0 ? h.c[0] > 1 || D && h.c[1] >= 24e7 : h.c[0] < 8e13 || D && h.c[0] <= 9999975e7)))
        return x = h.s < 0 && Wd(v) ? -0 : 0, h.e > -1 && (x = 1 / x), new y(B ? 1 / x : x);
      C && (x = eC(C / Ke + 2));
    }
    for (D ? (b = new y(0.5), B && (v.s = 1), z = Wd(v)) : (P = Math.abs(+re(v)), z = P % 2), w = new y(o); ; ) {
      if (z) {
        if (w = w.times(h), !w.c)
          break;
        x ? w.c.length > x && (w.c.length = x) : L && (w = w.mod(S));
      }
      if (P) {
        if (P = Nr(P / 2), P === 0)
          break;
        z = P % 2;
      } else if (v = v.times(b), q(v, v.e + 1, 1), v.e > 14)
        z = Wd(v);
      else {
        if (P = +re(v), P === 0)
          break;
        z = P % 2;
      }
      h = h.times(h), x ? h.c && h.c.length > x && (h.c.length = x) : L && (h = h.mod(S));
    }
    return L ? w : (B && (w = o.div(w)), S ? w.mod(S) : x ? q(w, C, a, W) : w);
  }, i.integerValue = function(v) {
    var S = new y(this);
    return v == null ? v = a : zt(v, 0, 8), q(S, S.e + 1, v);
  }, i.isEqualTo = i.eq = function(v, S) {
    return ua(this, new y(v, S)) === 0;
  }, i.isFinite = function() {
    return !!this.c;
  }, i.isGreaterThan = i.gt = function(v, S) {
    return ua(this, new y(v, S)) > 0;
  }, i.isGreaterThanOrEqualTo = i.gte = function(v, S) {
    return (S = ua(this, new y(v, S))) === 1 || S === 0;
  }, i.isInteger = function() {
    return !!this.c && Lr(this.e / Ke) > this.c.length - 2;
  }, i.isLessThan = i.lt = function(v, S) {
    return ua(this, new y(v, S)) < 0;
  }, i.isLessThanOrEqualTo = i.lte = function(v, S) {
    return (S = ua(this, new y(v, S))) === -1 || S === 0;
  }, i.isNaN = function() {
    return !this.s;
  }, i.isNegative = function() {
    return this.s < 0;
  }, i.isPositive = function() {
    return this.s > 0;
  }, i.isZero = function() {
    return !!this.c && this.c[0] == 0;
  }, i.minus = function(v, S) {
    var b, L, P, x, W = this, D = W.s;
    if (v = new y(v, S), S = v.s, !D || !S)
      return new y(NaN);
    if (D != S)
      return v.s = -S, W.plus(v);
    var B = W.e / Ke, z = v.e / Ke, w = W.c, h = v.c;
    if (!B || !z) {
      if (!w || !h)
        return w ? (v.s = -S, v) : new y(h ? W : NaN);
      if (!w[0] || !h[0])
        return h[0] ? (v.s = -S, v) : new y(w[0] ? W : (
          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
          a == 3 ? -0 : 0
        ));
    }
    if (B = Lr(B), z = Lr(z), w = w.slice(), D = B - z) {
      for ((x = D < 0) ? (D = -D, P = w) : (z = B, P = h), P.reverse(), S = D; S--; P.push(0))
        ;
      P.reverse();
    } else
      for (L = (x = (D = w.length) < (S = h.length)) ? D : S, D = S = 0; S < L; S++)
        if (w[S] != h[S]) {
          x = w[S] < h[S];
          break;
        }
    if (x && (P = w, w = h, h = P, v.s = -v.s), S = (L = h.length) - (b = w.length), S > 0)
      for (; S--; w[b++] = 0)
        ;
    for (S = si - 1; L > D; ) {
      if (w[--L] < h[L]) {
        for (b = L; b && !w[--b]; w[b] = S)
          ;
        --w[b], w[L] += si;
      }
      w[L] -= h[L];
    }
    for (; w[0] == 0; w.splice(0, 1), --z)
      ;
    return w[0] ? G(v, w, z) : (v.s = a == 3 ? -1 : 1, v.c = [v.e = 0], v);
  }, i.modulo = i.mod = function(v, S) {
    var b, L, P = this;
    return v = new y(v, S), !P.c || !v.s || v.c && !v.c[0] ? new y(NaN) : !v.c || P.c && !P.c[0] ? new y(P) : (p == 9 ? (L = v.s, v.s = 1, b = e(P, v, 0, 3), v.s = L, b.s *= L) : b = e(P, v, 0, p), v = P.minus(b.times(v)), !v.c[0] && p == 1 && (v.s = P.s), v);
  }, i.multipliedBy = i.times = function(v, S) {
    var b, L, P, x, W, D, B, z, w, h, f, m, T, O, _, Y = this, U = Y.c, ie = (v = new y(v, S)).c;
    if (!U || !ie || !U[0] || !ie[0])
      return !Y.s || !v.s || U && !U[0] && !ie || ie && !ie[0] && !U ? v.c = v.e = v.s = null : (v.s *= Y.s, !U || !ie ? v.c = v.e = null : (v.c = [0], v.e = 0)), v;
    for (L = Lr(Y.e / Ke) + Lr(v.e / Ke), v.s *= Y.s, B = U.length, h = ie.length, B < h && (T = U, U = ie, ie = T, P = B, B = h, h = P), P = B + h, T = []; P--; T.push(0))
      ;
    for (O = si, _ = is, P = h; --P >= 0; ) {
      for (b = 0, f = ie[P] % _, m = ie[P] / _ | 0, W = B, x = P + W; x > P; )
        z = U[--W] % _, w = U[W] / _ | 0, D = m * z + w * f, z = f * z + D % _ * _ + T[x] + b, b = (z / O | 0) + (D / _ | 0) + m * w, T[x--] = z % O;
      T[x] = b;
    }
    return b ? ++L : T.splice(0, 1), G(v, T, L);
  }, i.negated = function() {
    var v = new y(this);
    return v.s = -v.s || null, v;
  }, i.plus = function(v, S) {
    var b, L = this, P = L.s;
    if (v = new y(v, S), S = v.s, !P || !S)
      return new y(NaN);
    if (P != S)
      return v.s = -S, L.minus(v);
    var x = L.e / Ke, W = v.e / Ke, D = L.c, B = v.c;
    if (!x || !W) {
      if (!D || !B)
        return new y(P / 0);
      if (!D[0] || !B[0])
        return B[0] ? v : new y(D[0] ? L : P * 0);
    }
    if (x = Lr(x), W = Lr(W), D = D.slice(), P = x - W) {
      for (P > 0 ? (W = x, b = B) : (P = -P, b = D), b.reverse(); P--; b.push(0))
        ;
      b.reverse();
    }
    for (P = D.length, S = B.length, P - S < 0 && (b = B, B = D, D = b, S = P), P = 0; S; )
      P = (D[--S] = D[S] + B[S] + P) / si | 0, D[S] = si === D[S] ? 0 : D[S] % si;
    return P && (D = [P].concat(D), ++W), G(v, D, W);
  }, i.precision = i.sd = function(v, S) {
    var b, L, P, x = this;
    if (v != null && v !== !!v)
      return zt(v, 1, Rn), S == null ? S = a : zt(S, 0, 8), q(new y(x), v, S);
    if (!(b = x.c))
      return null;
    if (P = b.length - 1, L = P * Ke + 1, P = b[P]) {
      for (; P % 10 == 0; P /= 10, L--)
        ;
      for (P = b[0]; P >= 10; P /= 10, L++)
        ;
    }
    return v && x.e + 1 > L && (L = x.e + 1), L;
  }, i.shiftedBy = function(v) {
    return zt(v, -tC, tC), this.times("1e" + v);
  }, i.squareRoot = i.sqrt = function() {
    var v, S, b, L, P, x = this, W = x.c, D = x.s, B = x.e, z = s + 4, w = new y("0.5");
    if (D !== 1 || !W || !W[0])
      return new y(!D || D < 0 && (!W || W[0]) ? NaN : W ? x : 1 / 0);
    if (D = Math.sqrt(+re(x)), D == 0 || D == 1 / 0 ? (S = Dr(W), (S.length + B) % 2 == 0 && (S += "0"), D = Math.sqrt(+S), B = Lr((B + 1) / 2) - (B < 0 || B % 2), D == 1 / 0 ? S = "5e" + B : (S = D.toExponential(), S = S.slice(0, S.indexOf("e") + 1) + B), b = new y(S)) : b = new y(D + ""), b.c[0]) {
      for (B = b.e, D = B + z, D < 3 && (D = 0); ; )
        if (P = b, b = w.times(P.plus(e(x, P, z, 1))), Dr(P.c).slice(0, D) === (S = Dr(b.c)).slice(0, D))
          if (b.e < B && --D, S = S.slice(D - 3, D + 1), S == "9999" || !L && S == "4999") {
            if (!L && (q(P, P.e + s + 2, 0), P.times(P).eq(x))) {
              b = P;
              break;
            }
            z += 4, D += 4, L = 1;
          } else {
            (!+S || !+S.slice(1) && S.charAt(0) == "5") && (q(b, b.e + s + 2, 1), v = !b.times(b).eq(x));
            break;
          }
    }
    return q(b, b.e + s + 1, a, v);
  }, i.toExponential = function(v, S) {
    return v != null && (zt(v, 0, Rn), v++), $(this, v, S, 1);
  }, i.toFixed = function(v, S) {
    return v != null && (zt(v, 0, Rn), v = v + this.e + 1), $(this, v, S);
  }, i.toFormat = function(v, S, b) {
    var L, P = this;
    if (b == null)
      v != null && S && typeof S == "object" ? (b = S, S = null) : v && typeof v == "object" ? (b = v, v = S = null) : b = E;
    else if (typeof b != "object")
      throw Error(ur + "Argument not an object: " + b);
    if (L = P.toFixed(v, S), P.c) {
      var x, W = L.split("."), D = +b.groupSize, B = +b.secondaryGroupSize, z = b.groupSeparator || "", w = W[0], h = W[1], f = P.s < 0, m = f ? w.slice(1) : w, T = m.length;
      if (B && (x = D, D = B, B = x, T -= x), D > 0 && T > 0) {
        for (x = T % D || D, w = m.substr(0, x); x < T; x += D)
          w += z + m.substr(x, D);
        B > 0 && (w += z + m.slice(x)), f && (w = "-" + w);
      }
      L = h ? w + (b.decimalSeparator || "") + ((B = +b.fractionGroupSize) ? h.replace(
        new RegExp("\\d{" + B + "}\\B", "g"),
        "$&" + (b.fractionGroupSeparator || "")
      ) : h) : w;
    }
    return (b.prefix || "") + L + (b.suffix || "");
  }, i.toFraction = function(v) {
    var S, b, L, P, x, W, D, B, z, w, h, f, m = this, T = m.c;
    if (v != null && (D = new y(v), !D.isInteger() && (D.c || D.s !== 1) || D.lt(o)))
      throw Error(ur + "Argument " + (D.isInteger() ? "out of range: " : "not an integer: ") + re(D));
    if (!T)
      return new y(m);
    for (S = new y(o), z = b = new y(o), L = B = new y(o), f = Dr(T), x = S.e = f.length - m.e - 1, S.c[0] = nC[(W = x % Ke) < 0 ? Ke + W : W], v = !v || D.comparedTo(S) > 0 ? x > 0 ? S : z : D, W = d, d = 1 / 0, D = new y(f), B.c[0] = 0; w = e(D, S, 0, 1), P = b.plus(w.times(L)), P.comparedTo(v) != 1; )
      b = L, L = P, z = B.plus(w.times(P = z)), B = P, S = D.minus(w.times(P = S)), D = P;
    return P = e(v.minus(b), L, 0, 1), B = B.plus(P.times(z)), b = b.plus(P.times(L)), B.s = z.s = m.s, x = x * 2, h = e(z, L, x, a).minus(m).abs().comparedTo(
      e(B, b, x, a).minus(m).abs()
    ) < 1 ? [z, L] : [B, b], d = W, h;
  }, i.toNumber = function() {
    return +re(this);
  }, i.toPrecision = function(v, S) {
    return v != null && zt(v, 1, Rn), $(this, v, S, 2);
  }, i.toString = function(v) {
    var S, b = this, L = b.s, P = b.e;
    return P === null ? L ? (S = "Infinity", L < 0 && (S = "-" + S)) : S = "NaN" : (v == null ? S = P <= l || P >= u ? Vd(Dr(b.c), P) : wo(Dr(b.c), P, "0") : v === 10 && M ? (b = q(new y(b), s + P + 1, a), S = wo(Dr(b.c), b.e, "0")) : (zt(v, 2, I.length, "Base"), S = n(wo(Dr(b.c), P, "0"), 10, v, L, !0)), L < 0 && b.c[0] && (S = "-" + S)), S;
  }, i.valueOf = i.toJSON = function() {
    return re(this);
  }, i._isBigNumber = !0, i[Symbol.toStringTag] = "BigNumber", i[Symbol.for("nodejs.util.inspect.custom")] = i.valueOf, t != null && y.set(t), y;
}
function Lr(t) {
  var e = t | 0;
  return t > 0 || t === e ? e : e - 1;
}
function Dr(t) {
  for (var e, n, r = 1, i = t.length, o = t[0] + ""; r < i; ) {
    for (e = t[r++] + "", n = Ke - e.length; n--; e = "0" + e)
      ;
    o += e;
  }
  for (i = o.length; o.charCodeAt(--i) === 48; )
    ;
  return o.slice(0, i + 1 || 1);
}
function ua(t, e) {
  var n, r, i = t.c, o = e.c, s = t.s, a = e.s, l = t.e, u = e.e;
  if (!s || !a)
    return null;
  if (n = i && !i[0], r = o && !o[0], n || r)
    return n ? r ? 0 : -a : s;
  if (s != a)
    return s;
  if (n = s < 0, r = l == u, !i || !o)
    return r ? 0 : !i ^ n ? 1 : -1;
  if (!r)
    return l > u ^ n ? 1 : -1;
  for (a = (l = i.length) < (u = o.length) ? l : u, s = 0; s < a; s++)
    if (i[s] != o[s])
      return i[s] > o[s] ^ n ? 1 : -1;
  return l == u ? 0 : l > u ^ n ? 1 : -1;
}
function zt(t, e, n, r) {
  if (t < e || t > n || t !== Nr(t))
    throw Error(ur + (r || "Argument") + (typeof t == "number" ? t < e || t > n ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(t));
}
function Wd(t) {
  var e = t.c.length - 1;
  return Lr(t.e / Ke) == e && t.c[e] % 2 != 0;
}
function Vd(t, e) {
  return (t.length > 1 ? t.charAt(0) + "." + t.slice(1) : t) + (e < 0 ? "e" : "e+") + e;
}
function wo(t, e, n) {
  var r, i;
  if (e < 0) {
    for (i = n + "."; ++e; i += n)
      ;
    t = i + t;
  } else if (r = t.length, ++e > r) {
    for (i = n, e -= r; --e; i += n)
      ;
    t += i;
  } else
    e < r && (t = t.slice(0, e) + "." + t.slice(e));
  return t;
}
var Bd = mN();
const ale = (t) => {
  const e = vh([]), n = vh(null), r = vh(), [i, o] = Ar(), [s, a] = Ar(), [l, u] = Ar(), c = vh();
  let d = {};
  const [g, p] = Ar([]), [C, E] = Ar(), [I, M] = Ar(!1), [y, $] = Ar(0), [X, G] = Ar(0), [q, re] = Ar(0), [v, S] = Ar(0), [b, L] = Ar(0), [P, x] = Ar(0);
  wN(() => {
    z();
  }, [t.data]);
  const W = (T, O, _, Y, U) => {
    u({
      row: T,
      col: O,
      hot: Y,
      originalValue: _
    }), c.current = U;
  }, D = (T, O) => {
    let _ = T;
    T != null && (_ = CN(T, O)), o(_);
  }, B = (T) => {
    const O = {};
    for (let _ in T)
      parseInt(_).toString() == "NaN" && T.hasOwnProperty(_) && T[_] != "" && (O[_.replace(/-([a-z])/gi, (Y) => Y[1].toUpperCase())] = T[_]);
    a(O);
  }, z = () => {
    e.current = [];
    let T = [...t.columns];
    if (t.selected) {
      let _ = {
        title: "",
        width: 60,
        className: "center",
        editor: !1,
        copyable: !1,
        rendereCell: (Y, U) => /* @__PURE__ */ au(cR, { disabled: U.readOnly, defaultChecked: Y, onChange: (ie) => m(ie, U) })
      };
      t.isData && (_ = { ..._, data: "selected" }), T.unshift(_);
    }
    const O = { wordWrap: !1 };
    T.forEach((_) => {
      let Y = { ...O, ..._ };
      _.editorReactNode && (Y.editor = Wae, Y.renderNode = D, Y.renderStyle = B, Y.afterRenderEdit = W), _.rendereCell && (Y.renderer = (U, ie, se, oe, de, Ce, we) => {
        let pe = ie.firstChild, ee = document.createElement("div");
        return ee.setAttribute("last-data", Ce), pe ? pe.getAttribute("last-data") != Ce.toString() && (d[`index-${se}${oe}`] = {
          td: ee,
          node: _.rendereCell(Ce, we)
        }, ie.replaceChild(ee, pe)) : (d[`index-${se}${oe}`] = {
          td: ee,
          node: _.rendereCell(Ce, we)
        }, ie.appendChild(ee)), we.className && ie.classList.add(we.className), ie;
      }), _.required && (_.className = _.className ? `${_.className} is-required` : "is-required"), e.current.push(Y);
    }), !(!t.data || t.data.length == 0) && (t.selected && t.data.forEach((_) => {
      t.isData ? _.selected = !1 : _.unshift(!1);
    }), r.current = new Be(n.current, {
      data: !t.data || t.data.length == 0 ? [{ year: 1, momth: 1, day: 1, second: 1 }] : t.data,
      columns: e.current,
      rowHeaders: !0,
      rowHeights: 40,
      licenseKey: "non-commercial-and-evaluation",
      // for non-commercial use only
      afterRender: (_) => {
        let Y = [];
        Object.keys(d).map((U) => {
          Y.push(d[U]);
        }), setTimeout(() => {
          p(Y);
        }, 0);
      },
      afterGetColHeader: (_, Y, U) => {
        if (_ == 0) {
          let ie = document.createElement("div");
          Y.firstChild.firstChild.innerHTML = "", Y.firstChild.firstChild.appendChild(ie), E(ie);
        }
      },
      afterSelection: (_, Y, U, ie, se, oe) => {
        let de = r.current.getSelected();
        if ((de == null ? void 0 : de.length) > 0) {
          $(de[0][2] - de[0][0] + 1), G(de[0][3] - de[0][1] + 1);
          let Ce = r.current.getSourceDataArray(de[0][0], de[0][1], de[0][2], de[0][3]), we = [], pe = 0;
          for (let ee = 0; ee < Ce.length; ee++) {
            let ye = Ce[ee];
            we = [...we, ...ye];
            for (let $e = 0; $e < ye.length; $e++)
              pe = new Bd(pe).plus(ye[$e]).toNumber();
          }
          re(pe), S(new Bd(pe).div(we.length).toNumber()), x(Bd.min(...we).toNumber()), L(Bd.max(...we).toNumber());
        }
      }
    }));
  }, w = (T, O = !0) => {
    var _;
    c.current && (c.current.isClose = O), l && ((_ = l == null ? void 0 : l.hot) == null || _.setDataAtCell(l.row, l.col, T), c.current.isClose = !0);
  }, h = () => l ? l.originalValue : null, f = (T) => {
    var O;
    M(T.target.checked);
    for (let _ = 0; _ < t.data.length; _++)
      (O = r.current) == null || O.setDataAtCell([[_, 0, T.target.checked]]);
  }, m = (T, O) => {
    var U, ie;
    T.target.checked || M(T.target.checked), (U = r.current) == null || U.setDataAtCell([[O.row, O.col, T.target.checked]]);
    let _ = (ie = r.current) == null ? void 0 : ie.getData(), Y = !0;
    _ == null || _.forEach((se) => {
      se[0] || (Y = !1);
    }), M(Y);
  };
  return /* @__PURE__ */ pm(Vae.Provider, { value: {
    handsontableInfo: l,
    setValue: w,
    getValue: h
  }, children: [
    /* @__PURE__ */ pm("div", { className: "react-handsontable", children: [
      /* @__PURE__ */ au("div", { className: "main", children: /* @__PURE__ */ au("div", { ref: n, children: /* @__PURE__ */ au("div", { className: "react-node", style: s, children: i && i }) }) }),
      /* @__PURE__ */ pm("div", { className: "foot-tool", children: [
        "选中[行数:",
        y,
        " 列数:",
        X,
        " 求和:",
        q,
        " 平均:",
        v,
        " 最大:",
        b,
        " 最小:",
        P,
        "]"
      ] })
    ] }),
    g.map((T) => uR(T.node, T.td)),
    C && uR(/* @__PURE__ */ au(cR, { defaultChecked: I, onChange: f }), C)
  ] });
};
export {
  ale as ReactHandsontable,
  Vae as ReactHandsontableContext,
  jae as tuple
};
